function _mergeNamespaces(n, m) {
	m.forEach(function (e) {
		e && typeof e !== 'string' && !Array.isArray(e) && Object.keys(e).forEach(function (k) {
			if (k !== 'default' && !(k in n)) {
				var d = Object.getOwnPropertyDescriptor(e, k);
				Object.defineProperty(n, k, d.get ? d : {
					enumerable: true,
					get: function () { return e[k]; }
				});
			}
		});
	});
	return Object.freeze(n);
}

var commonjsGlobal$1 = "undefined" != typeof globalThis ? globalThis : "undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self ? self : {};
function getDefaultExportFromCjs$1(x) {
  return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, "default") ? x.default : x;
}

var deepEqual$1 = getDefaultExportFromCjs$1(function equal(a, b) {
  if (a === b)
    return true;
  if (a && b && "object" == typeof a && "object" == typeof b) {
    if (a.constructor !== b.constructor)
      return false;
    var length, i, keys;
    if (Array.isArray(a)) {
      if ((length = a.length) != b.length)
        return false;
      for (i = length; 0 != i--; )
        if (!equal(a[i], b[i]))
          return false;
      return true;
    }
    if (a.constructor === RegExp)
      return a.source === b.source && a.flags === b.flags;
    if (a.valueOf !== Object.prototype.valueOf)
      return a.valueOf() === b.valueOf();
    if (a.toString !== Object.prototype.toString)
      return a.toString() === b.toString();
    if ((length = (keys = Object.keys(a)).length) !== Object.keys(b).length)
      return false;
    for (i = length; 0 != i--; )
      if (!Object.prototype.hasOwnProperty.call(b, keys[i]))
        return false;
    for (i = length; 0 != i--; ) {
      var key = keys[i];
      if (!equal(a[key], b[key]))
        return false;
    }
    return true;
  }
  return a != a && b != b;
});

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function getDefaultExportFromCjs (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

function getDefaultExportFromNamespaceIfPresent (n) {
	return n && Object.prototype.hasOwnProperty.call(n, 'default') ? n['default'] : n;
}

function getDefaultExportFromNamespaceIfNotNamed (n) {
	return n && Object.prototype.hasOwnProperty.call(n, 'default') && Object.keys(n).length === 1 ? n['default'] : n;
}

function getAugmentedNamespace(n) {
  if (n.__esModule) return n;
  var f = n.default;
	if (typeof f == "function") {
		var a = function a () {
			if (this instanceof a) {
        return Reflect.construct(f, arguments, this.constructor);
			}
			return f.apply(this, arguments);
		};
		a.prototype = f.prototype;
  } else a = {};
  Object.defineProperty(a, '__esModule', {value: true});
	Object.keys(n).forEach(function (k) {
		var d = Object.getOwnPropertyDescriptor(n, k);
		Object.defineProperty(a, k, d.get ? d : {
			enumerable: true,
			get: function () {
				return n[k];
			}
		});
	});
	return a;
}

var react$1 = {exports: {}};

var react_development$2 = {exports: {}};

var react_development = react_development$2.exports;

(function (module, exports) {
	"use strict";
	/**
	 * @license React
	 * react.development.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */
	if (true) {
	  (function() {
	    "use strict";
	    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
	      __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
	    }
	    var ReactVersion = "18.2.0";
	    var REACT_ELEMENT_TYPE = Symbol.for("react.element");
	    var REACT_PORTAL_TYPE = Symbol.for("react.portal");
	    var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
	    var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
	    var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
	    var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
	    var REACT_CONTEXT_TYPE = Symbol.for("react.context");
	    var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
	    var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
	    var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
	    var REACT_MEMO_TYPE = Symbol.for("react.memo");
	    var REACT_LAZY_TYPE = Symbol.for("react.lazy");
	    var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
	    var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
	    var FAUX_ITERATOR_SYMBOL = "@@iterator";
	    function getIteratorFn(maybeIterable) {
	      if (maybeIterable === null || typeof maybeIterable !== "object") {
	        return null;
	      }
	      var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
	      if (typeof maybeIterator === "function") {
	        return maybeIterator;
	      }
	      return null;
	    }
	    var ReactCurrentDispatcher = {
	      /**
	       * @internal
	       * @type {ReactComponent}
	       */
	      current: null
	    };
	    var ReactCurrentBatchConfig = {
	      transition: null
	    };
	    var ReactCurrentActQueue = {
	      current: null,
	      // Used to reproduce behavior of `batchedUpdates` in legacy mode.
	      isBatchingLegacy: false,
	      didScheduleLegacyUpdate: false
	    };
	    var ReactCurrentOwner = {
	      /**
	       * @internal
	       * @type {ReactComponent}
	       */
	      current: null
	    };
	    var ReactDebugCurrentFrame = {};
	    var currentExtraStackFrame = null;
	    function setExtraStackFrame(stack) {
	      {
	        currentExtraStackFrame = stack;
	      }
	    }
	    {
	      ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
	        {
	          currentExtraStackFrame = stack;
	        }
	      };
	      ReactDebugCurrentFrame.getCurrentStack = null;
	      ReactDebugCurrentFrame.getStackAddendum = function() {
	        var stack = "";
	        if (currentExtraStackFrame) {
	          stack += currentExtraStackFrame;
	        }
	        var impl = ReactDebugCurrentFrame.getCurrentStack;
	        if (impl) {
	          stack += impl() || "";
	        }
	        return stack;
	      };
	    }
	    var enableScopeAPI = false;
	    var enableCacheElement = false;
	    var enableTransitionTracing = false;
	    var enableLegacyHidden = false;
	    var enableDebugTracing = false;
	    var ReactSharedInternals = {
	      ReactCurrentDispatcher,
	      ReactCurrentBatchConfig,
	      ReactCurrentOwner
	    };
	    {
	      ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
	      ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
	    }
	    function warn(format) {
	      {
	        {
	          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	            args[_key - 1] = arguments[_key];
	          }
	          printWarning("warn", format, args);
	        }
	      }
	    }
	    function error(format) {
	      {
	        {
	          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
	            args[_key2 - 1] = arguments[_key2];
	          }
	          printWarning("error", format, args);
	        }
	      }
	    }
	    function printWarning(level, format, args) {
	      {
	        var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
	        var stack = ReactDebugCurrentFrame2.getStackAddendum();
	        if (stack !== "") {
	          format += "%s";
	          args = args.concat([stack]);
	        }
	        var argsWithFormat = args.map(function(item) {
	          return String(item);
	        });
	        argsWithFormat.unshift("Warning: " + format);
	        Function.prototype.apply.call(console[level], console, argsWithFormat);
	      }
	    }
	    var didWarnStateUpdateForUnmountedComponent = {};
	    function warnNoop(publicInstance, callerName) {
	      {
	        var _constructor = publicInstance.constructor;
	        var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
	        var warningKey = componentName + "." + callerName;
	        if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
	          return;
	        }
	        error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
	        didWarnStateUpdateForUnmountedComponent[warningKey] = true;
	      }
	    }
	    var ReactNoopUpdateQueue = {
	      /**
	       * Checks whether or not this composite component is mounted.
	       * @param {ReactClass} publicInstance The instance we want to test.
	       * @return {boolean} True if mounted, false otherwise.
	       * @protected
	       * @final
	       */
	      isMounted: function(publicInstance) {
	        return false;
	      },
	      /**
	       * Forces an update. This should only be invoked when it is known with
	       * certainty that we are **not** in a DOM transaction.
	       *
	       * You may want to call this when you know that some deeper aspect of the
	       * component's state has changed but `setState` was not called.
	       *
	       * This will not invoke `shouldComponentUpdate`, but it will invoke
	       * `componentWillUpdate` and `componentDidUpdate`.
	       *
	       * @param {ReactClass} publicInstance The instance that should rerender.
	       * @param {?function} callback Called after component is updated.
	       * @param {?string} callerName name of the calling function in the public API.
	       * @internal
	       */
	      enqueueForceUpdate: function(publicInstance, callback, callerName) {
	        warnNoop(publicInstance, "forceUpdate");
	      },
	      /**
	       * Replaces all of the state. Always use this or `setState` to mutate state.
	       * You should treat `this.state` as immutable.
	       *
	       * There is no guarantee that `this.state` will be immediately updated, so
	       * accessing `this.state` after calling this method may return the old value.
	       *
	       * @param {ReactClass} publicInstance The instance that should rerender.
	       * @param {object} completeState Next state.
	       * @param {?function} callback Called after component is updated.
	       * @param {?string} callerName name of the calling function in the public API.
	       * @internal
	       */
	      enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
	        warnNoop(publicInstance, "replaceState");
	      },
	      /**
	       * Sets a subset of the state. This only exists because _pendingState is
	       * internal. This provides a merging strategy that is not available to deep
	       * properties which is confusing. TODO: Expose pendingState or don't use it
	       * during the merge.
	       *
	       * @param {ReactClass} publicInstance The instance that should rerender.
	       * @param {object} partialState Next partial state to be merged with state.
	       * @param {?function} callback Called after component is updated.
	       * @param {?string} Name of the calling function in the public API.
	       * @internal
	       */
	      enqueueSetState: function(publicInstance, partialState, callback, callerName) {
	        warnNoop(publicInstance, "setState");
	      }
	    };
	    var assign = Object.assign;
	    var emptyObject = {};
	    {
	      Object.freeze(emptyObject);
	    }
	    function Component(props, context, updater) {
	      this.props = props;
	      this.context = context;
	      this.refs = emptyObject;
	      this.updater = updater || ReactNoopUpdateQueue;
	    }
	    Component.prototype.isReactComponent = {};
	    Component.prototype.setState = function(partialState, callback) {
	      if (typeof partialState !== "object" && typeof partialState !== "function" && partialState != null) {
	        throw new Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
	      }
	      this.updater.enqueueSetState(this, partialState, callback, "setState");
	    };
	    Component.prototype.forceUpdate = function(callback) {
	      this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
	    };
	    {
	      var deprecatedAPIs = {
	        isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
	        replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
	      };
	      var defineDeprecationWarning = function(methodName, info) {
	        Object.defineProperty(Component.prototype, methodName, {
	          get: function() {
	            warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
	            return void 0;
	          }
	        });
	      };
	      for (var fnName in deprecatedAPIs) {
	        if (deprecatedAPIs.hasOwnProperty(fnName)) {
	          defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
	        }
	      }
	    }
	    function ComponentDummy() {
	    }
	    ComponentDummy.prototype = Component.prototype;
	    function PureComponent(props, context, updater) {
	      this.props = props;
	      this.context = context;
	      this.refs = emptyObject;
	      this.updater = updater || ReactNoopUpdateQueue;
	    }
	    var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
	    pureComponentPrototype.constructor = PureComponent;
	    assign(pureComponentPrototype, Component.prototype);
	    pureComponentPrototype.isPureReactComponent = true;
	    function createRef() {
	      var refObject = {
	        current: null
	      };
	      {
	        Object.seal(refObject);
	      }
	      return refObject;
	    }
	    var isArrayImpl = Array.isArray;
	    function isArray(a) {
	      return isArrayImpl(a);
	    }
	    function typeName(value) {
	      {
	        var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
	        var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
	        return type;
	      }
	    }
	    function willCoercionThrow(value) {
	      {
	        try {
	          testStringCoercion(value);
	          return false;
	        } catch (e) {
	          return true;
	        }
	      }
	    }
	    function testStringCoercion(value) {
	      return "" + value;
	    }
	    function checkKeyStringCoercion(value) {
	      {
	        if (willCoercionThrow(value)) {
	          error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
	          return testStringCoercion(value);
	        }
	      }
	    }
	    function getWrappedName(outerType, innerType, wrapperName) {
	      var displayName = outerType.displayName;
	      if (displayName) {
	        return displayName;
	      }
	      var functionName = innerType.displayName || innerType.name || "";
	      return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
	    }
	    function getContextName(type) {
	      return type.displayName || "Context";
	    }
	    function getComponentNameFromType(type) {
	      if (type == null) {
	        return null;
	      }
	      {
	        if (typeof type.tag === "number") {
	          error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
	        }
	      }
	      if (typeof type === "function") {
	        return type.displayName || type.name || null;
	      }
	      if (typeof type === "string") {
	        return type;
	      }
	      switch (type) {
	        case REACT_FRAGMENT_TYPE:
	          return "Fragment";
	        case REACT_PORTAL_TYPE:
	          return "Portal";
	        case REACT_PROFILER_TYPE:
	          return "Profiler";
	        case REACT_STRICT_MODE_TYPE:
	          return "StrictMode";
	        case REACT_SUSPENSE_TYPE:
	          return "Suspense";
	        case REACT_SUSPENSE_LIST_TYPE:
	          return "SuspenseList";
	      }
	      if (typeof type === "object") {
	        switch (type.$$typeof) {
	          case REACT_CONTEXT_TYPE:
	            var context = type;
	            return getContextName(context) + ".Consumer";
	          case REACT_PROVIDER_TYPE:
	            var provider = type;
	            return getContextName(provider._context) + ".Provider";
	          case REACT_FORWARD_REF_TYPE:
	            return getWrappedName(type, type.render, "ForwardRef");
	          case REACT_MEMO_TYPE:
	            var outerName = type.displayName || null;
	            if (outerName !== null) {
	              return outerName;
	            }
	            return getComponentNameFromType(type.type) || "Memo";
	          case REACT_LAZY_TYPE: {
	            var lazyComponent = type;
	            var payload = lazyComponent._payload;
	            var init = lazyComponent._init;
	            try {
	              return getComponentNameFromType(init(payload));
	            } catch (x) {
	              return null;
	            }
	          }
	        }
	      }
	      return null;
	    }
	    var hasOwnProperty = Object.prototype.hasOwnProperty;
	    var RESERVED_PROPS = {
	      key: true,
	      ref: true,
	      __self: true,
	      __source: true
	    };
	    var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
	    {
	      didWarnAboutStringRefs = {};
	    }
	    function hasValidRef(config) {
	      {
	        if (hasOwnProperty.call(config, "ref")) {
	          var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
	          if (getter && getter.isReactWarning) {
	            return false;
	          }
	        }
	      }
	      return config.ref !== void 0;
	    }
	    function hasValidKey(config) {
	      {
	        if (hasOwnProperty.call(config, "key")) {
	          var getter = Object.getOwnPropertyDescriptor(config, "key").get;
	          if (getter && getter.isReactWarning) {
	            return false;
	          }
	        }
	      }
	      return config.key !== void 0;
	    }
	    function defineKeyPropWarningGetter(props, displayName) {
	      var warnAboutAccessingKey = function() {
	        {
	          if (!specialPropKeyWarningShown) {
	            specialPropKeyWarningShown = true;
	            error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
	          }
	        }
	      };
	      warnAboutAccessingKey.isReactWarning = true;
	      Object.defineProperty(props, "key", {
	        get: warnAboutAccessingKey,
	        configurable: true
	      });
	    }
	    function defineRefPropWarningGetter(props, displayName) {
	      var warnAboutAccessingRef = function() {
	        {
	          if (!specialPropRefWarningShown) {
	            specialPropRefWarningShown = true;
	            error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
	          }
	        }
	      };
	      warnAboutAccessingRef.isReactWarning = true;
	      Object.defineProperty(props, "ref", {
	        get: warnAboutAccessingRef,
	        configurable: true
	      });
	    }
	    function warnIfStringRefCannotBeAutoConverted(config) {
	      {
	        if (typeof config.ref === "string" && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
	          var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
	          if (!didWarnAboutStringRefs[componentName]) {
	            error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);
	            didWarnAboutStringRefs[componentName] = true;
	          }
	        }
	      }
	    }
	    var ReactElement = function(type, key, ref, self, source, owner, props) {
	      var element = {
	        // This tag allows us to uniquely identify this as a React Element
	        $$typeof: REACT_ELEMENT_TYPE,
	        // Built-in properties that belong on the element
	        type,
	        key,
	        ref,
	        props,
	        // Record the component responsible for creating this element.
	        _owner: owner
	      };
	      {
	        element._store = {};
	        Object.defineProperty(element._store, "validated", {
	          configurable: false,
	          enumerable: false,
	          writable: true,
	          value: false
	        });
	        Object.defineProperty(element, "_self", {
	          configurable: false,
	          enumerable: false,
	          writable: false,
	          value: self
	        });
	        Object.defineProperty(element, "_source", {
	          configurable: false,
	          enumerable: false,
	          writable: false,
	          value: source
	        });
	        if (Object.freeze) {
	          Object.freeze(element.props);
	          Object.freeze(element);
	        }
	      }
	      return element;
	    };
	    function createElement(type, config, children) {
	      var propName;
	      var props = {};
	      var key = null;
	      var ref = null;
	      var self = null;
	      var source = null;
	      if (config != null) {
	        if (hasValidRef(config)) {
	          ref = config.ref;
	          {
	            warnIfStringRefCannotBeAutoConverted(config);
	          }
	        }
	        if (hasValidKey(config)) {
	          {
	            checkKeyStringCoercion(config.key);
	          }
	          key = "" + config.key;
	        }
	        self = config.__self === void 0 ? null : config.__self;
	        source = config.__source === void 0 ? null : config.__source;
	        for (propName in config) {
	          if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	            props[propName] = config[propName];
	          }
	        }
	      }
	      var childrenLength = arguments.length - 2;
	      if (childrenLength === 1) {
	        props.children = children;
	      } else if (childrenLength > 1) {
	        var childArray = Array(childrenLength);
	        for (var i = 0; i < childrenLength; i++) {
	          childArray[i] = arguments[i + 2];
	        }
	        {
	          if (Object.freeze) {
	            Object.freeze(childArray);
	          }
	        }
	        props.children = childArray;
	      }
	      if (type && type.defaultProps) {
	        var defaultProps = type.defaultProps;
	        for (propName in defaultProps) {
	          if (props[propName] === void 0) {
	            props[propName] = defaultProps[propName];
	          }
	        }
	      }
	      {
	        if (key || ref) {
	          var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
	          if (key) {
	            defineKeyPropWarningGetter(props, displayName);
	          }
	          if (ref) {
	            defineRefPropWarningGetter(props, displayName);
	          }
	        }
	      }
	      return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
	    }
	    function cloneAndReplaceKey(oldElement, newKey) {
	      var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
	      return newElement;
	    }
	    function cloneElement(element, config, children) {
	      if (element === null || element === void 0) {
	        throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
	      }
	      var propName;
	      var props = assign({}, element.props);
	      var key = element.key;
	      var ref = element.ref;
	      var self = element._self;
	      var source = element._source;
	      var owner = element._owner;
	      if (config != null) {
	        if (hasValidRef(config)) {
	          ref = config.ref;
	          owner = ReactCurrentOwner.current;
	        }
	        if (hasValidKey(config)) {
	          {
	            checkKeyStringCoercion(config.key);
	          }
	          key = "" + config.key;
	        }
	        var defaultProps;
	        if (element.type && element.type.defaultProps) {
	          defaultProps = element.type.defaultProps;
	        }
	        for (propName in config) {
	          if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	            if (config[propName] === void 0 && defaultProps !== void 0) {
	              props[propName] = defaultProps[propName];
	            } else {
	              props[propName] = config[propName];
	            }
	          }
	        }
	      }
	      var childrenLength = arguments.length - 2;
	      if (childrenLength === 1) {
	        props.children = children;
	      } else if (childrenLength > 1) {
	        var childArray = Array(childrenLength);
	        for (var i = 0; i < childrenLength; i++) {
	          childArray[i] = arguments[i + 2];
	        }
	        props.children = childArray;
	      }
	      return ReactElement(element.type, key, ref, self, source, owner, props);
	    }
	    function isValidElement(object) {
	      return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	    }
	    var SEPARATOR = ".";
	    var SUBSEPARATOR = ":";
	    function escape(key) {
	      var escapeRegex = /[=:]/g;
	      var escaperLookup = {
	        "=": "=0",
	        ":": "=2"
	      };
	      var escapedString = key.replace(escapeRegex, function(match) {
	        return escaperLookup[match];
	      });
	      return "$" + escapedString;
	    }
	    var didWarnAboutMaps = false;
	    var userProvidedKeyEscapeRegex = /\/+/g;
	    function escapeUserProvidedKey(text) {
	      return text.replace(userProvidedKeyEscapeRegex, "$&/");
	    }
	    function getElementKey(element, index) {
	      if (typeof element === "object" && element !== null && element.key != null) {
	        {
	          checkKeyStringCoercion(element.key);
	        }
	        return escape("" + element.key);
	      }
	      return index.toString(36);
	    }
	    function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
	      var type = typeof children;
	      if (type === "undefined" || type === "boolean") {
	        children = null;
	      }
	      var invokeCallback = false;
	      if (children === null) {
	        invokeCallback = true;
	      } else {
	        switch (type) {
	          case "string":
	          case "number":
	            invokeCallback = true;
	            break;
	          case "object":
	            switch (children.$$typeof) {
	              case REACT_ELEMENT_TYPE:
	              case REACT_PORTAL_TYPE:
	                invokeCallback = true;
	            }
	        }
	      }
	      if (invokeCallback) {
	        var _child = children;
	        var mappedChild = callback(_child);
	        var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
	        if (isArray(mappedChild)) {
	          var escapedChildKey = "";
	          if (childKey != null) {
	            escapedChildKey = escapeUserProvidedKey(childKey) + "/";
	          }
	          mapIntoArray(mappedChild, array, escapedChildKey, "", function(c) {
	            return c;
	          });
	        } else if (mappedChild != null) {
	          if (isValidElement(mappedChild)) {
	            {
	              if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {
	                checkKeyStringCoercion(mappedChild.key);
	              }
	            }
	            mappedChild = cloneAndReplaceKey(
	              mappedChild,
	              // Keep both the (mapped) and old keys if they differ, just as
	              // traverseAllChildren used to do for objects as children
	              escapedPrefix + // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
	              (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? (
	                // $FlowFixMe Flow incorrectly thinks existing element's key can be a number
	                // eslint-disable-next-line react-internal/safe-string-coercion
	                escapeUserProvidedKey("" + mappedChild.key) + "/"
	              ) : "") + childKey
	            );
	          }
	          array.push(mappedChild);
	        }
	        return 1;
	      }
	      var child;
	      var nextName;
	      var subtreeCount = 0;
	      var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
	      if (isArray(children)) {
	        for (var i = 0; i < children.length; i++) {
	          child = children[i];
	          nextName = nextNamePrefix + getElementKey(child, i);
	          subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
	        }
	      } else {
	        var iteratorFn = getIteratorFn(children);
	        if (typeof iteratorFn === "function") {
	          var iterableChildren = children;
	          {
	            if (iteratorFn === iterableChildren.entries) {
	              if (!didWarnAboutMaps) {
	                warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
	              }
	              didWarnAboutMaps = true;
	            }
	          }
	          var iterator = iteratorFn.call(iterableChildren);
	          var step;
	          var ii = 0;
	          while (!(step = iterator.next()).done) {
	            child = step.value;
	            nextName = nextNamePrefix + getElementKey(child, ii++);
	            subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
	          }
	        } else if (type === "object") {
	          var childrenString = String(children);
	          throw new Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
	        }
	      }
	      return subtreeCount;
	    }
	    function mapChildren(children, func, context) {
	      if (children == null) {
	        return children;
	      }
	      var result = [];
	      var count = 0;
	      mapIntoArray(children, result, "", "", function(child) {
	        return func.call(context, child, count++);
	      });
	      return result;
	    }
	    function countChildren(children) {
	      var n = 0;
	      mapChildren(children, function() {
	        n++;
	      });
	      return n;
	    }
	    function forEachChildren(children, forEachFunc, forEachContext) {
	      mapChildren(children, function() {
	        forEachFunc.apply(this, arguments);
	      }, forEachContext);
	    }
	    function toArray(children) {
	      return mapChildren(children, function(child) {
	        return child;
	      }) || [];
	    }
	    function onlyChild(children) {
	      if (!isValidElement(children)) {
	        throw new Error("React.Children.only expected to receive a single React element child.");
	      }
	      return children;
	    }
	    function createContext(defaultValue) {
	      var context = {
	        $$typeof: REACT_CONTEXT_TYPE,
	        // As a workaround to support multiple concurrent renderers, we categorize
	        // some renderers as primary and others as secondary. We only expect
	        // there to be two concurrent renderers at most: React Native (primary) and
	        // Fabric (secondary); React DOM (primary) and React ART (secondary).
	        // Secondary renderers store their context values on separate fields.
	        _currentValue: defaultValue,
	        _currentValue2: defaultValue,
	        // Used to track how many concurrent renderers this context currently
	        // supports within in a single renderer. Such as parallel server rendering.
	        _threadCount: 0,
	        // These are circular
	        Provider: null,
	        Consumer: null,
	        // Add these to use same hidden class in VM as ServerContext
	        _defaultValue: null,
	        _globalName: null
	      };
	      context.Provider = {
	        $$typeof: REACT_PROVIDER_TYPE,
	        _context: context
	      };
	      var hasWarnedAboutUsingNestedContextConsumers = false;
	      var hasWarnedAboutUsingConsumerProvider = false;
	      var hasWarnedAboutDisplayNameOnConsumer = false;
	      {
	        var Consumer = {
	          $$typeof: REACT_CONTEXT_TYPE,
	          _context: context
	        };
	        Object.defineProperties(Consumer, {
	          Provider: {
	            get: function() {
	              if (!hasWarnedAboutUsingConsumerProvider) {
	                hasWarnedAboutUsingConsumerProvider = true;
	                error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
	              }
	              return context.Provider;
	            },
	            set: function(_Provider) {
	              context.Provider = _Provider;
	            }
	          },
	          _currentValue: {
	            get: function() {
	              return context._currentValue;
	            },
	            set: function(_currentValue) {
	              context._currentValue = _currentValue;
	            }
	          },
	          _currentValue2: {
	            get: function() {
	              return context._currentValue2;
	            },
	            set: function(_currentValue2) {
	              context._currentValue2 = _currentValue2;
	            }
	          },
	          _threadCount: {
	            get: function() {
	              return context._threadCount;
	            },
	            set: function(_threadCount) {
	              context._threadCount = _threadCount;
	            }
	          },
	          Consumer: {
	            get: function() {
	              if (!hasWarnedAboutUsingNestedContextConsumers) {
	                hasWarnedAboutUsingNestedContextConsumers = true;
	                error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
	              }
	              return context.Consumer;
	            }
	          },
	          displayName: {
	            get: function() {
	              return context.displayName;
	            },
	            set: function(displayName) {
	              if (!hasWarnedAboutDisplayNameOnConsumer) {
	                warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
	                hasWarnedAboutDisplayNameOnConsumer = true;
	              }
	            }
	          }
	        });
	        context.Consumer = Consumer;
	      }
	      {
	        context._currentRenderer = null;
	        context._currentRenderer2 = null;
	      }
	      return context;
	    }
	    var Uninitialized = -1;
	    var Pending = 0;
	    var Resolved = 1;
	    var Rejected = 2;
	    function lazyInitializer(payload) {
	      if (payload._status === Uninitialized) {
	        var ctor = payload._result;
	        var thenable = ctor();
	        thenable.then(function(moduleObject2) {
	          if (payload._status === Pending || payload._status === Uninitialized) {
	            var resolved = payload;
	            resolved._status = Resolved;
	            resolved._result = moduleObject2;
	          }
	        }, function(error2) {
	          if (payload._status === Pending || payload._status === Uninitialized) {
	            var rejected = payload;
	            rejected._status = Rejected;
	            rejected._result = error2;
	          }
	        });
	        if (payload._status === Uninitialized) {
	          var pending = payload;
	          pending._status = Pending;
	          pending._result = thenable;
	        }
	      }
	      if (payload._status === Resolved) {
	        var moduleObject = payload._result;
	        {
	          if (moduleObject === void 0) {
	            error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?", moduleObject);
	          }
	        }
	        {
	          if (!("default" in moduleObject)) {
	            error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
	          }
	        }
	        return moduleObject.default;
	      } else {
	        throw payload._result;
	      }
	    }
	    function lazy(ctor) {
	      var payload = {
	        // We use these fields to store the result.
	        _status: Uninitialized,
	        _result: ctor
	      };
	      var lazyType = {
	        $$typeof: REACT_LAZY_TYPE,
	        _payload: payload,
	        _init: lazyInitializer
	      };
	      {
	        var defaultProps;
	        var propTypes;
	        Object.defineProperties(lazyType, {
	          defaultProps: {
	            configurable: true,
	            get: function() {
	              return defaultProps;
	            },
	            set: function(newDefaultProps) {
	              error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
	              defaultProps = newDefaultProps;
	              Object.defineProperty(lazyType, "defaultProps", {
	                enumerable: true
	              });
	            }
	          },
	          propTypes: {
	            configurable: true,
	            get: function() {
	              return propTypes;
	            },
	            set: function(newPropTypes) {
	              error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
	              propTypes = newPropTypes;
	              Object.defineProperty(lazyType, "propTypes", {
	                enumerable: true
	              });
	            }
	          }
	        });
	      }
	      return lazyType;
	    }
	    function forwardRef(render) {
	      {
	        if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
	          error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
	        } else if (typeof render !== "function") {
	          error("forwardRef requires a render function but was given %s.", render === null ? "null" : typeof render);
	        } else {
	          if (render.length !== 0 && render.length !== 2) {
	            error("forwardRef render functions accept exactly two parameters: props and ref. %s", render.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
	          }
	        }
	        if (render != null) {
	          if (render.defaultProps != null || render.propTypes != null) {
	            error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
	          }
	        }
	      }
	      var elementType = {
	        $$typeof: REACT_FORWARD_REF_TYPE,
	        render
	      };
	      {
	        var ownName;
	        Object.defineProperty(elementType, "displayName", {
	          enumerable: false,
	          configurable: true,
	          get: function() {
	            return ownName;
	          },
	          set: function(name) {
	            ownName = name;
	            if (!render.name && !render.displayName) {
	              render.displayName = name;
	            }
	          }
	        });
	      }
	      return elementType;
	    }
	    var REACT_MODULE_REFERENCE;
	    {
	      REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
	    }
	    function isValidElementType(type) {
	      if (typeof type === "string" || typeof type === "function") {
	        return true;
	      }
	      if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
	        return true;
	      }
	      if (typeof type === "object" && type !== null) {
	        if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
	        // types supported by any Flight configuration anywhere since
	        // we don't know which Flight build this will end up being used
	        // with.
	        type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
	          return true;
	        }
	      }
	      return false;
	    }
	    function memo(type, compare) {
	      {
	        if (!isValidElementType(type)) {
	          error("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
	        }
	      }
	      var elementType = {
	        $$typeof: REACT_MEMO_TYPE,
	        type,
	        compare: compare === void 0 ? null : compare
	      };
	      {
	        var ownName;
	        Object.defineProperty(elementType, "displayName", {
	          enumerable: false,
	          configurable: true,
	          get: function() {
	            return ownName;
	          },
	          set: function(name) {
	            ownName = name;
	            if (!type.name && !type.displayName) {
	              type.displayName = name;
	            }
	          }
	        });
	      }
	      return elementType;
	    }
	    function resolveDispatcher() {
	      var dispatcher = ReactCurrentDispatcher.current;
	      {
	        if (dispatcher === null) {
	          error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
	        }
	      }
	      return dispatcher;
	    }
	    function useContext(Context) {
	      var dispatcher = resolveDispatcher();
	      {
	        if (Context._context !== void 0) {
	          var realContext = Context._context;
	          if (realContext.Consumer === Context) {
	            error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
	          } else if (realContext.Provider === Context) {
	            error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
	          }
	        }
	      }
	      return dispatcher.useContext(Context);
	    }
	    function useState(initialState) {
	      var dispatcher = resolveDispatcher();
	      return dispatcher.useState(initialState);
	    }
	    function useReducer(reducer, initialArg, init) {
	      var dispatcher = resolveDispatcher();
	      return dispatcher.useReducer(reducer, initialArg, init);
	    }
	    function useRef(initialValue) {
	      var dispatcher = resolveDispatcher();
	      return dispatcher.useRef(initialValue);
	    }
	    function useEffect(create, deps) {
	      var dispatcher = resolveDispatcher();
	      return dispatcher.useEffect(create, deps);
	    }
	    function useInsertionEffect(create, deps) {
	      var dispatcher = resolveDispatcher();
	      return dispatcher.useInsertionEffect(create, deps);
	    }
	    function useLayoutEffect(create, deps) {
	      var dispatcher = resolveDispatcher();
	      return dispatcher.useLayoutEffect(create, deps);
	    }
	    function useCallback(callback, deps) {
	      var dispatcher = resolveDispatcher();
	      return dispatcher.useCallback(callback, deps);
	    }
	    function useMemo(create, deps) {
	      var dispatcher = resolveDispatcher();
	      return dispatcher.useMemo(create, deps);
	    }
	    function useImperativeHandle(ref, create, deps) {
	      var dispatcher = resolveDispatcher();
	      return dispatcher.useImperativeHandle(ref, create, deps);
	    }
	    function useDebugValue(value, formatterFn) {
	      {
	        var dispatcher = resolveDispatcher();
	        return dispatcher.useDebugValue(value, formatterFn);
	      }
	    }
	    function useTransition() {
	      var dispatcher = resolveDispatcher();
	      return dispatcher.useTransition();
	    }
	    function useDeferredValue(value) {
	      var dispatcher = resolveDispatcher();
	      return dispatcher.useDeferredValue(value);
	    }
	    function useId() {
	      var dispatcher = resolveDispatcher();
	      return dispatcher.useId();
	    }
	    function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
	      var dispatcher = resolveDispatcher();
	      return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
	    }
	    var disabledDepth = 0;
	    var prevLog;
	    var prevInfo;
	    var prevWarn;
	    var prevError;
	    var prevGroup;
	    var prevGroupCollapsed;
	    var prevGroupEnd;
	    function disabledLog() {
	    }
	    disabledLog.__reactDisabledLog = true;
	    function disableLogs() {
	      {
	        if (disabledDepth === 0) {
	          prevLog = console.log;
	          prevInfo = console.info;
	          prevWarn = console.warn;
	          prevError = console.error;
	          prevGroup = console.group;
	          prevGroupCollapsed = console.groupCollapsed;
	          prevGroupEnd = console.groupEnd;
	          var props = {
	            configurable: true,
	            enumerable: true,
	            value: disabledLog,
	            writable: true
	          };
	          Object.defineProperties(console, {
	            info: props,
	            log: props,
	            warn: props,
	            error: props,
	            group: props,
	            groupCollapsed: props,
	            groupEnd: props
	          });
	        }
	        disabledDepth++;
	      }
	    }
	    function reenableLogs() {
	      {
	        disabledDepth--;
	        if (disabledDepth === 0) {
	          var props = {
	            configurable: true,
	            enumerable: true,
	            writable: true
	          };
	          Object.defineProperties(console, {
	            log: assign({}, props, {
	              value: prevLog
	            }),
	            info: assign({}, props, {
	              value: prevInfo
	            }),
	            warn: assign({}, props, {
	              value: prevWarn
	            }),
	            error: assign({}, props, {
	              value: prevError
	            }),
	            group: assign({}, props, {
	              value: prevGroup
	            }),
	            groupCollapsed: assign({}, props, {
	              value: prevGroupCollapsed
	            }),
	            groupEnd: assign({}, props, {
	              value: prevGroupEnd
	            })
	          });
	        }
	        if (disabledDepth < 0) {
	          error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
	        }
	      }
	    }
	    var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
	    var prefix;
	    function describeBuiltInComponentFrame(name, source, ownerFn) {
	      {
	        if (prefix === void 0) {
	          try {
	            throw Error();
	          } catch (x) {
	            var match = x.stack.trim().match(/\n( *(at )?)/);
	            prefix = match && match[1] || "";
	          }
	        }
	        return "\n" + prefix + name;
	      }
	    }
	    var reentry = false;
	    var componentFrameCache;
	    {
	      var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
	      componentFrameCache = new PossiblyWeakMap();
	    }
	    function describeNativeComponentFrame(fn, construct) {
	      if (!fn || reentry) {
	        return "";
	      }
	      {
	        var frame = componentFrameCache.get(fn);
	        if (frame !== void 0) {
	          return frame;
	        }
	      }
	      var control;
	      reentry = true;
	      var previousPrepareStackTrace = Error.prepareStackTrace;
	      Error.prepareStackTrace = void 0;
	      var previousDispatcher;
	      {
	        previousDispatcher = ReactCurrentDispatcher$1.current;
	        ReactCurrentDispatcher$1.current = null;
	        disableLogs();
	      }
	      try {
	        if (construct) {
	          var Fake = function() {
	            throw Error();
	          };
	          Object.defineProperty(Fake.prototype, "props", {
	            set: function() {
	              throw Error();
	            }
	          });
	          if (typeof Reflect === "object" && Reflect.construct) {
	            try {
	              Reflect.construct(Fake, []);
	            } catch (x) {
	              control = x;
	            }
	            Reflect.construct(fn, [], Fake);
	          } else {
	            try {
	              Fake.call();
	            } catch (x) {
	              control = x;
	            }
	            fn.call(Fake.prototype);
	          }
	        } else {
	          try {
	            throw Error();
	          } catch (x) {
	            control = x;
	          }
	          fn();
	        }
	      } catch (sample) {
	        if (sample && control && typeof sample.stack === "string") {
	          var sampleLines = sample.stack.split("\n");
	          var controlLines = control.stack.split("\n");
	          var s = sampleLines.length - 1;
	          var c = controlLines.length - 1;
	          while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
	            c--;
	          }
	          for (; s >= 1 && c >= 0; s--, c--) {
	            if (sampleLines[s] !== controlLines[c]) {
	              if (s !== 1 || c !== 1) {
	                do {
	                  s--;
	                  c--;
	                  if (c < 0 || sampleLines[s] !== controlLines[c]) {
	                    var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
	                    if (fn.displayName && _frame.includes("<anonymous>")) {
	                      _frame = _frame.replace("<anonymous>", fn.displayName);
	                    }
	                    {
	                      if (typeof fn === "function") {
	                        componentFrameCache.set(fn, _frame);
	                      }
	                    }
	                    return _frame;
	                  }
	                } while (s >= 1 && c >= 0);
	              }
	              break;
	            }
	          }
	        }
	      } finally {
	        reentry = false;
	        {
	          ReactCurrentDispatcher$1.current = previousDispatcher;
	          reenableLogs();
	        }
	        Error.prepareStackTrace = previousPrepareStackTrace;
	      }
	      var name = fn ? fn.displayName || fn.name : "";
	      var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
	      {
	        if (typeof fn === "function") {
	          componentFrameCache.set(fn, syntheticFrame);
	        }
	      }
	      return syntheticFrame;
	    }
	    function describeFunctionComponentFrame(fn, source, ownerFn) {
	      {
	        return describeNativeComponentFrame(fn, false);
	      }
	    }
	    function shouldConstruct(Component2) {
	      var prototype = Component2.prototype;
	      return !!(prototype && prototype.isReactComponent);
	    }
	    function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
	      if (type == null) {
	        return "";
	      }
	      if (typeof type === "function") {
	        {
	          return describeNativeComponentFrame(type, shouldConstruct(type));
	        }
	      }
	      if (typeof type === "string") {
	        return describeBuiltInComponentFrame(type);
	      }
	      switch (type) {
	        case REACT_SUSPENSE_TYPE:
	          return describeBuiltInComponentFrame("Suspense");
	        case REACT_SUSPENSE_LIST_TYPE:
	          return describeBuiltInComponentFrame("SuspenseList");
	      }
	      if (typeof type === "object") {
	        switch (type.$$typeof) {
	          case REACT_FORWARD_REF_TYPE:
	            return describeFunctionComponentFrame(type.render);
	          case REACT_MEMO_TYPE:
	            return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
	          case REACT_LAZY_TYPE: {
	            var lazyComponent = type;
	            var payload = lazyComponent._payload;
	            var init = lazyComponent._init;
	            try {
	              return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
	            } catch (x) {
	            }
	          }
	        }
	      }
	      return "";
	    }
	    var loggedTypeFailures = {};
	    var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
	    function setCurrentlyValidatingElement(element) {
	      {
	        if (element) {
	          var owner = element._owner;
	          var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
	          ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
	        } else {
	          ReactDebugCurrentFrame$1.setExtraStackFrame(null);
	        }
	      }
	    }
	    function checkPropTypes(typeSpecs, values, location, componentName, element) {
	      {
	        var has = Function.call.bind(hasOwnProperty);
	        for (var typeSpecName in typeSpecs) {
	          if (has(typeSpecs, typeSpecName)) {
	            var error$1 = void 0;
	            try {
	              if (typeof typeSpecs[typeSpecName] !== "function") {
	                var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
	                err.name = "Invariant Violation";
	                throw err;
	              }
	              error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
	            } catch (ex) {
	              error$1 = ex;
	            }
	            if (error$1 && !(error$1 instanceof Error)) {
	              setCurrentlyValidatingElement(element);
	              error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
	              setCurrentlyValidatingElement(null);
	            }
	            if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
	              loggedTypeFailures[error$1.message] = true;
	              setCurrentlyValidatingElement(element);
	              error("Failed %s type: %s", location, error$1.message);
	              setCurrentlyValidatingElement(null);
	            }
	          }
	        }
	      }
	    }
	    function setCurrentlyValidatingElement$1(element) {
	      {
	        if (element) {
	          var owner = element._owner;
	          var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
	          setExtraStackFrame(stack);
	        } else {
	          setExtraStackFrame(null);
	        }
	      }
	    }
	    var propTypesMisspellWarningShown;
	    {
	      propTypesMisspellWarningShown = false;
	    }
	    function getDeclarationErrorAddendum() {
	      if (ReactCurrentOwner.current) {
	        var name = getComponentNameFromType(ReactCurrentOwner.current.type);
	        if (name) {
	          return "\n\nCheck the render method of `" + name + "`.";
	        }
	      }
	      return "";
	    }
	    function getSourceInfoErrorAddendum(source) {
	      if (source !== void 0) {
	        var fileName = source.fileName.replace(/^.*[\\\/]/, "");
	        var lineNumber = source.lineNumber;
	        return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
	      }
	      return "";
	    }
	    function getSourceInfoErrorAddendumForProps(elementProps) {
	      if (elementProps !== null && elementProps !== void 0) {
	        return getSourceInfoErrorAddendum(elementProps.__source);
	      }
	      return "";
	    }
	    var ownerHasKeyUseWarning = {};
	    function getCurrentComponentErrorInfo(parentType) {
	      var info = getDeclarationErrorAddendum();
	      if (!info) {
	        var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
	        if (parentName) {
	          info = "\n\nCheck the top-level render call using <" + parentName + ">.";
	        }
	      }
	      return info;
	    }
	    function validateExplicitKey(element, parentType) {
	      if (!element._store || element._store.validated || element.key != null) {
	        return;
	      }
	      element._store.validated = true;
	      var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
	      if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
	        return;
	      }
	      ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
	      var childOwner = "";
	      if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
	        childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
	      }
	      {
	        setCurrentlyValidatingElement$1(element);
	        error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
	        setCurrentlyValidatingElement$1(null);
	      }
	    }
	    function validateChildKeys(node, parentType) {
	      if (typeof node !== "object") {
	        return;
	      }
	      if (isArray(node)) {
	        for (var i = 0; i < node.length; i++) {
	          var child = node[i];
	          if (isValidElement(child)) {
	            validateExplicitKey(child, parentType);
	          }
	        }
	      } else if (isValidElement(node)) {
	        if (node._store) {
	          node._store.validated = true;
	        }
	      } else if (node) {
	        var iteratorFn = getIteratorFn(node);
	        if (typeof iteratorFn === "function") {
	          if (iteratorFn !== node.entries) {
	            var iterator = iteratorFn.call(node);
	            var step;
	            while (!(step = iterator.next()).done) {
	              if (isValidElement(step.value)) {
	                validateExplicitKey(step.value, parentType);
	              }
	            }
	          }
	        }
	      }
	    }
	    function validatePropTypes(element) {
	      {
	        var type = element.type;
	        if (type === null || type === void 0 || typeof type === "string") {
	          return;
	        }
	        var propTypes;
	        if (typeof type === "function") {
	          propTypes = type.propTypes;
	        } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
	        // Inner props are checked in the reconciler.
	        type.$$typeof === REACT_MEMO_TYPE)) {
	          propTypes = type.propTypes;
	        } else {
	          return;
	        }
	        if (propTypes) {
	          var name = getComponentNameFromType(type);
	          checkPropTypes(propTypes, element.props, "prop", name, element);
	        } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
	          propTypesMisspellWarningShown = true;
	          var _name = getComponentNameFromType(type);
	          error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
	        }
	        if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
	          error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
	        }
	      }
	    }
	    function validateFragmentProps(fragment) {
	      {
	        var keys = Object.keys(fragment.props);
	        for (var i = 0; i < keys.length; i++) {
	          var key = keys[i];
	          if (key !== "children" && key !== "key") {
	            setCurrentlyValidatingElement$1(fragment);
	            error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
	            setCurrentlyValidatingElement$1(null);
	            break;
	          }
	        }
	        if (fragment.ref !== null) {
	          setCurrentlyValidatingElement$1(fragment);
	          error("Invalid attribute `ref` supplied to `React.Fragment`.");
	          setCurrentlyValidatingElement$1(null);
	        }
	      }
	    }
	    function createElementWithValidation(type, props, children) {
	      var validType = isValidElementType(type);
	      if (!validType) {
	        var info = "";
	        if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
	          info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
	        }
	        var sourceInfo = getSourceInfoErrorAddendumForProps(props);
	        if (sourceInfo) {
	          info += sourceInfo;
	        } else {
	          info += getDeclarationErrorAddendum();
	        }
	        var typeString;
	        if (type === null) {
	          typeString = "null";
	        } else if (isArray(type)) {
	          typeString = "array";
	        } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
	          typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
	          info = " Did you accidentally export a JSX literal instead of a component?";
	        } else {
	          typeString = typeof type;
	        }
	        {
	          error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
	        }
	      }
	      var element = createElement.apply(this, arguments);
	      if (element == null) {
	        return element;
	      }
	      if (validType) {
	        for (var i = 2; i < arguments.length; i++) {
	          validateChildKeys(arguments[i], type);
	        }
	      }
	      if (type === REACT_FRAGMENT_TYPE) {
	        validateFragmentProps(element);
	      } else {
	        validatePropTypes(element);
	      }
	      return element;
	    }
	    var didWarnAboutDeprecatedCreateFactory = false;
	    function createFactoryWithValidation(type) {
	      var validatedFactory = createElementWithValidation.bind(null, type);
	      validatedFactory.type = type;
	      {
	        if (!didWarnAboutDeprecatedCreateFactory) {
	          didWarnAboutDeprecatedCreateFactory = true;
	          warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
	        }
	        Object.defineProperty(validatedFactory, "type", {
	          enumerable: false,
	          get: function() {
	            warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
	            Object.defineProperty(this, "type", {
	              value: type
	            });
	            return type;
	          }
	        });
	      }
	      return validatedFactory;
	    }
	    function cloneElementWithValidation(element, props, children) {
	      var newElement = cloneElement.apply(this, arguments);
	      for (var i = 2; i < arguments.length; i++) {
	        validateChildKeys(arguments[i], newElement.type);
	      }
	      validatePropTypes(newElement);
	      return newElement;
	    }
	    function startTransition(scope, options) {
	      var prevTransition = ReactCurrentBatchConfig.transition;
	      ReactCurrentBatchConfig.transition = {};
	      var currentTransition = ReactCurrentBatchConfig.transition;
	      {
	        ReactCurrentBatchConfig.transition._updatedFibers = /* @__PURE__ */ new Set();
	      }
	      try {
	        scope();
	      } finally {
	        ReactCurrentBatchConfig.transition = prevTransition;
	        {
	          if (prevTransition === null && currentTransition._updatedFibers) {
	            var updatedFibersCount = currentTransition._updatedFibers.size;
	            if (updatedFibersCount > 10) {
	              warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
	            }
	            currentTransition._updatedFibers.clear();
	          }
	        }
	      }
	    }
	    var didWarnAboutMessageChannel = false;
	    var enqueueTaskImpl = null;
	    function enqueueTask(task) {
	      if (enqueueTaskImpl === null) {
	        try {
	          var requireString = ("require" + Math.random()).slice(0, 7);
	          var nodeRequire = module && module[requireString];
	          enqueueTaskImpl = nodeRequire.call(module, "timers").setImmediate;
	        } catch (_err) {
	          enqueueTaskImpl = function(callback) {
	            {
	              if (didWarnAboutMessageChannel === false) {
	                didWarnAboutMessageChannel = true;
	                if (typeof MessageChannel === "undefined") {
	                  error("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning.");
	                }
	              }
	            }
	            var channel = new MessageChannel();
	            channel.port1.onmessage = callback;
	            channel.port2.postMessage(void 0);
	          };
	        }
	      }
	      return enqueueTaskImpl(task);
	    }
	    var actScopeDepth = 0;
	    var didWarnNoAwaitAct = false;
	    function act(callback) {
	      {
	        var prevActScopeDepth = actScopeDepth;
	        actScopeDepth++;
	        if (ReactCurrentActQueue.current === null) {
	          ReactCurrentActQueue.current = [];
	        }
	        var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
	        var result;
	        try {
	          ReactCurrentActQueue.isBatchingLegacy = true;
	          result = callback();
	          if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
	            var queue = ReactCurrentActQueue.current;
	            if (queue !== null) {
	              ReactCurrentActQueue.didScheduleLegacyUpdate = false;
	              flushActQueue(queue);
	            }
	          }
	        } catch (error2) {
	          popActScope(prevActScopeDepth);
	          throw error2;
	        } finally {
	          ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
	        }
	        if (result !== null && typeof result === "object" && typeof result.then === "function") {
	          var thenableResult = result;
	          var wasAwaited = false;
	          var thenable = {
	            then: function(resolve, reject) {
	              wasAwaited = true;
	              thenableResult.then(function(returnValue2) {
	                popActScope(prevActScopeDepth);
	                if (actScopeDepth === 0) {
	                  recursivelyFlushAsyncActWork(returnValue2, resolve, reject);
	                } else {
	                  resolve(returnValue2);
	                }
	              }, function(error2) {
	                popActScope(prevActScopeDepth);
	                reject(error2);
	              });
	            }
	          };
	          {
	            if (!didWarnNoAwaitAct && typeof Promise !== "undefined") {
	              Promise.resolve().then(function() {
	              }).then(function() {
	                if (!wasAwaited) {
	                  didWarnNoAwaitAct = true;
	                  error("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);");
	                }
	              });
	            }
	          }
	          return thenable;
	        } else {
	          var returnValue = result;
	          popActScope(prevActScopeDepth);
	          if (actScopeDepth === 0) {
	            var _queue = ReactCurrentActQueue.current;
	            if (_queue !== null) {
	              flushActQueue(_queue);
	              ReactCurrentActQueue.current = null;
	            }
	            var _thenable = {
	              then: function(resolve, reject) {
	                if (ReactCurrentActQueue.current === null) {
	                  ReactCurrentActQueue.current = [];
	                  recursivelyFlushAsyncActWork(returnValue, resolve, reject);
	                } else {
	                  resolve(returnValue);
	                }
	              }
	            };
	            return _thenable;
	          } else {
	            var _thenable2 = {
	              then: function(resolve, reject) {
	                resolve(returnValue);
	              }
	            };
	            return _thenable2;
	          }
	        }
	      }
	    }
	    function popActScope(prevActScopeDepth) {
	      {
	        if (prevActScopeDepth !== actScopeDepth - 1) {
	          error("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. ");
	        }
	        actScopeDepth = prevActScopeDepth;
	      }
	    }
	    function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
	      {
	        var queue = ReactCurrentActQueue.current;
	        if (queue !== null) {
	          try {
	            flushActQueue(queue);
	            enqueueTask(function() {
	              if (queue.length === 0) {
	                ReactCurrentActQueue.current = null;
	                resolve(returnValue);
	              } else {
	                recursivelyFlushAsyncActWork(returnValue, resolve, reject);
	              }
	            });
	          } catch (error2) {
	            reject(error2);
	          }
	        } else {
	          resolve(returnValue);
	        }
	      }
	    }
	    var isFlushing = false;
	    function flushActQueue(queue) {
	      {
	        if (!isFlushing) {
	          isFlushing = true;
	          var i = 0;
	          try {
	            for (; i < queue.length; i++) {
	              var callback = queue[i];
	              do {
	                callback = callback(true);
	              } while (callback !== null);
	            }
	            queue.length = 0;
	          } catch (error2) {
	            queue = queue.slice(i + 1);
	            throw error2;
	          } finally {
	            isFlushing = false;
	          }
	        }
	      }
	    }
	    var createElement$1 = createElementWithValidation;
	    var cloneElement$1 = cloneElementWithValidation;
	    var createFactory = createFactoryWithValidation;
	    var Children = {
	      map: mapChildren,
	      forEach: forEachChildren,
	      count: countChildren,
	      toArray,
	      only: onlyChild
	    };
	    exports.Children = Children;
	    exports.Component = Component;
	    exports.Fragment = REACT_FRAGMENT_TYPE;
	    exports.Profiler = REACT_PROFILER_TYPE;
	    exports.PureComponent = PureComponent;
	    exports.StrictMode = REACT_STRICT_MODE_TYPE;
	    exports.Suspense = REACT_SUSPENSE_TYPE;
	    exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
	    exports.cloneElement = cloneElement$1;
	    exports.createContext = createContext;
	    exports.createElement = createElement$1;
	    exports.createFactory = createFactory;
	    exports.createRef = createRef;
	    exports.forwardRef = forwardRef;
	    exports.isValidElement = isValidElement;
	    exports.lazy = lazy;
	    exports.memo = memo;
	    exports.startTransition = startTransition;
	    exports.unstable_act = act;
	    exports.useCallback = useCallback;
	    exports.useContext = useContext;
	    exports.useDebugValue = useDebugValue;
	    exports.useDeferredValue = useDeferredValue;
	    exports.useEffect = useEffect;
	    exports.useId = useId;
	    exports.useImperativeHandle = useImperativeHandle;
	    exports.useInsertionEffect = useInsertionEffect;
	    exports.useLayoutEffect = useLayoutEffect;
	    exports.useMemo = useMemo;
	    exports.useReducer = useReducer;
	    exports.useRef = useRef;
	    exports.useState = useState;
	    exports.useSyncExternalStore = useSyncExternalStore;
	    exports.useTransition = useTransition;
	    exports.version = ReactVersion;
	    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
	      __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
	    }
	  })();
	}
} (react_development$2, react_development$2.exports));

var react_developmentExports = react_development$2.exports;
var react_development$1 = /*@__PURE__*/getDefaultExportFromCjs(react_developmentExports);

var react = react$1.exports;

"use strict";
if (false) {
  module.exports = require("./cjs/react.production.min.js");
} else {
  react$1.exports = react_developmentExports;
}

var reactExports = react$1.exports;
var t = /*@__PURE__*/getDefaultExportFromCjs(reactExports);

var e$1 = /*#__PURE__*/_mergeNamespaces({
	__proto__: null,
	default: t
}, [reactExports]);

var isMergeableObject = function(value) {
  return /* @__PURE__ */ function(value2) {
    return !!value2 && "object" == typeof value2;
  }(value) && !function(value2) {
    var stringValue = Object.prototype.toString.call(value2);
    return "[object RegExp]" === stringValue || "[object Date]" === stringValue || function(value3) {
      return value3.$$typeof === REACT_ELEMENT_TYPE;
    }(value2);
  }(value);
};
var REACT_ELEMENT_TYPE = "function" == typeof Symbol && Symbol.for ? Symbol.for("react.element") : 60103;
function cloneUnlessOtherwiseSpecified(value, options) {
  return false !== options.clone && options.isMergeableObject(value) ? deepmerge((val = value, Array.isArray(val) ? [] : {}), value, options) : value;
  var val;
}
function defaultArrayMerge(target, source, options) {
  return target.concat(source).map(function(element) {
    return cloneUnlessOtherwiseSpecified(element, options);
  });
}
function getKeys(target) {
  return Object.keys(target).concat(function(target2) {
    return Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols(target2).filter(function(symbol) {
      return Object.propertyIsEnumerable.call(target2, symbol);
    }) : [];
  }(target));
}
function propertyIsOnObject(object, property) {
  try {
    return property in object;
  } catch (_) {
    return false;
  }
}
function mergeObject(target, source, options) {
  var destination = {};
  return options.isMergeableObject(target) && getKeys(target).forEach(function(key) {
    destination[key] = cloneUnlessOtherwiseSpecified(target[key], options);
  }), getKeys(source).forEach(function(key) {
    (function(target2, key2) {
      return propertyIsOnObject(target2, key2) && !(Object.hasOwnProperty.call(target2, key2) && Object.propertyIsEnumerable.call(target2, key2));
    })(target, key) || (propertyIsOnObject(target, key) && options.isMergeableObject(source[key]) ? destination[key] = function(key2, options2) {
      if (!options2.customMerge)
        return deepmerge;
      var customMerge = options2.customMerge(key2);
      return "function" == typeof customMerge ? customMerge : deepmerge;
    }(key, options)(target[key], source[key], options) : destination[key] = cloneUnlessOtherwiseSpecified(source[key], options));
  }), destination;
}
function deepmerge(target, source, options) {
  (options = options || {}).arrayMerge = options.arrayMerge || defaultArrayMerge, options.isMergeableObject = options.isMergeableObject || isMergeableObject, options.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified;
  var sourceIsArray = Array.isArray(source);
  return sourceIsArray === Array.isArray(target) ? sourceIsArray ? options.arrayMerge(target, source, options) : mergeObject(target, source, options) : cloneUnlessOtherwiseSpecified(source, options);
}
deepmerge.all = function(array, options) {
  if (!Array.isArray(array))
    throw new Error("first argument should be an array");
  return array.reduce(function(prev, next) {
    return deepmerge(prev, next, options);
  }, {});
};
class AssertionError extends Error {
  constructor(message = "Unexpected error occurred, please contact your system administrator.") {
    super(message), Object.setPrototypeOf(this, AssertionError.prototype);
  }
}
function ensure(arg) {
  if (null == arg)
    throw new Error("Did not expect an argument to be undefined");
  return arg;
}
function crash() {
  throw new AssertionError();
}
function friendlyName(component) {
  return component.displayName ?? component.name ?? "<component>";
}
function isString(value) {
  return "string" == typeof value;
}
function isJson(obj) {
  return null != obj && "object" == typeof obj && obj.constructor === {}.constructor;
}
function isArrayOf(type, value) {
  return value instanceof Array && value.every((v) => void 0 === v || v instanceof type);
}
function unique(list) {
  return Array.from(new Set(list));
}
const identityMapper = (e) => e;
function partition(predicate, array, mapper = identityMapper) {
  const matching = [], unmatching = [];
  return array.forEach((item) => {
    const mappedItem = mapper(item);
    return predicate(item) ? matching.push(mappedItem) : unmatching.push(mappedItem);
  }), [matching, unmatching];
}
function tuple(...args) {
  return args;
}
function mapValues(source, mapValue) {
  const result = {};
  return Object.keys(source).forEach((key) => result[key] = mapValue(source[key], key)), result;
}
function uniqueBy(list, keySelector) {
  const res = [], keys = {};
  return list.forEach((item) => {
    const key = keySelector(item);
    Object.prototype.hasOwnProperty.call(keys, key) || (keys[key] = true, res.push(item));
  }), res;
}
function difference(iterable1, iterable2) {
  return new Set([...iterable1].filter((item) => !iterable2.has(item)));
}
function concat(arrays) {
  return [].concat(...arrays);
}
function escapeXml(s) {
  return s.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&apos;");
}
function containsKey(key, obj) {
  return Object.prototype.hasOwnProperty.call(obj, key);
}
function lowerCaseFirst(str) {
  return "string" == typeof str[0] ? str[0].toLowerCase() + str.slice(1) : "";
}
function toFriendlyId(widgetId) {
  const parts = widgetId.split(/\./g);
  return parts.length >= 4 ? parts.slice(1, 4).join(".") : widgetId;
}
function toWidgetName(widgetId) {
  const parts = widgetId.split(/\./g);
  return parts.length >= 4 ? parts[3] : void 0;
}
function useIsFirstRender() {
  let result = false;
  return reactExports.useMemo(() => {
    result = true;
  }, []), result;
}
function repeat(length, builder) {
  return Array.from({ length }).map((_, i) => builder(i));
}
function indexByKey(getKey) {
  return (items) => items.reduce((mapObj, item) => (mapObj[getKey(item)] = item, mapObj), /* @__PURE__ */ Object.create(null));
}
function toObjectByKey(items, getKey) {
  return indexByKey(getKey)(items);
}
function isReferenceType(type) {
  return "ObjectReference" === type || "ObjectReferenceSet" === type;
}
function isNumericType(type) {
  return "Decimal" === type || "Integer" === type || "Long" === type;
}
function hasKey(record, key) {
  return Object.prototype.hasOwnProperty.call(record, key);
}
function useForceUpdate() {
  const [, setState] = reactExports.useState({});
  return reactExports.useCallback(() => setState({}), []);
}
function groupBy(values, getKey) {
  const result = [];
  for (const value of values) {
    const key = getKey(value), existingItem = result.find((x) => x.key === key);
    existingItem ? existingItem.values.push(value) : result.push({ key, values: [value] });
  }
  return result;
}
function useEnsureConstantValues(...values) {
  const initialValueRef = reactExports.useRef([...values]);
  if (initialValueRef.current.length !== values.length || initialValueRef.current.some((initialValue, index) => values[index] !== initialValue))
    throw new AssertionError("The hook is called with different parameters than previously");
}
function joinPath(...parts) {
  let result = "";
  for (const part of parts)
    void 0 !== part && (result.endsWith("/") && part.startsWith("/") ? result += part.substring(1) : result.endsWith("/") || part.startsWith("/") ? result += part : result += "/" + part);
  return result;
}
function mergeQueryStrings(q1, q2) {
  const result = new URLSearchParams(q1);
  return new URLSearchParams(q2).forEach((value, key) => {
    result.set(key, value);
  }), result.toString();
}

let session;
function getSession() {
  return ensure(session);
}
function setSession(s) {
  session = s;
}

function getEntityMeta(entity) {
  return getMetadata().get(entity);
}
function getAttributesMeta(entity) {
  return Object.values(getEntityMeta(entity)?.attributes ?? {});
}
function getAttributeType$1(entity, attribute) {
  return getMetadata().get(entity)?.attributes[attribute]?.type;
}
function getAttributeEnumerationType(entity, attribute) {
  const result = getMetadata().get(entity)?.attributes[attribute]?.enumeration;
  if (!result)
    throw new AssertionError(`Attribute ${attribute} is not accessible or not enumeration`);
  return result;
}
function isReferenceAttribute(meta, attribute) {
  return isReferenceType(meta?.attributes[attribute]?.type);
}
function isEntityA(entity, targetEntity) {
  return entity === targetEntity || Boolean(getEntityMeta(entity)?.generalizations.includes(targetEntity));
}
const cachedAttributeOwner = /* @__PURE__ */ new Map();
function computeSupermostEntityWithAttribute(entity, attribute) {
  const cacheKey = `${entity}.${attribute}`, cachedResult = cachedAttributeOwner.get(cacheKey);
  if (void 0 !== cachedResult && !disableCaching)
    return cachedResult;
  const meta = getEntityMeta(entity);
  if (!meta?.attributes[attribute])
    return;
  const result = meta.generalizations.filter((superEntity) => getEntityMeta(superEntity)?.attributes[attribute]).pop() ?? entity;
  return cachedAttributeOwner.set(cacheKey, result), result;
}
var SystemAttribute;
function isSystemAttribute(attr) {
  return Object.values(SystemAttribute).includes(attr);
}
function isFileDocument(entity, checkAsImage = false) {
  return isEntityA(entity, checkAsImage ? "System.Image" : "System.FileDocument");
}
function isImage(objectType) {
  return isEntityA(objectType, "System.Image");
}
function isFileDocumentWithContents(obj, checkAsImage = false) {
  return isFileDocument(obj.objectType, checkAsImage) && true === ensure(obj.attributes.HasContents).value;
}
!function(SystemAttribute2) {
  SystemAttribute2.ChangedBy = "System.changedBy", SystemAttribute2.Owner = "System.owner", SystemAttribute2.CreatedDate = "createdDate", SystemAttribute2.ChangedDate = "changedDate";
}(SystemAttribute || (SystemAttribute = {}));
const cachedMetadata = /* @__PURE__ */ new Map();
function getMetadata() {
  if (0 === cachedMetadata.size) {
    getSession().getConfig("metadata").forEach((m) => {
      const entityMeta = Object.freeze({ name: m.objectType, generalizations: Object.freeze(m.properties.superclasses), specializations: Object.freeze(m.properties.subclasses), isPersistable: m.persistable, maxObjectId: m.maxObjectId, ...m.isRemoteFileEntity && { isRemoteFileEntity: m.isRemoteFileEntity }, needsReachableState: Object.freeze(m.needsReachableState), deleteBehavior: Object.freeze(m.deleteBehavior), attributes: Object.freeze(Object.fromEntries(Object.entries(m.attributes).map(([attr, attrMeta]) => [attr, Object.freeze({ name: attr, type: attrMeta.type, referenceEntity: isReferenceType(attrMeta.type) ? attrMeta.klass : void 0, enumeration: "Enum" === attrMeta.type ? attrMeta.klass : void 0, isDateLocalized: "DateTime" === attrMeta.type ? Boolean(attrMeta.localize) : void 0, isBidiReference: isReferenceType(attrMeta.type) ? Boolean(attrMeta.both) : void 0, isSyncable: false !== attrMeta.sync, isAlwaysReadOnly: Boolean(attrMeta.readonly), defaultValue: attrMeta.defaultValue })]))), indices: m.indices.map((index) => Object.freeze({ attributes: index.attributes.map((indexAttr) => Object.freeze({ name: indexAttr.name, direction: indexAttr.direction })) })) });
      cachedMetadata.set(m.objectType, entityMeta);
    });
  }
  return cachedMetadata;
}
const disableCaching = false;

let handler;
function setErrorHandler(errorHandler) {
  handler = errorHandler;
}
function handleError(e) {
  handler(e);
}
var OBFUSCATED_ERROR = "An invariant failed, however the error is obfuscated because this is a production build.", EMPTY_ARRAY = [];
Object.freeze(EMPTY_ARRAY);
var EMPTY_OBJECT = {};
function getNextId() {
  return ++globalState.mobxGuid;
}
function fail(message) {
  throw invariant(false, message), "X";
}
function invariant(check, message) {
  if (!check)
    throw new Error("[mobx] " + (message || OBFUSCATED_ERROR));
}
function once(func) {
  var invoked = false;
  return function() {
    if (!invoked)
      return invoked = true, func.apply(this, arguments);
  };
}
Object.freeze(EMPTY_OBJECT);
var noop = function() {
};
function isObject(value) {
  return null !== value && "object" == typeof value;
}
function isPlainObject(value) {
  if (null === value || "object" != typeof value)
    return false;
  var proto = Object.getPrototypeOf(value);
  return proto === Object.prototype || null === proto;
}
function addHiddenProp(object, propName, value) {
  Object.defineProperty(object, propName, { enumerable: false, writable: true, configurable: true, value });
}
function createInstanceofPredicate(name, clazz) {
  var propName = "isMobX" + name;
  return clazz.prototype[propName] = true, function(x) {
    return isObject(x) && true === x[propName];
  };
}
function isES6Map(thing) {
  return thing instanceof Map;
}
function isES6Set(thing) {
  return thing instanceof Set;
}
function stringifyKey(key) {
  return key && key.toString ? key.toString() : new String(key).toString();
}
function toPrimitive(value) {
  return null === value ? null : "object" == typeof value ? "" + value : value;
}
var ownKeys = "undefined" != typeof Reflect && Reflect.ownKeys ? Reflect.ownKeys : Object.getOwnPropertySymbols ? function(obj) {
  return Object.getOwnPropertyNames(obj).concat(Object.getOwnPropertySymbols(obj));
} : Object.getOwnPropertyNames, $mobx = Symbol("mobx administration"), Atom = function() {
  function Atom2(name) {
    void 0 === name && (name = "Atom@" + getNextId()), this.name = name, this.isPendingUnobservation = false, this.isBeingObserved = false, this.observers = /* @__PURE__ */ new Set(), this.diffValue = 0, this.lastAccessedBy = 0, this.lowestObserverState = IDerivationState.NOT_TRACKING;
  }
  return Atom2.prototype.onBecomeObserved = function() {
    this.onBecomeObservedListeners && this.onBecomeObservedListeners.forEach(function(listener) {
      return listener();
    });
  }, Atom2.prototype.onBecomeUnobserved = function() {
    this.onBecomeUnobservedListeners && this.onBecomeUnobservedListeners.forEach(function(listener) {
      return listener();
    });
  }, Atom2.prototype.reportObserved = function() {
    return reportObserved(this);
  }, Atom2.prototype.reportChanged = function() {
    startBatch(), function(observable2) {
      if (observable2.lowestObserverState === IDerivationState.STALE)
        return;
      observable2.lowestObserverState = IDerivationState.STALE, observable2.observers.forEach(function(d) {
        d.dependenciesState === IDerivationState.UP_TO_DATE && (d.isTracing !== TraceMode.NONE && logTraceInfo(d, observable2), d.onBecomeStale()), d.dependenciesState = IDerivationState.STALE;
      });
    }(this), endBatch();
  }, Atom2.prototype.toString = function() {
    return this.name;
  }, Atom2;
}(), isAtom = createInstanceofPredicate("Atom", Atom);
function createAtom(name, onBecomeObservedHandler, onBecomeUnobservedHandler) {
  void 0 === onBecomeObservedHandler && (onBecomeObservedHandler = noop), void 0 === onBecomeUnobservedHandler && (onBecomeUnobservedHandler = noop);
  var atom = new Atom(name);
  return onBecomeObservedHandler !== noop && interceptHook("onBecomeObserved", atom, onBecomeObservedHandler), onBecomeUnobservedHandler !== noop && onBecomeUnobserved(atom, onBecomeUnobservedHandler), atom;
}
var comparer = { identity: function(a, b) {
  return a === b;
}, structural: function(a, b) {
  return deepEqual(a, b);
}, default: function(a, b) {
  return Object.is(a, b);
}, shallow: function(a, b) {
  return deepEqual(a, b, 1);
} }, extendStatics = function(d, b) {
  return extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
    d2.__proto__ = b2;
  } || function(d2, b2) {
    for (var p in b2)
      b2.hasOwnProperty(p) && (d2[p] = b2[p]);
  }, extendStatics(d, b);
};
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
var __assign = function() {
  return __assign = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++)
      for (var p in s = arguments[i])
        Object.prototype.hasOwnProperty.call(s, p) && (t[p] = s[p]);
    return t;
  }, __assign.apply(this, arguments);
};
function __values(o) {
  var m = "function" == typeof Symbol && o[Symbol.iterator], i = 0;
  return m ? m.call(o) : { next: function() {
    return o && i >= o.length && (o = void 0), { value: o && o[i++], done: !o };
  } };
}
function __read(o, n) {
  var m = "function" == typeof Symbol && o[Symbol.iterator];
  if (!m)
    return o;
  var r, e, i = m.call(o), ar = [];
  try {
    for (; (void 0 === n || n-- > 0) && !(r = i.next()).done; )
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      r && !r.done && (m = i.return) && m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
}
function __spread() {
  for (var ar = [], i = 0; i < arguments.length; i++)
    ar = ar.concat(__read(arguments[i]));
  return ar;
}
var mobxDidRunLazyInitializersSymbol = Symbol("mobx did run lazy initializers"), mobxPendingDecorators = Symbol("mobx pending decorators"), enumerableDescriptorCache = {}, nonEnumerableDescriptorCache = {};
function initializeInstance(target) {
  var e_1, _a2;
  if (true !== target[mobxDidRunLazyInitializersSymbol]) {
    var decorators = target[mobxPendingDecorators];
    if (decorators) {
      addHiddenProp(target, mobxDidRunLazyInitializersSymbol, true);
      var keys = __spread(Object.getOwnPropertySymbols(decorators), Object.keys(decorators));
      try {
        for (var keys_1 = __values(keys), keys_1_1 = keys_1.next(); !keys_1_1.done; keys_1_1 = keys_1.next()) {
          var d = decorators[keys_1_1.value];
          d.propertyCreator(target, d.prop, d.descriptor, d.decoratorTarget, d.decoratorArguments);
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          keys_1_1 && !keys_1_1.done && (_a2 = keys_1.return) && _a2.call(keys_1);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
    }
  }
}
function createPropDecorator(propertyInitiallyEnumerable, propertyCreator) {
  return function() {
    var decoratorArguments, args, decorator = function(target, prop, descriptor, applyImmediately) {
      if (true === applyImmediately)
        return propertyCreator(target, prop, descriptor, target, decoratorArguments), null;
      if (!Object.prototype.hasOwnProperty.call(target, mobxPendingDecorators)) {
        var inheritedDecorators = target[mobxPendingDecorators];
        addHiddenProp(target, mobxPendingDecorators, __assign({}, inheritedDecorators));
      }
      return target[mobxPendingDecorators][prop] = { prop, propertyCreator, descriptor, decoratorTarget: target, decoratorArguments }, function(prop2, enumerable) {
        var cache = enumerable ? enumerableDescriptorCache : nonEnumerableDescriptorCache;
        return cache[prop2] || (cache[prop2] = { configurable: true, enumerable, get: function() {
          return initializeInstance(this), this[prop2];
        }, set: function(value) {
          initializeInstance(this), this[prop2] = value;
        } });
      }(prop, propertyInitiallyEnumerable);
    };
    return (2 === (args = arguments).length || 3 === args.length) && ("string" == typeof args[1] || "symbol" == typeof args[1]) || 4 === args.length && true === args[3] ? (decoratorArguments = EMPTY_ARRAY, decorator.apply(null, arguments)) : (decoratorArguments = Array.prototype.slice.call(arguments), decorator);
  };
}
function deepEnhancer(v, _, name) {
  return isObservable(v) ? v : Array.isArray(v) ? observable.array(v, { name }) : isPlainObject(v) ? observable.object(v, void 0, { name }) : isES6Map(v) ? observable.map(v, { name }) : isES6Set(v) ? observable.set(v, { name }) : v;
}
function referenceEnhancer(newValue) {
  return newValue;
}
function createDecoratorForEnhancer(enhancer) {
  invariant(enhancer);
  var decorator = createPropDecorator(true, function(target, propertyName, descriptor, _decoratorTarget, decoratorArgs) {
    var initialValue = descriptor ? descriptor.initializer ? descriptor.initializer.call(target) : descriptor.value : void 0;
    asObservableObject(target).addObservableProp(propertyName, initialValue, enhancer);
  }), res = ("undefined" != typeof process && process.env, decorator);
  return res.enhancer = enhancer, res;
}
var defaultCreateObservableOptions = { deep: true, name: void 0, defaultDecorator: void 0, proxy: true };
function asCreateObservableOptions(thing) {
  return null == thing ? defaultCreateObservableOptions : "string" == typeof thing ? { name: thing, deep: true, proxy: true } : thing;
}
Object.freeze(defaultCreateObservableOptions);
var deepDecorator = createDecoratorForEnhancer(deepEnhancer), shallowDecorator = createDecoratorForEnhancer(function(v, _, name) {
  return null == v || isObservableObject(v) || isObservableArray(v) || isObservableMap(v) || isObservableSet(v) ? v : Array.isArray(v) ? observable.array(v, { name, deep: false }) : isPlainObject(v) ? observable.object(v, void 0, { name, deep: false }) : isES6Map(v) ? observable.map(v, { name, deep: false }) : isES6Set(v) ? observable.set(v, { name, deep: false }) : fail(false);
}), refDecorator = createDecoratorForEnhancer(referenceEnhancer), refStructDecorator = createDecoratorForEnhancer(function(v, oldValue, name) {
  return deepEqual(v, oldValue) ? oldValue : v;
});
function getEnhancerFromOptions(options) {
  return options.defaultDecorator ? options.defaultDecorator.enhancer : false === options.deep ? referenceEnhancer : deepEnhancer;
}
var observableFactories = { box: function(value, options) {
  arguments.length > 2 && incorrectlyUsedAsDecorator("box");
  var o = asCreateObservableOptions(options);
  return new ObservableValue(value, getEnhancerFromOptions(o), o.name, true, o.equals);
}, array: function(initialValues, options) {
  arguments.length > 2 && incorrectlyUsedAsDecorator("array");
  var o = asCreateObservableOptions(options);
  return function(initialValues2, enhancer, name, owned) {
    void 0 === name && (name = "ObservableArray@" + getNextId());
    void 0 === owned && (owned = false);
    var adm = new ObservableArrayAdministration(name, enhancer, owned);
    object = adm.values, propName = $mobx, value = adm, Object.defineProperty(object, propName, { enumerable: false, writable: false, configurable: true, value });
    var object, propName, value;
    var proxy = new Proxy(adm.values, arrayTraps);
    if (adm.proxy = proxy, initialValues2 && initialValues2.length) {
      var prev = allowStateChangesStart(true);
      adm.spliceWithArray(0, 0, initialValues2), allowStateChangesEnd(prev);
    }
    return proxy;
  }(initialValues, getEnhancerFromOptions(o), o.name);
}, map: function(initialValues, options) {
  arguments.length > 2 && incorrectlyUsedAsDecorator("map");
  var o = asCreateObservableOptions(options);
  return new ObservableMap(initialValues, getEnhancerFromOptions(o), o.name);
}, set: function(initialValues, options) {
  arguments.length > 2 && incorrectlyUsedAsDecorator("set");
  var o = asCreateObservableOptions(options);
  return new ObservableSet(initialValues, getEnhancerFromOptions(o), o.name);
}, object: function(props, decorators, options) {
  "string" == typeof arguments[1] && incorrectlyUsedAsDecorator("object");
  var o = asCreateObservableOptions(options);
  if (false === o.proxy)
    return extendObservable({}, props, decorators, o);
  var defaultDecorator = getDefaultDecoratorFromObjectOptions(o), proxy = function(base) {
    var proxy2 = new Proxy(base, objectProxyTraps);
    return base[$mobx].proxy = proxy2, proxy2;
  }(extendObservable({}, void 0, void 0, o));
  return extendObservableObjectWithProperties(proxy, props, decorators, defaultDecorator), proxy;
}, ref: refDecorator, shallow: shallowDecorator, deep: deepDecorator, struct: refStructDecorator }, observable = function(v, arg2, arg3) {
  if ("string" == typeof arguments[1] || "symbol" == typeof arguments[1])
    return deepDecorator.apply(null, arguments);
  if (isObservable(v))
    return v;
  var res = isPlainObject(v) ? observable.object(v, arg2, arg3) : Array.isArray(v) ? observable.array(v, arg2) : isES6Map(v) ? observable.map(v, arg2) : isES6Set(v) ? observable.set(v, arg2) : v;
  if (res !== v)
    return res;
  fail(false);
};
function incorrectlyUsedAsDecorator(methodName) {
  fail("Expected one or two arguments to observable." + methodName + ". Did you accidentally try to use observable." + methodName + " as decorator?");
}
Object.keys(observableFactories).forEach(function(name) {
  return observable[name] = observableFactories[name];
});
var IDerivationState, TraceMode, computedDecorator = createPropDecorator(false, function(instance, propertyName, descriptor, decoratorTarget, decoratorArgs) {
  var get = descriptor.get, set2 = descriptor.set, options = decoratorArgs[0] || {};
  asObservableObject(instance).addComputedProp(instance, propertyName, __assign({ get, set: set2, context: instance }, options));
}), computedStructDecorator = computedDecorator({ equals: comparer.structural }), computed = function(arg1, arg2, arg3) {
  if ("string" == typeof arg2)
    return computedDecorator.apply(null, arguments);
  if (null !== arg1 && "object" == typeof arg1 && 1 === arguments.length)
    return computedDecorator.apply(null, arguments);
  var opts = "object" == typeof arg2 ? arg2 : {};
  return opts.get = arg1, opts.set = "function" == typeof arg2 ? arg2 : opts.set, opts.name = opts.name || arg1.name || "", new ComputedValue(opts);
};
computed.struct = computedStructDecorator, function(IDerivationState2) {
  IDerivationState2[IDerivationState2.NOT_TRACKING = -1] = "NOT_TRACKING", IDerivationState2[IDerivationState2.UP_TO_DATE = 0] = "UP_TO_DATE", IDerivationState2[IDerivationState2.POSSIBLY_STALE = 1] = "POSSIBLY_STALE", IDerivationState2[IDerivationState2.STALE = 2] = "STALE";
}(IDerivationState || (IDerivationState = {})), function(TraceMode2) {
  TraceMode2[TraceMode2.NONE = 0] = "NONE", TraceMode2[TraceMode2.LOG = 1] = "LOG", TraceMode2[TraceMode2.BREAK = 2] = "BREAK";
}(TraceMode || (TraceMode = {}));
var CaughtException = function(cause) {
  this.cause = cause;
};
function isCaughtException(e) {
  return e instanceof CaughtException;
}
function shouldCompute(derivation) {
  switch (derivation.dependenciesState) {
    case IDerivationState.UP_TO_DATE:
      return false;
    case IDerivationState.NOT_TRACKING:
    case IDerivationState.STALE:
      return true;
    case IDerivationState.POSSIBLY_STALE:
      for (var prevAllowStateReads = allowStateReadsStart(true), prevUntracked = untrackedStart(), obs = derivation.observing, l = obs.length, i = 0; i < l; i++) {
        var obj = obs[i];
        if (isComputedValue(obj)) {
          if (globalState.disableErrorBoundaries)
            obj.get();
          else
            try {
              obj.get();
            } catch (e) {
              return untrackedEnd(prevUntracked), allowStateReadsEnd(prevAllowStateReads), true;
            }
          if (derivation.dependenciesState === IDerivationState.STALE)
            return untrackedEnd(prevUntracked), allowStateReadsEnd(prevAllowStateReads), true;
        }
      }
      return changeDependenciesStateTo0(derivation), untrackedEnd(prevUntracked), allowStateReadsEnd(prevAllowStateReads), false;
  }
}
function checkIfStateModificationsAreAllowed(atom) {
  var hasObservers = atom.observers.size > 0;
  globalState.computationDepth > 0 && hasObservers && fail(false), globalState.allowStateChanges || !hasObservers && "strict" !== globalState.enforceActions || fail(false);
}
function trackDerivedFunction(derivation, f, context) {
  var prevAllowStateReads = allowStateReadsStart(true);
  changeDependenciesStateTo0(derivation), derivation.newObserving = new Array(derivation.observing.length + 100), derivation.unboundDepsCount = 0, derivation.runId = ++globalState.runId;
  var result, prevTracking = globalState.trackingDerivation;
  if (globalState.trackingDerivation = derivation, true === globalState.disableErrorBoundaries)
    result = f.call(context);
  else
    try {
      result = f.call(context);
    } catch (e) {
      result = new CaughtException(e);
    }
  return globalState.trackingDerivation = prevTracking, function(derivation2) {
    for (var prevObserving = derivation2.observing, observing = derivation2.observing = derivation2.newObserving, lowestNewObservingDerivationState = IDerivationState.UP_TO_DATE, i0 = 0, l = derivation2.unboundDepsCount, i = 0; i < l; i++) {
      0 === (dep = observing[i]).diffValue && (dep.diffValue = 1, i0 !== i && (observing[i0] = dep), i0++), dep.dependenciesState > lowestNewObservingDerivationState && (lowestNewObservingDerivationState = dep.dependenciesState);
    }
    observing.length = i0, derivation2.newObserving = null, l = prevObserving.length;
    for (; l--; ) {
      0 === (dep = prevObserving[l]).diffValue && removeObserver(dep, derivation2), dep.diffValue = 0;
    }
    for (; i0--; ) {
      var dep;
      1 === (dep = observing[i0]).diffValue && (dep.diffValue = 0, addObserver(dep, derivation2));
    }
    lowestNewObservingDerivationState !== IDerivationState.UP_TO_DATE && (derivation2.dependenciesState = lowestNewObservingDerivationState, derivation2.onBecomeStale());
  }(derivation), allowStateReadsEnd(prevAllowStateReads), result;
}
function clearObserving(derivation) {
  var obs = derivation.observing;
  derivation.observing = [];
  for (var i = obs.length; i--; )
    removeObserver(obs[i], derivation);
  derivation.dependenciesState = IDerivationState.NOT_TRACKING;
}
function untracked(action2) {
  var prev = untrackedStart();
  try {
    return action2();
  } finally {
    untrackedEnd(prev);
  }
}
function untrackedStart() {
  var prev = globalState.trackingDerivation;
  return globalState.trackingDerivation = null, prev;
}
function untrackedEnd(prev) {
  globalState.trackingDerivation = prev;
}
function allowStateReadsStart(allowStateReads) {
  var prev = globalState.allowStateReads;
  return globalState.allowStateReads = allowStateReads, prev;
}
function allowStateReadsEnd(prev) {
  globalState.allowStateReads = prev;
}
function changeDependenciesStateTo0(derivation) {
  if (derivation.dependenciesState !== IDerivationState.UP_TO_DATE) {
    derivation.dependenciesState = IDerivationState.UP_TO_DATE;
    for (var obs = derivation.observing, i = obs.length; i--; )
      obs[i].lowestObserverState = IDerivationState.UP_TO_DATE;
  }
}
var currentActionId = 0, nextActionId = 1, functionNameDescriptor = Object.getOwnPropertyDescriptor(function() {
}, "name");
function createAction(actionName, fn, ref) {
  var res = function() {
    return executeAction$2(actionName, fn, ref || this, arguments);
  };
  return res.isMobxAction = true, res;
}
function executeAction$2(actionName, fn, scope, args) {
  var runInfo = function(actionName2, scope2, args2) {
    var notifySpy = false, startTime = 0, prevDerivation = untrackedStart();
    startBatch();
    var prevAllowStateChanges = allowStateChangesStart(true), prevAllowStateReads = allowStateReadsStart(true), runInfo2 = { prevDerivation, prevAllowStateChanges, prevAllowStateReads, notifySpy, startTime, actionId: nextActionId++, parentActionId: currentActionId };
    return currentActionId = runInfo2.actionId, runInfo2;
  }();
  try {
    return fn.apply(scope, args);
  } catch (err) {
    throw runInfo.error = err, err;
  } finally {
    !function(runInfo2) {
      currentActionId !== runInfo2.actionId && fail("invalid action stack. did you forget to finish an action?");
      currentActionId = runInfo2.parentActionId, void 0 !== runInfo2.error && (globalState.suppressReactionErrors = true);
      allowStateChangesEnd(runInfo2.prevAllowStateChanges), allowStateReadsEnd(runInfo2.prevAllowStateReads), endBatch(), untrackedEnd(runInfo2.prevDerivation), runInfo2.notifySpy && false;
      globalState.suppressReactionErrors = false;
    }(runInfo);
  }
}
function allowStateChangesStart(allowStateChanges) {
  var prev = globalState.allowStateChanges;
  return globalState.allowStateChanges = allowStateChanges, prev;
}
function allowStateChangesEnd(prev) {
  globalState.allowStateChanges = prev;
}
function allowStateChangesInsideComputed(func) {
  var res, prev = globalState.computationDepth;
  globalState.computationDepth = 0;
  try {
    res = func();
  } finally {
    globalState.computationDepth = prev;
  }
  return res;
}
functionNameDescriptor && functionNameDescriptor.configurable;
var ObservableValue = function(_super) {
  function ObservableValue2(value, enhancer, name, notifySpy, equals) {
    void 0 === name && (name = "ObservableValue@" + getNextId()), void 0 === notifySpy && (notifySpy = true), void 0 === equals && (equals = comparer.default);
    var _this = _super.call(this, name) || this;
    return _this.enhancer = enhancer, _this.name = name, _this.equals = equals, _this.hasUnreportedChange = false, _this.value = enhancer(value, void 0, name), _this;
  }
  return function(d, b) {
    function __() {
      this.constructor = d;
    }
    extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());
  }(ObservableValue2, _super), ObservableValue2.prototype.dehanceValue = function(value) {
    return void 0 !== this.dehancer ? this.dehancer(value) : value;
  }, ObservableValue2.prototype.set = function(newValue) {
    this.value;
    if ((newValue = this.prepareNewValue(newValue)) !== globalState.UNCHANGED) {
      false, this.setNewValue(newValue);
    }
  }, ObservableValue2.prototype.prepareNewValue = function(newValue) {
    if (checkIfStateModificationsAreAllowed(this), hasInterceptors(this)) {
      var change = interceptChange(this, { object: this, type: "update", newValue });
      if (!change)
        return globalState.UNCHANGED;
      newValue = change.newValue;
    }
    return newValue = this.enhancer(newValue, this.value, this.name), this.equals(this.value, newValue) ? globalState.UNCHANGED : newValue;
  }, ObservableValue2.prototype.setNewValue = function(newValue) {
    var oldValue = this.value;
    this.value = newValue, this.reportChanged(), hasListeners(this) && notifyListeners(this, { type: "update", object: this, newValue, oldValue });
  }, ObservableValue2.prototype.get = function() {
    return this.reportObserved(), this.dehanceValue(this.value);
  }, ObservableValue2.prototype.intercept = function(handler2) {
    return registerInterceptor(this, handler2);
  }, ObservableValue2.prototype.observe = function(listener, fireImmediately) {
    return fireImmediately && listener({ object: this, type: "update", newValue: this.value, oldValue: void 0 }), registerListener(this, listener);
  }, ObservableValue2.prototype.toJSON = function() {
    return this.get();
  }, ObservableValue2.prototype.toString = function() {
    return this.name + "[" + this.value + "]";
  }, ObservableValue2.prototype.valueOf = function() {
    return toPrimitive(this.get());
  }, ObservableValue2.prototype[Symbol.toPrimitive] = function() {
    return this.valueOf();
  }, ObservableValue2;
}(Atom);
createInstanceofPredicate("ObservableValue", ObservableValue);
var ComputedValue = function() {
  function ComputedValue2(options) {
    this.dependenciesState = IDerivationState.NOT_TRACKING, this.observing = [], this.newObserving = null, this.isBeingObserved = false, this.isPendingUnobservation = false, this.observers = /* @__PURE__ */ new Set(), this.diffValue = 0, this.runId = 0, this.lastAccessedBy = 0, this.lowestObserverState = IDerivationState.UP_TO_DATE, this.unboundDepsCount = 0, this.__mapid = "#" + getNextId(), this.value = new CaughtException(null), this.isComputing = false, this.isRunningSetter = false, this.isTracing = TraceMode.NONE, invariant(options.get, "missing option for computed: get"), this.derivation = options.get, this.name = options.name || "ComputedValue@" + getNextId(), options.set && (this.setter = createAction(this.name + "-setter", options.set)), this.equals = options.equals || (options.compareStructural || options.struct ? comparer.structural : comparer.default), this.scope = options.context, this.requiresReaction = !!options.requiresReaction, this.keepAlive = !!options.keepAlive;
  }
  return ComputedValue2.prototype.onBecomeStale = function() {
    !function(observable2) {
      if (observable2.lowestObserverState !== IDerivationState.UP_TO_DATE)
        return;
      observable2.lowestObserverState = IDerivationState.POSSIBLY_STALE, observable2.observers.forEach(function(d) {
        d.dependenciesState === IDerivationState.UP_TO_DATE && (d.dependenciesState = IDerivationState.POSSIBLY_STALE, d.isTracing !== TraceMode.NONE && logTraceInfo(d, observable2), d.onBecomeStale());
      });
    }(this);
  }, ComputedValue2.prototype.onBecomeObserved = function() {
    this.onBecomeObservedListeners && this.onBecomeObservedListeners.forEach(function(listener) {
      return listener();
    });
  }, ComputedValue2.prototype.onBecomeUnobserved = function() {
    this.onBecomeUnobservedListeners && this.onBecomeUnobservedListeners.forEach(function(listener) {
      return listener();
    });
  }, ComputedValue2.prototype.get = function() {
    this.isComputing && fail("Cycle detected in computation " + this.name + ": " + this.derivation), 0 !== globalState.inBatch || 0 !== this.observers.size || this.keepAlive ? (reportObserved(this), shouldCompute(this) && this.trackAndCompute() && function(observable2) {
      if (observable2.lowestObserverState === IDerivationState.STALE)
        return;
      observable2.lowestObserverState = IDerivationState.STALE, observable2.observers.forEach(function(d) {
        d.dependenciesState === IDerivationState.POSSIBLY_STALE ? d.dependenciesState = IDerivationState.STALE : d.dependenciesState === IDerivationState.UP_TO_DATE && (observable2.lowestObserverState = IDerivationState.UP_TO_DATE);
      });
    }(this)) : shouldCompute(this) && (this.warnAboutUntrackedRead(), startBatch(), this.value = this.computeValue(false), endBatch());
    var result = this.value;
    if (isCaughtException(result))
      throw result.cause;
    return result;
  }, ComputedValue2.prototype.peek = function() {
    var res = this.computeValue(false);
    if (isCaughtException(res))
      throw res.cause;
    return res;
  }, ComputedValue2.prototype.set = function(value) {
    if (this.setter) {
      invariant(!this.isRunningSetter, "The setter of computed value '" + this.name + "' is trying to update itself. Did you intend to update an _observable_ value, instead of the computed property?"), this.isRunningSetter = true;
      try {
        this.setter.call(this.scope, value);
      } finally {
        this.isRunningSetter = false;
      }
    } else
      invariant(false, false);
  }, ComputedValue2.prototype.trackAndCompute = function() {
    var oldValue = this.value, wasSuspended = this.dependenciesState === IDerivationState.NOT_TRACKING, newValue = this.computeValue(true), changed = wasSuspended || isCaughtException(oldValue) || isCaughtException(newValue) || !this.equals(oldValue, newValue);
    return changed && (this.value = newValue), changed;
  }, ComputedValue2.prototype.computeValue = function(track) {
    var res;
    if (this.isComputing = true, globalState.computationDepth++, track)
      res = trackDerivedFunction(this, this.derivation, this.scope);
    else if (true === globalState.disableErrorBoundaries)
      res = this.derivation.call(this.scope);
    else
      try {
        res = this.derivation.call(this.scope);
      } catch (e) {
        res = new CaughtException(e);
      }
    return globalState.computationDepth--, this.isComputing = false, res;
  }, ComputedValue2.prototype.suspend = function() {
    this.keepAlive || (clearObserving(this), this.value = void 0);
  }, ComputedValue2.prototype.observe = function(listener, fireImmediately) {
    var _this = this, firstTime = true, prevValue = void 0;
    return autorun(function() {
      var newValue = _this.get();
      if (!firstTime || fireImmediately) {
        var prevU = untrackedStart();
        listener({ type: "update", object: _this, newValue, oldValue: prevValue }), untrackedEnd(prevU);
      }
      firstTime = false, prevValue = newValue;
    });
  }, ComputedValue2.prototype.warnAboutUntrackedRead = function() {
  }, ComputedValue2.prototype.toJSON = function() {
    return this.get();
  }, ComputedValue2.prototype.toString = function() {
    return this.name + "[" + this.derivation.toString() + "]";
  }, ComputedValue2.prototype.valueOf = function() {
    return toPrimitive(this.get());
  }, ComputedValue2.prototype[Symbol.toPrimitive] = function() {
    return this.valueOf();
  }, ComputedValue2;
}(), isComputedValue = createInstanceofPredicate("ComputedValue", ComputedValue), MobXGlobals = function() {
  this.version = 5, this.UNCHANGED = {}, this.trackingDerivation = null, this.computationDepth = 0, this.runId = 0, this.mobxGuid = 0, this.inBatch = 0, this.pendingUnobservations = [], this.pendingReactions = [], this.isRunningReactions = false, this.allowStateChanges = true, this.allowStateReads = true, this.enforceActions = false, this.spyListeners = [], this.globalReactionErrorHandlers = [], this.computedRequiresReaction = false, this.reactionRequiresObservable = false, this.observableRequiresReaction = false, this.computedConfigurable = false, this.disableErrorBoundaries = false, this.suppressReactionErrors = false;
}, mockGlobal = {};
function getGlobal() {
  return "undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self ? self : mockGlobal;
}
var canMergeGlobalState = true, isolateCalled = false, globalState = function() {
  var global2 = getGlobal();
  return global2.__mobxInstanceCount > 0 && !global2.__mobxGlobals && (canMergeGlobalState = false), global2.__mobxGlobals && global2.__mobxGlobals.version !== new MobXGlobals().version && (canMergeGlobalState = false), canMergeGlobalState ? global2.__mobxGlobals ? (global2.__mobxInstanceCount += 1, global2.__mobxGlobals.UNCHANGED || (global2.__mobxGlobals.UNCHANGED = {}), global2.__mobxGlobals) : (global2.__mobxInstanceCount = 1, global2.__mobxGlobals = new MobXGlobals()) : (setTimeout(function() {
    isolateCalled || fail("There are multiple, different versions of MobX active. Make sure MobX is loaded only once or use `configure({ isolateGlobalState: true })`");
  }, 1), new MobXGlobals());
}();
function getGlobalState() {
  return globalState;
}
function addObserver(observable2, node) {
  observable2.observers.add(node), observable2.lowestObserverState > node.dependenciesState && (observable2.lowestObserverState = node.dependenciesState);
}
function removeObserver(observable2, node) {
  observable2.observers.delete(node), 0 === observable2.observers.size && queueForUnobservation(observable2);
}
function queueForUnobservation(observable2) {
  false === observable2.isPendingUnobservation && (observable2.isPendingUnobservation = true, globalState.pendingUnobservations.push(observable2));
}
function startBatch() {
  globalState.inBatch++;
}
function endBatch() {
  if (0 == --globalState.inBatch) {
    runReactions();
    for (var list = globalState.pendingUnobservations, i = 0; i < list.length; i++) {
      var observable2 = list[i];
      observable2.isPendingUnobservation = false, 0 === observable2.observers.size && (observable2.isBeingObserved && (observable2.isBeingObserved = false, observable2.onBecomeUnobserved()), observable2 instanceof ComputedValue && observable2.suspend());
    }
    globalState.pendingUnobservations = [];
  }
}
function reportObserved(observable2) {
  var derivation = globalState.trackingDerivation;
  return null !== derivation ? (derivation.runId !== observable2.lastAccessedBy && (observable2.lastAccessedBy = derivation.runId, derivation.newObserving[derivation.unboundDepsCount++] = observable2, observable2.isBeingObserved || (observable2.isBeingObserved = true, observable2.onBecomeObserved())), true) : (0 === observable2.observers.size && globalState.inBatch > 0 && queueForUnobservation(observable2), false);
}
function logTraceInfo(derivation, observable2) {
  if (console.log("[mobx.trace] '" + derivation.name + "' is invalidated due to a change in: '" + observable2.name + "'"), derivation.isTracing === TraceMode.BREAK) {
    var lines = [];
    printDepTree(nodeToDependencyTree(getAtom(derivation, property)), lines, 1), new Function("debugger;\n/*\nTracing '" + derivation.name + "'\n\nYou are entering this break point because derivation '" + derivation.name + "' is being traced and '" + observable2.name + "' is now forcing it to update.\nJust follow the stacktrace you should now see in the devtools to see precisely what piece of your code is causing this update\nThe stackframe you are looking for is at least ~6-8 stack-frames up.\n\n" + (derivation instanceof ComputedValue ? derivation.derivation.toString().replace(/[*]\//g, "/") : "") + "\n\nThe dependencies for this derivation are:\n\n" + lines.join("\n") + "\n*/\n    ")();
  }
  var property;
}
function printDepTree(tree, lines, depth) {
  lines.length >= 1e3 ? lines.push("(and many more)") : (lines.push("" + new Array(depth).join("	") + tree.name), tree.dependencies && tree.dependencies.forEach(function(child) {
    return printDepTree(child, lines, depth + 1);
  }));
}
var Reaction = function() {
  function Reaction2(name, onInvalidate, errorHandler, requiresObservable) {
    void 0 === name && (name = "Reaction@" + getNextId()), void 0 === requiresObservable && (requiresObservable = false), this.name = name, this.onInvalidate = onInvalidate, this.errorHandler = errorHandler, this.requiresObservable = requiresObservable, this.observing = [], this.newObserving = [], this.dependenciesState = IDerivationState.NOT_TRACKING, this.diffValue = 0, this.runId = 0, this.unboundDepsCount = 0, this.__mapid = "#" + getNextId(), this.isDisposed = false, this._isScheduled = false, this._isTrackPending = false, this._isRunning = false, this.isTracing = TraceMode.NONE;
  }
  return Reaction2.prototype.onBecomeStale = function() {
    this.schedule();
  }, Reaction2.prototype.schedule = function() {
    this._isScheduled || (this._isScheduled = true, globalState.pendingReactions.push(this), runReactions());
  }, Reaction2.prototype.isScheduled = function() {
    return this._isScheduled;
  }, Reaction2.prototype.runReaction = function() {
    if (!this.isDisposed) {
      if (startBatch(), this._isScheduled = false, shouldCompute(this)) {
        this._isTrackPending = true;
        try {
          this.onInvalidate(), this._isTrackPending;
        } catch (e) {
          this.reportExceptionInDerivation(e);
        }
      }
      endBatch();
    }
  }, Reaction2.prototype.track = function(fn) {
    if (!this.isDisposed) {
      startBatch(), this._isRunning = true;
      var result = trackDerivedFunction(this, fn, void 0);
      this._isRunning = false, this._isTrackPending = false, this.isDisposed && clearObserving(this), isCaughtException(result) && this.reportExceptionInDerivation(result.cause), endBatch();
    }
  }, Reaction2.prototype.reportExceptionInDerivation = function(error) {
    var _this = this;
    if (this.errorHandler)
      this.errorHandler(error, this);
    else {
      if (globalState.disableErrorBoundaries)
        throw error;
      var message = "[mobx] Encountered an uncaught exception that was thrown by a reaction or observer component, in: '" + this + "'";
      globalState.suppressReactionErrors ? console.warn("[mobx] (error in reaction '" + this.name + "' suppressed, fix error of causing action below)") : console.error(message, error), globalState.globalReactionErrorHandlers.forEach(function(f) {
        return f(error, _this);
      });
    }
  }, Reaction2.prototype.dispose = function() {
    this.isDisposed || (this.isDisposed = true, this._isRunning || (startBatch(), clearObserving(this), endBatch()));
  }, Reaction2.prototype.getDisposer = function() {
    var r = this.dispose.bind(this);
    return r[$mobx] = this, r;
  }, Reaction2.prototype.toString = function() {
    return "Reaction[" + this.name + "]";
  }, Reaction2.prototype.trace = function(enterBreakPoint) {
    void 0 === enterBreakPoint && (enterBreakPoint = false), function() {
      for (var args = [], _i = 0; _i < arguments.length; _i++)
        args[_i] = arguments[_i];
      var enterBreakPoint2 = false;
      "boolean" == typeof args[args.length - 1] && (enterBreakPoint2 = args.pop());
      var derivation = function(args2) {
        switch (args2.length) {
          case 0:
            return globalState.trackingDerivation;
          case 1:
            return getAtom(args2[0]);
          case 2:
            return getAtom(args2[0], args2[1]);
        }
      }(args);
      if (!derivation)
        return fail(false);
      derivation.isTracing === TraceMode.NONE && console.log("[mobx.trace] '" + derivation.name + "' tracing enabled");
      derivation.isTracing = enterBreakPoint2 ? TraceMode.BREAK : TraceMode.LOG;
    }(this, enterBreakPoint);
  }, Reaction2;
}(), MAX_REACTION_ITERATIONS = 100, reactionScheduler = function(f) {
  return f();
};
function runReactions() {
  globalState.inBatch > 0 || globalState.isRunningReactions || reactionScheduler(runReactionsHelper);
}
function runReactionsHelper() {
  globalState.isRunningReactions = true;
  for (var allReactions = globalState.pendingReactions, iterations = 0; allReactions.length > 0; ) {
    ++iterations === MAX_REACTION_ITERATIONS && (console.error("Reaction doesn't converge to a stable state after " + MAX_REACTION_ITERATIONS + " iterations. Probably there is a cycle in the reactive function: " + allReactions[0]), allReactions.splice(0));
    for (var remainingReactions = allReactions.splice(0), i = 0, l = remainingReactions.length; i < l; i++)
      remainingReactions[i].runReaction();
  }
  globalState.isRunningReactions = false;
}
var isReaction = createInstanceofPredicate("Reaction", Reaction);
function setReactionScheduler(fn) {
  var baseScheduler = reactionScheduler;
  reactionScheduler = function(f) {
    return fn(function() {
      return baseScheduler(f);
    });
  };
}
function dontReassignFields() {
  fail(false);
}
function namedActionDecorator(name) {
  return function(target, prop, descriptor) {
    if (descriptor) {
      if (descriptor.value)
        return { value: createAction(name, descriptor.value), enumerable: false, configurable: true, writable: true };
      var initializer_1 = descriptor.initializer;
      return { enumerable: false, configurable: true, writable: true, initializer: function() {
        return createAction(name, initializer_1.call(this));
      } };
    }
    return (/* @__PURE__ */ function(name2) {
      return function(target2, prop2, descriptor2) {
        Object.defineProperty(target2, prop2, { configurable: true, enumerable: false, get: function() {
        }, set: function(value) {
          addHiddenProp(this, prop2, action(name2, value));
        } });
      };
    }(name)).apply(this, arguments);
  };
}
var action = function(arg1, arg2, arg3, arg4) {
  return 1 === arguments.length && "function" == typeof arg1 ? createAction(arg1.name || "<unnamed action>", arg1) : 2 === arguments.length && "function" == typeof arg2 ? createAction(arg1, arg2) : 1 === arguments.length && "string" == typeof arg1 ? namedActionDecorator(arg1) : true !== arg4 ? namedActionDecorator(arg2).apply(null, arguments) : void addHiddenProp(arg1, arg2, createAction(arg1.name || arg2, arg3.value, this));
};
function runInAction(arg1, arg2) {
  "string" == typeof arg1 || arg1.name;
  return executeAction$2(0, "function" == typeof arg1 ? arg1 : arg2, this, void 0);
}
function defineBoundAction(target, propertyName, fn) {
  addHiddenProp(target, propertyName, createAction(propertyName, fn.bind(target)));
}
function autorun(view, opts) {
  void 0 === opts && (opts = EMPTY_OBJECT);
  var reaction2, name = opts && opts.name || view.name || "Autorun@" + getNextId();
  if (!opts.scheduler && !opts.delay)
    reaction2 = new Reaction(name, function() {
      this.track(reactionRunner);
    }, opts.onError, opts.requiresObservable);
  else {
    var scheduler_1 = createSchedulerFromOptions(opts), isScheduled_1 = false;
    reaction2 = new Reaction(name, function() {
      isScheduled_1 || (isScheduled_1 = true, scheduler_1(function() {
        isScheduled_1 = false, reaction2.isDisposed || reaction2.track(reactionRunner);
      }));
    }, opts.onError, opts.requiresObservable);
  }
  function reactionRunner() {
    view(reaction2);
  }
  return reaction2.schedule(), reaction2.getDisposer();
}
action.bound = function(target, propertyName, descriptor, applyToInstance) {
  return true === applyToInstance ? (defineBoundAction(target, propertyName, descriptor.value), null) : descriptor ? { configurable: true, enumerable: false, get: function() {
    return defineBoundAction(this, propertyName, descriptor.value || descriptor.initializer.call(this)), this[propertyName];
  }, set: dontReassignFields } : { enumerable: false, configurable: true, set: function(v) {
    defineBoundAction(this, propertyName, v);
  }, get: function() {
  } };
};
var run = function(f) {
  return f();
};
function createSchedulerFromOptions(opts) {
  return opts.scheduler ? opts.scheduler : opts.delay ? function(f) {
    return setTimeout(f, opts.delay);
  } : run;
}
function reaction(expression, effect, opts) {
  void 0 === opts && (opts = EMPTY_OBJECT);
  var errorHandler, baseFn, value, name = opts.name || "Reaction@" + getNextId(), effectAction = action(name, opts.onError ? (errorHandler = opts.onError, baseFn = effect, function() {
    try {
      return baseFn.apply(this, arguments);
    } catch (e) {
      errorHandler.call(this, e);
    }
  }) : effect), runSync = !opts.scheduler && !opts.delay, scheduler = createSchedulerFromOptions(opts), firstTime = true, isScheduled = false, equals = opts.compareStructural ? comparer.structural : opts.equals || comparer.default, r = new Reaction(name, function() {
    firstTime || runSync ? reactionRunner() : isScheduled || (isScheduled = true, scheduler(reactionRunner));
  }, opts.onError, opts.requiresObservable);
  function reactionRunner() {
    if (isScheduled = false, !r.isDisposed) {
      var changed = false;
      r.track(function() {
        var nextValue = expression(r);
        changed = firstTime || !equals(value, nextValue), value = nextValue;
      }), firstTime && opts.fireImmediately && effectAction(value, r), firstTime || true !== changed || effectAction(value, r), firstTime && (firstTime = false);
    }
  }
  return r.schedule(), r.getDisposer();
}
function onBecomeUnobserved(thing, arg2, arg3) {
  return interceptHook("onBecomeUnobserved", thing, arg2);
}
function interceptHook(hook, thing, arg2, arg3) {
  var atom = getAtom(thing), cb = arg2, listenersKey = hook + "Listeners";
  return atom[listenersKey] ? atom[listenersKey].add(cb) : atom[listenersKey] = /* @__PURE__ */ new Set([cb]), "function" != typeof atom[hook] ? fail(false) : function() {
    var hookListeners = atom[listenersKey];
    hookListeners && (hookListeners.delete(cb), 0 === hookListeners.size && delete atom[listenersKey]);
  };
}
function configure(options) {
  var enforceActions = options.enforceActions, computedRequiresReaction = options.computedRequiresReaction, computedConfigurable = options.computedConfigurable, disableErrorBoundaries = options.disableErrorBoundaries, reactionScheduler2 = options.reactionScheduler, reactionRequiresObservable = options.reactionRequiresObservable, observableRequiresReaction = options.observableRequiresReaction;
  if (true === options.isolateGlobalState && ((globalState.pendingReactions.length || globalState.inBatch || globalState.isRunningReactions) && fail("isolateGlobalState should be called before MobX is running any reactions"), isolateCalled = true, canMergeGlobalState && (0 == --getGlobal().__mobxInstanceCount && (getGlobal().__mobxGlobals = void 0), globalState = new MobXGlobals())), void 0 !== enforceActions) {
    var ea = void 0;
    switch (enforceActions) {
      case true:
      case "observed":
        ea = true;
        break;
      case false:
      case "never":
        ea = false;
        break;
      case "strict":
      case "always":
        ea = "strict";
        break;
      default:
        fail("Invalid value for 'enforceActions': '" + enforceActions + "', expected 'never', 'always' or 'observed'");
    }
    globalState.enforceActions = ea, globalState.allowStateChanges = true !== ea && "strict" !== ea;
  }
  void 0 !== computedRequiresReaction && (globalState.computedRequiresReaction = !!computedRequiresReaction), void 0 !== reactionRequiresObservable && (globalState.reactionRequiresObservable = !!reactionRequiresObservable), void 0 !== observableRequiresReaction && (globalState.observableRequiresReaction = !!observableRequiresReaction, globalState.allowStateReads = !globalState.observableRequiresReaction), void 0 !== computedConfigurable && (globalState.computedConfigurable = !!computedConfigurable), void 0 !== disableErrorBoundaries && (true === disableErrorBoundaries && console.warn("WARNING: Debug feature only. MobX will NOT recover from errors when `disableErrorBoundaries` is enabled."), globalState.disableErrorBoundaries = !!disableErrorBoundaries), reactionScheduler2 && setReactionScheduler(reactionScheduler2);
}
function extendObservable(target, properties, decorators, options) {
  var defaultDecorator = getDefaultDecoratorFromObjectOptions(options = asCreateObservableOptions(options));
  return initializeInstance(target), asObservableObject(target, options.name, defaultDecorator.enhancer), properties && extendObservableObjectWithProperties(target, properties, decorators, defaultDecorator), target;
}
function getDefaultDecoratorFromObjectOptions(options) {
  return options.defaultDecorator || (false === options.deep ? refDecorator : deepDecorator);
}
function extendObservableObjectWithProperties(target, properties, decorators, defaultDecorator) {
  var e_2, _b;
  startBatch();
  try {
    var keys = ownKeys(properties);
    try {
      for (var keys_2 = __values(keys), keys_2_1 = keys_2.next(); !keys_2_1.done; keys_2_1 = keys_2.next()) {
        var key = keys_2_1.value, descriptor = Object.getOwnPropertyDescriptor(properties, key);
        0;
        var decorator = decorators && key in decorators ? decorators[key] : descriptor.get ? computedDecorator : defaultDecorator;
        0;
        var resultDescriptor = decorator(target, key, descriptor, true);
        resultDescriptor && Object.defineProperty(target, key, resultDescriptor);
      }
    } catch (e_2_1) {
      e_2 = { error: e_2_1 };
    } finally {
      try {
        keys_2_1 && !keys_2_1.done && (_b = keys_2.return) && _b.call(keys_2);
      } finally {
        if (e_2)
          throw e_2.error;
      }
    }
  } finally {
    endBatch();
  }
}
function nodeToDependencyTree(node) {
  var list, res, result = { name: node.name };
  return node.observing && node.observing.length > 0 && (result.dependencies = (list = node.observing, res = [], list.forEach(function(item) {
    -1 === res.indexOf(item) && res.push(item);
  }), res).map(nodeToDependencyTree)), result;
}
function isObservable(value) {
  return 1 !== arguments.length && fail(false), function(value2, property) {
    return null != value2 && (isObservableObject(value2) || !!value2[$mobx] || isAtom(value2) || isReaction(value2) || isComputedValue(value2));
  }(value);
}
function set$4(obj, key, value) {
  if (2 !== arguments.length || isObservableSet(obj))
    if (isObservableObject(obj)) {
      var adm = obj[$mobx];
      adm.values.get(key) ? adm.write(key, value) : adm.addObservableProp(key, value, adm.defaultEnhancer);
    } else if (isObservableMap(obj))
      obj.set(key, value);
    else if (isObservableSet(obj))
      obj.add(key);
    else {
      if (!isObservableArray(obj))
        return fail(false);
      "number" != typeof key && (key = parseInt(key, 10)), invariant(key >= 0, "Not a valid index: '" + key + "'"), startBatch(), key >= obj.length && (obj.length = key + 1), obj[key] = value, endBatch();
    }
  else {
    startBatch();
    var values_1 = key;
    try {
      for (var key_1 in values_1)
        set$4(obj, key_1, values_1[key_1]);
    } finally {
      endBatch();
    }
  }
}
function transaction(action2, thisArg) {
  void 0 === thisArg && (thisArg = void 0), startBatch();
  try {
    return action2.apply(thisArg);
  } finally {
    endBatch();
  }
}
function getAdm(target) {
  return target[$mobx];
}
function isPropertyKey(val) {
  return "string" == typeof val || "number" == typeof val || "symbol" == typeof val;
}
var objectProxyTraps = { has: function(target, name) {
  if (name === $mobx || "constructor" === name || name === mobxDidRunLazyInitializersSymbol)
    return true;
  var adm = getAdm(target);
  return isPropertyKey(name) ? adm.has(name) : name in target;
}, get: function(target, name) {
  if (name === $mobx || "constructor" === name || name === mobxDidRunLazyInitializersSymbol)
    return target[name];
  var adm = getAdm(target), observable2 = adm.values.get(name);
  if (observable2 instanceof Atom) {
    var result = observable2.get();
    return void 0 === result && adm.has(name), result;
  }
  return isPropertyKey(name) && adm.has(name), target[name];
}, set: function(target, name, value) {
  return !!isPropertyKey(name) && (set$4(target, name, value), true);
}, deleteProperty: function(target, name) {
  return !!isPropertyKey(name) && (getAdm(target).remove(name), true);
}, ownKeys: function(target) {
  return getAdm(target).keysAtom.reportObserved(), Reflect.ownKeys(target);
}, preventExtensions: function(target) {
  return fail("Dynamic observable objects cannot be frozen"), false;
} };
function hasInterceptors(interceptable) {
  return void 0 !== interceptable.interceptors && interceptable.interceptors.length > 0;
}
function registerInterceptor(interceptable, handler2) {
  var interceptors = interceptable.interceptors || (interceptable.interceptors = []);
  return interceptors.push(handler2), once(function() {
    var idx = interceptors.indexOf(handler2);
    -1 !== idx && interceptors.splice(idx, 1);
  });
}
function interceptChange(interceptable, change) {
  var prevU = untrackedStart();
  try {
    for (var interceptors = __spread(interceptable.interceptors || []), i = 0, l = interceptors.length; i < l && (invariant(!(change = interceptors[i](change)) || change.type, "Intercept handlers should return nothing or a change object"), change); i++)
      ;
    return change;
  } finally {
    untrackedEnd(prevU);
  }
}
function hasListeners(listenable) {
  return void 0 !== listenable.changeListeners && listenable.changeListeners.length > 0;
}
function registerListener(listenable, handler2) {
  var listeners = listenable.changeListeners || (listenable.changeListeners = []);
  return listeners.push(handler2), once(function() {
    var idx = listeners.indexOf(handler2);
    -1 !== idx && listeners.splice(idx, 1);
  });
}
function notifyListeners(listenable, change) {
  var prevU = untrackedStart(), listeners = listenable.changeListeners;
  if (listeners) {
    for (var i = 0, l = (listeners = listeners.slice()).length; i < l; i++)
      listeners[i](change);
    untrackedEnd(prevU);
  }
}
var arrayTraps = { get: function(target, name) {
  return name === $mobx ? target[$mobx] : "length" === name ? target[$mobx].getArrayLength() : "number" == typeof name ? arrayExtensions.get.call(target, name) : "string" != typeof name || isNaN(name) ? arrayExtensions.hasOwnProperty(name) ? arrayExtensions[name] : target[name] : arrayExtensions.get.call(target, parseInt(name));
}, set: function(target, name, value) {
  return "length" === name && target[$mobx].setArrayLength(value), "number" == typeof name && arrayExtensions.set.call(target, name, value), "symbol" == typeof name || isNaN(name) ? target[name] = value : arrayExtensions.set.call(target, parseInt(name), value), true;
}, preventExtensions: function(target) {
  return fail("Observable arrays cannot be frozen"), false;
} };
var ObservableArrayAdministration = function() {
  function ObservableArrayAdministration2(name, enhancer, owned) {
    this.owned = owned, this.values = [], this.proxy = void 0, this.lastKnownLength = 0, this.atom = new Atom(name || "ObservableArray@" + getNextId()), this.enhancer = function(newV, oldV) {
      return enhancer(newV, oldV, name + "[..]");
    };
  }
  return ObservableArrayAdministration2.prototype.dehanceValue = function(value) {
    return void 0 !== this.dehancer ? this.dehancer(value) : value;
  }, ObservableArrayAdministration2.prototype.dehanceValues = function(values) {
    return void 0 !== this.dehancer && values.length > 0 ? values.map(this.dehancer) : values;
  }, ObservableArrayAdministration2.prototype.intercept = function(handler2) {
    return registerInterceptor(this, handler2);
  }, ObservableArrayAdministration2.prototype.observe = function(listener, fireImmediately) {
    return void 0 === fireImmediately && (fireImmediately = false), fireImmediately && listener({ object: this.proxy, type: "splice", index: 0, added: this.values.slice(), addedCount: this.values.length, removed: [], removedCount: 0 }), registerListener(this, listener);
  }, ObservableArrayAdministration2.prototype.getArrayLength = function() {
    return this.atom.reportObserved(), this.values.length;
  }, ObservableArrayAdministration2.prototype.setArrayLength = function(newLength) {
    if ("number" != typeof newLength || newLength < 0)
      throw new Error("[mobx.array] Out of range: " + newLength);
    var currentLength = this.values.length;
    if (newLength !== currentLength)
      if (newLength > currentLength) {
        for (var newItems = new Array(newLength - currentLength), i = 0; i < newLength - currentLength; i++)
          newItems[i] = void 0;
        this.spliceWithArray(currentLength, 0, newItems);
      } else
        this.spliceWithArray(newLength, currentLength - newLength);
  }, ObservableArrayAdministration2.prototype.updateArrayLength = function(oldLength, delta) {
    if (oldLength !== this.lastKnownLength)
      throw new Error("[mobx] Modification exception: the internal structure of an observable array was changed.");
    this.lastKnownLength += delta;
  }, ObservableArrayAdministration2.prototype.spliceWithArray = function(index, deleteCount, newItems) {
    var _this = this;
    checkIfStateModificationsAreAllowed(this.atom);
    var length = this.values.length;
    if (void 0 === index ? index = 0 : index > length ? index = length : index < 0 && (index = Math.max(0, length + index)), deleteCount = 1 === arguments.length ? length - index : null == deleteCount ? 0 : Math.max(0, Math.min(deleteCount, length - index)), void 0 === newItems && (newItems = EMPTY_ARRAY), hasInterceptors(this)) {
      var change = interceptChange(this, { object: this.proxy, type: "splice", index, removedCount: deleteCount, added: newItems });
      if (!change)
        return EMPTY_ARRAY;
      deleteCount = change.removedCount, newItems = change.added;
    }
    newItems = 0 === newItems.length ? newItems : newItems.map(function(v) {
      return _this.enhancer(v, void 0);
    });
    var res = this.spliceItemsIntoValues(index, deleteCount, newItems);
    return 0 === deleteCount && 0 === newItems.length || this.notifyArraySplice(index, newItems, res), this.dehanceValues(res);
  }, ObservableArrayAdministration2.prototype.spliceItemsIntoValues = function(index, deleteCount, newItems) {
    var _a2;
    if (newItems.length < 1e4)
      return (_a2 = this.values).splice.apply(_a2, __spread([index, deleteCount], newItems));
    var res = this.values.slice(index, index + deleteCount);
    return this.values = this.values.slice(0, index).concat(newItems, this.values.slice(index + deleteCount)), res;
  }, ObservableArrayAdministration2.prototype.notifyArrayChildUpdate = function(index, newValue, oldValue) {
    var notifySpy = !this.owned && false, notify = hasListeners(this), change = notify || notifySpy ? { object: this.proxy, type: "update", index, newValue, oldValue } : null;
    this.atom.reportChanged(), notify && notifyListeners(this, change);
  }, ObservableArrayAdministration2.prototype.notifyArraySplice = function(index, added, removed) {
    var notifySpy = !this.owned && false, notify = hasListeners(this), change = notify || notifySpy ? { object: this.proxy, type: "splice", index, removed, added, removedCount: removed.length, addedCount: added.length } : null;
    this.atom.reportChanged(), notify && notifyListeners(this, change);
  }, ObservableArrayAdministration2;
}(), arrayExtensions = { intercept: function(handler2) {
  return this[$mobx].intercept(handler2);
}, observe: function(listener, fireImmediately) {
  return void 0 === fireImmediately && (fireImmediately = false), this[$mobx].observe(listener, fireImmediately);
}, clear: function() {
  return this.splice(0);
}, replace: function(newItems) {
  var adm = this[$mobx];
  return adm.spliceWithArray(0, adm.values.length, newItems);
}, toJS: function() {
  return this.slice();
}, toJSON: function() {
  return this.toJS();
}, splice: function(index, deleteCount) {
  for (var newItems = [], _i = 2; _i < arguments.length; _i++)
    newItems[_i - 2] = arguments[_i];
  var adm = this[$mobx];
  switch (arguments.length) {
    case 0:
      return [];
    case 1:
      return adm.spliceWithArray(index);
    case 2:
      return adm.spliceWithArray(index, deleteCount);
  }
  return adm.spliceWithArray(index, deleteCount, newItems);
}, spliceWithArray: function(index, deleteCount, newItems) {
  return this[$mobx].spliceWithArray(index, deleteCount, newItems);
}, push: function() {
  for (var items = [], _i = 0; _i < arguments.length; _i++)
    items[_i] = arguments[_i];
  var adm = this[$mobx];
  return adm.spliceWithArray(adm.values.length, 0, items), adm.values.length;
}, pop: function() {
  return this.splice(Math.max(this[$mobx].values.length - 1, 0), 1)[0];
}, shift: function() {
  return this.splice(0, 1)[0];
}, unshift: function() {
  for (var items = [], _i = 0; _i < arguments.length; _i++)
    items[_i] = arguments[_i];
  var adm = this[$mobx];
  return adm.spliceWithArray(0, 0, items), adm.values.length;
}, reverse: function() {
  var clone = this.slice();
  return clone.reverse.apply(clone, arguments);
}, sort: function(compareFn) {
  var clone = this.slice();
  return clone.sort.apply(clone, arguments);
}, remove: function(value) {
  var adm = this[$mobx], idx = adm.dehanceValues(adm.values).indexOf(value);
  return idx > -1 && (this.splice(idx, 1), true);
}, get: function(index) {
  var adm = this[$mobx];
  if (adm) {
    if (index < adm.values.length)
      return adm.atom.reportObserved(), adm.dehanceValue(adm.values[index]);
    console.warn("[mobx.array] Attempt to read an array index (" + index + ") that is out of bounds (" + adm.values.length + "). Please check length first. Out of bound indices will not be tracked by MobX");
  }
}, set: function(index, newValue) {
  var adm = this[$mobx], values = adm.values;
  if (index < values.length) {
    checkIfStateModificationsAreAllowed(adm.atom);
    var oldValue = values[index];
    if (hasInterceptors(adm)) {
      var change = interceptChange(adm, { type: "update", object: adm.proxy, index, newValue });
      if (!change)
        return;
      newValue = change.newValue;
    }
    (newValue = adm.enhancer(newValue, oldValue)) !== oldValue && (values[index] = newValue, adm.notifyArrayChildUpdate(index, newValue, oldValue));
  } else {
    if (index !== values.length)
      throw new Error("[mobx.array] Index out of bounds, " + index + " is larger than " + values.length);
    adm.spliceWithArray(index, 0, [newValue]);
  }
} };
["concat", "flat", "includes", "indexOf", "join", "lastIndexOf", "slice", "toString", "toLocaleString"].forEach(function(funcName) {
  "function" == typeof Array.prototype[funcName] && (arrayExtensions[funcName] = function() {
    var adm = this[$mobx];
    adm.atom.reportObserved();
    var dehancedValues = adm.dehanceValues(adm.values);
    return dehancedValues[funcName].apply(dehancedValues, arguments);
  });
}), ["every", "filter", "find", "findIndex", "flatMap", "forEach", "map", "some"].forEach(function(funcName) {
  "function" == typeof Array.prototype[funcName] && (arrayExtensions[funcName] = function(callback, thisArg) {
    var _this = this, adm = this[$mobx];
    return adm.atom.reportObserved(), adm.dehanceValues(adm.values)[funcName](function(element, index) {
      return callback.call(thisArg, element, index, _this);
    }, thisArg);
  });
}), ["reduce", "reduceRight"].forEach(function(funcName) {
  arrayExtensions[funcName] = function() {
    var _this = this, adm = this[$mobx];
    adm.atom.reportObserved();
    var callback = arguments[0];
    return arguments[0] = function(accumulator, currentValue, index) {
      return currentValue = adm.dehanceValue(currentValue), callback(accumulator, currentValue, index, _this);
    }, adm.values[funcName].apply(adm.values, arguments);
  };
});
var _a, isObservableArrayAdministration = createInstanceofPredicate("ObservableArrayAdministration", ObservableArrayAdministration);
function isObservableArray(thing) {
  return isObject(thing) && isObservableArrayAdministration(thing[$mobx]);
}
var _a$1, ObservableMapMarker = {}, ObservableMap = function() {
  function ObservableMap2(initialData, enhancer, name) {
    if (void 0 === enhancer && (enhancer = deepEnhancer), void 0 === name && (name = "ObservableMap@" + getNextId()), this.enhancer = enhancer, this.name = name, this[_a] = ObservableMapMarker, this._keysAtom = createAtom(this.name + ".keys()"), this[Symbol.toStringTag] = "Map", "function" != typeof Map)
      throw new Error("mobx.map requires Map polyfill for the current browser. Check babel-polyfill or core-js/es6/map.js");
    this._data = /* @__PURE__ */ new Map(), this._hasMap = /* @__PURE__ */ new Map(), this.merge(initialData);
  }
  return ObservableMap2.prototype._has = function(key) {
    return this._data.has(key);
  }, ObservableMap2.prototype.has = function(key) {
    var _this = this;
    if (!globalState.trackingDerivation)
      return this._has(key);
    var entry = this._hasMap.get(key);
    if (!entry) {
      var newEntry = entry = new ObservableValue(this._has(key), referenceEnhancer, this.name + "." + stringifyKey(key) + "?", false);
      this._hasMap.set(key, newEntry), onBecomeUnobserved(newEntry, function() {
        return _this._hasMap.delete(key);
      });
    }
    return entry.get();
  }, ObservableMap2.prototype.set = function(key, value) {
    var hasKey = this._has(key);
    if (hasInterceptors(this)) {
      var change = interceptChange(this, { type: hasKey ? "update" : "add", object: this, newValue: value, name: key });
      if (!change)
        return this;
      value = change.newValue;
    }
    return hasKey ? this._updateValue(key, value) : this._addValue(key, value), this;
  }, ObservableMap2.prototype.delete = function(key) {
    var _this = this;
    if ((checkIfStateModificationsAreAllowed(this._keysAtom), hasInterceptors(this)) && !(change = interceptChange(this, { type: "delete", object: this, name: key })))
      return false;
    if (this._has(key)) {
      var notify = hasListeners(this), change = notify ? { type: "delete", object: this, oldValue: this._data.get(key).value, name: key } : null;
      return transaction(function() {
        _this._keysAtom.reportChanged(), _this._updateHasMapEntry(key, false), _this._data.get(key).setNewValue(void 0), _this._data.delete(key);
      }), notify && notifyListeners(this, change), true;
    }
    return false;
  }, ObservableMap2.prototype._updateHasMapEntry = function(key, value) {
    var entry = this._hasMap.get(key);
    entry && entry.setNewValue(value);
  }, ObservableMap2.prototype._updateValue = function(key, newValue) {
    var observable2 = this._data.get(key);
    if ((newValue = observable2.prepareNewValue(newValue)) !== globalState.UNCHANGED) {
      var notify = hasListeners(this), change = notify ? { type: "update", object: this, oldValue: observable2.value, name: key, newValue } : null;
      false, observable2.setNewValue(newValue), notify && notifyListeners(this, change);
    }
  }, ObservableMap2.prototype._addValue = function(key, newValue) {
    var _this = this;
    checkIfStateModificationsAreAllowed(this._keysAtom), transaction(function() {
      var observable2 = new ObservableValue(newValue, _this.enhancer, _this.name + "." + stringifyKey(key), false);
      _this._data.set(key, observable2), newValue = observable2.value, _this._updateHasMapEntry(key, true), _this._keysAtom.reportChanged();
    });
    var notify = hasListeners(this);
    notify && notifyListeners(this, notify ? { type: "add", object: this, name: key, newValue } : null);
  }, ObservableMap2.prototype.get = function(key) {
    return this.has(key) ? this.dehanceValue(this._data.get(key).get()) : this.dehanceValue(void 0);
  }, ObservableMap2.prototype.dehanceValue = function(value) {
    return void 0 !== this.dehancer ? this.dehancer(value) : value;
  }, ObservableMap2.prototype.keys = function() {
    return this._keysAtom.reportObserved(), this._data.keys();
  }, ObservableMap2.prototype.values = function() {
    var self2 = this, keys = this.keys();
    return makeIterable({ next: function() {
      var _b = keys.next(), done = _b.done, value = _b.value;
      return { done, value: done ? void 0 : self2.get(value) };
    } });
  }, ObservableMap2.prototype.entries = function() {
    var self2 = this, keys = this.keys();
    return makeIterable({ next: function() {
      var _b = keys.next(), done = _b.done, value = _b.value;
      return { done, value: done ? void 0 : [value, self2.get(value)] };
    } });
  }, ObservableMap2.prototype[_a = $mobx, Symbol.iterator] = function() {
    return this.entries();
  }, ObservableMap2.prototype.forEach = function(callback, thisArg) {
    var e_1, _b;
    try {
      for (var _c = __values(this), _d = _c.next(); !_d.done; _d = _c.next()) {
        var _e = __read(_d.value, 2), key = _e[0], value = _e[1];
        callback.call(thisArg, value, key, this);
      }
    } catch (e_1_1) {
      e_1 = { error: e_1_1 };
    } finally {
      try {
        _d && !_d.done && (_b = _c.return) && _b.call(_c);
      } finally {
        if (e_1)
          throw e_1.error;
      }
    }
  }, ObservableMap2.prototype.merge = function(other) {
    var _this = this;
    return isObservableMap(other) && (other = other.toJS()), transaction(function() {
      var prev = allowStateChangesStart(true);
      try {
        isPlainObject(other) ? function(object) {
          var enumerables = /* @__PURE__ */ new Set();
          for (var key in object)
            enumerables.add(key);
          return Object.getOwnPropertySymbols(object).forEach(function(k) {
            Object.getOwnPropertyDescriptor(object, k).enumerable && enumerables.add(k);
          }), Array.from(enumerables);
        }(other).forEach(function(key) {
          return _this.set(key, other[key]);
        }) : Array.isArray(other) ? other.forEach(function(_b) {
          var _c = __read(_b, 2), key = _c[0], value = _c[1];
          return _this.set(key, value);
        }) : isES6Map(other) ? (other.constructor !== Map && fail("Cannot initialize from classes that inherit from Map: " + other.constructor.name), other.forEach(function(value, key) {
          return _this.set(key, value);
        })) : null != other && fail("Cannot initialize map from " + other);
      } finally {
        allowStateChangesEnd(prev);
      }
    }), this;
  }, ObservableMap2.prototype.clear = function() {
    var _this = this;
    transaction(function() {
      untracked(function() {
        var e_2, _b;
        try {
          for (var _c = __values(_this.keys()), _d = _c.next(); !_d.done; _d = _c.next()) {
            var key = _d.value;
            _this.delete(key);
          }
        } catch (e_2_1) {
          e_2 = { error: e_2_1 };
        } finally {
          try {
            _d && !_d.done && (_b = _c.return) && _b.call(_c);
          } finally {
            if (e_2)
              throw e_2.error;
          }
        }
      });
    });
  }, ObservableMap2.prototype.replace = function(values) {
    var _this = this;
    return transaction(function() {
      var e_3, _b, e_4, _c, replacementMap = function(dataStructure) {
        if (isES6Map(dataStructure) || isObservableMap(dataStructure))
          return dataStructure;
        if (Array.isArray(dataStructure))
          return new Map(dataStructure);
        if (isPlainObject(dataStructure)) {
          var map = /* @__PURE__ */ new Map();
          for (var key2 in dataStructure)
            map.set(key2, dataStructure[key2]);
          return map;
        }
        return fail("Cannot convert to map from '" + dataStructure + "'");
      }(values), orderedData = /* @__PURE__ */ new Map(), keysReportChangedCalled = false;
      try {
        for (var _d = __values(_this._data.keys()), _e = _d.next(); !_e.done; _e = _d.next()) {
          var key = _e.value;
          if (!replacementMap.has(key))
            if (_this.delete(key))
              keysReportChangedCalled = true;
            else {
              var value = _this._data.get(key);
              orderedData.set(key, value);
            }
        }
      } catch (e_3_1) {
        e_3 = { error: e_3_1 };
      } finally {
        try {
          _e && !_e.done && (_b = _d.return) && _b.call(_d);
        } finally {
          if (e_3)
            throw e_3.error;
        }
      }
      try {
        for (var _f = __values(replacementMap.entries()), _g = _f.next(); !_g.done; _g = _f.next()) {
          var _h = __read(_g.value, 2), keyExisted = (key = _h[0], value = _h[1], _this._data.has(key));
          if (_this.set(key, value), _this._data.has(key)) {
            var value_1 = _this._data.get(key);
            orderedData.set(key, value_1), keyExisted || (keysReportChangedCalled = true);
          }
        }
      } catch (e_4_1) {
        e_4 = { error: e_4_1 };
      } finally {
        try {
          _g && !_g.done && (_c = _f.return) && _c.call(_f);
        } finally {
          if (e_4)
            throw e_4.error;
        }
      }
      if (!keysReportChangedCalled)
        if (_this._data.size !== orderedData.size)
          _this._keysAtom.reportChanged();
        else
          for (var iter1 = _this._data.keys(), iter2 = orderedData.keys(), next1 = iter1.next(), next2 = iter2.next(); !next1.done; ) {
            if (next1.value !== next2.value) {
              _this._keysAtom.reportChanged();
              break;
            }
            next1 = iter1.next(), next2 = iter2.next();
          }
      _this._data = orderedData;
    }), this;
  }, Object.defineProperty(ObservableMap2.prototype, "size", { get: function() {
    return this._keysAtom.reportObserved(), this._data.size;
  }, enumerable: true, configurable: true }), ObservableMap2.prototype.toPOJO = function() {
    var e_5, _b, res = {};
    try {
      for (var _c = __values(this), _d = _c.next(); !_d.done; _d = _c.next()) {
        var _e = __read(_d.value, 2), key = _e[0], value = _e[1];
        res["symbol" == typeof key ? key : stringifyKey(key)] = value;
      }
    } catch (e_5_1) {
      e_5 = { error: e_5_1 };
    } finally {
      try {
        _d && !_d.done && (_b = _c.return) && _b.call(_c);
      } finally {
        if (e_5)
          throw e_5.error;
      }
    }
    return res;
  }, ObservableMap2.prototype.toJS = function() {
    return new Map(this);
  }, ObservableMap2.prototype.toJSON = function() {
    return this.toPOJO();
  }, ObservableMap2.prototype.toString = function() {
    var _this = this;
    return this.name + "[{ " + Array.from(this.keys()).map(function(key) {
      return stringifyKey(key) + ": " + _this.get(key);
    }).join(", ") + " }]";
  }, ObservableMap2.prototype.observe = function(listener, fireImmediately) {
    return registerListener(this, listener);
  }, ObservableMap2.prototype.intercept = function(handler2) {
    return registerInterceptor(this, handler2);
  }, ObservableMap2;
}(), isObservableMap = createInstanceofPredicate("ObservableMap", ObservableMap), ObservableSetMarker = {}, ObservableSet = function() {
  function ObservableSet2(initialData, enhancer, name) {
    if (void 0 === enhancer && (enhancer = deepEnhancer), void 0 === name && (name = "ObservableSet@" + getNextId()), this.name = name, this[_a$1] = ObservableSetMarker, this._data = /* @__PURE__ */ new Set(), this._atom = createAtom(this.name), this[Symbol.toStringTag] = "Set", "function" != typeof Set)
      throw new Error("mobx.set requires Set polyfill for the current browser. Check babel-polyfill or core-js/es6/set.js");
    this.enhancer = function(newV, oldV) {
      return enhancer(newV, oldV, name);
    }, initialData && this.replace(initialData);
  }
  return ObservableSet2.prototype.dehanceValue = function(value) {
    return void 0 !== this.dehancer ? this.dehancer(value) : value;
  }, ObservableSet2.prototype.clear = function() {
    var _this = this;
    transaction(function() {
      untracked(function() {
        var e_1, _b;
        try {
          for (var _c = __values(_this._data.values()), _d = _c.next(); !_d.done; _d = _c.next()) {
            var value = _d.value;
            _this.delete(value);
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            _d && !_d.done && (_b = _c.return) && _b.call(_c);
          } finally {
            if (e_1)
              throw e_1.error;
          }
        }
      });
    });
  }, ObservableSet2.prototype.forEach = function(callbackFn, thisArg) {
    var e_2, _b;
    try {
      for (var _c = __values(this), _d = _c.next(); !_d.done; _d = _c.next()) {
        var value = _d.value;
        callbackFn.call(thisArg, value, value, this);
      }
    } catch (e_2_1) {
      e_2 = { error: e_2_1 };
    } finally {
      try {
        _d && !_d.done && (_b = _c.return) && _b.call(_c);
      } finally {
        if (e_2)
          throw e_2.error;
      }
    }
  }, Object.defineProperty(ObservableSet2.prototype, "size", { get: function() {
    return this._atom.reportObserved(), this._data.size;
  }, enumerable: true, configurable: true }), ObservableSet2.prototype.add = function(value) {
    var _this = this;
    if ((checkIfStateModificationsAreAllowed(this._atom), hasInterceptors(this)) && !(change = interceptChange(this, { type: "add", object: this, newValue: value })))
      return this;
    if (!this.has(value)) {
      transaction(function() {
        _this._data.add(_this.enhancer(value, void 0)), _this._atom.reportChanged();
      });
      var notify = hasListeners(this), change = notify ? { type: "add", object: this, newValue: value } : null;
      notify && notifyListeners(this, change);
    }
    return this;
  }, ObservableSet2.prototype.delete = function(value) {
    var _this = this;
    if (hasInterceptors(this) && !(change = interceptChange(this, { type: "delete", object: this, oldValue: value })))
      return false;
    if (this.has(value)) {
      var notify = hasListeners(this), change = notify ? { type: "delete", object: this, oldValue: value } : null;
      return transaction(function() {
        _this._atom.reportChanged(), _this._data.delete(value);
      }), notify && notifyListeners(this, change), true;
    }
    return false;
  }, ObservableSet2.prototype.has = function(value) {
    return this._atom.reportObserved(), this._data.has(this.dehanceValue(value));
  }, ObservableSet2.prototype.entries = function() {
    var nextIndex = 0, keys = Array.from(this.keys()), values = Array.from(this.values());
    return makeIterable({ next: function() {
      var index = nextIndex;
      return nextIndex += 1, index < values.length ? { value: [keys[index], values[index]], done: false } : { done: true };
    } });
  }, ObservableSet2.prototype.keys = function() {
    return this.values();
  }, ObservableSet2.prototype.values = function() {
    this._atom.reportObserved();
    var self2 = this, nextIndex = 0, observableValues = Array.from(this._data.values());
    return makeIterable({ next: function() {
      return nextIndex < observableValues.length ? { value: self2.dehanceValue(observableValues[nextIndex++]), done: false } : { done: true };
    } });
  }, ObservableSet2.prototype.replace = function(other) {
    var _this = this;
    return isObservableSet(other) && (other = other.toJS()), transaction(function() {
      var prev = allowStateChangesStart(true);
      try {
        Array.isArray(other) || isES6Set(other) ? (_this.clear(), other.forEach(function(value) {
          return _this.add(value);
        })) : null != other && fail("Cannot initialize set from " + other);
      } finally {
        allowStateChangesEnd(prev);
      }
    }), this;
  }, ObservableSet2.prototype.observe = function(listener, fireImmediately) {
    return registerListener(this, listener);
  }, ObservableSet2.prototype.intercept = function(handler2) {
    return registerInterceptor(this, handler2);
  }, ObservableSet2.prototype.toJS = function() {
    return new Set(this);
  }, ObservableSet2.prototype.toString = function() {
    return this.name + "[ " + Array.from(this).join(", ") + " ]";
  }, ObservableSet2.prototype[_a$1 = $mobx, Symbol.iterator] = function() {
    return this.values();
  }, ObservableSet2;
}(), isObservableSet = createInstanceofPredicate("ObservableSet", ObservableSet), ObservableObjectAdministration = function() {
  function ObservableObjectAdministration2(target, values, name, defaultEnhancer) {
    void 0 === values && (values = /* @__PURE__ */ new Map()), this.target = target, this.values = values, this.name = name, this.defaultEnhancer = defaultEnhancer, this.keysAtom = new Atom(name + ".keys");
  }
  return ObservableObjectAdministration2.prototype.read = function(key) {
    return this.values.get(key).get();
  }, ObservableObjectAdministration2.prototype.write = function(key, newValue) {
    var instance = this.target, observable2 = this.values.get(key);
    if (observable2 instanceof ComputedValue)
      observable2.set(newValue);
    else {
      if (hasInterceptors(this)) {
        if (!(change = interceptChange(this, { type: "update", object: this.proxy || instance, name: key, newValue })))
          return;
        newValue = change.newValue;
      }
      if ((newValue = observable2.prepareNewValue(newValue)) !== globalState.UNCHANGED) {
        var notify = hasListeners(this), change = notify ? { type: "update", object: this.proxy || instance, oldValue: observable2.value, name: key, newValue } : null;
        false, observable2.setNewValue(newValue), notify && notifyListeners(this, change);
      }
    }
  }, ObservableObjectAdministration2.prototype.has = function(key) {
    var map = this.pendingKeys || (this.pendingKeys = /* @__PURE__ */ new Map()), entry = map.get(key);
    if (entry)
      return entry.get();
    var exists = !!this.values.get(key);
    return entry = new ObservableValue(exists, referenceEnhancer, this.name + "." + stringifyKey(key) + "?", false), map.set(key, entry), entry.get();
  }, ObservableObjectAdministration2.prototype.addObservableProp = function(propName, newValue, enhancer) {
    void 0 === enhancer && (enhancer = this.defaultEnhancer);
    var target = this.target;
    if (hasInterceptors(this)) {
      var change = interceptChange(this, { object: this.proxy || target, name: propName, type: "add", newValue });
      if (!change)
        return;
      newValue = change.newValue;
    }
    var observable2 = new ObservableValue(newValue, enhancer, this.name + "." + stringifyKey(propName), false);
    this.values.set(propName, observable2), newValue = observable2.value, Object.defineProperty(target, propName, function(propName2) {
      return observablePropertyConfigs[propName2] || (observablePropertyConfigs[propName2] = { configurable: true, enumerable: true, get: function() {
        return this[$mobx].read(propName2);
      }, set: function(v) {
        this[$mobx].write(propName2, v);
      } });
    }(propName)), this.notifyPropertyAddition(propName, newValue);
  }, ObservableObjectAdministration2.prototype.addComputedProp = function(propertyOwner, propName, options) {
    var object, prop, descriptor, target = this.target;
    options.name = options.name || this.name + "." + stringifyKey(propName), this.values.set(propName, new ComputedValue(options)), (propertyOwner === target || (object = propertyOwner, prop = propName, !(descriptor = Object.getOwnPropertyDescriptor(object, prop)) || false !== descriptor.configurable && false !== descriptor.writable)) && Object.defineProperty(propertyOwner, propName, function(propName2) {
      return computedPropertyConfigs[propName2] || (computedPropertyConfigs[propName2] = { configurable: globalState.computedConfigurable, enumerable: false, get: function() {
        return getAdministrationForComputedPropOwner(this).read(propName2);
      }, set: function(v) {
        getAdministrationForComputedPropOwner(this).write(propName2, v);
      } });
    }(propName));
  }, ObservableObjectAdministration2.prototype.remove = function(key) {
    if (this.values.has(key)) {
      var target = this.target;
      if (hasInterceptors(this)) {
        if (!(change = interceptChange(this, { object: this.proxy || target, name: key, type: "remove" })))
          return;
      }
      try {
        startBatch();
        var notify = hasListeners(this), oldObservable = this.values.get(key), oldValue = oldObservable && oldObservable.get();
        if (oldObservable && oldObservable.set(void 0), this.keysAtom.reportChanged(), this.values.delete(key), this.pendingKeys) {
          var entry = this.pendingKeys.get(key);
          entry && entry.set(false);
        }
        delete this.target[key];
        var change = notify ? { type: "remove", object: this.proxy || target, oldValue, name: key } : null;
        false, notify && notifyListeners(this, change);
      } finally {
        endBatch();
      }
    }
  }, ObservableObjectAdministration2.prototype.illegalAccess = function(owner, propName) {
    console.warn("Property '" + propName + "' of '" + owner + "' was accessed through the prototype chain. Use 'decorate' instead to declare the prop or access it statically through it's owner");
  }, ObservableObjectAdministration2.prototype.observe = function(callback, fireImmediately) {
    return registerListener(this, callback);
  }, ObservableObjectAdministration2.prototype.intercept = function(handler2) {
    return registerInterceptor(this, handler2);
  }, ObservableObjectAdministration2.prototype.notifyPropertyAddition = function(key, newValue) {
    var notify = hasListeners(this), change = notify ? { type: "add", object: this.proxy || this.target, name: key, newValue } : null;
    if (notify && notifyListeners(this, change), this.pendingKeys) {
      var entry = this.pendingKeys.get(key);
      entry && entry.set(true);
    }
    this.keysAtom.reportChanged();
  }, ObservableObjectAdministration2.prototype.getKeys = function() {
    var e_1, _a2;
    this.keysAtom.reportObserved();
    var res = [];
    try {
      for (var _b = __values(this.values), _c = _b.next(); !_c.done; _c = _b.next()) {
        var _d = __read(_c.value, 2), key = _d[0];
        _d[1] instanceof ObservableValue && res.push(key);
      }
    } catch (e_1_1) {
      e_1 = { error: e_1_1 };
    } finally {
      try {
        _c && !_c.done && (_a2 = _b.return) && _a2.call(_b);
      } finally {
        if (e_1)
          throw e_1.error;
      }
    }
    return res;
  }, ObservableObjectAdministration2;
}();
function asObservableObject(target, name, defaultEnhancer) {
  if (void 0 === name && (name = ""), void 0 === defaultEnhancer && (defaultEnhancer = deepEnhancer), Object.prototype.hasOwnProperty.call(target, $mobx))
    return target[$mobx];
  isPlainObject(target) || (name = (target.constructor.name || "ObservableObject") + "@" + getNextId()), name || (name = "ObservableObject@" + getNextId());
  var adm = new ObservableObjectAdministration(target, /* @__PURE__ */ new Map(), stringifyKey(name), defaultEnhancer);
  return addHiddenProp(target, $mobx, adm), adm;
}
var observablePropertyConfigs = /* @__PURE__ */ Object.create(null), computedPropertyConfigs = /* @__PURE__ */ Object.create(null);
function getAdministrationForComputedPropOwner(owner) {
  var adm = owner[$mobx];
  return adm || (initializeInstance(owner), owner[$mobx]);
}
var isObservableObjectAdministration = createInstanceofPredicate("ObservableObjectAdministration", ObservableObjectAdministration);
function isObservableObject(thing) {
  return !!isObject(thing) && (initializeInstance(thing), isObservableObjectAdministration(thing[$mobx]));
}
function getAtom(thing, property) {
  if ("object" == typeof thing && null !== thing) {
    if (isObservableArray(thing))
      return void 0 !== property && fail(false), thing[$mobx].atom;
    if (isObservableSet(thing))
      return thing[$mobx];
    if (isObservableMap(thing)) {
      var anyThing = thing;
      return void 0 === property ? anyThing._keysAtom : ((observable2 = anyThing._data.get(property) || anyThing._hasMap.get(property)) || fail(false), observable2);
    }
    var observable2;
    if (initializeInstance(thing), property && !thing[$mobx] && thing[property], isObservableObject(thing))
      return property ? ((observable2 = thing[$mobx].values.get(property)) || fail(false), observable2) : fail(false);
    if (isAtom(thing) || isComputedValue(thing) || isReaction(thing))
      return thing;
  } else if ("function" == typeof thing && isReaction(thing[$mobx]))
    return thing[$mobx];
  return fail(false);
}
var toString = Object.prototype.toString;
function deepEqual(a, b, depth) {
  return void 0 === depth && (depth = -1), eq(a, b, depth);
}
function eq(a, b, depth, aStack, bStack) {
  if (a === b)
    return 0 !== a || 1 / a == 1 / b;
  if (null == a || null == b)
    return false;
  if (a != a)
    return b != b;
  var type = typeof a;
  if ("function" !== type && "object" !== type && "object" != typeof b)
    return false;
  var className = toString.call(a);
  if (className !== toString.call(b))
    return false;
  switch (className) {
    case "[object RegExp]":
    case "[object String]":
      return "" + a == "" + b;
    case "[object Number]":
      return +a != +a ? +b != +b : 0 == +a ? 1 / +a == 1 / b : +a == +b;
    case "[object Date]":
    case "[object Boolean]":
      return +a == +b;
    case "[object Symbol]":
      return "undefined" != typeof Symbol && Symbol.valueOf.call(a) === Symbol.valueOf.call(b);
    case "[object Map]":
    case "[object Set]":
      depth >= 0 && depth++;
  }
  a = unwrap(a), b = unwrap(b);
  var areArrays = "[object Array]" === className;
  if (!areArrays) {
    if ("object" != typeof a || "object" != typeof b)
      return false;
    var aCtor = a.constructor, bCtor = b.constructor;
    if (aCtor !== bCtor && !("function" == typeof aCtor && aCtor instanceof aCtor && "function" == typeof bCtor && bCtor instanceof bCtor) && "constructor" in a && "constructor" in b)
      return false;
  }
  if (0 === depth)
    return false;
  depth < 0 && (depth = -1), bStack = bStack || [];
  for (var length = (aStack = aStack || []).length; length--; )
    if (aStack[length] === a)
      return bStack[length] === b;
  if (aStack.push(a), bStack.push(b), areArrays) {
    if ((length = a.length) !== b.length)
      return false;
    for (; length--; )
      if (!eq(a[length], b[length], depth - 1, aStack, bStack))
        return false;
  } else {
    var keys = Object.keys(a), key = void 0;
    if (length = keys.length, Object.keys(b).length !== length)
      return false;
    for (; length--; )
      if (!has$1(b, key = keys[length]) || !eq(a[key], b[key], depth - 1, aStack, bStack))
        return false;
  }
  return aStack.pop(), bStack.pop(), true;
}
function unwrap(a) {
  return isObservableArray(a) ? a.slice() : isES6Map(a) || isObservableMap(a) || isES6Set(a) || isObservableSet(a) ? Array.from(a.entries()) : a;
}
function has$1(a, key) {
  return Object.prototype.hasOwnProperty.call(a, key);
}
function makeIterable(iterator) {
  return iterator[Symbol.iterator] = getSelf, iterator;
}
function getSelf() {
  return this;
}
if ("undefined" == typeof Proxy || "undefined" == typeof Symbol)
  throw new Error("[mobx] MobX 5+ requires Proxy and Symbol objects. If your environment doesn't support Symbol or Proxy objects, please downgrade to MobX 4. For React Native Android, consider upgrading JSCore.");
"object" == typeof __MOBX_DEVTOOLS_GLOBAL_HOOK__ && __MOBX_DEVTOOLS_GLOBAL_HOOK__.injectMobx({ spy: function(listener) {
  return console.warn("[mobx.spy] Is a no-op in production builds"), function() {
  };
}, extras: { getDebugName: function(thing, property) {
  return (void 0 !== property ? getAtom(thing, property) : isObservableObject(thing) || isObservableMap(thing) || isObservableSet(thing) ? function(thing2, property2) {
    return thing2 || fail("Expecting some object"), isAtom(thing2) || isComputedValue(thing2) || isReaction(thing2) || isObservableMap(thing2) || isObservableSet(thing2) ? thing2 : (initializeInstance(thing2), thing2[$mobx] ? thing2[$mobx] : void fail(false));
  }(thing) : getAtom(thing)).name;
} }, $mobx });
const subscriptionsByKey = /* @__PURE__ */ new Map();
function subscribe(subscription) {
  const subscriptionKey = getSubscriptionKey(subscription), subscriptionsForKey = subscriptionsByKey.get(subscriptionKey) ?? [];
  return subscriptionsForKey.push(subscription), subscriptionsByKey.set(subscriptionKey, subscriptionsForKey), { unsubscribe: () => {
    const currentSubscriptionsForKey = subscriptionsByKey.has(subscriptionKey) ? subscriptionsByKey.get(subscriptionKey) : [], subscriptionIndex = currentSubscriptionsForKey.indexOf(subscription);
    -1 !== subscriptionIndex && (currentSubscriptionsForKey.splice(subscriptionIndex, 1), 0 === currentSubscriptionsForKey.length && subscriptionsByKey.delete(subscriptionKey));
  } };
}
async function publish(...messages) {
  const callbacks = [], handled = [];
  for (const message of messages) {
    let matchingSubs;
    if ("entity" in message) {
      matchingSubs = [message.entity].concat(getEntityMeta(message.entity)?.generalizations ?? []).reduce((subs, entity) => (subscriptionsByKey.get(entity)?.forEach((s) => subs.push(s)), subs), []);
    } else {
      const subscriptionKey = getSubscriptionKey(message);
      matchingSubs = subscriptionsByKey.has(subscriptionKey) ? subscriptionsByKey.get(subscriptionKey) : [];
    }
    matchingSubs.length && (matchingSubs.forEach((s) => {
      const callback = "val" in message ? s.callback?.bind(s, message.val) : s.callback?.bind(s, void 0);
      callback && callbacks.push({ callback, priority: s.priority ?? 0, sync: s.sync ?? false });
    }), handled.push(message));
  }
  const prioritizedCallbacks = groupBy(callbacks, (v) => v.priority).sort((a, b) => a.key - b.key), asyncUpdates = [];
  for (const group of prioritizedCallbacks) {
    const [sync, async] = runInAction(() => partition((e) => e.sync, group.values, (e) => e.callback.apply(void 0)));
    await Promise.all(sync), asyncUpdates.push(...async);
  }
  return await Promise.all(asyncUpdates), { handled };
}
function getTags(guid) {
  const tags = [];
  for (const subscriptions of subscriptionsByKey.values())
    for (const subscription of subscriptions) {
      if (!("guid" in subscription) || subscription.guid !== guid || void 0 === subscription.tag)
        break;
      tags.push(subscription.tag);
    }
  return tags;
}
function getSubscribedGuids() {
  const subscribedGuids = [];
  for (const subscriptions of subscriptionsByKey.values())
    for (const subscription of subscriptions) {
      if (!("guid" in subscription))
        break;
      subscribedGuids.push(subscription.guid);
    }
  return subscribedGuids;
}
function getSubscriptionKey(subscriptionOrMessage) {
  if ("guid" in subscriptionOrMessage && "attr" in subscriptionOrMessage && "val" in subscriptionOrMessage && subscriptionOrMessage.val)
    return `${subscriptionOrMessage.guid}:${subscriptionOrMessage.attr}:validation`;
  if ("guid" in subscriptionOrMessage && "attr" in subscriptionOrMessage)
    return `${subscriptionOrMessage.guid}:${subscriptionOrMessage.attr}`;
  if ("guid" in subscriptionOrMessage)
    return subscriptionOrMessage.guid;
  if ("entity" in subscriptionOrMessage)
    return subscriptionOrMessage.entity;
  if ("topic" in subscriptionOrMessage)
    return subscriptionOrMessage.topic;
  if ("param" in subscriptionOrMessage)
    return subscriptionOrMessage.param;
  throw new AssertionError("Unknown subscription or message");
}
const LOADING$1 = { status: "loading" };
function loading() {
  return LOADING$1;
}
const UNAVAILABLE$1 = { status: "unavailable" };
function unavailable() {
  return UNAVAILABLE$1;
}
function available(value) {
  return { status: "available", value };
}
function getOrElseL(value, def) {
  return "available" === value.status ? value.value : def;
}
function getOrCrashL(value) {
  return "available" === value.status ? value.value : crash();
}
function mapL(loadable, action2) {
  return flatMapL(loadable, (v) => available(action2(v)));
}
function flatMapL(loadable, action2) {
  return "available" === loadable.status ? action2(loadable.value) : loadable;
}
const mobxComputed = Symbol("mobxComputed");
function fromMxSubscription$(name, store, subscription) {
  let handle;
  const currentCallbacks = [], priority = getSubscriptionPriority(store), atom = createAtom(name, () => {
    handle = subscribe({ tag: name, ...subscription, priority, callback: () => new Promise((resolve) => {
      handle ? (currentCallbacks.push(resolve), atom.reportChanged()) : resolve();
    }) });
  }, () => {
    ensure(handle).unsubscribe(), handle = void 0, loadedCallback();
  }), loadedCallback = () => {
    currentCallbacks.splice(0).forEach((c) => c());
  };
  return [asDependable(name, () => atom.reportObserved()), loadedCallback];
}
function fromTimer$(name, time) {
  let handle;
  const atom = createAtom(name, () => {
    handle = setInterval(() => atom.reportChanged(), time);
  }, () => {
    clearInterval(ensure(handle)), handle = void 0;
  });
  return asDependable(name, () => atom.reportObserved());
}
function fromConstant$(value) {
  return asDependable(`Constant value ${value}`, () => value);
}
function fromRequest$(name, factory) {
  const factoryComputation = computed(() => (assertInObservingContext(), factory()), { name });
  let lastRequest, lastRequestResult;
  return fromComputation$(`Handle response of ${lowerCaseFirst(name)}`, () => {
    const thisRequest = factoryComputation.get();
    if ("status" in thisRequest)
      return lastRequest = void 0, lastRequestResult = void 0, thisRequest;
    if (thisRequest === lastRequest)
      return ensure(lastRequestResult).get();
    const loadingState = Array.isArray(thisRequest) ? thisRequest[0] : loading(), requestResult = observable.box(loadingState, { deep: false });
    return (Array.isArray(thisRequest) ? thisRequest[1] : thisRequest).then(action((r) => requestResult.set(r)), action((err) => {
      handleError(err), requestResult.set(unavailable());
    })), lastRequest = thisRequest, lastRequestResult = requestResult, lastRequestResult.get();
  });
}
function fromComputation$(name, getValue) {
  const computation = computed(getValue, { name });
  return asDependable(name, () => computation.get(), computation);
}
function fromComputationWithDeepEquality$(name, getValue) {
  const computation = computed(getValue, { name, equals: deepEqual$1 });
  return asDependable(name, () => computation.get(), computation);
}
function useValue(name, initialValue) {
  const box = observable.box(initialValue, { deep: false, name: `Box for ${name}` });
  return [asDependable(name, () => box.get()), (value) => box.set(value)];
}
function getPreviousValue$(value$) {
  let lastSeenValue;
  return asDependable(`Previous value of ${lowerCaseFirst(value$.name)}`, () => {
    const toReturn = lastSeenValue;
    return lastSeenValue = value$.dependOn(), toReturn;
  });
}
function fromMutableComputation$(name, getValue) {
  const underlyingComputed = computed(getValue, { name });
  return { ...asDependable(name, () => underlyingComputed.get(), underlyingComputed), muted: function(actionToExecute) {
    if (underlyingComputed.dependenciesState !== IDerivationState.UP_TO_DATE)
      actionToExecute();
    else {
      const originalGet = underlyingComputed.get.bind(underlyingComputed);
      underlyingComputed.onBecomeStale = () => {
        underlyingComputed.get = () => {
          underlyingComputed.dependenciesState = IDerivationState.STALE;
          try {
            return originalGet();
          } finally {
            underlyingComputed.dependenciesState = IDerivationState.UP_TO_DATE, delete underlyingComputed.get;
          }
        }, scheduleSideEffect(() => underlyingComputed.observing.forEach((o) => {
          o.get && o.get(), o.lowestObserverState = IDerivationState.UP_TO_DATE;
        }));
      };
      try {
        actionToExecute();
      } finally {
        delete underlyingComputed.onBecomeStale, underlyingComputed.dependenciesState = IDerivationState.UP_TO_DATE;
      }
    }
  } };
}
function withSideEffect$(name, value$, onChange, onBecomeUnused, onBecomeUsed) {
  assertNotInObservingContext();
  const computation = computed(() => value$.dependOn(), { name: `Computation for ${lowerCaseFirst(name)}` });
  let disposer;
  const atom = createAtom(name, () => {
    onBecomeUsed && runInAction(onBecomeUsed), onChange && (disposer = computation.observe(action(({ newValue, oldValue }) => onChange(newValue, oldValue)), true));
  }, () => {
    disposer && disposer(), onBecomeUnused && runInAction(onBecomeUnused);
  });
  return asDependable(name, () => (atom.reportObserved(), computation.get()), computation);
}
function dependOnSubscription(subscription, store) {
  assertInObservingContext();
  const currentDerivation = getGlobalState().trackingDerivation;
  if (!currentDerivation)
    throw new AssertionError();
  const subscriptionHandlers = currentDerivation.__subscriptionHandlers || (currentDerivation.__subscriptionHandlers = /* @__PURE__ */ new Map()), subscriptionKey = JSON.stringify(subscription);
  let subscriptionHandler = subscriptionHandlers.get(subscriptionKey);
  const priority = getSubscriptionPriority(store);
  if (subscriptionHandler)
    subscriptionHandler.priority !== priority && crash();
  else {
    const box = observable.box(tuple(void 0), { deep: false, name: `Store for subscription ${subscriptionKey}` });
    let handle;
    subscriptionHandler = { name: subscriptionKey, atom: createAtom(subscriptionKey, () => {
      handle = subscribe({ ...subscription, priority, callback: (val) => (box.set([val]), new Promise((resolve) => store.addUpdateCallback(resolve))), sync: true });
    }, () => {
      ensure(handle).unsubscribe(), handle = void 0;
    }), box, priority }, subscriptionHandlers.set(subscriptionKey, subscriptionHandler);
  }
  return subscriptionHandler.atom.reportObserved(), subscriptionHandler.box.get();
}
function getSubscriptionPriority(store) {
  return store.getSubscriptionPriority();
}
function useDependency(name, onBecomeUnused, onBecomeUsed) {
  const atom = createAtom(name, onBecomeUsed, onBecomeUnused);
  return tuple(asDependable(name, () => {
    atom.reportObserved(), atom.isBeingObserved || (onBecomeUsed?.(), onBecomeUnused?.());
  }), () => atom.reportChanged());
}
function readUntracked(value$) {
  const previousAllowUntracked = allowUntracked;
  allowUntracked = true;
  try {
    const computation = value$[mobxComputed];
    return computation && computation.dependenciesState !== IDerivationState.NOT_TRACKING ? computation.value : untracked(() => value$.dependOn());
  } finally {
    allowUntracked = previousAllowUntracked;
  }
}
function scheduleSideEffect(actionToExecute) {
  new Reaction(`Run side effect ${actionToExecute.name}`, actionToExecute).schedule();
}
function asDependable(name, dependOn, computedValue) {
  return assertNotInObservingContext(), { name, dependOn: () => (assertInObservingContext(), dependOn()), ...computedValue ? { [mobxComputed]: computedValue } : {} };
}
function isDependable(value) {
  return null != value && "object" == typeof value && "dependOn" in value;
}
function assertNotInObservingContext() {
  if (isInObservingContext())
    throw new AssertionError();
}
let allowUntracked = false;
function assertInObservingContext() {
  if (!isInObservingContext() && !allowUntracked)
    throw new AssertionError();
}
function isInObservingContext() {
  return null != getGlobalState().trackingDerivation;
}
function useDependableValue(value$) {
  useEnsureConstantValues(value$);
  const [value, setValue] = reactExports.useState(() => readUntracked(value$));
  return reactExports.useEffect(() => reaction(() => value$.dependOn(), setValue, { name: `Copy '${value$.name}' to state`, fireImmediately: false }), []), value;
}

var hasRequiredScheduler_production_min, hasRequiredScheduler, hasRequiredReactDom_production_min, reactDom$2 = { exports: {} }, reactDom_production_min = {}, scheduler$2 = { exports: {} }, scheduler_production_min = {};
function requireScheduler() {
  return hasRequiredScheduler || (hasRequiredScheduler = 1, scheduler$2.exports = (hasRequiredScheduler_production_min || (hasRequiredScheduler_production_min = 1, function(exports) {
    function f(a, b) {
      var c = a.length;
      a.push(b);
      a:
        for (; 0 < c; ) {
          var d = c - 1 >>> 1, e = a[d];
          if (!(0 < g(e, b)))
            break a;
          a[d] = b, a[c] = e, c = d;
        }
    }
    function h(a) {
      return 0 === a.length ? null : a[0];
    }
    function k(a) {
      if (0 === a.length)
        return null;
      var b = a[0], c = a.pop();
      if (c !== b) {
        a[0] = c;
        a:
          for (var d = 0, e = a.length, w = e >>> 1; d < w; ) {
            var m = 2 * (d + 1) - 1, C = a[m], n = m + 1, x = a[n];
            if (0 > g(C, c))
              n < e && 0 > g(x, C) ? (a[d] = x, a[n] = c, d = n) : (a[d] = C, a[m] = c, d = m);
            else {
              if (!(n < e && 0 > g(x, c)))
                break a;
              a[d] = x, a[n] = c, d = n;
            }
          }
      }
      return b;
    }
    function g(a, b) {
      var c = a.sortIndex - b.sortIndex;
      return 0 !== c ? c : a.id - b.id;
    }
    if ("object" == typeof performance && "function" == typeof performance.now) {
      var l = performance;
      exports.unstable_now = function() {
        return l.now();
      };
    } else {
      var p = Date, q = p.now();
      exports.unstable_now = function() {
        return p.now() - q;
      };
    }
    var r = [], t = [], u = 1, v = null, y = 3, z = false, A = false, B = false, D = "function" == typeof setTimeout ? setTimeout : null, E = "function" == typeof clearTimeout ? clearTimeout : null, F = "undefined" != typeof setImmediate ? setImmediate : null;
    function G(a) {
      for (var b = h(t); null !== b; ) {
        if (null === b.callback)
          k(t);
        else {
          if (!(b.startTime <= a))
            break;
          k(t), b.sortIndex = b.expirationTime, f(r, b);
        }
        b = h(t);
      }
    }
    function H(a) {
      if (B = false, G(a), !A)
        if (null !== h(r))
          A = true, I(J);
        else {
          var b = h(t);
          null !== b && K(H, b.startTime - a);
        }
    }
    function J(a, b) {
      A = false, B && (B = false, E(L), L = -1), z = true;
      var c = y;
      try {
        for (G(b), v = h(r); null !== v && (!(v.expirationTime > b) || a && !M()); ) {
          var d = v.callback;
          if ("function" == typeof d) {
            v.callback = null, y = v.priorityLevel;
            var e = d(v.expirationTime <= b);
            b = exports.unstable_now(), "function" == typeof e ? v.callback = e : v === h(r) && k(r), G(b);
          } else
            k(r);
          v = h(r);
        }
        if (null !== v)
          var w = true;
        else {
          var m = h(t);
          null !== m && K(H, m.startTime - b), w = false;
        }
        return w;
      } finally {
        v = null, y = c, z = false;
      }
    }
    "undefined" != typeof navigator && void 0 !== navigator.scheduling && void 0 !== navigator.scheduling.isInputPending && navigator.scheduling.isInputPending.bind(navigator.scheduling);
    var S, N = false, O = null, L = -1, P = 5, Q = -1;
    function M() {
      return !(exports.unstable_now() - Q < P);
    }
    function R() {
      if (null !== O) {
        var a = exports.unstable_now();
        Q = a;
        var b = true;
        try {
          b = O(true, a);
        } finally {
          b ? S() : (N = false, O = null);
        }
      } else
        N = false;
    }
    if ("function" == typeof F)
      S = function() {
        F(R);
      };
    else if ("undefined" != typeof MessageChannel) {
      var T = new MessageChannel(), U = T.port2;
      T.port1.onmessage = R, S = function() {
        U.postMessage(null);
      };
    } else
      S = function() {
        D(R, 0);
      };
    function I(a) {
      O = a, N || (N = true, S());
    }
    function K(a, b) {
      L = D(function() {
        a(exports.unstable_now());
      }, b);
    }
    exports.unstable_IdlePriority = 5, exports.unstable_ImmediatePriority = 1, exports.unstable_LowPriority = 4, exports.unstable_NormalPriority = 3, exports.unstable_Profiling = null, exports.unstable_UserBlockingPriority = 2, exports.unstable_cancelCallback = function(a) {
      a.callback = null;
    }, exports.unstable_continueExecution = function() {
      A || z || (A = true, I(J));
    }, exports.unstable_forceFrameRate = function(a) {
      0 > a || 125 < a ? console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported") : P = 0 < a ? Math.floor(1e3 / a) : 5;
    }, exports.unstable_getCurrentPriorityLevel = function() {
      return y;
    }, exports.unstable_getFirstCallbackNode = function() {
      return h(r);
    }, exports.unstable_next = function(a) {
      switch (y) {
        case 1:
        case 2:
        case 3:
          var b = 3;
          break;
        default:
          b = y;
      }
      var c = y;
      y = b;
      try {
        return a();
      } finally {
        y = c;
      }
    }, exports.unstable_pauseExecution = function() {
    }, exports.unstable_requestPaint = function() {
    }, exports.unstable_runWithPriority = function(a, b) {
      switch (a) {
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
          break;
        default:
          a = 3;
      }
      var c = y;
      y = a;
      try {
        return b();
      } finally {
        y = c;
      }
    }, exports.unstable_scheduleCallback = function(a, b, c) {
      var d = exports.unstable_now();
      switch (c = "object" == typeof c && null !== c && "number" == typeof (c = c.delay) && 0 < c ? d + c : d, a) {
        case 1:
          var e = -1;
          break;
        case 2:
          e = 250;
          break;
        case 5:
          e = 1073741823;
          break;
        case 4:
          e = 1e4;
          break;
        default:
          e = 5e3;
      }
      return a = { id: u++, callback: b, priorityLevel: a, startTime: c, expirationTime: e = c + e, sortIndex: -1 }, c > d ? (a.sortIndex = c, f(t, a), null === h(r) && a === h(t) && (B ? (E(L), L = -1) : B = true, K(H, c - d))) : (a.sortIndex = e, f(r, a), A || z || (A = true, I(J))), a;
    }, exports.unstable_shouldYield = M, exports.unstable_wrapCallback = function(a) {
      var b = y;
      return function() {
        var c = y;
        y = b;
        try {
          return a.apply(this, arguments);
        } finally {
          y = c;
        }
      };
    };
  }(scheduler_production_min)), scheduler_production_min)), scheduler$2.exports;
}
/**
 * @license React
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
!function checkDCE() {
  if ("undefined" != typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" == typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)
    try {
      __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
    } catch (err) {
      console.error(err);
    }
}(), reactDom$2.exports = function() {
  if (hasRequiredReactDom_production_min)
    return reactDom_production_min;
  hasRequiredReactDom_production_min = 1;
  var aa = t, ca = requireScheduler();
  function p(a2) {
    for (var b = "https://reactjs.org/docs/error-decoder.html?invariant=" + a2, c = 1; c < arguments.length; c++)
      b += "&args[]=" + encodeURIComponent(arguments[c]);
    return "Minified React error #" + a2 + "; visit " + b + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
  }
  var da = /* @__PURE__ */ new Set(), ea = {};
  function fa(a2, b) {
    ha(a2, b), ha(a2 + "Capture", b);
  }
  function ha(a2, b) {
    for (ea[a2] = b, a2 = 0; a2 < b.length; a2++)
      da.add(b[a2]);
  }
  var ia = !("undefined" == typeof window || void 0 === window.document || void 0 === window.document.createElement), ja = Object.prototype.hasOwnProperty, ka = /^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/, la = {}, ma = {};
  function v(a2, b, c, d, e, f, g) {
    this.acceptsBooleans = 2 === b || 3 === b || 4 === b, this.attributeName = d, this.attributeNamespace = e, this.mustUseProperty = c, this.propertyName = a2, this.type = b, this.sanitizeURL = f, this.removeEmptyString = g;
  }
  var z = {};
  "children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(a2) {
    z[a2] = new v(a2, 0, false, a2, null, false, false);
  }), [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(a2) {
    var b = a2[0];
    z[b] = new v(b, 1, false, a2[1], null, false, false);
  }), ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(a2) {
    z[a2] = new v(a2, 2, false, a2.toLowerCase(), null, false, false);
  }), ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(a2) {
    z[a2] = new v(a2, 2, false, a2, null, false, false);
  }), "allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(a2) {
    z[a2] = new v(a2, 3, false, a2.toLowerCase(), null, false, false);
  }), ["checked", "multiple", "muted", "selected"].forEach(function(a2) {
    z[a2] = new v(a2, 3, true, a2, null, false, false);
  }), ["capture", "download"].forEach(function(a2) {
    z[a2] = new v(a2, 4, false, a2, null, false, false);
  }), ["cols", "rows", "size", "span"].forEach(function(a2) {
    z[a2] = new v(a2, 6, false, a2, null, false, false);
  }), ["rowSpan", "start"].forEach(function(a2) {
    z[a2] = new v(a2, 5, false, a2.toLowerCase(), null, false, false);
  });
  var ra = /[\-:]([a-z])/g;
  function sa(a2) {
    return a2[1].toUpperCase();
  }
  function ta(a2, b, c, d) {
    var e = z.hasOwnProperty(b) ? z[b] : null;
    (null !== e ? 0 !== e.type : d || !(2 < b.length) || "o" !== b[0] && "O" !== b[0] || "n" !== b[1] && "N" !== b[1]) && (function(a3, b2, c2, d2) {
      if (null == b2 || function(a4, b3, c3, d3) {
        if (null !== c3 && 0 === c3.type)
          return false;
        switch (typeof b3) {
          case "function":
          case "symbol":
            return true;
          case "boolean":
            return !d3 && (null !== c3 ? !c3.acceptsBooleans : "data-" !== (a4 = a4.toLowerCase().slice(0, 5)) && "aria-" !== a4);
          default:
            return false;
        }
      }(a3, b2, c2, d2))
        return true;
      if (d2)
        return false;
      if (null !== c2)
        switch (c2.type) {
          case 3:
            return !b2;
          case 4:
            return false === b2;
          case 5:
            return isNaN(b2);
          case 6:
            return isNaN(b2) || 1 > b2;
        }
      return false;
    }(b, c, e, d) && (c = null), d || null === e ? function(a3) {
      return !!ja.call(ma, a3) || !ja.call(la, a3) && (ka.test(a3) ? ma[a3] = true : (la[a3] = true, false));
    }(b) && (null === c ? a2.removeAttribute(b) : a2.setAttribute(b, "" + c)) : e.mustUseProperty ? a2[e.propertyName] = null === c ? 3 !== e.type && "" : c : (b = e.attributeName, d = e.attributeNamespace, null === c ? a2.removeAttribute(b) : (c = 3 === (e = e.type) || 4 === e && true === c ? "" : "" + c, d ? a2.setAttributeNS(d, b, c) : a2.setAttribute(b, c))));
  }
  "accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(a2) {
    var b = a2.replace(ra, sa);
    z[b] = new v(b, 1, false, a2, null, false, false);
  }), "xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(a2) {
    var b = a2.replace(ra, sa);
    z[b] = new v(b, 1, false, a2, "http://www.w3.org/1999/xlink", false, false);
  }), ["xml:base", "xml:lang", "xml:space"].forEach(function(a2) {
    var b = a2.replace(ra, sa);
    z[b] = new v(b, 1, false, a2, "http://www.w3.org/XML/1998/namespace", false, false);
  }), ["tabIndex", "crossOrigin"].forEach(function(a2) {
    z[a2] = new v(a2, 1, false, a2.toLowerCase(), null, false, false);
  }), z.xlinkHref = new v("xlinkHref", 1, false, "xlink:href", "http://www.w3.org/1999/xlink", true, false), ["src", "href", "action", "formAction"].forEach(function(a2) {
    z[a2] = new v(a2, 1, false, a2.toLowerCase(), null, true, true);
  });
  var ua = aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, va = Symbol.for("react.element"), wa = Symbol.for("react.portal"), ya = Symbol.for("react.fragment"), za = Symbol.for("react.strict_mode"), Aa = Symbol.for("react.profiler"), Ba = Symbol.for("react.provider"), Ca = Symbol.for("react.context"), Da = Symbol.for("react.forward_ref"), Ea = Symbol.for("react.suspense"), Fa = Symbol.for("react.suspense_list"), Ga = Symbol.for("react.memo"), Ha = Symbol.for("react.lazy"), Ia = Symbol.for("react.offscreen"), Ja = Symbol.iterator;
  function Ka(a2) {
    return null === a2 || "object" != typeof a2 ? null : "function" == typeof (a2 = Ja && a2[Ja] || a2["@@iterator"]) ? a2 : null;
  }
  var La, A = Object.assign;
  function Ma(a2) {
    if (void 0 === La)
      try {
        throw Error();
      } catch (c) {
        var b = c.stack.trim().match(/\n( *(at )?)/);
        La = b && b[1] || "";
      }
    return "\n" + La + a2;
  }
  var Na = false;
  function Oa(a2, b) {
    if (!a2 || Na)
      return "";
    Na = true;
    var c = Error.prepareStackTrace;
    Error.prepareStackTrace = void 0;
    try {
      if (b)
        if (b = function() {
          throw Error();
        }, Object.defineProperty(b.prototype, "props", { set: function() {
          throw Error();
        } }), "object" == typeof Reflect && Reflect.construct) {
          try {
            Reflect.construct(b, []);
          } catch (l) {
            var d = l;
          }
          Reflect.construct(a2, [], b);
        } else {
          try {
            b.call();
          } catch (l) {
            d = l;
          }
          a2.call(b.prototype);
        }
      else {
        try {
          throw Error();
        } catch (l) {
          d = l;
        }
        a2();
      }
    } catch (l) {
      if (l && d && "string" == typeof l.stack) {
        for (var e = l.stack.split("\n"), f = d.stack.split("\n"), g = e.length - 1, h = f.length - 1; 1 <= g && 0 <= h && e[g] !== f[h]; )
          h--;
        for (; 1 <= g && 0 <= h; g--, h--)
          if (e[g] !== f[h]) {
            if (1 !== g || 1 !== h)
              do {
                if (g--, 0 > --h || e[g] !== f[h]) {
                  var k = "\n" + e[g].replace(" at new ", " at ");
                  return a2.displayName && k.includes("<anonymous>") && (k = k.replace("<anonymous>", a2.displayName)), k;
                }
              } while (1 <= g && 0 <= h);
            break;
          }
      }
    } finally {
      Na = false, Error.prepareStackTrace = c;
    }
    return (a2 = a2 ? a2.displayName || a2.name : "") ? Ma(a2) : "";
  }
  function Pa(a2) {
    switch (a2.tag) {
      case 5:
        return Ma(a2.type);
      case 16:
        return Ma("Lazy");
      case 13:
        return Ma("Suspense");
      case 19:
        return Ma("SuspenseList");
      case 0:
      case 2:
      case 15:
        return Oa(a2.type, false);
      case 11:
        return Oa(a2.type.render, false);
      case 1:
        return Oa(a2.type, true);
      default:
        return "";
    }
  }
  function Qa(a2) {
    if (null == a2)
      return null;
    if ("function" == typeof a2)
      return a2.displayName || a2.name || null;
    if ("string" == typeof a2)
      return a2;
    switch (a2) {
      case ya:
        return "Fragment";
      case wa:
        return "Portal";
      case Aa:
        return "Profiler";
      case za:
        return "StrictMode";
      case Ea:
        return "Suspense";
      case Fa:
        return "SuspenseList";
    }
    if ("object" == typeof a2)
      switch (a2.$$typeof) {
        case Ca:
          return (a2.displayName || "Context") + ".Consumer";
        case Ba:
          return (a2._context.displayName || "Context") + ".Provider";
        case Da:
          var b = a2.render;
          return (a2 = a2.displayName) || (a2 = "" !== (a2 = b.displayName || b.name || "") ? "ForwardRef(" + a2 + ")" : "ForwardRef"), a2;
        case Ga:
          return null !== (b = a2.displayName || null) ? b : Qa(a2.type) || "Memo";
        case Ha:
          b = a2._payload, a2 = a2._init;
          try {
            return Qa(a2(b));
          } catch (c) {
          }
      }
    return null;
  }
  function Ra(a2) {
    var b = a2.type;
    switch (a2.tag) {
      case 24:
        return "Cache";
      case 9:
        return (b.displayName || "Context") + ".Consumer";
      case 10:
        return (b._context.displayName || "Context") + ".Provider";
      case 18:
        return "DehydratedFragment";
      case 11:
        return a2 = (a2 = b.render).displayName || a2.name || "", b.displayName || ("" !== a2 ? "ForwardRef(" + a2 + ")" : "ForwardRef");
      case 7:
        return "Fragment";
      case 5:
        return b;
      case 4:
        return "Portal";
      case 3:
        return "Root";
      case 6:
        return "Text";
      case 16:
        return Qa(b);
      case 8:
        return b === za ? "StrictMode" : "Mode";
      case 22:
        return "Offscreen";
      case 12:
        return "Profiler";
      case 21:
        return "Scope";
      case 13:
        return "Suspense";
      case 19:
        return "SuspenseList";
      case 25:
        return "TracingMarker";
      case 1:
      case 0:
      case 17:
      case 2:
      case 14:
      case 15:
        if ("function" == typeof b)
          return b.displayName || b.name || null;
        if ("string" == typeof b)
          return b;
    }
    return null;
  }
  function Sa(a2) {
    switch (typeof a2) {
      case "boolean":
      case "number":
      case "string":
      case "undefined":
      case "object":
        return a2;
      default:
        return "";
    }
  }
  function Ta(a2) {
    var b = a2.type;
    return (a2 = a2.nodeName) && "input" === a2.toLowerCase() && ("checkbox" === b || "radio" === b);
  }
  function Va(a2) {
    a2._valueTracker || (a2._valueTracker = function(a3) {
      var b = Ta(a3) ? "checked" : "value", c = Object.getOwnPropertyDescriptor(a3.constructor.prototype, b), d = "" + a3[b];
      if (!a3.hasOwnProperty(b) && void 0 !== c && "function" == typeof c.get && "function" == typeof c.set) {
        var e = c.get, f = c.set;
        return Object.defineProperty(a3, b, { configurable: true, get: function() {
          return e.call(this);
        }, set: function(a4) {
          d = "" + a4, f.call(this, a4);
        } }), Object.defineProperty(a3, b, { enumerable: c.enumerable }), { getValue: function() {
          return d;
        }, setValue: function(a4) {
          d = "" + a4;
        }, stopTracking: function() {
          a3._valueTracker = null, delete a3[b];
        } };
      }
    }(a2));
  }
  function Wa(a2) {
    if (!a2)
      return false;
    var b = a2._valueTracker;
    if (!b)
      return true;
    var c = b.getValue(), d = "";
    return a2 && (d = Ta(a2) ? a2.checked ? "true" : "false" : a2.value), (a2 = d) !== c && (b.setValue(a2), true);
  }
  function Xa(a2) {
    if (void 0 === (a2 = a2 || ("undefined" != typeof document ? document : void 0)))
      return null;
    try {
      return a2.activeElement || a2.body;
    } catch (b) {
      return a2.body;
    }
  }
  function Ya(a2, b) {
    var c = b.checked;
    return A({}, b, { defaultChecked: void 0, defaultValue: void 0, value: void 0, checked: null != c ? c : a2._wrapperState.initialChecked });
  }
  function Za(a2, b) {
    var c = null == b.defaultValue ? "" : b.defaultValue, d = null != b.checked ? b.checked : b.defaultChecked;
    c = Sa(null != b.value ? b.value : c), a2._wrapperState = { initialChecked: d, initialValue: c, controlled: "checkbox" === b.type || "radio" === b.type ? null != b.checked : null != b.value };
  }
  function ab(a2, b) {
    null != (b = b.checked) && ta(a2, "checked", b, false);
  }
  function bb(a2, b) {
    ab(a2, b);
    var c = Sa(b.value), d = b.type;
    if (null != c)
      "number" === d ? (0 === c && "" === a2.value || a2.value != c) && (a2.value = "" + c) : a2.value !== "" + c && (a2.value = "" + c);
    else if ("submit" === d || "reset" === d)
      return void a2.removeAttribute("value");
    b.hasOwnProperty("value") ? cb(a2, b.type, c) : b.hasOwnProperty("defaultValue") && cb(a2, b.type, Sa(b.defaultValue)), null == b.checked && null != b.defaultChecked && (a2.defaultChecked = !!b.defaultChecked);
  }
  function db(a2, b, c) {
    if (b.hasOwnProperty("value") || b.hasOwnProperty("defaultValue")) {
      var d = b.type;
      if (!("submit" !== d && "reset" !== d || void 0 !== b.value && null !== b.value))
        return;
      b = "" + a2._wrapperState.initialValue, c || b === a2.value || (a2.value = b), a2.defaultValue = b;
    }
    "" !== (c = a2.name) && (a2.name = ""), a2.defaultChecked = !!a2._wrapperState.initialChecked, "" !== c && (a2.name = c);
  }
  function cb(a2, b, c) {
    "number" === b && Xa(a2.ownerDocument) === a2 || (null == c ? a2.defaultValue = "" + a2._wrapperState.initialValue : a2.defaultValue !== "" + c && (a2.defaultValue = "" + c));
  }
  var eb = Array.isArray;
  function fb(a2, b, c, d) {
    if (a2 = a2.options, b) {
      b = {};
      for (var e = 0; e < c.length; e++)
        b["$" + c[e]] = true;
      for (c = 0; c < a2.length; c++)
        e = b.hasOwnProperty("$" + a2[c].value), a2[c].selected !== e && (a2[c].selected = e), e && d && (a2[c].defaultSelected = true);
    } else {
      for (c = "" + Sa(c), b = null, e = 0; e < a2.length; e++) {
        if (a2[e].value === c)
          return a2[e].selected = true, void (d && (a2[e].defaultSelected = true));
        null !== b || a2[e].disabled || (b = a2[e]);
      }
      null !== b && (b.selected = true);
    }
  }
  function gb(a2, b) {
    if (null != b.dangerouslySetInnerHTML)
      throw Error(p(91));
    return A({}, b, { value: void 0, defaultValue: void 0, children: "" + a2._wrapperState.initialValue });
  }
  function hb(a2, b) {
    var c = b.value;
    if (null == c) {
      if (c = b.children, b = b.defaultValue, null != c) {
        if (null != b)
          throw Error(p(92));
        if (eb(c)) {
          if (1 < c.length)
            throw Error(p(93));
          c = c[0];
        }
        b = c;
      }
      null == b && (b = ""), c = b;
    }
    a2._wrapperState = { initialValue: Sa(c) };
  }
  function ib(a2, b) {
    var c = Sa(b.value), d = Sa(b.defaultValue);
    null != c && ((c = "" + c) !== a2.value && (a2.value = c), null == b.defaultValue && a2.defaultValue !== c && (a2.defaultValue = c)), null != d && (a2.defaultValue = "" + d);
  }
  function jb(a2) {
    var b = a2.textContent;
    b === a2._wrapperState.initialValue && "" !== b && null !== b && (a2.value = b);
  }
  function kb(a2) {
    switch (a2) {
      case "svg":
        return "http://www.w3.org/2000/svg";
      case "math":
        return "http://www.w3.org/1998/Math/MathML";
      default:
        return "http://www.w3.org/1999/xhtml";
    }
  }
  function lb(a2, b) {
    return null == a2 || "http://www.w3.org/1999/xhtml" === a2 ? kb(b) : "http://www.w3.org/2000/svg" === a2 && "foreignObject" === b ? "http://www.w3.org/1999/xhtml" : a2;
  }
  var mb, a, nb = (a = function(a2, b) {
    if ("http://www.w3.org/2000/svg" !== a2.namespaceURI || "innerHTML" in a2)
      a2.innerHTML = b;
    else {
      for ((mb = mb || document.createElement("div")).innerHTML = "<svg>" + b.valueOf().toString() + "</svg>", b = mb.firstChild; a2.firstChild; )
        a2.removeChild(a2.firstChild);
      for (; b.firstChild; )
        a2.appendChild(b.firstChild);
    }
  }, "undefined" != typeof MSApp && MSApp.execUnsafeLocalFunction ? function(b, c, d, e) {
    MSApp.execUnsafeLocalFunction(function() {
      return a(b, c);
    });
  } : a);
  function ob(a2, b) {
    if (b) {
      var c = a2.firstChild;
      if (c && c === a2.lastChild && 3 === c.nodeType)
        return void (c.nodeValue = b);
    }
    a2.textContent = b;
  }
  var pb = { animationIterationCount: true, aspectRatio: true, borderImageOutset: true, borderImageSlice: true, borderImageWidth: true, boxFlex: true, boxFlexGroup: true, boxOrdinalGroup: true, columnCount: true, columns: true, flex: true, flexGrow: true, flexPositive: true, flexShrink: true, flexNegative: true, flexOrder: true, gridArea: true, gridRow: true, gridRowEnd: true, gridRowSpan: true, gridRowStart: true, gridColumn: true, gridColumnEnd: true, gridColumnSpan: true, gridColumnStart: true, fontWeight: true, lineClamp: true, lineHeight: true, opacity: true, order: true, orphans: true, tabSize: true, widows: true, zIndex: true, zoom: true, fillOpacity: true, floodOpacity: true, stopOpacity: true, strokeDasharray: true, strokeDashoffset: true, strokeMiterlimit: true, strokeOpacity: true, strokeWidth: true }, qb = ["Webkit", "ms", "Moz", "O"];
  function rb(a2, b, c) {
    return null == b || "boolean" == typeof b || "" === b ? "" : c || "number" != typeof b || 0 === b || pb.hasOwnProperty(a2) && pb[a2] ? ("" + b).trim() : b + "px";
  }
  function sb(a2, b) {
    for (var c in a2 = a2.style, b)
      if (b.hasOwnProperty(c)) {
        var d = 0 === c.indexOf("--"), e = rb(c, b[c], d);
        "float" === c && (c = "cssFloat"), d ? a2.setProperty(c, e) : a2[c] = e;
      }
  }
  Object.keys(pb).forEach(function(a2) {
    qb.forEach(function(b) {
      b = b + a2.charAt(0).toUpperCase() + a2.substring(1), pb[b] = pb[a2];
    });
  });
  var tb = A({ menuitem: true }, { area: true, base: true, br: true, col: true, embed: true, hr: true, img: true, input: true, keygen: true, link: true, meta: true, param: true, source: true, track: true, wbr: true });
  function ub(a2, b) {
    if (b) {
      if (tb[a2] && (null != b.children || null != b.dangerouslySetInnerHTML))
        throw Error(p(137, a2));
      if (null != b.dangerouslySetInnerHTML) {
        if (null != b.children)
          throw Error(p(60));
        if ("object" != typeof b.dangerouslySetInnerHTML || !("__html" in b.dangerouslySetInnerHTML))
          throw Error(p(61));
      }
      if (null != b.style && "object" != typeof b.style)
        throw Error(p(62));
    }
  }
  function vb(a2, b) {
    if (-1 === a2.indexOf("-"))
      return "string" == typeof b.is;
    switch (a2) {
      case "annotation-xml":
      case "color-profile":
      case "font-face":
      case "font-face-src":
      case "font-face-uri":
      case "font-face-format":
      case "font-face-name":
      case "missing-glyph":
        return false;
      default:
        return true;
    }
  }
  var wb = null;
  function xb(a2) {
    return (a2 = a2.target || a2.srcElement || window).correspondingUseElement && (a2 = a2.correspondingUseElement), 3 === a2.nodeType ? a2.parentNode : a2;
  }
  var yb = null, zb = null, Ab = null;
  function Bb(a2) {
    if (a2 = Cb(a2)) {
      if ("function" != typeof yb)
        throw Error(p(280));
      var b = a2.stateNode;
      b && (b = Db(b), yb(a2.stateNode, a2.type, b));
    }
  }
  function Eb(a2) {
    zb ? Ab ? Ab.push(a2) : Ab = [a2] : zb = a2;
  }
  function Fb() {
    if (zb) {
      var a2 = zb, b = Ab;
      if (Ab = zb = null, Bb(a2), b)
        for (a2 = 0; a2 < b.length; a2++)
          Bb(b[a2]);
    }
  }
  function Gb(a2, b) {
    return a2(b);
  }
  function Hb() {
  }
  var Ib = false;
  function Jb(a2, b, c) {
    if (Ib)
      return a2(b, c);
    Ib = true;
    try {
      return Gb(a2, b, c);
    } finally {
      Ib = false, (null !== zb || null !== Ab) && (Hb(), Fb());
    }
  }
  function Kb(a2, b) {
    var c = a2.stateNode;
    if (null === c)
      return null;
    var d = Db(c);
    if (null === d)
      return null;
    c = d[b];
    a:
      switch (b) {
        case "onClick":
        case "onClickCapture":
        case "onDoubleClick":
        case "onDoubleClickCapture":
        case "onMouseDown":
        case "onMouseDownCapture":
        case "onMouseMove":
        case "onMouseMoveCapture":
        case "onMouseUp":
        case "onMouseUpCapture":
        case "onMouseEnter":
          (d = !d.disabled) || (d = !("button" === (a2 = a2.type) || "input" === a2 || "select" === a2 || "textarea" === a2)), a2 = !d;
          break a;
        default:
          a2 = false;
      }
    if (a2)
      return null;
    if (c && "function" != typeof c)
      throw Error(p(231, b, typeof c));
    return c;
  }
  var Lb = false;
  if (ia)
    try {
      var Mb = {};
      Object.defineProperty(Mb, "passive", { get: function() {
        Lb = true;
      } }), window.addEventListener("test", Mb, Mb), window.removeEventListener("test", Mb, Mb);
    } catch (a2) {
      Lb = false;
    }
  function Nb(a2, b, c, d, e, f, g, h, k) {
    var l = Array.prototype.slice.call(arguments, 3);
    try {
      b.apply(c, l);
    } catch (m) {
      this.onError(m);
    }
  }
  var Ob = false, Pb = null, Qb = false, Rb = null, Sb = { onError: function(a2) {
    Ob = true, Pb = a2;
  } };
  function Tb(a2, b, c, d, e, f, g, h, k) {
    Ob = false, Pb = null, Nb.apply(Sb, arguments);
  }
  function Vb(a2) {
    var b = a2, c = a2;
    if (a2.alternate)
      for (; b.return; )
        b = b.return;
    else {
      a2 = b;
      do {
        0 != (4098 & (b = a2).flags) && (c = b.return), a2 = b.return;
      } while (a2);
    }
    return 3 === b.tag ? c : null;
  }
  function Wb(a2) {
    if (13 === a2.tag) {
      var b = a2.memoizedState;
      if (null === b && null !== (a2 = a2.alternate) && (b = a2.memoizedState), null !== b)
        return b.dehydrated;
    }
    return null;
  }
  function Xb(a2) {
    if (Vb(a2) !== a2)
      throw Error(p(188));
  }
  function Zb(a2) {
    return null !== (a2 = function(a3) {
      var b = a3.alternate;
      if (!b) {
        if (null === (b = Vb(a3)))
          throw Error(p(188));
        return b !== a3 ? null : a3;
      }
      for (var c = a3, d = b; ; ) {
        var e = c.return;
        if (null === e)
          break;
        var f = e.alternate;
        if (null === f) {
          if (null !== (d = e.return)) {
            c = d;
            continue;
          }
          break;
        }
        if (e.child === f.child) {
          for (f = e.child; f; ) {
            if (f === c)
              return Xb(e), a3;
            if (f === d)
              return Xb(e), b;
            f = f.sibling;
          }
          throw Error(p(188));
        }
        if (c.return !== d.return)
          c = e, d = f;
        else {
          for (var g = false, h = e.child; h; ) {
            if (h === c) {
              g = true, c = e, d = f;
              break;
            }
            if (h === d) {
              g = true, d = e, c = f;
              break;
            }
            h = h.sibling;
          }
          if (!g) {
            for (h = f.child; h; ) {
              if (h === c) {
                g = true, c = f, d = e;
                break;
              }
              if (h === d) {
                g = true, d = f, c = e;
                break;
              }
              h = h.sibling;
            }
            if (!g)
              throw Error(p(189));
          }
        }
        if (c.alternate !== d)
          throw Error(p(190));
      }
      if (3 !== c.tag)
        throw Error(p(188));
      return c.stateNode.current === c ? a3 : b;
    }(a2)) ? $b(a2) : null;
  }
  function $b(a2) {
    if (5 === a2.tag || 6 === a2.tag)
      return a2;
    for (a2 = a2.child; null !== a2; ) {
      var b = $b(a2);
      if (null !== b)
        return b;
      a2 = a2.sibling;
    }
    return null;
  }
  var ac = ca.unstable_scheduleCallback, bc = ca.unstable_cancelCallback, cc = ca.unstable_shouldYield, dc = ca.unstable_requestPaint, B = ca.unstable_now, ec = ca.unstable_getCurrentPriorityLevel, fc = ca.unstable_ImmediatePriority, gc = ca.unstable_UserBlockingPriority, hc = ca.unstable_NormalPriority, ic = ca.unstable_LowPriority, jc = ca.unstable_IdlePriority, kc = null, lc = null, oc = Math.clz32 ? Math.clz32 : function(a2) {
    return 0 === (a2 >>>= 0) ? 32 : 31 - (pc(a2) / qc | 0) | 0;
  }, pc = Math.log, qc = Math.LN2, rc = 64, sc = 4194304;
  function tc(a2) {
    switch (a2 & -a2) {
      case 1:
        return 1;
      case 2:
        return 2;
      case 4:
        return 4;
      case 8:
        return 8;
      case 16:
        return 16;
      case 32:
        return 32;
      case 64:
      case 128:
      case 256:
      case 512:
      case 1024:
      case 2048:
      case 4096:
      case 8192:
      case 16384:
      case 32768:
      case 65536:
      case 131072:
      case 262144:
      case 524288:
      case 1048576:
      case 2097152:
        return 4194240 & a2;
      case 4194304:
      case 8388608:
      case 16777216:
      case 33554432:
      case 67108864:
        return 130023424 & a2;
      case 134217728:
        return 134217728;
      case 268435456:
        return 268435456;
      case 536870912:
        return 536870912;
      case 1073741824:
        return 1073741824;
      default:
        return a2;
    }
  }
  function uc(a2, b) {
    var c = a2.pendingLanes;
    if (0 === c)
      return 0;
    var d = 0, e = a2.suspendedLanes, f = a2.pingedLanes, g = 268435455 & c;
    if (0 !== g) {
      var h = g & ~e;
      0 !== h ? d = tc(h) : 0 != (f &= g) && (d = tc(f));
    } else
      0 != (g = c & ~e) ? d = tc(g) : 0 !== f && (d = tc(f));
    if (0 === d)
      return 0;
    if (0 !== b && b !== d && 0 == (b & e) && ((e = d & -d) >= (f = b & -b) || 16 === e && 0 != (4194240 & f)))
      return b;
    if (0 != (4 & d) && (d |= 16 & c), 0 !== (b = a2.entangledLanes))
      for (a2 = a2.entanglements, b &= d; 0 < b; )
        e = 1 << (c = 31 - oc(b)), d |= a2[c], b &= ~e;
    return d;
  }
  function vc(a2, b) {
    switch (a2) {
      case 1:
      case 2:
      case 4:
        return b + 250;
      case 8:
      case 16:
      case 32:
      case 64:
      case 128:
      case 256:
      case 512:
      case 1024:
      case 2048:
      case 4096:
      case 8192:
      case 16384:
      case 32768:
      case 65536:
      case 131072:
      case 262144:
      case 524288:
      case 1048576:
      case 2097152:
        return b + 5e3;
      default:
        return -1;
    }
  }
  function xc(a2) {
    return 0 != (a2 = -1073741825 & a2.pendingLanes) ? a2 : 1073741824 & a2 ? 1073741824 : 0;
  }
  function yc() {
    var a2 = rc;
    return 0 == (4194240 & (rc <<= 1)) && (rc = 64), a2;
  }
  function zc(a2) {
    for (var b = [], c = 0; 31 > c; c++)
      b.push(a2);
    return b;
  }
  function Ac(a2, b, c) {
    a2.pendingLanes |= b, 536870912 !== b && (a2.suspendedLanes = 0, a2.pingedLanes = 0), (a2 = a2.eventTimes)[b = 31 - oc(b)] = c;
  }
  function Cc(a2, b) {
    var c = a2.entangledLanes |= b;
    for (a2 = a2.entanglements; c; ) {
      var d = 31 - oc(c), e = 1 << d;
      e & b | a2[d] & b && (a2[d] |= b), c &= ~e;
    }
  }
  var C = 0;
  function Dc(a2) {
    return 1 < (a2 &= -a2) ? 4 < a2 ? 0 != (268435455 & a2) ? 16 : 536870912 : 4 : 1;
  }
  var Ec, Fc, Gc, Hc, Ic, Jc = false, Kc = [], Lc = null, Mc = null, Nc = null, Oc = /* @__PURE__ */ new Map(), Pc = /* @__PURE__ */ new Map(), Qc = [], Rc = "mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");
  function Sc(a2, b) {
    switch (a2) {
      case "focusin":
      case "focusout":
        Lc = null;
        break;
      case "dragenter":
      case "dragleave":
        Mc = null;
        break;
      case "mouseover":
      case "mouseout":
        Nc = null;
        break;
      case "pointerover":
      case "pointerout":
        Oc.delete(b.pointerId);
        break;
      case "gotpointercapture":
      case "lostpointercapture":
        Pc.delete(b.pointerId);
    }
  }
  function Tc(a2, b, c, d, e, f) {
    return null === a2 || a2.nativeEvent !== f ? (a2 = { blockedOn: b, domEventName: c, eventSystemFlags: d, nativeEvent: f, targetContainers: [e] }, null !== b && null !== (b = Cb(b)) && Fc(b), a2) : (a2.eventSystemFlags |= d, b = a2.targetContainers, null !== e && -1 === b.indexOf(e) && b.push(e), a2);
  }
  function Vc(a2) {
    var b = Wc(a2.target);
    if (null !== b) {
      var c = Vb(b);
      if (null !== c) {
        if (13 === (b = c.tag)) {
          if (null !== (b = Wb(c)))
            return a2.blockedOn = b, void Ic(a2.priority, function() {
              Gc(c);
            });
        } else if (3 === b && c.stateNode.current.memoizedState.isDehydrated)
          return void (a2.blockedOn = 3 === c.tag ? c.stateNode.containerInfo : null);
      }
    }
    a2.blockedOn = null;
  }
  function Xc(a2) {
    if (null !== a2.blockedOn)
      return false;
    for (var b = a2.targetContainers; 0 < b.length; ) {
      var c = Yc(a2.domEventName, a2.eventSystemFlags, b[0], a2.nativeEvent);
      if (null !== c)
        return null !== (b = Cb(c)) && Fc(b), a2.blockedOn = c, false;
      var d = new (c = a2.nativeEvent).constructor(c.type, c);
      wb = d, c.target.dispatchEvent(d), wb = null, b.shift();
    }
    return true;
  }
  function Zc(a2, b, c) {
    Xc(a2) && c.delete(b);
  }
  function $c() {
    Jc = false, null !== Lc && Xc(Lc) && (Lc = null), null !== Mc && Xc(Mc) && (Mc = null), null !== Nc && Xc(Nc) && (Nc = null), Oc.forEach(Zc), Pc.forEach(Zc);
  }
  function ad(a2, b) {
    a2.blockedOn === b && (a2.blockedOn = null, Jc || (Jc = true, ca.unstable_scheduleCallback(ca.unstable_NormalPriority, $c)));
  }
  function bd(a2) {
    function b(b2) {
      return ad(b2, a2);
    }
    if (0 < Kc.length) {
      ad(Kc[0], a2);
      for (var c = 1; c < Kc.length; c++) {
        var d = Kc[c];
        d.blockedOn === a2 && (d.blockedOn = null);
      }
    }
    for (null !== Lc && ad(Lc, a2), null !== Mc && ad(Mc, a2), null !== Nc && ad(Nc, a2), Oc.forEach(b), Pc.forEach(b), c = 0; c < Qc.length; c++)
      (d = Qc[c]).blockedOn === a2 && (d.blockedOn = null);
    for (; 0 < Qc.length && null === (c = Qc[0]).blockedOn; )
      Vc(c), null === c.blockedOn && Qc.shift();
  }
  var cd = ua.ReactCurrentBatchConfig, dd = true;
  function ed(a2, b, c, d) {
    var e = C, f = cd.transition;
    cd.transition = null;
    try {
      C = 1, fd(a2, b, c, d);
    } finally {
      C = e, cd.transition = f;
    }
  }
  function gd(a2, b, c, d) {
    var e = C, f = cd.transition;
    cd.transition = null;
    try {
      C = 4, fd(a2, b, c, d);
    } finally {
      C = e, cd.transition = f;
    }
  }
  function fd(a2, b, c, d) {
    if (dd) {
      var e = Yc(a2, b, c, d);
      if (null === e)
        hd(a2, b, d, id, c), Sc(a2, d);
      else if (function(a3, b2, c2, d2, e2) {
        switch (b2) {
          case "focusin":
            return Lc = Tc(Lc, a3, b2, c2, d2, e2), true;
          case "dragenter":
            return Mc = Tc(Mc, a3, b2, c2, d2, e2), true;
          case "mouseover":
            return Nc = Tc(Nc, a3, b2, c2, d2, e2), true;
          case "pointerover":
            var f2 = e2.pointerId;
            return Oc.set(f2, Tc(Oc.get(f2) || null, a3, b2, c2, d2, e2)), true;
          case "gotpointercapture":
            return f2 = e2.pointerId, Pc.set(f2, Tc(Pc.get(f2) || null, a3, b2, c2, d2, e2)), true;
        }
        return false;
      }(e, a2, b, c, d))
        d.stopPropagation();
      else if (Sc(a2, d), 4 & b && -1 < Rc.indexOf(a2)) {
        for (; null !== e; ) {
          var f = Cb(e);
          if (null !== f && Ec(f), null === (f = Yc(a2, b, c, d)) && hd(a2, b, d, id, c), f === e)
            break;
          e = f;
        }
        null !== e && d.stopPropagation();
      } else
        hd(a2, b, d, null, c);
    }
  }
  var id = null;
  function Yc(a2, b, c, d) {
    if (id = null, null !== (a2 = Wc(a2 = xb(d))))
      if (null === (b = Vb(a2)))
        a2 = null;
      else if (13 === (c = b.tag)) {
        if (null !== (a2 = Wb(b)))
          return a2;
        a2 = null;
      } else if (3 === c) {
        if (b.stateNode.current.memoizedState.isDehydrated)
          return 3 === b.tag ? b.stateNode.containerInfo : null;
        a2 = null;
      } else
        b !== a2 && (a2 = null);
    return id = a2, null;
  }
  function jd(a2) {
    switch (a2) {
      case "cancel":
      case "click":
      case "close":
      case "contextmenu":
      case "copy":
      case "cut":
      case "auxclick":
      case "dblclick":
      case "dragend":
      case "dragstart":
      case "drop":
      case "focusin":
      case "focusout":
      case "input":
      case "invalid":
      case "keydown":
      case "keypress":
      case "keyup":
      case "mousedown":
      case "mouseup":
      case "paste":
      case "pause":
      case "play":
      case "pointercancel":
      case "pointerdown":
      case "pointerup":
      case "ratechange":
      case "reset":
      case "resize":
      case "seeked":
      case "submit":
      case "touchcancel":
      case "touchend":
      case "touchstart":
      case "volumechange":
      case "change":
      case "selectionchange":
      case "textInput":
      case "compositionstart":
      case "compositionend":
      case "compositionupdate":
      case "beforeblur":
      case "afterblur":
      case "beforeinput":
      case "blur":
      case "fullscreenchange":
      case "focus":
      case "hashchange":
      case "popstate":
      case "select":
      case "selectstart":
        return 1;
      case "drag":
      case "dragenter":
      case "dragexit":
      case "dragleave":
      case "dragover":
      case "mousemove":
      case "mouseout":
      case "mouseover":
      case "pointermove":
      case "pointerout":
      case "pointerover":
      case "scroll":
      case "toggle":
      case "touchmove":
      case "wheel":
      case "mouseenter":
      case "mouseleave":
      case "pointerenter":
      case "pointerleave":
        return 4;
      case "message":
        switch (ec()) {
          case fc:
            return 1;
          case gc:
            return 4;
          case hc:
          case ic:
            return 16;
          case jc:
            return 536870912;
          default:
            return 16;
        }
      default:
        return 16;
    }
  }
  var kd = null, ld = null, md = null;
  function nd() {
    if (md)
      return md;
    var a2, d, b = ld, c = b.length, e = "value" in kd ? kd.value : kd.textContent, f = e.length;
    for (a2 = 0; a2 < c && b[a2] === e[a2]; a2++)
      ;
    var g = c - a2;
    for (d = 1; d <= g && b[c - d] === e[f - d]; d++)
      ;
    return md = e.slice(a2, 1 < d ? 1 - d : void 0);
  }
  function od(a2) {
    var b = a2.keyCode;
    return "charCode" in a2 ? 0 === (a2 = a2.charCode) && 13 === b && (a2 = 13) : a2 = b, 10 === a2 && (a2 = 13), 32 <= a2 || 13 === a2 ? a2 : 0;
  }
  function pd() {
    return true;
  }
  function qd() {
    return false;
  }
  function rd(a2) {
    function b(b2, d, e, f, g) {
      for (var c in this._reactName = b2, this._targetInst = e, this.type = d, this.nativeEvent = f, this.target = g, this.currentTarget = null, a2)
        a2.hasOwnProperty(c) && (b2 = a2[c], this[c] = b2 ? b2(f) : f[c]);
      return this.isDefaultPrevented = (null != f.defaultPrevented ? f.defaultPrevented : false === f.returnValue) ? pd : qd, this.isPropagationStopped = qd, this;
    }
    return A(b.prototype, { preventDefault: function() {
      this.defaultPrevented = true;
      var a3 = this.nativeEvent;
      a3 && (a3.preventDefault ? a3.preventDefault() : "unknown" != typeof a3.returnValue && (a3.returnValue = false), this.isDefaultPrevented = pd);
    }, stopPropagation: function() {
      var a3 = this.nativeEvent;
      a3 && (a3.stopPropagation ? a3.stopPropagation() : "unknown" != typeof a3.cancelBubble && (a3.cancelBubble = true), this.isPropagationStopped = pd);
    }, persist: function() {
    }, isPersistent: pd }), b;
  }
  var wd, xd, yd, sd = { eventPhase: 0, bubbles: 0, cancelable: 0, timeStamp: function(a2) {
    return a2.timeStamp || Date.now();
  }, defaultPrevented: 0, isTrusted: 0 }, td = rd(sd), ud = A({}, sd, { view: 0, detail: 0 }), vd = rd(ud), Ad = A({}, ud, { screenX: 0, screenY: 0, clientX: 0, clientY: 0, pageX: 0, pageY: 0, ctrlKey: 0, shiftKey: 0, altKey: 0, metaKey: 0, getModifierState: zd, button: 0, buttons: 0, relatedTarget: function(a2) {
    return void 0 === a2.relatedTarget ? a2.fromElement === a2.srcElement ? a2.toElement : a2.fromElement : a2.relatedTarget;
  }, movementX: function(a2) {
    return "movementX" in a2 ? a2.movementX : (a2 !== yd && (yd && "mousemove" === a2.type ? (wd = a2.screenX - yd.screenX, xd = a2.screenY - yd.screenY) : xd = wd = 0, yd = a2), wd);
  }, movementY: function(a2) {
    return "movementY" in a2 ? a2.movementY : xd;
  } }), Bd = rd(Ad), Dd = rd(A({}, Ad, { dataTransfer: 0 })), Fd = rd(A({}, ud, { relatedTarget: 0 })), Hd = rd(A({}, sd, { animationName: 0, elapsedTime: 0, pseudoElement: 0 })), Jd = rd(A({}, sd, { clipboardData: function(a2) {
    return "clipboardData" in a2 ? a2.clipboardData : window.clipboardData;
  } })), Ld = rd(A({}, sd, { data: 0 })), Md = { Esc: "Escape", Spacebar: " ", Left: "ArrowLeft", Up: "ArrowUp", Right: "ArrowRight", Down: "ArrowDown", Del: "Delete", Win: "OS", Menu: "ContextMenu", Apps: "ContextMenu", Scroll: "ScrollLock", MozPrintableKey: "Unidentified" }, Nd = { 8: "Backspace", 9: "Tab", 12: "Clear", 13: "Enter", 16: "Shift", 17: "Control", 18: "Alt", 19: "Pause", 20: "CapsLock", 27: "Escape", 32: " ", 33: "PageUp", 34: "PageDown", 35: "End", 36: "Home", 37: "ArrowLeft", 38: "ArrowUp", 39: "ArrowRight", 40: "ArrowDown", 45: "Insert", 46: "Delete", 112: "F1", 113: "F2", 114: "F3", 115: "F4", 116: "F5", 117: "F6", 118: "F7", 119: "F8", 120: "F9", 121: "F10", 122: "F11", 123: "F12", 144: "NumLock", 145: "ScrollLock", 224: "Meta" }, Od = { Alt: "altKey", Control: "ctrlKey", Meta: "metaKey", Shift: "shiftKey" };
  function Pd(a2) {
    var b = this.nativeEvent;
    return b.getModifierState ? b.getModifierState(a2) : !!(a2 = Od[a2]) && !!b[a2];
  }
  function zd() {
    return Pd;
  }
  var Rd = rd(A({}, ud, { key: function(a2) {
    if (a2.key) {
      var b = Md[a2.key] || a2.key;
      if ("Unidentified" !== b)
        return b;
    }
    return "keypress" === a2.type ? 13 === (a2 = od(a2)) ? "Enter" : String.fromCharCode(a2) : "keydown" === a2.type || "keyup" === a2.type ? Nd[a2.keyCode] || "Unidentified" : "";
  }, code: 0, location: 0, ctrlKey: 0, shiftKey: 0, altKey: 0, metaKey: 0, repeat: 0, locale: 0, getModifierState: zd, charCode: function(a2) {
    return "keypress" === a2.type ? od(a2) : 0;
  }, keyCode: function(a2) {
    return "keydown" === a2.type || "keyup" === a2.type ? a2.keyCode : 0;
  }, which: function(a2) {
    return "keypress" === a2.type ? od(a2) : "keydown" === a2.type || "keyup" === a2.type ? a2.keyCode : 0;
  } })), Td = rd(A({}, Ad, { pointerId: 0, width: 0, height: 0, pressure: 0, tangentialPressure: 0, tiltX: 0, tiltY: 0, twist: 0, pointerType: 0, isPrimary: 0 })), Vd = rd(A({}, ud, { touches: 0, targetTouches: 0, changedTouches: 0, altKey: 0, metaKey: 0, ctrlKey: 0, shiftKey: 0, getModifierState: zd })), Xd = rd(A({}, sd, { propertyName: 0, elapsedTime: 0, pseudoElement: 0 })), Zd = rd(A({}, Ad, { deltaX: function(a2) {
    return "deltaX" in a2 ? a2.deltaX : "wheelDeltaX" in a2 ? -a2.wheelDeltaX : 0;
  }, deltaY: function(a2) {
    return "deltaY" in a2 ? a2.deltaY : "wheelDeltaY" in a2 ? -a2.wheelDeltaY : "wheelDelta" in a2 ? -a2.wheelDelta : 0;
  }, deltaZ: 0, deltaMode: 0 })), $d = [9, 13, 27, 32], ae = ia && "CompositionEvent" in window, be = null;
  ia && "documentMode" in document && (be = document.documentMode);
  var ce = ia && "TextEvent" in window && !be, de = ia && (!ae || be && 8 < be && 11 >= be), ee = String.fromCharCode(32), fe = false;
  function ge(a2, b) {
    switch (a2) {
      case "keyup":
        return -1 !== $d.indexOf(b.keyCode);
      case "keydown":
        return 229 !== b.keyCode;
      case "keypress":
      case "mousedown":
      case "focusout":
        return true;
      default:
        return false;
    }
  }
  function he(a2) {
    return "object" == typeof (a2 = a2.detail) && "data" in a2 ? a2.data : null;
  }
  var ie = false, le = { color: true, date: true, datetime: true, "datetime-local": true, email: true, month: true, number: true, password: true, range: true, search: true, tel: true, text: true, time: true, url: true, week: true };
  function me(a2) {
    var b = a2 && a2.nodeName && a2.nodeName.toLowerCase();
    return "input" === b ? !!le[a2.type] : "textarea" === b;
  }
  function ne(a2, b, c, d) {
    Eb(d), 0 < (b = oe(b, "onChange")).length && (c = new td("onChange", "change", null, c, d), a2.push({ event: c, listeners: b }));
  }
  var pe = null, qe = null;
  function re(a2) {
    se(a2, 0);
  }
  function te(a2) {
    if (Wa(ue(a2)))
      return a2;
  }
  function ve(a2, b) {
    if ("change" === a2)
      return b;
  }
  var we = false;
  if (ia) {
    var xe;
    if (ia) {
      var ye = "oninput" in document;
      if (!ye) {
        var ze = document.createElement("div");
        ze.setAttribute("oninput", "return;"), ye = "function" == typeof ze.oninput;
      }
      xe = ye;
    } else
      xe = false;
    we = xe && (!document.documentMode || 9 < document.documentMode);
  }
  function Ae() {
    pe && (pe.detachEvent("onpropertychange", Be), qe = pe = null);
  }
  function Be(a2) {
    if ("value" === a2.propertyName && te(qe)) {
      var b = [];
      ne(b, qe, a2, xb(a2)), Jb(re, b);
    }
  }
  function Ce(a2, b, c) {
    "focusin" === a2 ? (Ae(), qe = c, (pe = b).attachEvent("onpropertychange", Be)) : "focusout" === a2 && Ae();
  }
  function De(a2) {
    if ("selectionchange" === a2 || "keyup" === a2 || "keydown" === a2)
      return te(qe);
  }
  function Ee(a2, b) {
    if ("click" === a2)
      return te(b);
  }
  function Fe(a2, b) {
    if ("input" === a2 || "change" === a2)
      return te(b);
  }
  var He = "function" == typeof Object.is ? Object.is : function(a2, b) {
    return a2 === b && (0 !== a2 || 1 / a2 == 1 / b) || a2 != a2 && b != b;
  };
  function Ie(a2, b) {
    if (He(a2, b))
      return true;
    if ("object" != typeof a2 || null === a2 || "object" != typeof b || null === b)
      return false;
    var c = Object.keys(a2), d = Object.keys(b);
    if (c.length !== d.length)
      return false;
    for (d = 0; d < c.length; d++) {
      var e = c[d];
      if (!ja.call(b, e) || !He(a2[e], b[e]))
        return false;
    }
    return true;
  }
  function Je(a2) {
    for (; a2 && a2.firstChild; )
      a2 = a2.firstChild;
    return a2;
  }
  function Ke(a2, b) {
    var d, c = Je(a2);
    for (a2 = 0; c; ) {
      if (3 === c.nodeType) {
        if (d = a2 + c.textContent.length, a2 <= b && d >= b)
          return { node: c, offset: b - a2 };
        a2 = d;
      }
      a: {
        for (; c; ) {
          if (c.nextSibling) {
            c = c.nextSibling;
            break a;
          }
          c = c.parentNode;
        }
        c = void 0;
      }
      c = Je(c);
    }
  }
  function Le(a2, b) {
    return !(!a2 || !b) && (a2 === b || (!a2 || 3 !== a2.nodeType) && (b && 3 === b.nodeType ? Le(a2, b.parentNode) : "contains" in a2 ? a2.contains(b) : !!a2.compareDocumentPosition && !!(16 & a2.compareDocumentPosition(b))));
  }
  function Me() {
    for (var a2 = window, b = Xa(); b instanceof a2.HTMLIFrameElement; ) {
      try {
        var c = "string" == typeof b.contentWindow.location.href;
      } catch (d) {
        c = false;
      }
      if (!c)
        break;
      b = Xa((a2 = b.contentWindow).document);
    }
    return b;
  }
  function Ne(a2) {
    var b = a2 && a2.nodeName && a2.nodeName.toLowerCase();
    return b && ("input" === b && ("text" === a2.type || "search" === a2.type || "tel" === a2.type || "url" === a2.type || "password" === a2.type) || "textarea" === b || "true" === a2.contentEditable);
  }
  function Oe(a2) {
    var b = Me(), c = a2.focusedElem, d = a2.selectionRange;
    if (b !== c && c && c.ownerDocument && Le(c.ownerDocument.documentElement, c)) {
      if (null !== d && Ne(c)) {
        if (b = d.start, void 0 === (a2 = d.end) && (a2 = b), "selectionStart" in c)
          c.selectionStart = b, c.selectionEnd = Math.min(a2, c.value.length);
        else if ((a2 = (b = c.ownerDocument || document) && b.defaultView || window).getSelection) {
          a2 = a2.getSelection();
          var e = c.textContent.length, f = Math.min(d.start, e);
          d = void 0 === d.end ? f : Math.min(d.end, e), !a2.extend && f > d && (e = d, d = f, f = e), e = Ke(c, f);
          var g = Ke(c, d);
          e && g && (1 !== a2.rangeCount || a2.anchorNode !== e.node || a2.anchorOffset !== e.offset || a2.focusNode !== g.node || a2.focusOffset !== g.offset) && ((b = b.createRange()).setStart(e.node, e.offset), a2.removeAllRanges(), f > d ? (a2.addRange(b), a2.extend(g.node, g.offset)) : (b.setEnd(g.node, g.offset), a2.addRange(b)));
        }
      }
      for (b = [], a2 = c; a2 = a2.parentNode; )
        1 === a2.nodeType && b.push({ element: a2, left: a2.scrollLeft, top: a2.scrollTop });
      for ("function" == typeof c.focus && c.focus(), c = 0; c < b.length; c++)
        (a2 = b[c]).element.scrollLeft = a2.left, a2.element.scrollTop = a2.top;
    }
  }
  var Pe = ia && "documentMode" in document && 11 >= document.documentMode, Qe = null, Re = null, Se = null, Te = false;
  function Ue(a2, b, c) {
    var d = c.window === c ? c.document : 9 === c.nodeType ? c : c.ownerDocument;
    Te || null == Qe || Qe !== Xa(d) || (d = "selectionStart" in (d = Qe) && Ne(d) ? { start: d.selectionStart, end: d.selectionEnd } : { anchorNode: (d = (d.ownerDocument && d.ownerDocument.defaultView || window).getSelection()).anchorNode, anchorOffset: d.anchorOffset, focusNode: d.focusNode, focusOffset: d.focusOffset }, Se && Ie(Se, d) || (Se = d, 0 < (d = oe(Re, "onSelect")).length && (b = new td("onSelect", "select", null, b, c), a2.push({ event: b, listeners: d }), b.target = Qe)));
  }
  function Ve(a2, b) {
    var c = {};
    return c[a2.toLowerCase()] = b.toLowerCase(), c["Webkit" + a2] = "webkit" + b, c["Moz" + a2] = "moz" + b, c;
  }
  var We = { animationend: Ve("Animation", "AnimationEnd"), animationiteration: Ve("Animation", "AnimationIteration"), animationstart: Ve("Animation", "AnimationStart"), transitionend: Ve("Transition", "TransitionEnd") }, Xe = {}, Ye = {};
  function Ze(a2) {
    if (Xe[a2])
      return Xe[a2];
    if (!We[a2])
      return a2;
    var c, b = We[a2];
    for (c in b)
      if (b.hasOwnProperty(c) && c in Ye)
        return Xe[a2] = b[c];
    return a2;
  }
  ia && (Ye = document.createElement("div").style, "AnimationEvent" in window || (delete We.animationend.animation, delete We.animationiteration.animation, delete We.animationstart.animation), "TransitionEvent" in window || delete We.transitionend.transition);
  var $e = Ze("animationend"), af = Ze("animationiteration"), bf = Ze("animationstart"), cf = Ze("transitionend"), df = /* @__PURE__ */ new Map(), ef = "abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");
  function ff(a2, b) {
    df.set(a2, b), fa(b, [a2]);
  }
  for (var gf = 0; gf < ef.length; gf++) {
    var hf = ef[gf];
    ff(hf.toLowerCase(), "on" + (hf[0].toUpperCase() + hf.slice(1)));
  }
  ff($e, "onAnimationEnd"), ff(af, "onAnimationIteration"), ff(bf, "onAnimationStart"), ff("dblclick", "onDoubleClick"), ff("focusin", "onFocus"), ff("focusout", "onBlur"), ff(cf, "onTransitionEnd"), ha("onMouseEnter", ["mouseout", "mouseover"]), ha("onMouseLeave", ["mouseout", "mouseover"]), ha("onPointerEnter", ["pointerout", "pointerover"]), ha("onPointerLeave", ["pointerout", "pointerover"]), fa("onChange", "change click focusin focusout input keydown keyup selectionchange".split(" ")), fa("onSelect", "focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")), fa("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]), fa("onCompositionEnd", "compositionend focusout keydown keypress keyup mousedown".split(" ")), fa("onCompositionStart", "compositionstart focusout keydown keypress keyup mousedown".split(" ")), fa("onCompositionUpdate", "compositionupdate focusout keydown keypress keyup mousedown".split(" "));
  var lf = "abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "), mf = new Set("cancel close invalid load scroll toggle".split(" ").concat(lf));
  function nf(a2, b, c) {
    var d = a2.type || "unknown-event";
    a2.currentTarget = c, function(a3, b2, c2, d2, e, f, g, h, k) {
      if (Tb.apply(this, arguments), Ob) {
        if (!Ob)
          throw Error(p(198));
        var l = Pb;
        Ob = false, Pb = null, Qb || (Qb = true, Rb = l);
      }
    }(d, b, void 0, a2), a2.currentTarget = null;
  }
  function se(a2, b) {
    b = 0 != (4 & b);
    for (var c = 0; c < a2.length; c++) {
      var d = a2[c], e = d.event;
      d = d.listeners;
      a: {
        var f = void 0;
        if (b)
          for (var g = d.length - 1; 0 <= g; g--) {
            var h = d[g], k = h.instance, l = h.currentTarget;
            if (h = h.listener, k !== f && e.isPropagationStopped())
              break a;
            nf(e, h, l), f = k;
          }
        else
          for (g = 0; g < d.length; g++) {
            if (k = (h = d[g]).instance, l = h.currentTarget, h = h.listener, k !== f && e.isPropagationStopped())
              break a;
            nf(e, h, l), f = k;
          }
      }
    }
    if (Qb)
      throw a2 = Rb, Qb = false, Rb = null, a2;
  }
  function D(a2, b) {
    var c = b[of];
    void 0 === c && (c = b[of] = /* @__PURE__ */ new Set());
    var d = a2 + "__bubble";
    c.has(d) || (pf(b, a2, 2, false), c.add(d));
  }
  function qf(a2, b, c) {
    var d = 0;
    b && (d |= 4), pf(c, a2, d, b);
  }
  var rf = "_reactListening" + Math.random().toString(36).slice(2);
  function sf(a2) {
    if (!a2[rf]) {
      a2[rf] = true, da.forEach(function(b2) {
        "selectionchange" !== b2 && (mf.has(b2) || qf(b2, false, a2), qf(b2, true, a2));
      });
      var b = 9 === a2.nodeType ? a2 : a2.ownerDocument;
      null === b || b[rf] || (b[rf] = true, qf("selectionchange", false, b));
    }
  }
  function pf(a2, b, c, d) {
    switch (jd(b)) {
      case 1:
        var e = ed;
        break;
      case 4:
        e = gd;
        break;
      default:
        e = fd;
    }
    c = e.bind(null, b, c, a2), e = void 0, !Lb || "touchstart" !== b && "touchmove" !== b && "wheel" !== b || (e = true), d ? void 0 !== e ? a2.addEventListener(b, c, { capture: true, passive: e }) : a2.addEventListener(b, c, true) : void 0 !== e ? a2.addEventListener(b, c, { passive: e }) : a2.addEventListener(b, c, false);
  }
  function hd(a2, b, c, d, e) {
    var f = d;
    if (0 == (1 & b) && 0 == (2 & b) && null !== d)
      a:
        for (; ; ) {
          if (null === d)
            return;
          var g = d.tag;
          if (3 === g || 4 === g) {
            var h = d.stateNode.containerInfo;
            if (h === e || 8 === h.nodeType && h.parentNode === e)
              break;
            if (4 === g)
              for (g = d.return; null !== g; ) {
                var k = g.tag;
                if ((3 === k || 4 === k) && ((k = g.stateNode.containerInfo) === e || 8 === k.nodeType && k.parentNode === e))
                  return;
                g = g.return;
              }
            for (; null !== h; ) {
              if (null === (g = Wc(h)))
                return;
              if (5 === (k = g.tag) || 6 === k) {
                d = f = g;
                continue a;
              }
              h = h.parentNode;
            }
          }
          d = d.return;
        }
    Jb(function() {
      var d2 = f, e2 = xb(c), g2 = [];
      a: {
        var h2 = df.get(a2);
        if (void 0 !== h2) {
          var k2 = td, n = a2;
          switch (a2) {
            case "keypress":
              if (0 === od(c))
                break a;
            case "keydown":
            case "keyup":
              k2 = Rd;
              break;
            case "focusin":
              n = "focus", k2 = Fd;
              break;
            case "focusout":
              n = "blur", k2 = Fd;
              break;
            case "beforeblur":
            case "afterblur":
              k2 = Fd;
              break;
            case "click":
              if (2 === c.button)
                break a;
            case "auxclick":
            case "dblclick":
            case "mousedown":
            case "mousemove":
            case "mouseup":
            case "mouseout":
            case "mouseover":
            case "contextmenu":
              k2 = Bd;
              break;
            case "drag":
            case "dragend":
            case "dragenter":
            case "dragexit":
            case "dragleave":
            case "dragover":
            case "dragstart":
            case "drop":
              k2 = Dd;
              break;
            case "touchcancel":
            case "touchend":
            case "touchmove":
            case "touchstart":
              k2 = Vd;
              break;
            case $e:
            case af:
            case bf:
              k2 = Hd;
              break;
            case cf:
              k2 = Xd;
              break;
            case "scroll":
              k2 = vd;
              break;
            case "wheel":
              k2 = Zd;
              break;
            case "copy":
            case "cut":
            case "paste":
              k2 = Jd;
              break;
            case "gotpointercapture":
            case "lostpointercapture":
            case "pointercancel":
            case "pointerdown":
            case "pointermove":
            case "pointerout":
            case "pointerover":
            case "pointerup":
              k2 = Td;
          }
          var t = 0 != (4 & b), J = !t && "scroll" === a2, x = t ? null !== h2 ? h2 + "Capture" : null : h2;
          t = [];
          for (var u, w = d2; null !== w; ) {
            var F = (u = w).stateNode;
            if (5 === u.tag && null !== F && (u = F, null !== x && null != (F = Kb(w, x)) && t.push(tf(w, F, u))), J)
              break;
            w = w.return;
          }
          0 < t.length && (h2 = new k2(h2, n, null, c, e2), g2.push({ event: h2, listeners: t }));
        }
      }
      if (0 == (7 & b)) {
        if (k2 = "mouseout" === a2 || "pointerout" === a2, (!(h2 = "mouseover" === a2 || "pointerover" === a2) || c === wb || !(n = c.relatedTarget || c.fromElement) || !Wc(n) && !n[uf]) && (k2 || h2) && (h2 = e2.window === e2 ? e2 : (h2 = e2.ownerDocument) ? h2.defaultView || h2.parentWindow : window, k2 ? (k2 = d2, null !== (n = (n = c.relatedTarget || c.toElement) ? Wc(n) : null) && (n !== (J = Vb(n)) || 5 !== n.tag && 6 !== n.tag) && (n = null)) : (k2 = null, n = d2), k2 !== n)) {
          if (t = Bd, F = "onMouseLeave", x = "onMouseEnter", w = "mouse", "pointerout" !== a2 && "pointerover" !== a2 || (t = Td, F = "onPointerLeave", x = "onPointerEnter", w = "pointer"), J = null == k2 ? h2 : ue(k2), u = null == n ? h2 : ue(n), (h2 = new t(F, w + "leave", k2, c, e2)).target = J, h2.relatedTarget = u, F = null, Wc(e2) === d2 && ((t = new t(x, w + "enter", n, c, e2)).target = u, t.relatedTarget = J, F = t), J = F, k2 && n)
            b: {
              for (x = n, w = 0, u = t = k2; u; u = vf(u))
                w++;
              for (u = 0, F = x; F; F = vf(F))
                u++;
              for (; 0 < w - u; )
                t = vf(t), w--;
              for (; 0 < u - w; )
                x = vf(x), u--;
              for (; w--; ) {
                if (t === x || null !== x && t === x.alternate)
                  break b;
                t = vf(t), x = vf(x);
              }
              t = null;
            }
          else
            t = null;
          null !== k2 && wf(g2, h2, k2, t, false), null !== n && null !== J && wf(g2, J, n, t, true);
        }
        if ("select" === (k2 = (h2 = d2 ? ue(d2) : window).nodeName && h2.nodeName.toLowerCase()) || "input" === k2 && "file" === h2.type)
          var na = ve;
        else if (me(h2))
          if (we)
            na = Fe;
          else {
            na = De;
            var xa = Ce;
          }
        else
          (k2 = h2.nodeName) && "input" === k2.toLowerCase() && ("checkbox" === h2.type || "radio" === h2.type) && (na = Ee);
        switch (na && (na = na(a2, d2)) ? ne(g2, na, c, e2) : (xa && xa(a2, h2, d2), "focusout" === a2 && (xa = h2._wrapperState) && xa.controlled && "number" === h2.type && cb(h2, "number", h2.value)), xa = d2 ? ue(d2) : window, a2) {
          case "focusin":
            (me(xa) || "true" === xa.contentEditable) && (Qe = xa, Re = d2, Se = null);
            break;
          case "focusout":
            Se = Re = Qe = null;
            break;
          case "mousedown":
            Te = true;
            break;
          case "contextmenu":
          case "mouseup":
          case "dragend":
            Te = false, Ue(g2, c, e2);
            break;
          case "selectionchange":
            if (Pe)
              break;
          case "keydown":
          case "keyup":
            Ue(g2, c, e2);
        }
        var $a;
        if (ae)
          b: {
            switch (a2) {
              case "compositionstart":
                var ba = "onCompositionStart";
                break b;
              case "compositionend":
                ba = "onCompositionEnd";
                break b;
              case "compositionupdate":
                ba = "onCompositionUpdate";
                break b;
            }
            ba = void 0;
          }
        else
          ie ? ge(a2, c) && (ba = "onCompositionEnd") : "keydown" === a2 && 229 === c.keyCode && (ba = "onCompositionStart");
        ba && (de && "ko" !== c.locale && (ie || "onCompositionStart" !== ba ? "onCompositionEnd" === ba && ie && ($a = nd()) : (ld = "value" in (kd = e2) ? kd.value : kd.textContent, ie = true)), 0 < (xa = oe(d2, ba)).length && (ba = new Ld(ba, a2, null, c, e2), g2.push({ event: ba, listeners: xa }), ($a || null !== ($a = he(c))) && (ba.data = $a))), ($a = ce ? function(a3, b2) {
          switch (a3) {
            case "compositionend":
              return he(b2);
            case "keypress":
              return 32 !== b2.which ? null : (fe = true, ee);
            case "textInput":
              return (a3 = b2.data) === ee && fe ? null : a3;
            default:
              return null;
          }
        }(a2, c) : function(a3, b2) {
          if (ie)
            return "compositionend" === a3 || !ae && ge(a3, b2) ? (a3 = nd(), md = ld = kd = null, ie = false, a3) : null;
          switch (a3) {
            case "paste":
            default:
              return null;
            case "keypress":
              if (!(b2.ctrlKey || b2.altKey || b2.metaKey) || b2.ctrlKey && b2.altKey) {
                if (b2.char && 1 < b2.char.length)
                  return b2.char;
                if (b2.which)
                  return String.fromCharCode(b2.which);
              }
              return null;
            case "compositionend":
              return de && "ko" !== b2.locale ? null : b2.data;
          }
        }(a2, c)) && 0 < (d2 = oe(d2, "onBeforeInput")).length && (e2 = new Ld("onBeforeInput", "beforeinput", null, c, e2), g2.push({ event: e2, listeners: d2 }), e2.data = $a);
      }
      se(g2, b);
    });
  }
  function tf(a2, b, c) {
    return { instance: a2, listener: b, currentTarget: c };
  }
  function oe(a2, b) {
    for (var c = b + "Capture", d = []; null !== a2; ) {
      var e = a2, f = e.stateNode;
      5 === e.tag && null !== f && (e = f, null != (f = Kb(a2, c)) && d.unshift(tf(a2, f, e)), null != (f = Kb(a2, b)) && d.push(tf(a2, f, e))), a2 = a2.return;
    }
    return d;
  }
  function vf(a2) {
    if (null === a2)
      return null;
    do {
      a2 = a2.return;
    } while (a2 && 5 !== a2.tag);
    return a2 || null;
  }
  function wf(a2, b, c, d, e) {
    for (var f = b._reactName, g = []; null !== c && c !== d; ) {
      var h = c, k = h.alternate, l = h.stateNode;
      if (null !== k && k === d)
        break;
      5 === h.tag && null !== l && (h = l, e ? null != (k = Kb(c, f)) && g.unshift(tf(c, k, h)) : e || null != (k = Kb(c, f)) && g.push(tf(c, k, h))), c = c.return;
    }
    0 !== g.length && a2.push({ event: b, listeners: g });
  }
  var xf = /\r\n?/g, yf = /\u0000|\uFFFD/g;
  function zf(a2) {
    return ("string" == typeof a2 ? a2 : "" + a2).replace(xf, "\n").replace(yf, "");
  }
  function Af(a2, b, c) {
    if (b = zf(b), zf(a2) !== b && c)
      throw Error(p(425));
  }
  function Bf() {
  }
  var Cf = null, Df = null;
  function Ef(a2, b) {
    return "textarea" === a2 || "noscript" === a2 || "string" == typeof b.children || "number" == typeof b.children || "object" == typeof b.dangerouslySetInnerHTML && null !== b.dangerouslySetInnerHTML && null != b.dangerouslySetInnerHTML.__html;
  }
  var Ff = "function" == typeof setTimeout ? setTimeout : void 0, Gf = "function" == typeof clearTimeout ? clearTimeout : void 0, Hf = "function" == typeof Promise ? Promise : void 0, Jf = "function" == typeof queueMicrotask ? queueMicrotask : void 0 !== Hf ? function(a2) {
    return Hf.resolve(null).then(a2).catch(If);
  } : Ff;
  function If(a2) {
    setTimeout(function() {
      throw a2;
    });
  }
  function Kf(a2, b) {
    var c = b, d = 0;
    do {
      var e = c.nextSibling;
      if (a2.removeChild(c), e && 8 === e.nodeType)
        if ("/$" === (c = e.data)) {
          if (0 === d)
            return a2.removeChild(e), void bd(b);
          d--;
        } else
          "$" !== c && "$?" !== c && "$!" !== c || d++;
      c = e;
    } while (c);
    bd(b);
  }
  function Lf(a2) {
    for (; null != a2; a2 = a2.nextSibling) {
      var b = a2.nodeType;
      if (1 === b || 3 === b)
        break;
      if (8 === b) {
        if ("$" === (b = a2.data) || "$!" === b || "$?" === b)
          break;
        if ("/$" === b)
          return null;
      }
    }
    return a2;
  }
  function Mf(a2) {
    a2 = a2.previousSibling;
    for (var b = 0; a2; ) {
      if (8 === a2.nodeType) {
        var c = a2.data;
        if ("$" === c || "$!" === c || "$?" === c) {
          if (0 === b)
            return a2;
          b--;
        } else
          "/$" === c && b++;
      }
      a2 = a2.previousSibling;
    }
    return null;
  }
  var Nf = Math.random().toString(36).slice(2), Of = "__reactFiber$" + Nf, Pf = "__reactProps$" + Nf, uf = "__reactContainer$" + Nf, of = "__reactEvents$" + Nf, Qf = "__reactListeners$" + Nf, Rf = "__reactHandles$" + Nf;
  function Wc(a2) {
    var b = a2[Of];
    if (b)
      return b;
    for (var c = a2.parentNode; c; ) {
      if (b = c[uf] || c[Of]) {
        if (c = b.alternate, null !== b.child || null !== c && null !== c.child)
          for (a2 = Mf(a2); null !== a2; ) {
            if (c = a2[Of])
              return c;
            a2 = Mf(a2);
          }
        return b;
      }
      c = (a2 = c).parentNode;
    }
    return null;
  }
  function Cb(a2) {
    return !(a2 = a2[Of] || a2[uf]) || 5 !== a2.tag && 6 !== a2.tag && 13 !== a2.tag && 3 !== a2.tag ? null : a2;
  }
  function ue(a2) {
    if (5 === a2.tag || 6 === a2.tag)
      return a2.stateNode;
    throw Error(p(33));
  }
  function Db(a2) {
    return a2[Pf] || null;
  }
  var Sf = [], Tf = -1;
  function Uf(a2) {
    return { current: a2 };
  }
  function E(a2) {
    0 > Tf || (a2.current = Sf[Tf], Sf[Tf] = null, Tf--);
  }
  function G(a2, b) {
    Tf++, Sf[Tf] = a2.current, a2.current = b;
  }
  var Vf = {}, H = Uf(Vf), Wf = Uf(false), Xf = Vf;
  function Yf(a2, b) {
    var c = a2.type.contextTypes;
    if (!c)
      return Vf;
    var d = a2.stateNode;
    if (d && d.__reactInternalMemoizedUnmaskedChildContext === b)
      return d.__reactInternalMemoizedMaskedChildContext;
    var f, e = {};
    for (f in c)
      e[f] = b[f];
    return d && ((a2 = a2.stateNode).__reactInternalMemoizedUnmaskedChildContext = b, a2.__reactInternalMemoizedMaskedChildContext = e), e;
  }
  function Zf(a2) {
    return null != a2.childContextTypes;
  }
  function $f() {
    E(Wf), E(H);
  }
  function ag(a2, b, c) {
    if (H.current !== Vf)
      throw Error(p(168));
    G(H, b), G(Wf, c);
  }
  function bg(a2, b, c) {
    var d = a2.stateNode;
    if (b = b.childContextTypes, "function" != typeof d.getChildContext)
      return c;
    for (var e in d = d.getChildContext())
      if (!(e in b))
        throw Error(p(108, Ra(a2) || "Unknown", e));
    return A({}, c, d);
  }
  function cg(a2) {
    return a2 = (a2 = a2.stateNode) && a2.__reactInternalMemoizedMergedChildContext || Vf, Xf = H.current, G(H, a2), G(Wf, Wf.current), true;
  }
  function dg(a2, b, c) {
    var d = a2.stateNode;
    if (!d)
      throw Error(p(169));
    c ? (a2 = bg(a2, b, Xf), d.__reactInternalMemoizedMergedChildContext = a2, E(Wf), E(H), G(H, a2)) : E(Wf), G(Wf, c);
  }
  var eg = null, fg = false, gg = false;
  function hg(a2) {
    null === eg ? eg = [a2] : eg.push(a2);
  }
  function jg() {
    if (!gg && null !== eg) {
      gg = true;
      var a2 = 0, b = C;
      try {
        var c = eg;
        for (C = 1; a2 < c.length; a2++) {
          var d = c[a2];
          do {
            d = d(true);
          } while (null !== d);
        }
        eg = null, fg = false;
      } catch (e) {
        throw null !== eg && (eg = eg.slice(a2 + 1)), ac(fc, jg), e;
      } finally {
        C = b, gg = false;
      }
    }
    return null;
  }
  var kg = [], lg = 0, mg = null, ng = 0, og = [], pg = 0, qg = null, rg = 1, sg = "";
  function tg(a2, b) {
    kg[lg++] = ng, kg[lg++] = mg, mg = a2, ng = b;
  }
  function ug(a2, b, c) {
    og[pg++] = rg, og[pg++] = sg, og[pg++] = qg, qg = a2;
    var d = rg;
    a2 = sg;
    var e = 32 - oc(d) - 1;
    d &= ~(1 << e), c += 1;
    var f = 32 - oc(b) + e;
    if (30 < f) {
      var g = e - e % 5;
      f = (d & (1 << g) - 1).toString(32), d >>= g, e -= g, rg = 1 << 32 - oc(b) + e | c << e | d, sg = f + a2;
    } else
      rg = 1 << f | c << e | d, sg = a2;
  }
  function vg(a2) {
    null !== a2.return && (tg(a2, 1), ug(a2, 1, 0));
  }
  function wg(a2) {
    for (; a2 === mg; )
      mg = kg[--lg], kg[lg] = null, ng = kg[--lg], kg[lg] = null;
    for (; a2 === qg; )
      qg = og[--pg], og[pg] = null, sg = og[--pg], og[pg] = null, rg = og[--pg], og[pg] = null;
  }
  var xg = null, yg = null, I = false, zg = null;
  function Ag(a2, b) {
    var c = Bg(5, null, null, 0);
    c.elementType = "DELETED", c.stateNode = b, c.return = a2, null === (b = a2.deletions) ? (a2.deletions = [c], a2.flags |= 16) : b.push(c);
  }
  function Cg(a2, b) {
    switch (a2.tag) {
      case 5:
        var c = a2.type;
        return null !== (b = 1 !== b.nodeType || c.toLowerCase() !== b.nodeName.toLowerCase() ? null : b) && (a2.stateNode = b, xg = a2, yg = Lf(b.firstChild), true);
      case 6:
        return null !== (b = "" === a2.pendingProps || 3 !== b.nodeType ? null : b) && (a2.stateNode = b, xg = a2, yg = null, true);
      case 13:
        return null !== (b = 8 !== b.nodeType ? null : b) && (c = null !== qg ? { id: rg, overflow: sg } : null, a2.memoizedState = { dehydrated: b, treeContext: c, retryLane: 1073741824 }, (c = Bg(18, null, null, 0)).stateNode = b, c.return = a2, a2.child = c, xg = a2, yg = null, true);
      default:
        return false;
    }
  }
  function Dg(a2) {
    return 0 != (1 & a2.mode) && 0 == (128 & a2.flags);
  }
  function Eg(a2) {
    if (I) {
      var b = yg;
      if (b) {
        var c = b;
        if (!Cg(a2, b)) {
          if (Dg(a2))
            throw Error(p(418));
          b = Lf(c.nextSibling);
          var d = xg;
          b && Cg(a2, b) ? Ag(d, c) : (a2.flags = -4097 & a2.flags | 2, I = false, xg = a2);
        }
      } else {
        if (Dg(a2))
          throw Error(p(418));
        a2.flags = -4097 & a2.flags | 2, I = false, xg = a2;
      }
    }
  }
  function Fg(a2) {
    for (a2 = a2.return; null !== a2 && 5 !== a2.tag && 3 !== a2.tag && 13 !== a2.tag; )
      a2 = a2.return;
    xg = a2;
  }
  function Gg(a2) {
    if (a2 !== xg)
      return false;
    if (!I)
      return Fg(a2), I = true, false;
    var b;
    if ((b = 3 !== a2.tag) && !(b = 5 !== a2.tag) && (b = "head" !== (b = a2.type) && "body" !== b && !Ef(a2.type, a2.memoizedProps)), b && (b = yg)) {
      if (Dg(a2))
        throw Hg(), Error(p(418));
      for (; b; )
        Ag(a2, b), b = Lf(b.nextSibling);
    }
    if (Fg(a2), 13 === a2.tag) {
      if (!(a2 = null !== (a2 = a2.memoizedState) ? a2.dehydrated : null))
        throw Error(p(317));
      a: {
        for (a2 = a2.nextSibling, b = 0; a2; ) {
          if (8 === a2.nodeType) {
            var c = a2.data;
            if ("/$" === c) {
              if (0 === b) {
                yg = Lf(a2.nextSibling);
                break a;
              }
              b--;
            } else
              "$" !== c && "$!" !== c && "$?" !== c || b++;
          }
          a2 = a2.nextSibling;
        }
        yg = null;
      }
    } else
      yg = xg ? Lf(a2.stateNode.nextSibling) : null;
    return true;
  }
  function Hg() {
    for (var a2 = yg; a2; )
      a2 = Lf(a2.nextSibling);
  }
  function Ig() {
    yg = xg = null, I = false;
  }
  function Jg(a2) {
    null === zg ? zg = [a2] : zg.push(a2);
  }
  var Kg = ua.ReactCurrentBatchConfig;
  function Lg(a2, b) {
    if (a2 && a2.defaultProps) {
      for (var c in b = A({}, b), a2 = a2.defaultProps)
        void 0 === b[c] && (b[c] = a2[c]);
      return b;
    }
    return b;
  }
  var Mg = Uf(null), Ng = null, Og = null, Pg = null;
  function Qg() {
    Pg = Og = Ng = null;
  }
  function Rg(a2) {
    var b = Mg.current;
    E(Mg), a2._currentValue = b;
  }
  function Sg(a2, b, c) {
    for (; null !== a2; ) {
      var d = a2.alternate;
      if ((a2.childLanes & b) !== b ? (a2.childLanes |= b, null !== d && (d.childLanes |= b)) : null !== d && (d.childLanes & b) !== b && (d.childLanes |= b), a2 === c)
        break;
      a2 = a2.return;
    }
  }
  function Tg(a2, b) {
    Ng = a2, Pg = Og = null, null !== (a2 = a2.dependencies) && null !== a2.firstContext && (0 != (a2.lanes & b) && (Ug = true), a2.firstContext = null);
  }
  function Vg(a2) {
    var b = a2._currentValue;
    if (Pg !== a2)
      if (a2 = { context: a2, memoizedValue: b, next: null }, null === Og) {
        if (null === Ng)
          throw Error(p(308));
        Og = a2, Ng.dependencies = { lanes: 0, firstContext: a2 };
      } else
        Og = Og.next = a2;
    return b;
  }
  var Wg = null;
  function Xg(a2) {
    null === Wg ? Wg = [a2] : Wg.push(a2);
  }
  function Yg(a2, b, c, d) {
    var e = b.interleaved;
    return null === e ? (c.next = c, Xg(b)) : (c.next = e.next, e.next = c), b.interleaved = c, Zg(a2, d);
  }
  function Zg(a2, b) {
    a2.lanes |= b;
    var c = a2.alternate;
    for (null !== c && (c.lanes |= b), c = a2, a2 = a2.return; null !== a2; )
      a2.childLanes |= b, null !== (c = a2.alternate) && (c.childLanes |= b), c = a2, a2 = a2.return;
    return 3 === c.tag ? c.stateNode : null;
  }
  var $g = false;
  function ah(a2) {
    a2.updateQueue = { baseState: a2.memoizedState, firstBaseUpdate: null, lastBaseUpdate: null, shared: { pending: null, interleaved: null, lanes: 0 }, effects: null };
  }
  function bh(a2, b) {
    a2 = a2.updateQueue, b.updateQueue === a2 && (b.updateQueue = { baseState: a2.baseState, firstBaseUpdate: a2.firstBaseUpdate, lastBaseUpdate: a2.lastBaseUpdate, shared: a2.shared, effects: a2.effects });
  }
  function ch(a2, b) {
    return { eventTime: a2, lane: b, tag: 0, payload: null, callback: null, next: null };
  }
  function dh(a2, b, c) {
    var d = a2.updateQueue;
    if (null === d)
      return null;
    if (d = d.shared, 0 != (2 & K)) {
      var e = d.pending;
      return null === e ? b.next = b : (b.next = e.next, e.next = b), d.pending = b, Zg(a2, c);
    }
    return null === (e = d.interleaved) ? (b.next = b, Xg(d)) : (b.next = e.next, e.next = b), d.interleaved = b, Zg(a2, c);
  }
  function eh(a2, b, c) {
    if (null !== (b = b.updateQueue) && (b = b.shared, 0 != (4194240 & c))) {
      var d = b.lanes;
      c |= d &= a2.pendingLanes, b.lanes = c, Cc(a2, c);
    }
  }
  function fh(a2, b) {
    var c = a2.updateQueue, d = a2.alternate;
    if (null !== d && c === (d = d.updateQueue)) {
      var e = null, f = null;
      if (null !== (c = c.firstBaseUpdate)) {
        do {
          var g = { eventTime: c.eventTime, lane: c.lane, tag: c.tag, payload: c.payload, callback: c.callback, next: null };
          null === f ? e = f = g : f = f.next = g, c = c.next;
        } while (null !== c);
        null === f ? e = f = b : f = f.next = b;
      } else
        e = f = b;
      return c = { baseState: d.baseState, firstBaseUpdate: e, lastBaseUpdate: f, shared: d.shared, effects: d.effects }, void (a2.updateQueue = c);
    }
    null === (a2 = c.lastBaseUpdate) ? c.firstBaseUpdate = b : a2.next = b, c.lastBaseUpdate = b;
  }
  function gh(a2, b, c, d) {
    var e = a2.updateQueue;
    $g = false;
    var f = e.firstBaseUpdate, g = e.lastBaseUpdate, h = e.shared.pending;
    if (null !== h) {
      e.shared.pending = null;
      var k = h, l = k.next;
      k.next = null, null === g ? f = l : g.next = l, g = k;
      var m = a2.alternate;
      null !== m && (h = (m = m.updateQueue).lastBaseUpdate) !== g && (null === h ? m.firstBaseUpdate = l : h.next = l, m.lastBaseUpdate = k);
    }
    if (null !== f) {
      var q = e.baseState;
      for (g = 0, m = l = k = null, h = f; ; ) {
        var r = h.lane, y = h.eventTime;
        if ((d & r) === r) {
          null !== m && (m = m.next = { eventTime: y, lane: 0, tag: h.tag, payload: h.payload, callback: h.callback, next: null });
          a: {
            var n = a2, t = h;
            switch (r = b, y = c, t.tag) {
              case 1:
                if ("function" == typeof (n = t.payload)) {
                  q = n.call(y, q, r);
                  break a;
                }
                q = n;
                break a;
              case 3:
                n.flags = -65537 & n.flags | 128;
              case 0:
                if (null == (r = "function" == typeof (n = t.payload) ? n.call(y, q, r) : n))
                  break a;
                q = A({}, q, r);
                break a;
              case 2:
                $g = true;
            }
          }
          null !== h.callback && 0 !== h.lane && (a2.flags |= 64, null === (r = e.effects) ? e.effects = [h] : r.push(h));
        } else
          y = { eventTime: y, lane: r, tag: h.tag, payload: h.payload, callback: h.callback, next: null }, null === m ? (l = m = y, k = q) : m = m.next = y, g |= r;
        if (null === (h = h.next)) {
          if (null === (h = e.shared.pending))
            break;
          h = (r = h).next, r.next = null, e.lastBaseUpdate = r, e.shared.pending = null;
        }
      }
      if (null === m && (k = q), e.baseState = k, e.firstBaseUpdate = l, e.lastBaseUpdate = m, null !== (b = e.shared.interleaved)) {
        e = b;
        do {
          g |= e.lane, e = e.next;
        } while (e !== b);
      } else
        null === f && (e.shared.lanes = 0);
      hh |= g, a2.lanes = g, a2.memoizedState = q;
    }
  }
  function ih(a2, b, c) {
    if (a2 = b.effects, b.effects = null, null !== a2)
      for (b = 0; b < a2.length; b++) {
        var d = a2[b], e = d.callback;
        if (null !== e) {
          if (d.callback = null, d = c, "function" != typeof e)
            throw Error(p(191, e));
          e.call(d);
        }
      }
  }
  var jh = new aa.Component().refs;
  function kh(a2, b, c, d) {
    c = null == (c = c(d, b = a2.memoizedState)) ? b : A({}, b, c), a2.memoizedState = c, 0 === a2.lanes && (a2.updateQueue.baseState = c);
  }
  var nh = { isMounted: function(a2) {
    return !!(a2 = a2._reactInternals) && Vb(a2) === a2;
  }, enqueueSetState: function(a2, b, c) {
    a2 = a2._reactInternals;
    var d = L(), e = lh(a2), f = ch(d, e);
    f.payload = b, null != c && (f.callback = c), null !== (b = dh(a2, f, e)) && (mh(b, a2, e, d), eh(b, a2, e));
  }, enqueueReplaceState: function(a2, b, c) {
    a2 = a2._reactInternals;
    var d = L(), e = lh(a2), f = ch(d, e);
    f.tag = 1, f.payload = b, null != c && (f.callback = c), null !== (b = dh(a2, f, e)) && (mh(b, a2, e, d), eh(b, a2, e));
  }, enqueueForceUpdate: function(a2, b) {
    a2 = a2._reactInternals;
    var c = L(), d = lh(a2), e = ch(c, d);
    e.tag = 2, null != b && (e.callback = b), null !== (b = dh(a2, e, d)) && (mh(b, a2, d, c), eh(b, a2, d));
  } };
  function oh(a2, b, c, d, e, f, g) {
    return "function" == typeof (a2 = a2.stateNode).shouldComponentUpdate ? a2.shouldComponentUpdate(d, f, g) : !(b.prototype && b.prototype.isPureReactComponent && Ie(c, d) && Ie(e, f));
  }
  function ph(a2, b, c) {
    var d = false, e = Vf, f = b.contextType;
    return "object" == typeof f && null !== f ? f = Vg(f) : (e = Zf(b) ? Xf : H.current, f = (d = null != (d = b.contextTypes)) ? Yf(a2, e) : Vf), b = new b(c, f), a2.memoizedState = null !== b.state && void 0 !== b.state ? b.state : null, b.updater = nh, a2.stateNode = b, b._reactInternals = a2, d && ((a2 = a2.stateNode).__reactInternalMemoizedUnmaskedChildContext = e, a2.__reactInternalMemoizedMaskedChildContext = f), b;
  }
  function qh(a2, b, c, d) {
    a2 = b.state, "function" == typeof b.componentWillReceiveProps && b.componentWillReceiveProps(c, d), "function" == typeof b.UNSAFE_componentWillReceiveProps && b.UNSAFE_componentWillReceiveProps(c, d), b.state !== a2 && nh.enqueueReplaceState(b, b.state, null);
  }
  function rh(a2, b, c, d) {
    var e = a2.stateNode;
    e.props = c, e.state = a2.memoizedState, e.refs = jh, ah(a2);
    var f = b.contextType;
    "object" == typeof f && null !== f ? e.context = Vg(f) : (f = Zf(b) ? Xf : H.current, e.context = Yf(a2, f)), e.state = a2.memoizedState, "function" == typeof (f = b.getDerivedStateFromProps) && (kh(a2, b, f, c), e.state = a2.memoizedState), "function" == typeof b.getDerivedStateFromProps || "function" == typeof e.getSnapshotBeforeUpdate || "function" != typeof e.UNSAFE_componentWillMount && "function" != typeof e.componentWillMount || (b = e.state, "function" == typeof e.componentWillMount && e.componentWillMount(), "function" == typeof e.UNSAFE_componentWillMount && e.UNSAFE_componentWillMount(), b !== e.state && nh.enqueueReplaceState(e, e.state, null), gh(a2, c, e, d), e.state = a2.memoizedState), "function" == typeof e.componentDidMount && (a2.flags |= 4194308);
  }
  function sh(a2, b, c) {
    if (null !== (a2 = c.ref) && "function" != typeof a2 && "object" != typeof a2) {
      if (c._owner) {
        if (c = c._owner) {
          if (1 !== c.tag)
            throw Error(p(309));
          var d = c.stateNode;
        }
        if (!d)
          throw Error(p(147, a2));
        var e = d, f = "" + a2;
        return null !== b && null !== b.ref && "function" == typeof b.ref && b.ref._stringRef === f ? b.ref : (b = function(a3) {
          var b2 = e.refs;
          b2 === jh && (b2 = e.refs = {}), null === a3 ? delete b2[f] : b2[f] = a3;
        }, b._stringRef = f, b);
      }
      if ("string" != typeof a2)
        throw Error(p(284));
      if (!c._owner)
        throw Error(p(290, a2));
    }
    return a2;
  }
  function th(a2, b) {
    throw a2 = Object.prototype.toString.call(b), Error(p(31, "[object Object]" === a2 ? "object with keys {" + Object.keys(b).join(", ") + "}" : a2));
  }
  function uh(a2) {
    return (0, a2._init)(a2._payload);
  }
  function vh(a2) {
    function b(b2, c2) {
      if (a2) {
        var d2 = b2.deletions;
        null === d2 ? (b2.deletions = [c2], b2.flags |= 16) : d2.push(c2);
      }
    }
    function c(c2, d2) {
      if (!a2)
        return null;
      for (; null !== d2; )
        b(c2, d2), d2 = d2.sibling;
      return null;
    }
    function d(a3, b2) {
      for (a3 = /* @__PURE__ */ new Map(); null !== b2; )
        null !== b2.key ? a3.set(b2.key, b2) : a3.set(b2.index, b2), b2 = b2.sibling;
      return a3;
    }
    function e(a3, b2) {
      return (a3 = wh(a3, b2)).index = 0, a3.sibling = null, a3;
    }
    function f(b2, c2, d2) {
      return b2.index = d2, a2 ? null !== (d2 = b2.alternate) ? (d2 = d2.index) < c2 ? (b2.flags |= 2, c2) : d2 : (b2.flags |= 2, c2) : (b2.flags |= 1048576, c2);
    }
    function g(b2) {
      return a2 && null === b2.alternate && (b2.flags |= 2), b2;
    }
    function h(a3, b2, c2, d2) {
      return null === b2 || 6 !== b2.tag ? ((b2 = xh(c2, a3.mode, d2)).return = a3, b2) : ((b2 = e(b2, c2)).return = a3, b2);
    }
    function k(a3, b2, c2, d2) {
      var f2 = c2.type;
      return f2 === ya ? m(a3, b2, c2.props.children, d2, c2.key) : null !== b2 && (b2.elementType === f2 || "object" == typeof f2 && null !== f2 && f2.$$typeof === Ha && uh(f2) === b2.type) ? ((d2 = e(b2, c2.props)).ref = sh(a3, b2, c2), d2.return = a3, d2) : ((d2 = yh(c2.type, c2.key, c2.props, null, a3.mode, d2)).ref = sh(a3, b2, c2), d2.return = a3, d2);
    }
    function l(a3, b2, c2, d2) {
      return null === b2 || 4 !== b2.tag || b2.stateNode.containerInfo !== c2.containerInfo || b2.stateNode.implementation !== c2.implementation ? ((b2 = zh(c2, a3.mode, d2)).return = a3, b2) : ((b2 = e(b2, c2.children || [])).return = a3, b2);
    }
    function m(a3, b2, c2, d2, f2) {
      return null === b2 || 7 !== b2.tag ? ((b2 = Ah(c2, a3.mode, d2, f2)).return = a3, b2) : ((b2 = e(b2, c2)).return = a3, b2);
    }
    function q(a3, b2, c2) {
      if ("string" == typeof b2 && "" !== b2 || "number" == typeof b2)
        return (b2 = xh("" + b2, a3.mode, c2)).return = a3, b2;
      if ("object" == typeof b2 && null !== b2) {
        switch (b2.$$typeof) {
          case va:
            return (c2 = yh(b2.type, b2.key, b2.props, null, a3.mode, c2)).ref = sh(a3, null, b2), c2.return = a3, c2;
          case wa:
            return (b2 = zh(b2, a3.mode, c2)).return = a3, b2;
          case Ha:
            return q(a3, (0, b2._init)(b2._payload), c2);
        }
        if (eb(b2) || Ka(b2))
          return (b2 = Ah(b2, a3.mode, c2, null)).return = a3, b2;
        th(a3, b2);
      }
      return null;
    }
    function r(a3, b2, c2, d2) {
      var e2 = null !== b2 ? b2.key : null;
      if ("string" == typeof c2 && "" !== c2 || "number" == typeof c2)
        return null !== e2 ? null : h(a3, b2, "" + c2, d2);
      if ("object" == typeof c2 && null !== c2) {
        switch (c2.$$typeof) {
          case va:
            return c2.key === e2 ? k(a3, b2, c2, d2) : null;
          case wa:
            return c2.key === e2 ? l(a3, b2, c2, d2) : null;
          case Ha:
            return r(a3, b2, (e2 = c2._init)(c2._payload), d2);
        }
        if (eb(c2) || Ka(c2))
          return null !== e2 ? null : m(a3, b2, c2, d2, null);
        th(a3, c2);
      }
      return null;
    }
    function y(a3, b2, c2, d2, e2) {
      if ("string" == typeof d2 && "" !== d2 || "number" == typeof d2)
        return h(b2, a3 = a3.get(c2) || null, "" + d2, e2);
      if ("object" == typeof d2 && null !== d2) {
        switch (d2.$$typeof) {
          case va:
            return k(b2, a3 = a3.get(null === d2.key ? c2 : d2.key) || null, d2, e2);
          case wa:
            return l(b2, a3 = a3.get(null === d2.key ? c2 : d2.key) || null, d2, e2);
          case Ha:
            return y(a3, b2, c2, (0, d2._init)(d2._payload), e2);
        }
        if (eb(d2) || Ka(d2))
          return m(b2, a3 = a3.get(c2) || null, d2, e2, null);
        th(b2, d2);
      }
      return null;
    }
    function n(e2, g2, h2, k2) {
      for (var l2 = null, m2 = null, u = g2, w = g2 = 0, x = null; null !== u && w < h2.length; w++) {
        u.index > w ? (x = u, u = null) : x = u.sibling;
        var n2 = r(e2, u, h2[w], k2);
        if (null === n2) {
          null === u && (u = x);
          break;
        }
        a2 && u && null === n2.alternate && b(e2, u), g2 = f(n2, g2, w), null === m2 ? l2 = n2 : m2.sibling = n2, m2 = n2, u = x;
      }
      if (w === h2.length)
        return c(e2, u), I && tg(e2, w), l2;
      if (null === u) {
        for (; w < h2.length; w++)
          null !== (u = q(e2, h2[w], k2)) && (g2 = f(u, g2, w), null === m2 ? l2 = u : m2.sibling = u, m2 = u);
        return I && tg(e2, w), l2;
      }
      for (u = d(e2, u); w < h2.length; w++)
        null !== (x = y(u, e2, w, h2[w], k2)) && (a2 && null !== x.alternate && u.delete(null === x.key ? w : x.key), g2 = f(x, g2, w), null === m2 ? l2 = x : m2.sibling = x, m2 = x);
      return a2 && u.forEach(function(a3) {
        return b(e2, a3);
      }), I && tg(e2, w), l2;
    }
    function t(e2, g2, h2, k2) {
      var l2 = Ka(h2);
      if ("function" != typeof l2)
        throw Error(p(150));
      if (null == (h2 = l2.call(h2)))
        throw Error(p(151));
      for (var u = l2 = null, m2 = g2, w = g2 = 0, x = null, n2 = h2.next(); null !== m2 && !n2.done; w++, n2 = h2.next()) {
        m2.index > w ? (x = m2, m2 = null) : x = m2.sibling;
        var t2 = r(e2, m2, n2.value, k2);
        if (null === t2) {
          null === m2 && (m2 = x);
          break;
        }
        a2 && m2 && null === t2.alternate && b(e2, m2), g2 = f(t2, g2, w), null === u ? l2 = t2 : u.sibling = t2, u = t2, m2 = x;
      }
      if (n2.done)
        return c(e2, m2), I && tg(e2, w), l2;
      if (null === m2) {
        for (; !n2.done; w++, n2 = h2.next())
          null !== (n2 = q(e2, n2.value, k2)) && (g2 = f(n2, g2, w), null === u ? l2 = n2 : u.sibling = n2, u = n2);
        return I && tg(e2, w), l2;
      }
      for (m2 = d(e2, m2); !n2.done; w++, n2 = h2.next())
        null !== (n2 = y(m2, e2, w, n2.value, k2)) && (a2 && null !== n2.alternate && m2.delete(null === n2.key ? w : n2.key), g2 = f(n2, g2, w), null === u ? l2 = n2 : u.sibling = n2, u = n2);
      return a2 && m2.forEach(function(a3) {
        return b(e2, a3);
      }), I && tg(e2, w), l2;
    }
    return function J(a3, d2, f2, h2) {
      if ("object" == typeof f2 && null !== f2 && f2.type === ya && null === f2.key && (f2 = f2.props.children), "object" == typeof f2 && null !== f2) {
        switch (f2.$$typeof) {
          case va:
            a: {
              for (var k2 = f2.key, l2 = d2; null !== l2; ) {
                if (l2.key === k2) {
                  if ((k2 = f2.type) === ya) {
                    if (7 === l2.tag) {
                      c(a3, l2.sibling), (d2 = e(l2, f2.props.children)).return = a3, a3 = d2;
                      break a;
                    }
                  } else if (l2.elementType === k2 || "object" == typeof k2 && null !== k2 && k2.$$typeof === Ha && uh(k2) === l2.type) {
                    c(a3, l2.sibling), (d2 = e(l2, f2.props)).ref = sh(a3, l2, f2), d2.return = a3, a3 = d2;
                    break a;
                  }
                  c(a3, l2);
                  break;
                }
                b(a3, l2), l2 = l2.sibling;
              }
              f2.type === ya ? ((d2 = Ah(f2.props.children, a3.mode, h2, f2.key)).return = a3, a3 = d2) : ((h2 = yh(f2.type, f2.key, f2.props, null, a3.mode, h2)).ref = sh(a3, d2, f2), h2.return = a3, a3 = h2);
            }
            return g(a3);
          case wa:
            a: {
              for (l2 = f2.key; null !== d2; ) {
                if (d2.key === l2) {
                  if (4 === d2.tag && d2.stateNode.containerInfo === f2.containerInfo && d2.stateNode.implementation === f2.implementation) {
                    c(a3, d2.sibling), (d2 = e(d2, f2.children || [])).return = a3, a3 = d2;
                    break a;
                  }
                  c(a3, d2);
                  break;
                }
                b(a3, d2), d2 = d2.sibling;
              }
              (d2 = zh(f2, a3.mode, h2)).return = a3, a3 = d2;
            }
            return g(a3);
          case Ha:
            return J(a3, d2, (l2 = f2._init)(f2._payload), h2);
        }
        if (eb(f2))
          return n(a3, d2, f2, h2);
        if (Ka(f2))
          return t(a3, d2, f2, h2);
        th(a3, f2);
      }
      return "string" == typeof f2 && "" !== f2 || "number" == typeof f2 ? (f2 = "" + f2, null !== d2 && 6 === d2.tag ? (c(a3, d2.sibling), (d2 = e(d2, f2)).return = a3, a3 = d2) : (c(a3, d2), (d2 = xh(f2, a3.mode, h2)).return = a3, a3 = d2), g(a3)) : c(a3, d2);
    };
  }
  var Bh = vh(true), Ch = vh(false), Dh = {}, Eh = Uf(Dh), Fh = Uf(Dh), Gh = Uf(Dh);
  function Hh(a2) {
    if (a2 === Dh)
      throw Error(p(174));
    return a2;
  }
  function Ih(a2, b) {
    switch (G(Gh, b), G(Fh, a2), G(Eh, Dh), a2 = b.nodeType) {
      case 9:
      case 11:
        b = (b = b.documentElement) ? b.namespaceURI : lb(null, "");
        break;
      default:
        b = lb(b = (a2 = 8 === a2 ? b.parentNode : b).namespaceURI || null, a2 = a2.tagName);
    }
    E(Eh), G(Eh, b);
  }
  function Jh() {
    E(Eh), E(Fh), E(Gh);
  }
  function Kh(a2) {
    Hh(Gh.current);
    var b = Hh(Eh.current), c = lb(b, a2.type);
    b !== c && (G(Fh, a2), G(Eh, c));
  }
  function Lh(a2) {
    Fh.current === a2 && (E(Eh), E(Fh));
  }
  var M = Uf(0);
  function Mh(a2) {
    for (var b = a2; null !== b; ) {
      if (13 === b.tag) {
        var c = b.memoizedState;
        if (null !== c && (null === (c = c.dehydrated) || "$?" === c.data || "$!" === c.data))
          return b;
      } else if (19 === b.tag && void 0 !== b.memoizedProps.revealOrder) {
        if (0 != (128 & b.flags))
          return b;
      } else if (null !== b.child) {
        b.child.return = b, b = b.child;
        continue;
      }
      if (b === a2)
        break;
      for (; null === b.sibling; ) {
        if (null === b.return || b.return === a2)
          return null;
        b = b.return;
      }
      b.sibling.return = b.return, b = b.sibling;
    }
    return null;
  }
  var Nh = [];
  function Oh() {
    for (var a2 = 0; a2 < Nh.length; a2++)
      Nh[a2]._workInProgressVersionPrimary = null;
    Nh.length = 0;
  }
  var Ph = ua.ReactCurrentDispatcher, Qh = ua.ReactCurrentBatchConfig, Rh = 0, N = null, O = null, P = null, Sh = false, Th = false, Uh = 0, Vh = 0;
  function Q() {
    throw Error(p(321));
  }
  function Wh(a2, b) {
    if (null === b)
      return false;
    for (var c = 0; c < b.length && c < a2.length; c++)
      if (!He(a2[c], b[c]))
        return false;
    return true;
  }
  function Xh(a2, b, c, d, e, f) {
    if (Rh = f, N = b, b.memoizedState = null, b.updateQueue = null, b.lanes = 0, Ph.current = null === a2 || null === a2.memoizedState ? Yh : Zh, a2 = c(d, e), Th) {
      f = 0;
      do {
        if (Th = false, Uh = 0, 25 <= f)
          throw Error(p(301));
        f += 1, P = O = null, b.updateQueue = null, Ph.current = $h, a2 = c(d, e);
      } while (Th);
    }
    if (Ph.current = ai, b = null !== O && null !== O.next, Rh = 0, P = O = N = null, Sh = false, b)
      throw Error(p(300));
    return a2;
  }
  function bi() {
    var a2 = 0 !== Uh;
    return Uh = 0, a2;
  }
  function ci() {
    var a2 = { memoizedState: null, baseState: null, baseQueue: null, queue: null, next: null };
    return null === P ? N.memoizedState = P = a2 : P = P.next = a2, P;
  }
  function di() {
    if (null === O) {
      var a2 = N.alternate;
      a2 = null !== a2 ? a2.memoizedState : null;
    } else
      a2 = O.next;
    var b = null === P ? N.memoizedState : P.next;
    if (null !== b)
      P = b, O = a2;
    else {
      if (null === a2)
        throw Error(p(310));
      a2 = { memoizedState: (O = a2).memoizedState, baseState: O.baseState, baseQueue: O.baseQueue, queue: O.queue, next: null }, null === P ? N.memoizedState = P = a2 : P = P.next = a2;
    }
    return P;
  }
  function ei(a2, b) {
    return "function" == typeof b ? b(a2) : b;
  }
  function fi(a2) {
    var b = di(), c = b.queue;
    if (null === c)
      throw Error(p(311));
    c.lastRenderedReducer = a2;
    var d = O, e = d.baseQueue, f = c.pending;
    if (null !== f) {
      if (null !== e) {
        var g = e.next;
        e.next = f.next, f.next = g;
      }
      d.baseQueue = e = f, c.pending = null;
    }
    if (null !== e) {
      f = e.next, d = d.baseState;
      var h = g = null, k = null, l = f;
      do {
        var m = l.lane;
        if ((Rh & m) === m)
          null !== k && (k = k.next = { lane: 0, action: l.action, hasEagerState: l.hasEagerState, eagerState: l.eagerState, next: null }), d = l.hasEagerState ? l.eagerState : a2(d, l.action);
        else {
          var q = { lane: m, action: l.action, hasEagerState: l.hasEagerState, eagerState: l.eagerState, next: null };
          null === k ? (h = k = q, g = d) : k = k.next = q, N.lanes |= m, hh |= m;
        }
        l = l.next;
      } while (null !== l && l !== f);
      null === k ? g = d : k.next = h, He(d, b.memoizedState) || (Ug = true), b.memoizedState = d, b.baseState = g, b.baseQueue = k, c.lastRenderedState = d;
    }
    if (null !== (a2 = c.interleaved)) {
      e = a2;
      do {
        f = e.lane, N.lanes |= f, hh |= f, e = e.next;
      } while (e !== a2);
    } else
      null === e && (c.lanes = 0);
    return [b.memoizedState, c.dispatch];
  }
  function gi(a2) {
    var b = di(), c = b.queue;
    if (null === c)
      throw Error(p(311));
    c.lastRenderedReducer = a2;
    var d = c.dispatch, e = c.pending, f = b.memoizedState;
    if (null !== e) {
      c.pending = null;
      var g = e = e.next;
      do {
        f = a2(f, g.action), g = g.next;
      } while (g !== e);
      He(f, b.memoizedState) || (Ug = true), b.memoizedState = f, null === b.baseQueue && (b.baseState = f), c.lastRenderedState = f;
    }
    return [f, d];
  }
  function hi() {
  }
  function ii(a2, b) {
    var c = N, d = di(), e = b(), f = !He(d.memoizedState, e);
    if (f && (d.memoizedState = e, Ug = true), d = d.queue, ji(ki.bind(null, c, d, a2), [a2]), d.getSnapshot !== b || f || null !== P && 1 & P.memoizedState.tag) {
      if (c.flags |= 2048, li(9, mi.bind(null, c, d, e, b), void 0, null), null === R)
        throw Error(p(349));
      0 != (30 & Rh) || ni(c, b, e);
    }
    return e;
  }
  function ni(a2, b, c) {
    a2.flags |= 16384, a2 = { getSnapshot: b, value: c }, null === (b = N.updateQueue) ? (b = { lastEffect: null, stores: null }, N.updateQueue = b, b.stores = [a2]) : null === (c = b.stores) ? b.stores = [a2] : c.push(a2);
  }
  function mi(a2, b, c, d) {
    b.value = c, b.getSnapshot = d, oi(b) && pi(a2);
  }
  function ki(a2, b, c) {
    return c(function() {
      oi(b) && pi(a2);
    });
  }
  function oi(a2) {
    var b = a2.getSnapshot;
    a2 = a2.value;
    try {
      var c = b();
      return !He(a2, c);
    } catch (d) {
      return true;
    }
  }
  function pi(a2) {
    var b = Zg(a2, 1);
    null !== b && mh(b, a2, 1, -1);
  }
  function qi(a2) {
    var b = ci();
    return "function" == typeof a2 && (a2 = a2()), b.memoizedState = b.baseState = a2, a2 = { pending: null, interleaved: null, lanes: 0, dispatch: null, lastRenderedReducer: ei, lastRenderedState: a2 }, b.queue = a2, a2 = a2.dispatch = ri.bind(null, N, a2), [b.memoizedState, a2];
  }
  function li(a2, b, c, d) {
    return a2 = { tag: a2, create: b, destroy: c, deps: d, next: null }, null === (b = N.updateQueue) ? (b = { lastEffect: null, stores: null }, N.updateQueue = b, b.lastEffect = a2.next = a2) : null === (c = b.lastEffect) ? b.lastEffect = a2.next = a2 : (d = c.next, c.next = a2, a2.next = d, b.lastEffect = a2), a2;
  }
  function si() {
    return di().memoizedState;
  }
  function ti(a2, b, c, d) {
    var e = ci();
    N.flags |= a2, e.memoizedState = li(1 | b, c, void 0, void 0 === d ? null : d);
  }
  function ui(a2, b, c, d) {
    var e = di();
    d = void 0 === d ? null : d;
    var f = void 0;
    if (null !== O) {
      var g = O.memoizedState;
      if (f = g.destroy, null !== d && Wh(d, g.deps))
        return void (e.memoizedState = li(b, c, f, d));
    }
    N.flags |= a2, e.memoizedState = li(1 | b, c, f, d);
  }
  function vi(a2, b) {
    return ti(8390656, 8, a2, b);
  }
  function ji(a2, b) {
    return ui(2048, 8, a2, b);
  }
  function wi(a2, b) {
    return ui(4, 2, a2, b);
  }
  function xi(a2, b) {
    return ui(4, 4, a2, b);
  }
  function yi(a2, b) {
    return "function" == typeof b ? (a2 = a2(), b(a2), function() {
      b(null);
    }) : null != b ? (a2 = a2(), b.current = a2, function() {
      b.current = null;
    }) : void 0;
  }
  function zi(a2, b, c) {
    return c = null != c ? c.concat([a2]) : null, ui(4, 4, yi.bind(null, b, a2), c);
  }
  function Ai() {
  }
  function Bi(a2, b) {
    var c = di();
    b = void 0 === b ? null : b;
    var d = c.memoizedState;
    return null !== d && null !== b && Wh(b, d[1]) ? d[0] : (c.memoizedState = [a2, b], a2);
  }
  function Ci(a2, b) {
    var c = di();
    b = void 0 === b ? null : b;
    var d = c.memoizedState;
    return null !== d && null !== b && Wh(b, d[1]) ? d[0] : (a2 = a2(), c.memoizedState = [a2, b], a2);
  }
  function Di(a2, b, c) {
    return 0 == (21 & Rh) ? (a2.baseState && (a2.baseState = false, Ug = true), a2.memoizedState = c) : (He(c, b) || (c = yc(), N.lanes |= c, hh |= c, a2.baseState = true), b);
  }
  function Ei(a2, b) {
    var c = C;
    C = 0 !== c && 4 > c ? c : 4, a2(true);
    var d = Qh.transition;
    Qh.transition = {};
    try {
      a2(false), b();
    } finally {
      C = c, Qh.transition = d;
    }
  }
  function Fi() {
    return di().memoizedState;
  }
  function Gi(a2, b, c) {
    var d = lh(a2);
    c = { lane: d, action: c, hasEagerState: false, eagerState: null, next: null }, Hi(a2) ? Ii(b, c) : null !== (c = Yg(a2, b, c, d)) && (mh(c, a2, d, L()), Ji(c, b, d));
  }
  function ri(a2, b, c) {
    var d = lh(a2), e = { lane: d, action: c, hasEagerState: false, eagerState: null, next: null };
    if (Hi(a2))
      Ii(b, e);
    else {
      var f = a2.alternate;
      if (0 === a2.lanes && (null === f || 0 === f.lanes) && null !== (f = b.lastRenderedReducer))
        try {
          var g = b.lastRenderedState, h = f(g, c);
          if (e.hasEagerState = true, e.eagerState = h, He(h, g)) {
            var k = b.interleaved;
            return null === k ? (e.next = e, Xg(b)) : (e.next = k.next, k.next = e), void (b.interleaved = e);
          }
        } catch (l) {
        }
      null !== (c = Yg(a2, b, e, d)) && (mh(c, a2, d, e = L()), Ji(c, b, d));
    }
  }
  function Hi(a2) {
    var b = a2.alternate;
    return a2 === N || null !== b && b === N;
  }
  function Ii(a2, b) {
    Th = Sh = true;
    var c = a2.pending;
    null === c ? b.next = b : (b.next = c.next, c.next = b), a2.pending = b;
  }
  function Ji(a2, b, c) {
    if (0 != (4194240 & c)) {
      var d = b.lanes;
      c |= d &= a2.pendingLanes, b.lanes = c, Cc(a2, c);
    }
  }
  var ai = { readContext: Vg, useCallback: Q, useContext: Q, useEffect: Q, useImperativeHandle: Q, useInsertionEffect: Q, useLayoutEffect: Q, useMemo: Q, useReducer: Q, useRef: Q, useState: Q, useDebugValue: Q, useDeferredValue: Q, useTransition: Q, useMutableSource: Q, useSyncExternalStore: Q, useId: Q, unstable_isNewReconciler: false }, Yh = { readContext: Vg, useCallback: function(a2, b) {
    return ci().memoizedState = [a2, void 0 === b ? null : b], a2;
  }, useContext: Vg, useEffect: vi, useImperativeHandle: function(a2, b, c) {
    return c = null != c ? c.concat([a2]) : null, ti(4194308, 4, yi.bind(null, b, a2), c);
  }, useLayoutEffect: function(a2, b) {
    return ti(4194308, 4, a2, b);
  }, useInsertionEffect: function(a2, b) {
    return ti(4, 2, a2, b);
  }, useMemo: function(a2, b) {
    var c = ci();
    return b = void 0 === b ? null : b, a2 = a2(), c.memoizedState = [a2, b], a2;
  }, useReducer: function(a2, b, c) {
    var d = ci();
    return b = void 0 !== c ? c(b) : b, d.memoizedState = d.baseState = b, a2 = { pending: null, interleaved: null, lanes: 0, dispatch: null, lastRenderedReducer: a2, lastRenderedState: b }, d.queue = a2, a2 = a2.dispatch = Gi.bind(null, N, a2), [d.memoizedState, a2];
  }, useRef: function(a2) {
    return a2 = { current: a2 }, ci().memoizedState = a2;
  }, useState: qi, useDebugValue: Ai, useDeferredValue: function(a2) {
    return ci().memoizedState = a2;
  }, useTransition: function() {
    var a2 = qi(false), b = a2[0];
    return a2 = Ei.bind(null, a2[1]), ci().memoizedState = a2, [b, a2];
  }, useMutableSource: function() {
  }, useSyncExternalStore: function(a2, b, c) {
    var d = N, e = ci();
    if (I) {
      if (void 0 === c)
        throw Error(p(407));
      c = c();
    } else {
      if (c = b(), null === R)
        throw Error(p(349));
      0 != (30 & Rh) || ni(d, b, c);
    }
    e.memoizedState = c;
    var f = { value: c, getSnapshot: b };
    return e.queue = f, vi(ki.bind(null, d, f, a2), [a2]), d.flags |= 2048, li(9, mi.bind(null, d, f, c, b), void 0, null), c;
  }, useId: function() {
    var a2 = ci(), b = R.identifierPrefix;
    if (I) {
      var c = sg;
      b = ":" + b + "R" + (c = (rg & ~(1 << 32 - oc(rg) - 1)).toString(32) + c), 0 < (c = Uh++) && (b += "H" + c.toString(32)), b += ":";
    } else
      b = ":" + b + "r" + (c = Vh++).toString(32) + ":";
    return a2.memoizedState = b;
  }, unstable_isNewReconciler: false }, Zh = { readContext: Vg, useCallback: Bi, useContext: Vg, useEffect: ji, useImperativeHandle: zi, useInsertionEffect: wi, useLayoutEffect: xi, useMemo: Ci, useReducer: fi, useRef: si, useState: function() {
    return fi(ei);
  }, useDebugValue: Ai, useDeferredValue: function(a2) {
    return Di(di(), O.memoizedState, a2);
  }, useTransition: function() {
    return [fi(ei)[0], di().memoizedState];
  }, useMutableSource: hi, useSyncExternalStore: ii, useId: Fi, unstable_isNewReconciler: false }, $h = { readContext: Vg, useCallback: Bi, useContext: Vg, useEffect: ji, useImperativeHandle: zi, useInsertionEffect: wi, useLayoutEffect: xi, useMemo: Ci, useReducer: gi, useRef: si, useState: function() {
    return gi(ei);
  }, useDebugValue: Ai, useDeferredValue: function(a2) {
    var b = di();
    return null === O ? b.memoizedState = a2 : Di(b, O.memoizedState, a2);
  }, useTransition: function() {
    return [gi(ei)[0], di().memoizedState];
  }, useMutableSource: hi, useSyncExternalStore: ii, useId: Fi, unstable_isNewReconciler: false };
  function Ki(a2, b) {
    try {
      var c = "", d = b;
      do {
        c += Pa(d), d = d.return;
      } while (d);
      var e = c;
    } catch (f) {
      e = "\nError generating stack: " + f.message + "\n" + f.stack;
    }
    return { value: a2, source: b, stack: e, digest: null };
  }
  function Li(a2, b, c) {
    return { value: a2, source: null, stack: null != c ? c : null, digest: null != b ? b : null };
  }
  function Mi(a2, b) {
    try {
      console.error(b.value);
    } catch (c) {
      setTimeout(function() {
        throw c;
      });
    }
  }
  var Ni = "function" == typeof WeakMap ? WeakMap : Map;
  function Oi(a2, b, c) {
    (c = ch(-1, c)).tag = 3, c.payload = { element: null };
    var d = b.value;
    return c.callback = function() {
      Pi || (Pi = true, Qi = d), Mi(0, b);
    }, c;
  }
  function Ri(a2, b, c) {
    (c = ch(-1, c)).tag = 3;
    var d = a2.type.getDerivedStateFromError;
    if ("function" == typeof d) {
      var e = b.value;
      c.payload = function() {
        return d(e);
      }, c.callback = function() {
        Mi(0, b);
      };
    }
    var f = a2.stateNode;
    return null !== f && "function" == typeof f.componentDidCatch && (c.callback = function() {
      Mi(0, b), "function" != typeof d && (null === Si ? Si = /* @__PURE__ */ new Set([this]) : Si.add(this));
      var c2 = b.stack;
      this.componentDidCatch(b.value, { componentStack: null !== c2 ? c2 : "" });
    }), c;
  }
  function Ti(a2, b, c) {
    var d = a2.pingCache;
    if (null === d) {
      d = a2.pingCache = new Ni();
      var e = /* @__PURE__ */ new Set();
      d.set(b, e);
    } else
      void 0 === (e = d.get(b)) && (e = /* @__PURE__ */ new Set(), d.set(b, e));
    e.has(c) || (e.add(c), a2 = Ui.bind(null, a2, b, c), b.then(a2, a2));
  }
  function Vi(a2) {
    do {
      var b;
      if ((b = 13 === a2.tag) && (b = null === (b = a2.memoizedState) || null !== b.dehydrated), b)
        return a2;
      a2 = a2.return;
    } while (null !== a2);
    return null;
  }
  function Wi(a2, b, c, d, e) {
    return 0 == (1 & a2.mode) ? (a2 === b ? a2.flags |= 65536 : (a2.flags |= 128, c.flags |= 131072, c.flags &= -52805, 1 === c.tag && (null === c.alternate ? c.tag = 17 : ((b = ch(-1, 1)).tag = 2, dh(c, b, 1))), c.lanes |= 1), a2) : (a2.flags |= 65536, a2.lanes = e, a2);
  }
  var Xi = ua.ReactCurrentOwner, Ug = false;
  function Yi(a2, b, c, d) {
    b.child = null === a2 ? Ch(b, null, c, d) : Bh(b, a2.child, c, d);
  }
  function Zi(a2, b, c, d, e) {
    c = c.render;
    var f = b.ref;
    return Tg(b, e), d = Xh(a2, b, c, d, f, e), c = bi(), null === a2 || Ug ? (I && c && vg(b), b.flags |= 1, Yi(a2, b, d, e), b.child) : (b.updateQueue = a2.updateQueue, b.flags &= -2053, a2.lanes &= ~e, $i(a2, b, e));
  }
  function aj(a2, b, c, d, e) {
    if (null === a2) {
      var f = c.type;
      return "function" != typeof f || bj(f) || void 0 !== f.defaultProps || null !== c.compare || void 0 !== c.defaultProps ? ((a2 = yh(c.type, null, d, b, b.mode, e)).ref = b.ref, a2.return = b, b.child = a2) : (b.tag = 15, b.type = f, cj(a2, b, f, d, e));
    }
    if (f = a2.child, 0 == (a2.lanes & e)) {
      var g = f.memoizedProps;
      if ((c = null !== (c = c.compare) ? c : Ie)(g, d) && a2.ref === b.ref)
        return $i(a2, b, e);
    }
    return b.flags |= 1, (a2 = wh(f, d)).ref = b.ref, a2.return = b, b.child = a2;
  }
  function cj(a2, b, c, d, e) {
    if (null !== a2) {
      var f = a2.memoizedProps;
      if (Ie(f, d) && a2.ref === b.ref) {
        if (Ug = false, b.pendingProps = d = f, 0 == (a2.lanes & e))
          return b.lanes = a2.lanes, $i(a2, b, e);
        0 != (131072 & a2.flags) && (Ug = true);
      }
    }
    return dj(a2, b, c, d, e);
  }
  function ej(a2, b, c) {
    var d = b.pendingProps, e = d.children, f = null !== a2 ? a2.memoizedState : null;
    if ("hidden" === d.mode)
      if (0 == (1 & b.mode))
        b.memoizedState = { baseLanes: 0, cachePool: null, transitions: null }, G(fj, gj), gj |= c;
      else {
        if (0 == (1073741824 & c))
          return a2 = null !== f ? f.baseLanes | c : c, b.lanes = b.childLanes = 1073741824, b.memoizedState = { baseLanes: a2, cachePool: null, transitions: null }, b.updateQueue = null, G(fj, gj), gj |= a2, null;
        b.memoizedState = { baseLanes: 0, cachePool: null, transitions: null }, d = null !== f ? f.baseLanes : c, G(fj, gj), gj |= d;
      }
    else
      null !== f ? (d = f.baseLanes | c, b.memoizedState = null) : d = c, G(fj, gj), gj |= d;
    return Yi(a2, b, e, c), b.child;
  }
  function hj(a2, b) {
    var c = b.ref;
    (null === a2 && null !== c || null !== a2 && a2.ref !== c) && (b.flags |= 512, b.flags |= 2097152);
  }
  function dj(a2, b, c, d, e) {
    var f = Zf(c) ? Xf : H.current;
    return f = Yf(b, f), Tg(b, e), c = Xh(a2, b, c, d, f, e), d = bi(), null === a2 || Ug ? (I && d && vg(b), b.flags |= 1, Yi(a2, b, c, e), b.child) : (b.updateQueue = a2.updateQueue, b.flags &= -2053, a2.lanes &= ~e, $i(a2, b, e));
  }
  function ij(a2, b, c, d, e) {
    if (Zf(c)) {
      var f = true;
      cg(b);
    } else
      f = false;
    if (Tg(b, e), null === b.stateNode)
      jj(a2, b), ph(b, c, d), rh(b, c, d, e), d = true;
    else if (null === a2) {
      var g = b.stateNode, h = b.memoizedProps;
      g.props = h;
      var k = g.context, l = c.contextType;
      l = "object" == typeof l && null !== l ? Vg(l) : Yf(b, l = Zf(c) ? Xf : H.current);
      var m = c.getDerivedStateFromProps, q = "function" == typeof m || "function" == typeof g.getSnapshotBeforeUpdate;
      q || "function" != typeof g.UNSAFE_componentWillReceiveProps && "function" != typeof g.componentWillReceiveProps || (h !== d || k !== l) && qh(b, g, d, l), $g = false;
      var r = b.memoizedState;
      g.state = r, gh(b, d, g, e), k = b.memoizedState, h !== d || r !== k || Wf.current || $g ? ("function" == typeof m && (kh(b, c, m, d), k = b.memoizedState), (h = $g || oh(b, c, h, d, r, k, l)) ? (q || "function" != typeof g.UNSAFE_componentWillMount && "function" != typeof g.componentWillMount || ("function" == typeof g.componentWillMount && g.componentWillMount(), "function" == typeof g.UNSAFE_componentWillMount && g.UNSAFE_componentWillMount()), "function" == typeof g.componentDidMount && (b.flags |= 4194308)) : ("function" == typeof g.componentDidMount && (b.flags |= 4194308), b.memoizedProps = d, b.memoizedState = k), g.props = d, g.state = k, g.context = l, d = h) : ("function" == typeof g.componentDidMount && (b.flags |= 4194308), d = false);
    } else {
      g = b.stateNode, bh(a2, b), h = b.memoizedProps, l = b.type === b.elementType ? h : Lg(b.type, h), g.props = l, q = b.pendingProps, r = g.context, k = "object" == typeof (k = c.contextType) && null !== k ? Vg(k) : Yf(b, k = Zf(c) ? Xf : H.current);
      var y = c.getDerivedStateFromProps;
      (m = "function" == typeof y || "function" == typeof g.getSnapshotBeforeUpdate) || "function" != typeof g.UNSAFE_componentWillReceiveProps && "function" != typeof g.componentWillReceiveProps || (h !== q || r !== k) && qh(b, g, d, k), $g = false, r = b.memoizedState, g.state = r, gh(b, d, g, e);
      var n = b.memoizedState;
      h !== q || r !== n || Wf.current || $g ? ("function" == typeof y && (kh(b, c, y, d), n = b.memoizedState), (l = $g || oh(b, c, l, d, r, n, k) || false) ? (m || "function" != typeof g.UNSAFE_componentWillUpdate && "function" != typeof g.componentWillUpdate || ("function" == typeof g.componentWillUpdate && g.componentWillUpdate(d, n, k), "function" == typeof g.UNSAFE_componentWillUpdate && g.UNSAFE_componentWillUpdate(d, n, k)), "function" == typeof g.componentDidUpdate && (b.flags |= 4), "function" == typeof g.getSnapshotBeforeUpdate && (b.flags |= 1024)) : ("function" != typeof g.componentDidUpdate || h === a2.memoizedProps && r === a2.memoizedState || (b.flags |= 4), "function" != typeof g.getSnapshotBeforeUpdate || h === a2.memoizedProps && r === a2.memoizedState || (b.flags |= 1024), b.memoizedProps = d, b.memoizedState = n), g.props = d, g.state = n, g.context = k, d = l) : ("function" != typeof g.componentDidUpdate || h === a2.memoizedProps && r === a2.memoizedState || (b.flags |= 4), "function" != typeof g.getSnapshotBeforeUpdate || h === a2.memoizedProps && r === a2.memoizedState || (b.flags |= 1024), d = false);
    }
    return kj(a2, b, c, d, f, e);
  }
  function kj(a2, b, c, d, e, f) {
    hj(a2, b);
    var g = 0 != (128 & b.flags);
    if (!d && !g)
      return e && dg(b, c, false), $i(a2, b, f);
    d = b.stateNode, Xi.current = b;
    var h = g && "function" != typeof c.getDerivedStateFromError ? null : d.render();
    return b.flags |= 1, null !== a2 && g ? (b.child = Bh(b, a2.child, null, f), b.child = Bh(b, null, h, f)) : Yi(a2, b, h, f), b.memoizedState = d.state, e && dg(b, c, true), b.child;
  }
  function lj(a2) {
    var b = a2.stateNode;
    b.pendingContext ? ag(0, b.pendingContext, b.pendingContext !== b.context) : b.context && ag(0, b.context, false), Ih(a2, b.containerInfo);
  }
  function mj(a2, b, c, d, e) {
    return Ig(), Jg(e), b.flags |= 256, Yi(a2, b, c, d), b.child;
  }
  var Aj, Bj, Cj, Dj, nj = { dehydrated: null, treeContext: null, retryLane: 0 };
  function oj(a2) {
    return { baseLanes: a2, cachePool: null, transitions: null };
  }
  function pj(a2, b, c) {
    var h, d = b.pendingProps, e = M.current, f = false, g = 0 != (128 & b.flags);
    if ((h = g) || (h = (null === a2 || null !== a2.memoizedState) && 0 != (2 & e)), h ? (f = true, b.flags &= -129) : null !== a2 && null === a2.memoizedState || (e |= 1), G(M, 1 & e), null === a2)
      return Eg(b), null !== (a2 = b.memoizedState) && null !== (a2 = a2.dehydrated) ? (0 == (1 & b.mode) ? b.lanes = 1 : "$!" === a2.data ? b.lanes = 8 : b.lanes = 1073741824, null) : (g = d.children, a2 = d.fallback, f ? (d = b.mode, f = b.child, g = { mode: "hidden", children: g }, 0 == (1 & d) && null !== f ? (f.childLanes = 0, f.pendingProps = g) : f = qj(g, d, 0, null), a2 = Ah(a2, d, c, null), f.return = b, a2.return = b, f.sibling = a2, b.child = f, b.child.memoizedState = oj(c), b.memoizedState = nj, a2) : rj(b, g));
    if (null !== (e = a2.memoizedState) && null !== (h = e.dehydrated))
      return function(a3, b2, c2, d2, e2, f2, g2) {
        if (c2)
          return 256 & b2.flags ? (b2.flags &= -257, tj(a3, b2, g2, d2 = Li(Error(p(422))))) : null !== b2.memoizedState ? (b2.child = a3.child, b2.flags |= 128, null) : (f2 = d2.fallback, e2 = b2.mode, d2 = qj({ mode: "visible", children: d2.children }, e2, 0, null), (f2 = Ah(f2, e2, g2, null)).flags |= 2, d2.return = b2, f2.return = b2, d2.sibling = f2, b2.child = d2, 0 != (1 & b2.mode) && Bh(b2, a3.child, null, g2), b2.child.memoizedState = oj(g2), b2.memoizedState = nj, f2);
        if (0 == (1 & b2.mode))
          return tj(a3, b2, g2, null);
        if ("$!" === e2.data) {
          if (d2 = e2.nextSibling && e2.nextSibling.dataset)
            var h2 = d2.dgst;
          return d2 = h2, tj(a3, b2, g2, d2 = Li(f2 = Error(p(419)), d2, void 0));
        }
        if (h2 = 0 != (g2 & a3.childLanes), Ug || h2) {
          if (null !== (d2 = R)) {
            switch (g2 & -g2) {
              case 4:
                e2 = 2;
                break;
              case 16:
                e2 = 8;
                break;
              case 64:
              case 128:
              case 256:
              case 512:
              case 1024:
              case 2048:
              case 4096:
              case 8192:
              case 16384:
              case 32768:
              case 65536:
              case 131072:
              case 262144:
              case 524288:
              case 1048576:
              case 2097152:
              case 4194304:
              case 8388608:
              case 16777216:
              case 33554432:
              case 67108864:
                e2 = 32;
                break;
              case 536870912:
                e2 = 268435456;
                break;
              default:
                e2 = 0;
            }
            0 !== (e2 = 0 != (e2 & (d2.suspendedLanes | g2)) ? 0 : e2) && e2 !== f2.retryLane && (f2.retryLane = e2, Zg(a3, e2), mh(d2, a3, e2, -1));
          }
          return uj(), tj(a3, b2, g2, d2 = Li(Error(p(421))));
        }
        return "$?" === e2.data ? (b2.flags |= 128, b2.child = a3.child, b2 = vj.bind(null, a3), e2._reactRetry = b2, null) : (a3 = f2.treeContext, yg = Lf(e2.nextSibling), xg = b2, I = true, zg = null, null !== a3 && (og[pg++] = rg, og[pg++] = sg, og[pg++] = qg, rg = a3.id, sg = a3.overflow, qg = b2), (b2 = rj(b2, d2.children)).flags |= 4096, b2);
      }(a2, b, g, d, h, e, c);
    if (f) {
      f = d.fallback, g = b.mode, h = (e = a2.child).sibling;
      var k = { mode: "hidden", children: d.children };
      return 0 == (1 & g) && b.child !== e ? ((d = b.child).childLanes = 0, d.pendingProps = k, b.deletions = null) : (d = wh(e, k)).subtreeFlags = 14680064 & e.subtreeFlags, null !== h ? f = wh(h, f) : (f = Ah(f, g, c, null)).flags |= 2, f.return = b, d.return = b, d.sibling = f, b.child = d, d = f, f = b.child, g = null === (g = a2.child.memoizedState) ? oj(c) : { baseLanes: g.baseLanes | c, cachePool: null, transitions: g.transitions }, f.memoizedState = g, f.childLanes = a2.childLanes & ~c, b.memoizedState = nj, d;
    }
    return a2 = (f = a2.child).sibling, d = wh(f, { mode: "visible", children: d.children }), 0 == (1 & b.mode) && (d.lanes = c), d.return = b, d.sibling = null, null !== a2 && (null === (c = b.deletions) ? (b.deletions = [a2], b.flags |= 16) : c.push(a2)), b.child = d, b.memoizedState = null, d;
  }
  function rj(a2, b) {
    return (b = qj({ mode: "visible", children: b }, a2.mode, 0, null)).return = a2, a2.child = b;
  }
  function tj(a2, b, c, d) {
    return null !== d && Jg(d), Bh(b, a2.child, null, c), (a2 = rj(b, b.pendingProps.children)).flags |= 2, b.memoizedState = null, a2;
  }
  function wj(a2, b, c) {
    a2.lanes |= b;
    var d = a2.alternate;
    null !== d && (d.lanes |= b), Sg(a2.return, b, c);
  }
  function xj(a2, b, c, d, e) {
    var f = a2.memoizedState;
    null === f ? a2.memoizedState = { isBackwards: b, rendering: null, renderingStartTime: 0, last: d, tail: c, tailMode: e } : (f.isBackwards = b, f.rendering = null, f.renderingStartTime = 0, f.last = d, f.tail = c, f.tailMode = e);
  }
  function yj(a2, b, c) {
    var d = b.pendingProps, e = d.revealOrder, f = d.tail;
    if (Yi(a2, b, d.children, c), 0 != (2 & (d = M.current)))
      d = 1 & d | 2, b.flags |= 128;
    else {
      if (null !== a2 && 0 != (128 & a2.flags))
        a:
          for (a2 = b.child; null !== a2; ) {
            if (13 === a2.tag)
              null !== a2.memoizedState && wj(a2, c, b);
            else if (19 === a2.tag)
              wj(a2, c, b);
            else if (null !== a2.child) {
              a2.child.return = a2, a2 = a2.child;
              continue;
            }
            if (a2 === b)
              break a;
            for (; null === a2.sibling; ) {
              if (null === a2.return || a2.return === b)
                break a;
              a2 = a2.return;
            }
            a2.sibling.return = a2.return, a2 = a2.sibling;
          }
      d &= 1;
    }
    if (G(M, d), 0 == (1 & b.mode))
      b.memoizedState = null;
    else
      switch (e) {
        case "forwards":
          for (c = b.child, e = null; null !== c; )
            null !== (a2 = c.alternate) && null === Mh(a2) && (e = c), c = c.sibling;
          null === (c = e) ? (e = b.child, b.child = null) : (e = c.sibling, c.sibling = null), xj(b, false, e, c, f);
          break;
        case "backwards":
          for (c = null, e = b.child, b.child = null; null !== e; ) {
            if (null !== (a2 = e.alternate) && null === Mh(a2)) {
              b.child = e;
              break;
            }
            a2 = e.sibling, e.sibling = c, c = e, e = a2;
          }
          xj(b, true, c, null, f);
          break;
        case "together":
          xj(b, false, null, null, void 0);
          break;
        default:
          b.memoizedState = null;
      }
    return b.child;
  }
  function jj(a2, b) {
    0 == (1 & b.mode) && null !== a2 && (a2.alternate = null, b.alternate = null, b.flags |= 2);
  }
  function $i(a2, b, c) {
    if (null !== a2 && (b.dependencies = a2.dependencies), hh |= b.lanes, 0 == (c & b.childLanes))
      return null;
    if (null !== a2 && b.child !== a2.child)
      throw Error(p(153));
    if (null !== b.child) {
      for (c = wh(a2 = b.child, a2.pendingProps), b.child = c, c.return = b; null !== a2.sibling; )
        a2 = a2.sibling, (c = c.sibling = wh(a2, a2.pendingProps)).return = b;
      c.sibling = null;
    }
    return b.child;
  }
  function Ej(a2, b) {
    if (!I)
      switch (a2.tailMode) {
        case "hidden":
          b = a2.tail;
          for (var c = null; null !== b; )
            null !== b.alternate && (c = b), b = b.sibling;
          null === c ? a2.tail = null : c.sibling = null;
          break;
        case "collapsed":
          c = a2.tail;
          for (var d = null; null !== c; )
            null !== c.alternate && (d = c), c = c.sibling;
          null === d ? b || null === a2.tail ? a2.tail = null : a2.tail.sibling = null : d.sibling = null;
      }
  }
  function S(a2) {
    var b = null !== a2.alternate && a2.alternate.child === a2.child, c = 0, d = 0;
    if (b)
      for (var e = a2.child; null !== e; )
        c |= e.lanes | e.childLanes, d |= 14680064 & e.subtreeFlags, d |= 14680064 & e.flags, e.return = a2, e = e.sibling;
    else
      for (e = a2.child; null !== e; )
        c |= e.lanes | e.childLanes, d |= e.subtreeFlags, d |= e.flags, e.return = a2, e = e.sibling;
    return a2.subtreeFlags |= d, a2.childLanes = c, b;
  }
  function Fj(a2, b, c) {
    var d = b.pendingProps;
    switch (wg(b), b.tag) {
      case 2:
      case 16:
      case 15:
      case 0:
      case 11:
      case 7:
      case 8:
      case 12:
      case 9:
      case 14:
        return S(b), null;
      case 1:
      case 17:
        return Zf(b.type) && $f(), S(b), null;
      case 3:
        return d = b.stateNode, Jh(), E(Wf), E(H), Oh(), d.pendingContext && (d.context = d.pendingContext, d.pendingContext = null), null !== a2 && null !== a2.child || (Gg(b) ? b.flags |= 4 : null === a2 || a2.memoizedState.isDehydrated && 0 == (256 & b.flags) || (b.flags |= 1024, null !== zg && (Gj(zg), zg = null))), Bj(a2, b), S(b), null;
      case 5:
        Lh(b);
        var e = Hh(Gh.current);
        if (c = b.type, null !== a2 && null != b.stateNode)
          Cj(a2, b, c, d, e), a2.ref !== b.ref && (b.flags |= 512, b.flags |= 2097152);
        else {
          if (!d) {
            if (null === b.stateNode)
              throw Error(p(166));
            return S(b), null;
          }
          if (a2 = Hh(Eh.current), Gg(b)) {
            d = b.stateNode, c = b.type;
            var f = b.memoizedProps;
            switch (d[Of] = b, d[Pf] = f, a2 = 0 != (1 & b.mode), c) {
              case "dialog":
                D("cancel", d), D("close", d);
                break;
              case "iframe":
              case "object":
              case "embed":
                D("load", d);
                break;
              case "video":
              case "audio":
                for (e = 0; e < lf.length; e++)
                  D(lf[e], d);
                break;
              case "source":
                D("error", d);
                break;
              case "img":
              case "image":
              case "link":
                D("error", d), D("load", d);
                break;
              case "details":
                D("toggle", d);
                break;
              case "input":
                Za(d, f), D("invalid", d);
                break;
              case "select":
                d._wrapperState = { wasMultiple: !!f.multiple }, D("invalid", d);
                break;
              case "textarea":
                hb(d, f), D("invalid", d);
            }
            for (var g in ub(c, f), e = null, f)
              if (f.hasOwnProperty(g)) {
                var h = f[g];
                "children" === g ? "string" == typeof h ? d.textContent !== h && (true !== f.suppressHydrationWarning && Af(d.textContent, h, a2), e = ["children", h]) : "number" == typeof h && d.textContent !== "" + h && (true !== f.suppressHydrationWarning && Af(d.textContent, h, a2), e = ["children", "" + h]) : ea.hasOwnProperty(g) && null != h && "onScroll" === g && D("scroll", d);
              }
            switch (c) {
              case "input":
                Va(d), db(d, f, true);
                break;
              case "textarea":
                Va(d), jb(d);
                break;
              case "select":
              case "option":
                break;
              default:
                "function" == typeof f.onClick && (d.onclick = Bf);
            }
            d = e, b.updateQueue = d, null !== d && (b.flags |= 4);
          } else {
            g = 9 === e.nodeType ? e : e.ownerDocument, "http://www.w3.org/1999/xhtml" === a2 && (a2 = kb(c)), "http://www.w3.org/1999/xhtml" === a2 ? "script" === c ? ((a2 = g.createElement("div")).innerHTML = "<script><\/script>", a2 = a2.removeChild(a2.firstChild)) : "string" == typeof d.is ? a2 = g.createElement(c, { is: d.is }) : (a2 = g.createElement(c), "select" === c && (g = a2, d.multiple ? g.multiple = true : d.size && (g.size = d.size))) : a2 = g.createElementNS(a2, c), a2[Of] = b, a2[Pf] = d, Aj(a2, b, false, false), b.stateNode = a2;
            a: {
              switch (g = vb(c, d), c) {
                case "dialog":
                  D("cancel", a2), D("close", a2), e = d;
                  break;
                case "iframe":
                case "object":
                case "embed":
                  D("load", a2), e = d;
                  break;
                case "video":
                case "audio":
                  for (e = 0; e < lf.length; e++)
                    D(lf[e], a2);
                  e = d;
                  break;
                case "source":
                  D("error", a2), e = d;
                  break;
                case "img":
                case "image":
                case "link":
                  D("error", a2), D("load", a2), e = d;
                  break;
                case "details":
                  D("toggle", a2), e = d;
                  break;
                case "input":
                  Za(a2, d), e = Ya(a2, d), D("invalid", a2);
                  break;
                case "option":
                default:
                  e = d;
                  break;
                case "select":
                  a2._wrapperState = { wasMultiple: !!d.multiple }, e = A({}, d, { value: void 0 }), D("invalid", a2);
                  break;
                case "textarea":
                  hb(a2, d), e = gb(a2, d), D("invalid", a2);
              }
              for (f in ub(c, e), h = e)
                if (h.hasOwnProperty(f)) {
                  var k = h[f];
                  "style" === f ? sb(a2, k) : "dangerouslySetInnerHTML" === f ? null != (k = k ? k.__html : void 0) && nb(a2, k) : "children" === f ? "string" == typeof k ? ("textarea" !== c || "" !== k) && ob(a2, k) : "number" == typeof k && ob(a2, "" + k) : "suppressContentEditableWarning" !== f && "suppressHydrationWarning" !== f && "autoFocus" !== f && (ea.hasOwnProperty(f) ? null != k && "onScroll" === f && D("scroll", a2) : null != k && ta(a2, f, k, g));
                }
              switch (c) {
                case "input":
                  Va(a2), db(a2, d, false);
                  break;
                case "textarea":
                  Va(a2), jb(a2);
                  break;
                case "option":
                  null != d.value && a2.setAttribute("value", "" + Sa(d.value));
                  break;
                case "select":
                  a2.multiple = !!d.multiple, null != (f = d.value) ? fb(a2, !!d.multiple, f, false) : null != d.defaultValue && fb(a2, !!d.multiple, d.defaultValue, true);
                  break;
                default:
                  "function" == typeof e.onClick && (a2.onclick = Bf);
              }
              switch (c) {
                case "button":
                case "input":
                case "select":
                case "textarea":
                  d = !!d.autoFocus;
                  break a;
                case "img":
                  d = true;
                  break a;
                default:
                  d = false;
              }
            }
            d && (b.flags |= 4);
          }
          null !== b.ref && (b.flags |= 512, b.flags |= 2097152);
        }
        return S(b), null;
      case 6:
        if (a2 && null != b.stateNode)
          Dj(a2, b, a2.memoizedProps, d);
        else {
          if ("string" != typeof d && null === b.stateNode)
            throw Error(p(166));
          if (c = Hh(Gh.current), Hh(Eh.current), Gg(b)) {
            if (d = b.stateNode, c = b.memoizedProps, d[Of] = b, (f = d.nodeValue !== c) && null !== (a2 = xg))
              switch (a2.tag) {
                case 3:
                  Af(d.nodeValue, c, 0 != (1 & a2.mode));
                  break;
                case 5:
                  true !== a2.memoizedProps.suppressHydrationWarning && Af(d.nodeValue, c, 0 != (1 & a2.mode));
              }
            f && (b.flags |= 4);
          } else
            (d = (9 === c.nodeType ? c : c.ownerDocument).createTextNode(d))[Of] = b, b.stateNode = d;
        }
        return S(b), null;
      case 13:
        if (E(M), d = b.memoizedState, null === a2 || null !== a2.memoizedState && null !== a2.memoizedState.dehydrated) {
          if (I && null !== yg && 0 != (1 & b.mode) && 0 == (128 & b.flags))
            Hg(), Ig(), b.flags |= 98560, f = false;
          else if (f = Gg(b), null !== d && null !== d.dehydrated) {
            if (null === a2) {
              if (!f)
                throw Error(p(318));
              if (!(f = null !== (f = b.memoizedState) ? f.dehydrated : null))
                throw Error(p(317));
              f[Of] = b;
            } else
              Ig(), 0 == (128 & b.flags) && (b.memoizedState = null), b.flags |= 4;
            S(b), f = false;
          } else
            null !== zg && (Gj(zg), zg = null), f = true;
          if (!f)
            return 65536 & b.flags ? b : null;
        }
        return 0 != (128 & b.flags) ? (b.lanes = c, b) : ((d = null !== d) != (null !== a2 && null !== a2.memoizedState) && d && (b.child.flags |= 8192, 0 != (1 & b.mode) && (null === a2 || 0 != (1 & M.current) ? 0 === T && (T = 3) : uj())), null !== b.updateQueue && (b.flags |= 4), S(b), null);
      case 4:
        return Jh(), Bj(a2, b), null === a2 && sf(b.stateNode.containerInfo), S(b), null;
      case 10:
        return Rg(b.type._context), S(b), null;
      case 19:
        if (E(M), null === (f = b.memoizedState))
          return S(b), null;
        if (d = 0 != (128 & b.flags), null === (g = f.rendering))
          if (d)
            Ej(f, false);
          else {
            if (0 !== T || null !== a2 && 0 != (128 & a2.flags))
              for (a2 = b.child; null !== a2; ) {
                if (null !== (g = Mh(a2))) {
                  for (b.flags |= 128, Ej(f, false), null !== (d = g.updateQueue) && (b.updateQueue = d, b.flags |= 4), b.subtreeFlags = 0, d = c, c = b.child; null !== c; )
                    a2 = d, (f = c).flags &= 14680066, null === (g = f.alternate) ? (f.childLanes = 0, f.lanes = a2, f.child = null, f.subtreeFlags = 0, f.memoizedProps = null, f.memoizedState = null, f.updateQueue = null, f.dependencies = null, f.stateNode = null) : (f.childLanes = g.childLanes, f.lanes = g.lanes, f.child = g.child, f.subtreeFlags = 0, f.deletions = null, f.memoizedProps = g.memoizedProps, f.memoizedState = g.memoizedState, f.updateQueue = g.updateQueue, f.type = g.type, a2 = g.dependencies, f.dependencies = null === a2 ? null : { lanes: a2.lanes, firstContext: a2.firstContext }), c = c.sibling;
                  return G(M, 1 & M.current | 2), b.child;
                }
                a2 = a2.sibling;
              }
            null !== f.tail && B() > Hj && (b.flags |= 128, d = true, Ej(f, false), b.lanes = 4194304);
          }
        else {
          if (!d)
            if (null !== (a2 = Mh(g))) {
              if (b.flags |= 128, d = true, null !== (c = a2.updateQueue) && (b.updateQueue = c, b.flags |= 4), Ej(f, true), null === f.tail && "hidden" === f.tailMode && !g.alternate && !I)
                return S(b), null;
            } else
              2 * B() - f.renderingStartTime > Hj && 1073741824 !== c && (b.flags |= 128, d = true, Ej(f, false), b.lanes = 4194304);
          f.isBackwards ? (g.sibling = b.child, b.child = g) : (null !== (c = f.last) ? c.sibling = g : b.child = g, f.last = g);
        }
        return null !== f.tail ? (b = f.tail, f.rendering = b, f.tail = b.sibling, f.renderingStartTime = B(), b.sibling = null, c = M.current, G(M, d ? 1 & c | 2 : 1 & c), b) : (S(b), null);
      case 22:
      case 23:
        return Ij(), d = null !== b.memoizedState, null !== a2 && null !== a2.memoizedState !== d && (b.flags |= 8192), d && 0 != (1 & b.mode) ? 0 != (1073741824 & gj) && (S(b), 6 & b.subtreeFlags && (b.flags |= 8192)) : S(b), null;
      case 24:
      case 25:
        return null;
    }
    throw Error(p(156, b.tag));
  }
  function Jj(a2, b) {
    switch (wg(b), b.tag) {
      case 1:
        return Zf(b.type) && $f(), 65536 & (a2 = b.flags) ? (b.flags = -65537 & a2 | 128, b) : null;
      case 3:
        return Jh(), E(Wf), E(H), Oh(), 0 != (65536 & (a2 = b.flags)) && 0 == (128 & a2) ? (b.flags = -65537 & a2 | 128, b) : null;
      case 5:
        return Lh(b), null;
      case 13:
        if (E(M), null !== (a2 = b.memoizedState) && null !== a2.dehydrated) {
          if (null === b.alternate)
            throw Error(p(340));
          Ig();
        }
        return 65536 & (a2 = b.flags) ? (b.flags = -65537 & a2 | 128, b) : null;
      case 19:
        return E(M), null;
      case 4:
        return Jh(), null;
      case 10:
        return Rg(b.type._context), null;
      case 22:
      case 23:
        return Ij(), null;
      default:
        return null;
    }
  }
  Aj = function(a2, b) {
    for (var c = b.child; null !== c; ) {
      if (5 === c.tag || 6 === c.tag)
        a2.appendChild(c.stateNode);
      else if (4 !== c.tag && null !== c.child) {
        c.child.return = c, c = c.child;
        continue;
      }
      if (c === b)
        break;
      for (; null === c.sibling; ) {
        if (null === c.return || c.return === b)
          return;
        c = c.return;
      }
      c.sibling.return = c.return, c = c.sibling;
    }
  }, Bj = function() {
  }, Cj = function(a2, b, c, d) {
    var e = a2.memoizedProps;
    if (e !== d) {
      a2 = b.stateNode, Hh(Eh.current);
      var g, f = null;
      switch (c) {
        case "input":
          e = Ya(a2, e), d = Ya(a2, d), f = [];
          break;
        case "select":
          e = A({}, e, { value: void 0 }), d = A({}, d, { value: void 0 }), f = [];
          break;
        case "textarea":
          e = gb(a2, e), d = gb(a2, d), f = [];
          break;
        default:
          "function" != typeof e.onClick && "function" == typeof d.onClick && (a2.onclick = Bf);
      }
      for (l in ub(c, d), c = null, e)
        if (!d.hasOwnProperty(l) && e.hasOwnProperty(l) && null != e[l])
          if ("style" === l) {
            var h = e[l];
            for (g in h)
              h.hasOwnProperty(g) && (c || (c = {}), c[g] = "");
          } else
            "dangerouslySetInnerHTML" !== l && "children" !== l && "suppressContentEditableWarning" !== l && "suppressHydrationWarning" !== l && "autoFocus" !== l && (ea.hasOwnProperty(l) ? f || (f = []) : (f = f || []).push(l, null));
      for (l in d) {
        var k = d[l];
        if (h = null != e ? e[l] : void 0, d.hasOwnProperty(l) && k !== h && (null != k || null != h))
          if ("style" === l)
            if (h) {
              for (g in h)
                !h.hasOwnProperty(g) || k && k.hasOwnProperty(g) || (c || (c = {}), c[g] = "");
              for (g in k)
                k.hasOwnProperty(g) && h[g] !== k[g] && (c || (c = {}), c[g] = k[g]);
            } else
              c || (f || (f = []), f.push(l, c)), c = k;
          else
            "dangerouslySetInnerHTML" === l ? (k = k ? k.__html : void 0, h = h ? h.__html : void 0, null != k && h !== k && (f = f || []).push(l, k)) : "children" === l ? "string" != typeof k && "number" != typeof k || (f = f || []).push(l, "" + k) : "suppressContentEditableWarning" !== l && "suppressHydrationWarning" !== l && (ea.hasOwnProperty(l) ? (null != k && "onScroll" === l && D("scroll", a2), f || h === k || (f = [])) : (f = f || []).push(l, k));
      }
      c && (f = f || []).push("style", c);
      var l = f;
      (b.updateQueue = l) && (b.flags |= 4);
    }
  }, Dj = function(a2, b, c, d) {
    c !== d && (b.flags |= 4);
  };
  var Kj = false, U = false, Lj = "function" == typeof WeakSet ? WeakSet : Set, V = null;
  function Mj(a2, b) {
    var c = a2.ref;
    if (null !== c)
      if ("function" == typeof c)
        try {
          c(null);
        } catch (d) {
          W(a2, b, d);
        }
      else
        c.current = null;
  }
  function Nj(a2, b, c) {
    try {
      c();
    } catch (d) {
      W(a2, b, d);
    }
  }
  var Oj = false;
  function Qj(a2, b, c) {
    var d = b.updateQueue;
    if (null !== (d = null !== d ? d.lastEffect : null)) {
      var e = d = d.next;
      do {
        if ((e.tag & a2) === a2) {
          var f = e.destroy;
          e.destroy = void 0, void 0 !== f && Nj(b, c, f);
        }
        e = e.next;
      } while (e !== d);
    }
  }
  function Rj(a2, b) {
    if (null !== (b = null !== (b = b.updateQueue) ? b.lastEffect : null)) {
      var c = b = b.next;
      do {
        if ((c.tag & a2) === a2) {
          var d = c.create;
          c.destroy = d();
        }
        c = c.next;
      } while (c !== b);
    }
  }
  function Sj(a2) {
    var b = a2.ref;
    if (null !== b) {
      var c = a2.stateNode;
      a2.tag, a2 = c, "function" == typeof b ? b(a2) : b.current = a2;
    }
  }
  function Tj(a2) {
    var b = a2.alternate;
    null !== b && (a2.alternate = null, Tj(b)), a2.child = null, a2.deletions = null, a2.sibling = null, 5 === a2.tag && null !== (b = a2.stateNode) && (delete b[Of], delete b[Pf], delete b[of], delete b[Qf], delete b[Rf]), a2.stateNode = null, a2.return = null, a2.dependencies = null, a2.memoizedProps = null, a2.memoizedState = null, a2.pendingProps = null, a2.stateNode = null, a2.updateQueue = null;
  }
  function Uj(a2) {
    return 5 === a2.tag || 3 === a2.tag || 4 === a2.tag;
  }
  function Vj(a2) {
    a:
      for (; ; ) {
        for (; null === a2.sibling; ) {
          if (null === a2.return || Uj(a2.return))
            return null;
          a2 = a2.return;
        }
        for (a2.sibling.return = a2.return, a2 = a2.sibling; 5 !== a2.tag && 6 !== a2.tag && 18 !== a2.tag; ) {
          if (2 & a2.flags)
            continue a;
          if (null === a2.child || 4 === a2.tag)
            continue a;
          a2.child.return = a2, a2 = a2.child;
        }
        if (!(2 & a2.flags))
          return a2.stateNode;
      }
  }
  function Wj(a2, b, c) {
    var d = a2.tag;
    if (5 === d || 6 === d)
      a2 = a2.stateNode, b ? 8 === c.nodeType ? c.parentNode.insertBefore(a2, b) : c.insertBefore(a2, b) : (8 === c.nodeType ? (b = c.parentNode).insertBefore(a2, c) : (b = c).appendChild(a2), null != (c = c._reactRootContainer) || null !== b.onclick || (b.onclick = Bf));
    else if (4 !== d && null !== (a2 = a2.child))
      for (Wj(a2, b, c), a2 = a2.sibling; null !== a2; )
        Wj(a2, b, c), a2 = a2.sibling;
  }
  function Xj(a2, b, c) {
    var d = a2.tag;
    if (5 === d || 6 === d)
      a2 = a2.stateNode, b ? c.insertBefore(a2, b) : c.appendChild(a2);
    else if (4 !== d && null !== (a2 = a2.child))
      for (Xj(a2, b, c), a2 = a2.sibling; null !== a2; )
        Xj(a2, b, c), a2 = a2.sibling;
  }
  var X = null, Yj = false;
  function Zj(a2, b, c) {
    for (c = c.child; null !== c; )
      ak(a2, b, c), c = c.sibling;
  }
  function ak(a2, b, c) {
    if (lc && "function" == typeof lc.onCommitFiberUnmount)
      try {
        lc.onCommitFiberUnmount(kc, c);
      } catch (h) {
      }
    switch (c.tag) {
      case 5:
        U || Mj(c, b);
      case 6:
        var d = X, e = Yj;
        X = null, Zj(a2, b, c), Yj = e, null !== (X = d) && (Yj ? (a2 = X, c = c.stateNode, 8 === a2.nodeType ? a2.parentNode.removeChild(c) : a2.removeChild(c)) : X.removeChild(c.stateNode));
        break;
      case 18:
        null !== X && (Yj ? (a2 = X, c = c.stateNode, 8 === a2.nodeType ? Kf(a2.parentNode, c) : 1 === a2.nodeType && Kf(a2, c), bd(a2)) : Kf(X, c.stateNode));
        break;
      case 4:
        d = X, e = Yj, X = c.stateNode.containerInfo, Yj = true, Zj(a2, b, c), X = d, Yj = e;
        break;
      case 0:
      case 11:
      case 14:
      case 15:
        if (!U && null !== (d = c.updateQueue) && null !== (d = d.lastEffect)) {
          e = d = d.next;
          do {
            var f = e, g = f.destroy;
            f = f.tag, void 0 !== g && (0 != (2 & f) || 0 != (4 & f)) && Nj(c, b, g), e = e.next;
          } while (e !== d);
        }
        Zj(a2, b, c);
        break;
      case 1:
        if (!U && (Mj(c, b), "function" == typeof (d = c.stateNode).componentWillUnmount))
          try {
            d.props = c.memoizedProps, d.state = c.memoizedState, d.componentWillUnmount();
          } catch (h) {
            W(c, b, h);
          }
        Zj(a2, b, c);
        break;
      case 21:
        Zj(a2, b, c);
        break;
      case 22:
        1 & c.mode ? (U = (d = U) || null !== c.memoizedState, Zj(a2, b, c), U = d) : Zj(a2, b, c);
        break;
      default:
        Zj(a2, b, c);
    }
  }
  function bk(a2) {
    var b = a2.updateQueue;
    if (null !== b) {
      a2.updateQueue = null;
      var c = a2.stateNode;
      null === c && (c = a2.stateNode = new Lj()), b.forEach(function(b2) {
        var d = ck.bind(null, a2, b2);
        c.has(b2) || (c.add(b2), b2.then(d, d));
      });
    }
  }
  function dk(a2, b) {
    var c = b.deletions;
    if (null !== c)
      for (var d = 0; d < c.length; d++) {
        var e = c[d];
        try {
          var f = a2, g = b, h = g;
          a:
            for (; null !== h; ) {
              switch (h.tag) {
                case 5:
                  X = h.stateNode, Yj = false;
                  break a;
                case 3:
                case 4:
                  X = h.stateNode.containerInfo, Yj = true;
                  break a;
              }
              h = h.return;
            }
          if (null === X)
            throw Error(p(160));
          ak(f, g, e), X = null, Yj = false;
          var k = e.alternate;
          null !== k && (k.return = null), e.return = null;
        } catch (l) {
          W(e, b, l);
        }
      }
    if (12854 & b.subtreeFlags)
      for (b = b.child; null !== b; )
        ek(b, a2), b = b.sibling;
  }
  function ek(a2, b) {
    var c = a2.alternate, d = a2.flags;
    switch (a2.tag) {
      case 0:
      case 11:
      case 14:
      case 15:
        if (dk(b, a2), fk(a2), 4 & d) {
          try {
            Qj(3, a2, a2.return), Rj(3, a2);
          } catch (t) {
            W(a2, a2.return, t);
          }
          try {
            Qj(5, a2, a2.return);
          } catch (t) {
            W(a2, a2.return, t);
          }
        }
        break;
      case 1:
        dk(b, a2), fk(a2), 512 & d && null !== c && Mj(c, c.return);
        break;
      case 5:
        if (dk(b, a2), fk(a2), 512 & d && null !== c && Mj(c, c.return), 32 & a2.flags) {
          var e = a2.stateNode;
          try {
            ob(e, "");
          } catch (t) {
            W(a2, a2.return, t);
          }
        }
        if (4 & d && null != (e = a2.stateNode)) {
          var f = a2.memoizedProps, g = null !== c ? c.memoizedProps : f, h = a2.type, k = a2.updateQueue;
          if (a2.updateQueue = null, null !== k)
            try {
              "input" === h && "radio" === f.type && null != f.name && ab(e, f), vb(h, g);
              var l = vb(h, f);
              for (g = 0; g < k.length; g += 2) {
                var m = k[g], q = k[g + 1];
                "style" === m ? sb(e, q) : "dangerouslySetInnerHTML" === m ? nb(e, q) : "children" === m ? ob(e, q) : ta(e, m, q, l);
              }
              switch (h) {
                case "input":
                  bb(e, f);
                  break;
                case "textarea":
                  ib(e, f);
                  break;
                case "select":
                  var r = e._wrapperState.wasMultiple;
                  e._wrapperState.wasMultiple = !!f.multiple;
                  var y = f.value;
                  null != y ? fb(e, !!f.multiple, y, false) : r !== !!f.multiple && (null != f.defaultValue ? fb(e, !!f.multiple, f.defaultValue, true) : fb(e, !!f.multiple, f.multiple ? [] : "", false));
              }
              e[Pf] = f;
            } catch (t) {
              W(a2, a2.return, t);
            }
        }
        break;
      case 6:
        if (dk(b, a2), fk(a2), 4 & d) {
          if (null === a2.stateNode)
            throw Error(p(162));
          e = a2.stateNode, f = a2.memoizedProps;
          try {
            e.nodeValue = f;
          } catch (t) {
            W(a2, a2.return, t);
          }
        }
        break;
      case 3:
        if (dk(b, a2), fk(a2), 4 & d && null !== c && c.memoizedState.isDehydrated)
          try {
            bd(b.containerInfo);
          } catch (t) {
            W(a2, a2.return, t);
          }
        break;
      case 4:
      default:
        dk(b, a2), fk(a2);
        break;
      case 13:
        dk(b, a2), fk(a2), 8192 & (e = a2.child).flags && (f = null !== e.memoizedState, e.stateNode.isHidden = f, !f || null !== e.alternate && null !== e.alternate.memoizedState || (gk = B())), 4 & d && bk(a2);
        break;
      case 22:
        if (m = null !== c && null !== c.memoizedState, 1 & a2.mode ? (U = (l = U) || m, dk(b, a2), U = l) : dk(b, a2), fk(a2), 8192 & d) {
          if (l = null !== a2.memoizedState, (a2.stateNode.isHidden = l) && !m && 0 != (1 & a2.mode))
            for (V = a2, m = a2.child; null !== m; ) {
              for (q = V = m; null !== V; ) {
                switch (y = (r = V).child, r.tag) {
                  case 0:
                  case 11:
                  case 14:
                  case 15:
                    Qj(4, r, r.return);
                    break;
                  case 1:
                    Mj(r, r.return);
                    var n = r.stateNode;
                    if ("function" == typeof n.componentWillUnmount) {
                      d = r, c = r.return;
                      try {
                        b = d, n.props = b.memoizedProps, n.state = b.memoizedState, n.componentWillUnmount();
                      } catch (t) {
                        W(d, c, t);
                      }
                    }
                    break;
                  case 5:
                    Mj(r, r.return);
                    break;
                  case 22:
                    if (null !== r.memoizedState) {
                      hk(q);
                      continue;
                    }
                }
                null !== y ? (y.return = r, V = y) : hk(q);
              }
              m = m.sibling;
            }
          a:
            for (m = null, q = a2; ; ) {
              if (5 === q.tag) {
                if (null === m) {
                  m = q;
                  try {
                    e = q.stateNode, l ? "function" == typeof (f = e.style).setProperty ? f.setProperty("display", "none", "important") : f.display = "none" : (h = q.stateNode, g = null != (k = q.memoizedProps.style) && k.hasOwnProperty("display") ? k.display : null, h.style.display = rb("display", g));
                  } catch (t) {
                    W(a2, a2.return, t);
                  }
                }
              } else if (6 === q.tag) {
                if (null === m)
                  try {
                    q.stateNode.nodeValue = l ? "" : q.memoizedProps;
                  } catch (t) {
                    W(a2, a2.return, t);
                  }
              } else if ((22 !== q.tag && 23 !== q.tag || null === q.memoizedState || q === a2) && null !== q.child) {
                q.child.return = q, q = q.child;
                continue;
              }
              if (q === a2)
                break a;
              for (; null === q.sibling; ) {
                if (null === q.return || q.return === a2)
                  break a;
                m === q && (m = null), q = q.return;
              }
              m === q && (m = null), q.sibling.return = q.return, q = q.sibling;
            }
        }
        break;
      case 19:
        dk(b, a2), fk(a2), 4 & d && bk(a2);
      case 21:
    }
  }
  function fk(a2) {
    var b = a2.flags;
    if (2 & b) {
      try {
        a: {
          for (var c = a2.return; null !== c; ) {
            if (Uj(c)) {
              var d = c;
              break a;
            }
            c = c.return;
          }
          throw Error(p(160));
        }
        switch (d.tag) {
          case 5:
            var e = d.stateNode;
            32 & d.flags && (ob(e, ""), d.flags &= -33), Xj(a2, Vj(a2), e);
            break;
          case 3:
          case 4:
            var g = d.stateNode.containerInfo;
            Wj(a2, Vj(a2), g);
            break;
          default:
            throw Error(p(161));
        }
      } catch (k) {
        W(a2, a2.return, k);
      }
      a2.flags &= -3;
    }
    4096 & b && (a2.flags &= -4097);
  }
  function ik(a2, b, c) {
    V = a2, jk(a2);
  }
  function jk(a2, b, c) {
    for (var d = 0 != (1 & a2.mode); null !== V; ) {
      var e = V, f = e.child;
      if (22 === e.tag && d) {
        var g = null !== e.memoizedState || Kj;
        if (!g) {
          var h = e.alternate, k = null !== h && null !== h.memoizedState || U;
          h = Kj;
          var l = U;
          if (Kj = g, (U = k) && !l)
            for (V = e; null !== V; )
              k = (g = V).child, 22 === g.tag && null !== g.memoizedState ? kk(e) : null !== k ? (k.return = g, V = k) : kk(e);
          for (; null !== f; )
            V = f, jk(f), f = f.sibling;
          V = e, Kj = h, U = l;
        }
        lk(a2);
      } else
        0 != (8772 & e.subtreeFlags) && null !== f ? (f.return = e, V = f) : lk(a2);
    }
  }
  function lk(a2) {
    for (; null !== V; ) {
      var b = V;
      if (0 != (8772 & b.flags)) {
        var c = b.alternate;
        try {
          if (0 != (8772 & b.flags))
            switch (b.tag) {
              case 0:
              case 11:
              case 15:
                U || Rj(5, b);
                break;
              case 1:
                var d = b.stateNode;
                if (4 & b.flags && !U)
                  if (null === c)
                    d.componentDidMount();
                  else {
                    var e = b.elementType === b.type ? c.memoizedProps : Lg(b.type, c.memoizedProps);
                    d.componentDidUpdate(e, c.memoizedState, d.__reactInternalSnapshotBeforeUpdate);
                  }
                var f = b.updateQueue;
                null !== f && ih(b, f, d);
                break;
              case 3:
                var g = b.updateQueue;
                if (null !== g) {
                  if (c = null, null !== b.child)
                    switch (b.child.tag) {
                      case 5:
                      case 1:
                        c = b.child.stateNode;
                    }
                  ih(b, g, c);
                }
                break;
              case 5:
                var h = b.stateNode;
                if (null === c && 4 & b.flags) {
                  c = h;
                  var k = b.memoizedProps;
                  switch (b.type) {
                    case "button":
                    case "input":
                    case "select":
                    case "textarea":
                      k.autoFocus && c.focus();
                      break;
                    case "img":
                      k.src && (c.src = k.src);
                  }
                }
                break;
              case 6:
              case 4:
              case 12:
              case 19:
              case 17:
              case 21:
              case 22:
              case 23:
              case 25:
                break;
              case 13:
                if (null === b.memoizedState) {
                  var l = b.alternate;
                  if (null !== l) {
                    var m = l.memoizedState;
                    if (null !== m) {
                      var q = m.dehydrated;
                      null !== q && bd(q);
                    }
                  }
                }
                break;
              default:
                throw Error(p(163));
            }
          U || 512 & b.flags && Sj(b);
        } catch (r) {
          W(b, b.return, r);
        }
      }
      if (b === a2) {
        V = null;
        break;
      }
      if (null !== (c = b.sibling)) {
        c.return = b.return, V = c;
        break;
      }
      V = b.return;
    }
  }
  function hk(a2) {
    for (; null !== V; ) {
      var b = V;
      if (b === a2) {
        V = null;
        break;
      }
      var c = b.sibling;
      if (null !== c) {
        c.return = b.return, V = c;
        break;
      }
      V = b.return;
    }
  }
  function kk(a2) {
    for (; null !== V; ) {
      var b = V;
      try {
        switch (b.tag) {
          case 0:
          case 11:
          case 15:
            var c = b.return;
            try {
              Rj(4, b);
            } catch (k) {
              W(b, c, k);
            }
            break;
          case 1:
            var d = b.stateNode;
            if ("function" == typeof d.componentDidMount) {
              var e = b.return;
              try {
                d.componentDidMount();
              } catch (k) {
                W(b, e, k);
              }
            }
            var f = b.return;
            try {
              Sj(b);
            } catch (k) {
              W(b, f, k);
            }
            break;
          case 5:
            var g = b.return;
            try {
              Sj(b);
            } catch (k) {
              W(b, g, k);
            }
        }
      } catch (k) {
        W(b, b.return, k);
      }
      if (b === a2) {
        V = null;
        break;
      }
      var h = b.sibling;
      if (null !== h) {
        h.return = b.return, V = h;
        break;
      }
      V = b.return;
    }
  }
  var Wk, mk = Math.ceil, nk = ua.ReactCurrentDispatcher, ok = ua.ReactCurrentOwner, pk = ua.ReactCurrentBatchConfig, K = 0, R = null, Y = null, Z = 0, gj = 0, fj = Uf(0), T = 0, qk = null, hh = 0, rk = 0, sk = 0, tk = null, uk = null, gk = 0, Hj = 1 / 0, vk = null, Pi = false, Qi = null, Si = null, wk = false, xk = null, yk = 0, zk = 0, Ak = null, Bk = -1, Ck = 0;
  function L() {
    return 0 != (6 & K) ? B() : -1 !== Bk ? Bk : Bk = B();
  }
  function lh(a2) {
    return 0 == (1 & a2.mode) ? 1 : 0 != (2 & K) && 0 !== Z ? Z & -Z : null !== Kg.transition ? (0 === Ck && (Ck = yc()), Ck) : 0 !== (a2 = C) ? a2 : a2 = void 0 === (a2 = window.event) ? 16 : jd(a2.type);
  }
  function mh(a2, b, c, d) {
    if (50 < zk)
      throw zk = 0, Ak = null, Error(p(185));
    Ac(a2, c, d), 0 != (2 & K) && a2 === R || (a2 === R && (0 == (2 & K) && (rk |= c), 4 === T && Dk(a2, Z)), Ek(a2, d), 1 === c && 0 === K && 0 == (1 & b.mode) && (Hj = B() + 500, fg && jg()));
  }
  function Ek(a2, b) {
    var c = a2.callbackNode;
    !function(a3, b2) {
      for (var c2 = a3.suspendedLanes, d2 = a3.pingedLanes, e = a3.expirationTimes, f = a3.pendingLanes; 0 < f; ) {
        var g = 31 - oc(f), h = 1 << g, k = e[g];
        -1 === k ? 0 != (h & c2) && 0 == (h & d2) || (e[g] = vc(h, b2)) : k <= b2 && (a3.expiredLanes |= h), f &= ~h;
      }
    }(a2, b);
    var d = uc(a2, a2 === R ? Z : 0);
    if (0 === d)
      null !== c && bc(c), a2.callbackNode = null, a2.callbackPriority = 0;
    else if (b = d & -d, a2.callbackPriority !== b) {
      if (null != c && bc(c), 1 === b)
        0 === a2.tag ? function(a3) {
          fg = true, hg(a3);
        }(Fk.bind(null, a2)) : hg(Fk.bind(null, a2)), Jf(function() {
          0 == (6 & K) && jg();
        }), c = null;
      else {
        switch (Dc(d)) {
          case 1:
            c = fc;
            break;
          case 4:
            c = gc;
            break;
          case 16:
          default:
            c = hc;
            break;
          case 536870912:
            c = jc;
        }
        c = Gk(c, Hk.bind(null, a2));
      }
      a2.callbackPriority = b, a2.callbackNode = c;
    }
  }
  function Hk(a2, b) {
    if (Bk = -1, Ck = 0, 0 != (6 & K))
      throw Error(p(327));
    var c = a2.callbackNode;
    if (Ik() && a2.callbackNode !== c)
      return null;
    var d = uc(a2, a2 === R ? Z : 0);
    if (0 === d)
      return null;
    if (0 != (30 & d) || 0 != (d & a2.expiredLanes) || b)
      b = Jk(a2, d);
    else {
      b = d;
      var e = K;
      K |= 2;
      var f = Kk();
      for (R === a2 && Z === b || (vk = null, Hj = B() + 500, Lk(a2, b)); ; )
        try {
          Mk();
          break;
        } catch (h) {
          Nk(a2, h);
        }
      Qg(), nk.current = f, K = e, null !== Y ? b = 0 : (R = null, Z = 0, b = T);
    }
    if (0 !== b) {
      if (2 === b && 0 !== (e = xc(a2)) && (d = e, b = Ok(a2, e)), 1 === b)
        throw c = qk, Lk(a2, 0), Dk(a2, d), Ek(a2, B()), c;
      if (6 === b)
        Dk(a2, d);
      else {
        if (e = a2.current.alternate, 0 == (30 & d) && !function(a3) {
          for (var b2 = a3; ; ) {
            if (16384 & b2.flags) {
              var c2 = b2.updateQueue;
              if (null !== c2 && null !== (c2 = c2.stores))
                for (var d2 = 0; d2 < c2.length; d2++) {
                  var e2 = c2[d2], f2 = e2.getSnapshot;
                  e2 = e2.value;
                  try {
                    if (!He(f2(), e2))
                      return false;
                  } catch (g2) {
                    return false;
                  }
                }
            }
            if (c2 = b2.child, 16384 & b2.subtreeFlags && null !== c2)
              c2.return = b2, b2 = c2;
            else {
              if (b2 === a3)
                break;
              for (; null === b2.sibling; ) {
                if (null === b2.return || b2.return === a3)
                  return true;
                b2 = b2.return;
              }
              b2.sibling.return = b2.return, b2 = b2.sibling;
            }
          }
          return true;
        }(e) && (2 === (b = Jk(a2, d)) && 0 !== (f = xc(a2)) && (d = f, b = Ok(a2, f)), 1 === b))
          throw c = qk, Lk(a2, 0), Dk(a2, d), Ek(a2, B()), c;
        switch (a2.finishedWork = e, a2.finishedLanes = d, b) {
          case 0:
          case 1:
            throw Error(p(345));
          case 2:
          case 5:
            Qk(a2, uk, vk);
            break;
          case 3:
            if (Dk(a2, d), (130023424 & d) === d && 10 < (b = gk + 500 - B())) {
              if (0 !== uc(a2, 0))
                break;
              if (((e = a2.suspendedLanes) & d) !== d) {
                L(), a2.pingedLanes |= a2.suspendedLanes & e;
                break;
              }
              a2.timeoutHandle = Ff(Qk.bind(null, a2, uk, vk), b);
              break;
            }
            Qk(a2, uk, vk);
            break;
          case 4:
            if (Dk(a2, d), (4194240 & d) === d)
              break;
            for (b = a2.eventTimes, e = -1; 0 < d; ) {
              var g = 31 - oc(d);
              f = 1 << g, (g = b[g]) > e && (e = g), d &= ~f;
            }
            if (d = e, 10 < (d = (120 > (d = B() - d) ? 120 : 480 > d ? 480 : 1080 > d ? 1080 : 1920 > d ? 1920 : 3e3 > d ? 3e3 : 4320 > d ? 4320 : 1960 * mk(d / 1960)) - d)) {
              a2.timeoutHandle = Ff(Qk.bind(null, a2, uk, vk), d);
              break;
            }
            Qk(a2, uk, vk);
            break;
          default:
            throw Error(p(329));
        }
      }
    }
    return Ek(a2, B()), a2.callbackNode === c ? Hk.bind(null, a2) : null;
  }
  function Ok(a2, b) {
    var c = tk;
    return a2.current.memoizedState.isDehydrated && (Lk(a2, b).flags |= 256), 2 !== (a2 = Jk(a2, b)) && (b = uk, uk = c, null !== b && Gj(b)), a2;
  }
  function Gj(a2) {
    null === uk ? uk = a2 : uk.push.apply(uk, a2);
  }
  function Dk(a2, b) {
    for (b &= ~sk, b &= ~rk, a2.suspendedLanes |= b, a2.pingedLanes &= ~b, a2 = a2.expirationTimes; 0 < b; ) {
      var c = 31 - oc(b), d = 1 << c;
      a2[c] = -1, b &= ~d;
    }
  }
  function Fk(a2) {
    if (0 != (6 & K))
      throw Error(p(327));
    Ik();
    var b = uc(a2, 0);
    if (0 == (1 & b))
      return Ek(a2, B()), null;
    var c = Jk(a2, b);
    if (0 !== a2.tag && 2 === c) {
      var d = xc(a2);
      0 !== d && (b = d, c = Ok(a2, d));
    }
    if (1 === c)
      throw c = qk, Lk(a2, 0), Dk(a2, b), Ek(a2, B()), c;
    if (6 === c)
      throw Error(p(345));
    return a2.finishedWork = a2.current.alternate, a2.finishedLanes = b, Qk(a2, uk, vk), Ek(a2, B()), null;
  }
  function Rk(a2, b) {
    var c = K;
    K |= 1;
    try {
      return a2(b);
    } finally {
      0 === (K = c) && (Hj = B() + 500, fg && jg());
    }
  }
  function Sk(a2) {
    null !== xk && 0 === xk.tag && 0 == (6 & K) && Ik();
    var b = K;
    K |= 1;
    var c = pk.transition, d = C;
    try {
      if (pk.transition = null, C = 1, a2)
        return a2();
    } finally {
      C = d, pk.transition = c, 0 == (6 & (K = b)) && jg();
    }
  }
  function Ij() {
    gj = fj.current, E(fj);
  }
  function Lk(a2, b) {
    a2.finishedWork = null, a2.finishedLanes = 0;
    var c = a2.timeoutHandle;
    if (-1 !== c && (a2.timeoutHandle = -1, Gf(c)), null !== Y)
      for (c = Y.return; null !== c; ) {
        var d = c;
        switch (wg(d), d.tag) {
          case 1:
            null != (d = d.type.childContextTypes) && $f();
            break;
          case 3:
            Jh(), E(Wf), E(H), Oh();
            break;
          case 5:
            Lh(d);
            break;
          case 4:
            Jh();
            break;
          case 13:
          case 19:
            E(M);
            break;
          case 10:
            Rg(d.type._context);
            break;
          case 22:
          case 23:
            Ij();
        }
        c = c.return;
      }
    if (R = a2, Y = a2 = wh(a2.current, null), Z = gj = b, T = 0, qk = null, sk = rk = hh = 0, uk = tk = null, null !== Wg) {
      for (b = 0; b < Wg.length; b++)
        if (null !== (d = (c = Wg[b]).interleaved)) {
          c.interleaved = null;
          var e = d.next, f = c.pending;
          if (null !== f) {
            var g = f.next;
            f.next = e, d.next = g;
          }
          c.pending = d;
        }
      Wg = null;
    }
    return a2;
  }
  function Nk(a2, b) {
    for (; ; ) {
      var c = Y;
      try {
        if (Qg(), Ph.current = ai, Sh) {
          for (var d = N.memoizedState; null !== d; ) {
            var e = d.queue;
            null !== e && (e.pending = null), d = d.next;
          }
          Sh = false;
        }
        if (Rh = 0, P = O = N = null, Th = false, Uh = 0, ok.current = null, null === c || null === c.return) {
          T = 1, qk = b, Y = null;
          break;
        }
        a: {
          var f = a2, g = c.return, h = c, k = b;
          if (b = Z, h.flags |= 32768, null !== k && "object" == typeof k && "function" == typeof k.then) {
            var l = k, m = h, q = m.tag;
            if (0 == (1 & m.mode) && (0 === q || 11 === q || 15 === q)) {
              var r = m.alternate;
              r ? (m.updateQueue = r.updateQueue, m.memoizedState = r.memoizedState, m.lanes = r.lanes) : (m.updateQueue = null, m.memoizedState = null);
            }
            var y = Vi(g);
            if (null !== y) {
              y.flags &= -257, Wi(y, g, h, 0, b), 1 & y.mode && Ti(f, l, b), k = l;
              var n = (b = y).updateQueue;
              if (null === n) {
                var t = /* @__PURE__ */ new Set();
                t.add(k), b.updateQueue = t;
              } else
                n.add(k);
              break a;
            }
            if (0 == (1 & b)) {
              Ti(f, l, b), uj();
              break a;
            }
            k = Error(p(426));
          } else if (I && 1 & h.mode) {
            var J = Vi(g);
            if (null !== J) {
              0 == (65536 & J.flags) && (J.flags |= 256), Wi(J, g, h, 0, b), Jg(Ki(k, h));
              break a;
            }
          }
          f = k = Ki(k, h), 4 !== T && (T = 2), null === tk ? tk = [f] : tk.push(f), f = g;
          do {
            switch (f.tag) {
              case 3:
                f.flags |= 65536, b &= -b, f.lanes |= b, fh(f, Oi(0, k, b));
                break a;
              case 1:
                h = k;
                var w = f.type, u = f.stateNode;
                if (0 == (128 & f.flags) && ("function" == typeof w.getDerivedStateFromError || null !== u && "function" == typeof u.componentDidCatch && (null === Si || !Si.has(u)))) {
                  f.flags |= 65536, b &= -b, f.lanes |= b, fh(f, Ri(f, h, b));
                  break a;
                }
            }
            f = f.return;
          } while (null !== f);
        }
        Tk(c);
      } catch (na) {
        b = na, Y === c && null !== c && (Y = c = c.return);
        continue;
      }
      break;
    }
  }
  function Kk() {
    var a2 = nk.current;
    return nk.current = ai, null === a2 ? ai : a2;
  }
  function uj() {
    0 !== T && 3 !== T && 2 !== T || (T = 4), null === R || 0 == (268435455 & hh) && 0 == (268435455 & rk) || Dk(R, Z);
  }
  function Jk(a2, b) {
    var c = K;
    K |= 2;
    var d = Kk();
    for (R === a2 && Z === b || (vk = null, Lk(a2, b)); ; )
      try {
        Uk();
        break;
      } catch (e) {
        Nk(a2, e);
      }
    if (Qg(), K = c, nk.current = d, null !== Y)
      throw Error(p(261));
    return R = null, Z = 0, T;
  }
  function Uk() {
    for (; null !== Y; )
      Vk(Y);
  }
  function Mk() {
    for (; null !== Y && !cc(); )
      Vk(Y);
  }
  function Vk(a2) {
    var b = Wk(a2.alternate, a2, gj);
    a2.memoizedProps = a2.pendingProps, null === b ? Tk(a2) : Y = b, ok.current = null;
  }
  function Tk(a2) {
    var b = a2;
    do {
      var c = b.alternate;
      if (a2 = b.return, 0 == (32768 & b.flags)) {
        if (null !== (c = Fj(c, b, gj)))
          return void (Y = c);
      } else {
        if (null !== (c = Jj(c, b)))
          return c.flags &= 32767, void (Y = c);
        if (null === a2)
          return T = 6, void (Y = null);
        a2.flags |= 32768, a2.subtreeFlags = 0, a2.deletions = null;
      }
      if (null !== (b = b.sibling))
        return void (Y = b);
      Y = b = a2;
    } while (null !== b);
    0 === T && (T = 5);
  }
  function Qk(a2, b, c) {
    var d = C, e = pk.transition;
    try {
      pk.transition = null, C = 1, function(a3, b2, c2, d2) {
        do {
          Ik();
        } while (null !== xk);
        if (0 != (6 & K))
          throw Error(p(327));
        c2 = a3.finishedWork;
        var e2 = a3.finishedLanes;
        if (null === c2)
          return null;
        if (a3.finishedWork = null, a3.finishedLanes = 0, c2 === a3.current)
          throw Error(p(177));
        a3.callbackNode = null, a3.callbackPriority = 0;
        var f = c2.lanes | c2.childLanes;
        if (function(a4, b3) {
          var c3 = a4.pendingLanes & ~b3;
          a4.pendingLanes = b3, a4.suspendedLanes = 0, a4.pingedLanes = 0, a4.expiredLanes &= b3, a4.mutableReadLanes &= b3, a4.entangledLanes &= b3, b3 = a4.entanglements;
          var d3 = a4.eventTimes;
          for (a4 = a4.expirationTimes; 0 < c3; ) {
            var e3 = 31 - oc(c3), f2 = 1 << e3;
            b3[e3] = 0, d3[e3] = -1, a4[e3] = -1, c3 &= ~f2;
          }
        }(a3, f), a3 === R && (Y = R = null, Z = 0), 0 == (2064 & c2.subtreeFlags) && 0 == (2064 & c2.flags) || wk || (wk = true, Gk(hc, function() {
          return Ik(), null;
        })), f = 0 != (15990 & c2.flags), 0 != (15990 & c2.subtreeFlags) || f) {
          f = pk.transition, pk.transition = null;
          var g = C;
          C = 1;
          var h = K;
          K |= 4, ok.current = null, function(a4, b3) {
            if (Cf = dd, Ne(a4 = Me())) {
              if ("selectionStart" in a4)
                var c3 = { start: a4.selectionStart, end: a4.selectionEnd };
              else
                a: {
                  var d3 = (c3 = (c3 = a4.ownerDocument) && c3.defaultView || window).getSelection && c3.getSelection();
                  if (d3 && 0 !== d3.rangeCount) {
                    c3 = d3.anchorNode;
                    var e3 = d3.anchorOffset, f2 = d3.focusNode;
                    d3 = d3.focusOffset;
                    try {
                      c3.nodeType, f2.nodeType;
                    } catch (F) {
                      c3 = null;
                      break a;
                    }
                    var g2 = 0, h2 = -1, k = -1, l = 0, m = 0, q = a4, r = null;
                    b:
                      for (; ; ) {
                        for (var y; q !== c3 || 0 !== e3 && 3 !== q.nodeType || (h2 = g2 + e3), q !== f2 || 0 !== d3 && 3 !== q.nodeType || (k = g2 + d3), 3 === q.nodeType && (g2 += q.nodeValue.length), null !== (y = q.firstChild); )
                          r = q, q = y;
                        for (; ; ) {
                          if (q === a4)
                            break b;
                          if (r === c3 && ++l === e3 && (h2 = g2), r === f2 && ++m === d3 && (k = g2), null !== (y = q.nextSibling))
                            break;
                          r = (q = r).parentNode;
                        }
                        q = y;
                      }
                    c3 = -1 === h2 || -1 === k ? null : { start: h2, end: k };
                  } else
                    c3 = null;
                }
              c3 = c3 || { start: 0, end: 0 };
            } else
              c3 = null;
            for (Df = { focusedElem: a4, selectionRange: c3 }, dd = false, V = b3; null !== V; )
              if (a4 = (b3 = V).child, 0 != (1028 & b3.subtreeFlags) && null !== a4)
                a4.return = b3, V = a4;
              else
                for (; null !== V; ) {
                  b3 = V;
                  try {
                    var n = b3.alternate;
                    if (0 != (1024 & b3.flags))
                      switch (b3.tag) {
                        case 0:
                        case 11:
                        case 15:
                        case 5:
                        case 6:
                        case 4:
                        case 17:
                          break;
                        case 1:
                          if (null !== n) {
                            var t = n.memoizedProps, J = n.memoizedState, x = b3.stateNode, w = x.getSnapshotBeforeUpdate(b3.elementType === b3.type ? t : Lg(b3.type, t), J);
                            x.__reactInternalSnapshotBeforeUpdate = w;
                          }
                          break;
                        case 3:
                          var u = b3.stateNode.containerInfo;
                          1 === u.nodeType ? u.textContent = "" : 9 === u.nodeType && u.documentElement && u.removeChild(u.documentElement);
                          break;
                        default:
                          throw Error(p(163));
                      }
                  } catch (F) {
                    W(b3, b3.return, F);
                  }
                  if (null !== (a4 = b3.sibling)) {
                    a4.return = b3.return, V = a4;
                    break;
                  }
                  V = b3.return;
                }
            n = Oj, Oj = false;
          }(a3, c2), ek(c2, a3), Oe(Df), dd = !!Cf, Df = Cf = null, a3.current = c2, ik(c2), dc(), K = h, C = g, pk.transition = f;
        } else
          a3.current = c2;
        if (wk && (wk = false, xk = a3, yk = e2), 0 === (f = a3.pendingLanes) && (Si = null), function(a4) {
          if (lc && "function" == typeof lc.onCommitFiberRoot)
            try {
              lc.onCommitFiberRoot(kc, a4, void 0, 128 == (128 & a4.current.flags));
            } catch (b3) {
            }
        }(c2.stateNode), Ek(a3, B()), null !== b2)
          for (d2 = a3.onRecoverableError, c2 = 0; c2 < b2.length; c2++)
            d2((e2 = b2[c2]).value, { componentStack: e2.stack, digest: e2.digest });
        if (Pi)
          throw Pi = false, a3 = Qi, Qi = null, a3;
        0 != (1 & yk) && 0 !== a3.tag && Ik(), 0 != (1 & (f = a3.pendingLanes)) ? a3 === Ak ? zk++ : (zk = 0, Ak = a3) : zk = 0, jg();
      }(a2, b, c, d);
    } finally {
      pk.transition = e, C = d;
    }
    return null;
  }
  function Ik() {
    if (null !== xk) {
      var a2 = Dc(yk), b = pk.transition, c = C;
      try {
        if (pk.transition = null, C = 16 > a2 ? 16 : a2, null === xk)
          var d = false;
        else {
          if (a2 = xk, xk = null, yk = 0, 0 != (6 & K))
            throw Error(p(331));
          var e = K;
          for (K |= 4, V = a2.current; null !== V; ) {
            var f = V, g = f.child;
            if (0 != (16 & V.flags)) {
              var h = f.deletions;
              if (null !== h) {
                for (var k = 0; k < h.length; k++) {
                  var l = h[k];
                  for (V = l; null !== V; ) {
                    var m = V;
                    switch (m.tag) {
                      case 0:
                      case 11:
                      case 15:
                        Qj(8, m, f);
                    }
                    var q = m.child;
                    if (null !== q)
                      q.return = m, V = q;
                    else
                      for (; null !== V; ) {
                        var r = (m = V).sibling, y = m.return;
                        if (Tj(m), m === l) {
                          V = null;
                          break;
                        }
                        if (null !== r) {
                          r.return = y, V = r;
                          break;
                        }
                        V = y;
                      }
                  }
                }
                var n = f.alternate;
                if (null !== n) {
                  var t = n.child;
                  if (null !== t) {
                    n.child = null;
                    do {
                      var J = t.sibling;
                      t.sibling = null, t = J;
                    } while (null !== t);
                  }
                }
                V = f;
              }
            }
            if (0 != (2064 & f.subtreeFlags) && null !== g)
              g.return = f, V = g;
            else
              b:
                for (; null !== V; ) {
                  if (0 != (2048 & (f = V).flags))
                    switch (f.tag) {
                      case 0:
                      case 11:
                      case 15:
                        Qj(9, f, f.return);
                    }
                  var x = f.sibling;
                  if (null !== x) {
                    x.return = f.return, V = x;
                    break b;
                  }
                  V = f.return;
                }
          }
          var w = a2.current;
          for (V = w; null !== V; ) {
            var u = (g = V).child;
            if (0 != (2064 & g.subtreeFlags) && null !== u)
              u.return = g, V = u;
            else
              b:
                for (g = w; null !== V; ) {
                  if (0 != (2048 & (h = V).flags))
                    try {
                      switch (h.tag) {
                        case 0:
                        case 11:
                        case 15:
                          Rj(9, h);
                      }
                    } catch (na) {
                      W(h, h.return, na);
                    }
                  if (h === g) {
                    V = null;
                    break b;
                  }
                  var F = h.sibling;
                  if (null !== F) {
                    F.return = h.return, V = F;
                    break b;
                  }
                  V = h.return;
                }
          }
          if (K = e, jg(), lc && "function" == typeof lc.onPostCommitFiberRoot)
            try {
              lc.onPostCommitFiberRoot(kc, a2);
            } catch (na) {
            }
          d = true;
        }
        return d;
      } finally {
        C = c, pk.transition = b;
      }
    }
    return false;
  }
  function Yk(a2, b, c) {
    a2 = dh(a2, b = Oi(0, b = Ki(c, b), 1), 1), b = L(), null !== a2 && (Ac(a2, 1, b), Ek(a2, b));
  }
  function W(a2, b, c) {
    if (3 === a2.tag)
      Yk(a2, a2, c);
    else
      for (; null !== b; ) {
        if (3 === b.tag) {
          Yk(b, a2, c);
          break;
        }
        if (1 === b.tag) {
          var d = b.stateNode;
          if ("function" == typeof b.type.getDerivedStateFromError || "function" == typeof d.componentDidCatch && (null === Si || !Si.has(d))) {
            b = dh(b, a2 = Ri(b, a2 = Ki(c, a2), 1), 1), a2 = L(), null !== b && (Ac(b, 1, a2), Ek(b, a2));
            break;
          }
        }
        b = b.return;
      }
  }
  function Ui(a2, b, c) {
    var d = a2.pingCache;
    null !== d && d.delete(b), b = L(), a2.pingedLanes |= a2.suspendedLanes & c, R === a2 && (Z & c) === c && (4 === T || 3 === T && (130023424 & Z) === Z && 500 > B() - gk ? Lk(a2, 0) : sk |= c), Ek(a2, b);
  }
  function Zk(a2, b) {
    0 === b && (0 == (1 & a2.mode) ? b = 1 : (b = sc, 0 == (130023424 & (sc <<= 1)) && (sc = 4194304)));
    var c = L();
    null !== (a2 = Zg(a2, b)) && (Ac(a2, b, c), Ek(a2, c));
  }
  function vj(a2) {
    var b = a2.memoizedState, c = 0;
    null !== b && (c = b.retryLane), Zk(a2, c);
  }
  function ck(a2, b) {
    var c = 0;
    switch (a2.tag) {
      case 13:
        var d = a2.stateNode, e = a2.memoizedState;
        null !== e && (c = e.retryLane);
        break;
      case 19:
        d = a2.stateNode;
        break;
      default:
        throw Error(p(314));
    }
    null !== d && d.delete(b), Zk(a2, c);
  }
  function Gk(a2, b) {
    return ac(a2, b);
  }
  function al(a2, b, c, d) {
    this.tag = a2, this.key = c, this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null, this.index = 0, this.ref = null, this.pendingProps = b, this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null, this.mode = d, this.subtreeFlags = this.flags = 0, this.deletions = null, this.childLanes = this.lanes = 0, this.alternate = null;
  }
  function Bg(a2, b, c, d) {
    return new al(a2, b, c, d);
  }
  function bj(a2) {
    return !(!(a2 = a2.prototype) || !a2.isReactComponent);
  }
  function wh(a2, b) {
    var c = a2.alternate;
    return null === c ? ((c = Bg(a2.tag, b, a2.key, a2.mode)).elementType = a2.elementType, c.type = a2.type, c.stateNode = a2.stateNode, c.alternate = a2, a2.alternate = c) : (c.pendingProps = b, c.type = a2.type, c.flags = 0, c.subtreeFlags = 0, c.deletions = null), c.flags = 14680064 & a2.flags, c.childLanes = a2.childLanes, c.lanes = a2.lanes, c.child = a2.child, c.memoizedProps = a2.memoizedProps, c.memoizedState = a2.memoizedState, c.updateQueue = a2.updateQueue, b = a2.dependencies, c.dependencies = null === b ? null : { lanes: b.lanes, firstContext: b.firstContext }, c.sibling = a2.sibling, c.index = a2.index, c.ref = a2.ref, c;
  }
  function yh(a2, b, c, d, e, f) {
    var g = 2;
    if (d = a2, "function" == typeof a2)
      bj(a2) && (g = 1);
    else if ("string" == typeof a2)
      g = 5;
    else
      a:
        switch (a2) {
          case ya:
            return Ah(c.children, e, f, b);
          case za:
            g = 8, e |= 8;
            break;
          case Aa:
            return (a2 = Bg(12, c, b, 2 | e)).elementType = Aa, a2.lanes = f, a2;
          case Ea:
            return (a2 = Bg(13, c, b, e)).elementType = Ea, a2.lanes = f, a2;
          case Fa:
            return (a2 = Bg(19, c, b, e)).elementType = Fa, a2.lanes = f, a2;
          case Ia:
            return qj(c, e, f, b);
          default:
            if ("object" == typeof a2 && null !== a2)
              switch (a2.$$typeof) {
                case Ba:
                  g = 10;
                  break a;
                case Ca:
                  g = 9;
                  break a;
                case Da:
                  g = 11;
                  break a;
                case Ga:
                  g = 14;
                  break a;
                case Ha:
                  g = 16, d = null;
                  break a;
              }
            throw Error(p(130, null == a2 ? a2 : typeof a2, ""));
        }
    return (b = Bg(g, c, b, e)).elementType = a2, b.type = d, b.lanes = f, b;
  }
  function Ah(a2, b, c, d) {
    return (a2 = Bg(7, a2, d, b)).lanes = c, a2;
  }
  function qj(a2, b, c, d) {
    return (a2 = Bg(22, a2, d, b)).elementType = Ia, a2.lanes = c, a2.stateNode = { isHidden: false }, a2;
  }
  function xh(a2, b, c) {
    return (a2 = Bg(6, a2, null, b)).lanes = c, a2;
  }
  function zh(a2, b, c) {
    return (b = Bg(4, null !== a2.children ? a2.children : [], a2.key, b)).lanes = c, b.stateNode = { containerInfo: a2.containerInfo, pendingChildren: null, implementation: a2.implementation }, b;
  }
  function bl(a2, b, c, d, e) {
    this.tag = b, this.containerInfo = a2, this.finishedWork = this.pingCache = this.current = this.pendingChildren = null, this.timeoutHandle = -1, this.callbackNode = this.pendingContext = this.context = null, this.callbackPriority = 0, this.eventTimes = zc(0), this.expirationTimes = zc(-1), this.entangledLanes = this.finishedLanes = this.mutableReadLanes = this.expiredLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0, this.entanglements = zc(0), this.identifierPrefix = d, this.onRecoverableError = e, this.mutableSourceEagerHydrationData = null;
  }
  function cl(a2, b, c, d, e, f, g, h, k) {
    return a2 = new bl(a2, b, c, h, k), 1 === b ? (b = 1, true === f && (b |= 8)) : b = 0, f = Bg(3, null, null, b), a2.current = f, f.stateNode = a2, f.memoizedState = { element: d, isDehydrated: c, cache: null, transitions: null, pendingSuspenseBoundaries: null }, ah(f), a2;
  }
  function el(a2) {
    if (!a2)
      return Vf;
    a: {
      if (Vb(a2 = a2._reactInternals) !== a2 || 1 !== a2.tag)
        throw Error(p(170));
      var b = a2;
      do {
        switch (b.tag) {
          case 3:
            b = b.stateNode.context;
            break a;
          case 1:
            if (Zf(b.type)) {
              b = b.stateNode.__reactInternalMemoizedMergedChildContext;
              break a;
            }
        }
        b = b.return;
      } while (null !== b);
      throw Error(p(171));
    }
    if (1 === a2.tag) {
      var c = a2.type;
      if (Zf(c))
        return bg(a2, c, b);
    }
    return b;
  }
  function fl(a2, b, c, d, e, f, g, h, k) {
    return (a2 = cl(c, d, true, a2, 0, f, 0, h, k)).context = el(null), c = a2.current, (f = ch(d = L(), e = lh(c))).callback = null != b ? b : null, dh(c, f, e), a2.current.lanes = e, Ac(a2, e, d), Ek(a2, d), a2;
  }
  function gl(a2, b, c, d) {
    var e = b.current, f = L(), g = lh(e);
    return c = el(c), null === b.context ? b.context = c : b.pendingContext = c, (b = ch(f, g)).payload = { element: a2 }, null !== (d = void 0 === d ? null : d) && (b.callback = d), null !== (a2 = dh(e, b, g)) && (mh(a2, e, g, f), eh(a2, e, g)), g;
  }
  function hl(a2) {
    return (a2 = a2.current).child ? (a2.child.tag, a2.child.stateNode) : null;
  }
  function il(a2, b) {
    if (null !== (a2 = a2.memoizedState) && null !== a2.dehydrated) {
      var c = a2.retryLane;
      a2.retryLane = 0 !== c && c < b ? c : b;
    }
  }
  function jl(a2, b) {
    il(a2, b), (a2 = a2.alternate) && il(a2, b);
  }
  Wk = function(a2, b, c) {
    if (null !== a2)
      if (a2.memoizedProps !== b.pendingProps || Wf.current)
        Ug = true;
      else {
        if (0 == (a2.lanes & c) && 0 == (128 & b.flags))
          return Ug = false, function(a3, b2, c2) {
            switch (b2.tag) {
              case 3:
                lj(b2), Ig();
                break;
              case 5:
                Kh(b2);
                break;
              case 1:
                Zf(b2.type) && cg(b2);
                break;
              case 4:
                Ih(b2, b2.stateNode.containerInfo);
                break;
              case 10:
                var d2 = b2.type._context, e2 = b2.memoizedProps.value;
                G(Mg, d2._currentValue), d2._currentValue = e2;
                break;
              case 13:
                if (null !== (d2 = b2.memoizedState))
                  return null !== d2.dehydrated ? (G(M, 1 & M.current), b2.flags |= 128, null) : 0 != (c2 & b2.child.childLanes) ? pj(a3, b2, c2) : (G(M, 1 & M.current), null !== (a3 = $i(a3, b2, c2)) ? a3.sibling : null);
                G(M, 1 & M.current);
                break;
              case 19:
                if (d2 = 0 != (c2 & b2.childLanes), 0 != (128 & a3.flags)) {
                  if (d2)
                    return yj(a3, b2, c2);
                  b2.flags |= 128;
                }
                if (null !== (e2 = b2.memoizedState) && (e2.rendering = null, e2.tail = null, e2.lastEffect = null), G(M, M.current), d2)
                  break;
                return null;
              case 22:
              case 23:
                return b2.lanes = 0, ej(a3, b2, c2);
            }
            return $i(a3, b2, c2);
          }(a2, b, c);
        Ug = 0 != (131072 & a2.flags);
      }
    else
      Ug = false, I && 0 != (1048576 & b.flags) && ug(b, ng, b.index);
    switch (b.lanes = 0, b.tag) {
      case 2:
        var d = b.type;
        jj(a2, b), a2 = b.pendingProps;
        var e = Yf(b, H.current);
        Tg(b, c), e = Xh(null, b, d, a2, e, c);
        var f = bi();
        return b.flags |= 1, "object" == typeof e && null !== e && "function" == typeof e.render && void 0 === e.$$typeof ? (b.tag = 1, b.memoizedState = null, b.updateQueue = null, Zf(d) ? (f = true, cg(b)) : f = false, b.memoizedState = null !== e.state && void 0 !== e.state ? e.state : null, ah(b), e.updater = nh, b.stateNode = e, e._reactInternals = b, rh(b, d, a2, c), b = kj(null, b, d, true, f, c)) : (b.tag = 0, I && f && vg(b), Yi(null, b, e, c), b = b.child), b;
      case 16:
        d = b.elementType;
        a: {
          switch (jj(a2, b), a2 = b.pendingProps, d = (e = d._init)(d._payload), b.type = d, e = b.tag = function(a3) {
            if ("function" == typeof a3)
              return bj(a3) ? 1 : 0;
            if (null != a3) {
              if ((a3 = a3.$$typeof) === Da)
                return 11;
              if (a3 === Ga)
                return 14;
            }
            return 2;
          }(d), a2 = Lg(d, a2), e) {
            case 0:
              b = dj(null, b, d, a2, c);
              break a;
            case 1:
              b = ij(null, b, d, a2, c);
              break a;
            case 11:
              b = Zi(null, b, d, a2, c);
              break a;
            case 14:
              b = aj(null, b, d, Lg(d.type, a2), c);
              break a;
          }
          throw Error(p(306, d, ""));
        }
        return b;
      case 0:
        return d = b.type, e = b.pendingProps, dj(a2, b, d, e = b.elementType === d ? e : Lg(d, e), c);
      case 1:
        return d = b.type, e = b.pendingProps, ij(a2, b, d, e = b.elementType === d ? e : Lg(d, e), c);
      case 3:
        a: {
          if (lj(b), null === a2)
            throw Error(p(387));
          d = b.pendingProps, e = (f = b.memoizedState).element, bh(a2, b), gh(b, d, null, c);
          var g = b.memoizedState;
          if (d = g.element, f.isDehydrated) {
            if (f = { element: d, isDehydrated: false, cache: g.cache, pendingSuspenseBoundaries: g.pendingSuspenseBoundaries, transitions: g.transitions }, b.updateQueue.baseState = f, b.memoizedState = f, 256 & b.flags) {
              b = mj(a2, b, d, c, e = Ki(Error(p(423)), b));
              break a;
            }
            if (d !== e) {
              b = mj(a2, b, d, c, e = Ki(Error(p(424)), b));
              break a;
            }
            for (yg = Lf(b.stateNode.containerInfo.firstChild), xg = b, I = true, zg = null, c = Ch(b, null, d, c), b.child = c; c; )
              c.flags = -3 & c.flags | 4096, c = c.sibling;
          } else {
            if (Ig(), d === e) {
              b = $i(a2, b, c);
              break a;
            }
            Yi(a2, b, d, c);
          }
          b = b.child;
        }
        return b;
      case 5:
        return Kh(b), null === a2 && Eg(b), d = b.type, e = b.pendingProps, f = null !== a2 ? a2.memoizedProps : null, g = e.children, Ef(d, e) ? g = null : null !== f && Ef(d, f) && (b.flags |= 32), hj(a2, b), Yi(a2, b, g, c), b.child;
      case 6:
        return null === a2 && Eg(b), null;
      case 13:
        return pj(a2, b, c);
      case 4:
        return Ih(b, b.stateNode.containerInfo), d = b.pendingProps, null === a2 ? b.child = Bh(b, null, d, c) : Yi(a2, b, d, c), b.child;
      case 11:
        return d = b.type, e = b.pendingProps, Zi(a2, b, d, e = b.elementType === d ? e : Lg(d, e), c);
      case 7:
        return Yi(a2, b, b.pendingProps, c), b.child;
      case 8:
      case 12:
        return Yi(a2, b, b.pendingProps.children, c), b.child;
      case 10:
        a: {
          if (d = b.type._context, e = b.pendingProps, f = b.memoizedProps, g = e.value, G(Mg, d._currentValue), d._currentValue = g, null !== f)
            if (He(f.value, g)) {
              if (f.children === e.children && !Wf.current) {
                b = $i(a2, b, c);
                break a;
              }
            } else
              for (null !== (f = b.child) && (f.return = b); null !== f; ) {
                var h = f.dependencies;
                if (null !== h) {
                  g = f.child;
                  for (var k = h.firstContext; null !== k; ) {
                    if (k.context === d) {
                      if (1 === f.tag) {
                        (k = ch(-1, c & -c)).tag = 2;
                        var l = f.updateQueue;
                        if (null !== l) {
                          var m = (l = l.shared).pending;
                          null === m ? k.next = k : (k.next = m.next, m.next = k), l.pending = k;
                        }
                      }
                      f.lanes |= c, null !== (k = f.alternate) && (k.lanes |= c), Sg(f.return, c, b), h.lanes |= c;
                      break;
                    }
                    k = k.next;
                  }
                } else if (10 === f.tag)
                  g = f.type === b.type ? null : f.child;
                else if (18 === f.tag) {
                  if (null === (g = f.return))
                    throw Error(p(341));
                  g.lanes |= c, null !== (h = g.alternate) && (h.lanes |= c), Sg(g, c, b), g = f.sibling;
                } else
                  g = f.child;
                if (null !== g)
                  g.return = f;
                else
                  for (g = f; null !== g; ) {
                    if (g === b) {
                      g = null;
                      break;
                    }
                    if (null !== (f = g.sibling)) {
                      f.return = g.return, g = f;
                      break;
                    }
                    g = g.return;
                  }
                f = g;
              }
          Yi(a2, b, e.children, c), b = b.child;
        }
        return b;
      case 9:
        return e = b.type, d = b.pendingProps.children, Tg(b, c), d = d(e = Vg(e)), b.flags |= 1, Yi(a2, b, d, c), b.child;
      case 14:
        return e = Lg(d = b.type, b.pendingProps), aj(a2, b, d, e = Lg(d.type, e), c);
      case 15:
        return cj(a2, b, b.type, b.pendingProps, c);
      case 17:
        return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : Lg(d, e), jj(a2, b), b.tag = 1, Zf(d) ? (a2 = true, cg(b)) : a2 = false, Tg(b, c), ph(b, d, e), rh(b, d, e, c), kj(null, b, d, true, a2, c);
      case 19:
        return yj(a2, b, c);
      case 22:
        return ej(a2, b, c);
    }
    throw Error(p(156, b.tag));
  };
  var ll = "function" == typeof reportError ? reportError : function(a2) {
    console.error(a2);
  };
  function ml(a2) {
    this._internalRoot = a2;
  }
  function nl(a2) {
    this._internalRoot = a2;
  }
  function ol(a2) {
    return !(!a2 || 1 !== a2.nodeType && 9 !== a2.nodeType && 11 !== a2.nodeType);
  }
  function pl(a2) {
    return !(!a2 || 1 !== a2.nodeType && 9 !== a2.nodeType && 11 !== a2.nodeType && (8 !== a2.nodeType || " react-mount-point-unstable " !== a2.nodeValue));
  }
  function ql() {
  }
  function sl(a2, b, c, d, e) {
    var f = c._reactRootContainer;
    if (f) {
      var g = f;
      if ("function" == typeof e) {
        var h = e;
        e = function() {
          var a3 = hl(g);
          h.call(a3);
        };
      }
      gl(b, g, a2, e);
    } else
      g = function(a3, b2, c2, d2, e2) {
        if (e2) {
          if ("function" == typeof d2) {
            var f2 = d2;
            d2 = function() {
              var a4 = hl(g2);
              f2.call(a4);
            };
          }
          var g2 = fl(b2, d2, a3, 0, null, false, 0, "", ql);
          return a3._reactRootContainer = g2, a3[uf] = g2.current, sf(8 === a3.nodeType ? a3.parentNode : a3), Sk(), g2;
        }
        for (; e2 = a3.lastChild; )
          a3.removeChild(e2);
        if ("function" == typeof d2) {
          var h2 = d2;
          d2 = function() {
            var a4 = hl(k);
            h2.call(a4);
          };
        }
        var k = cl(a3, 0, false, null, 0, false, 0, "", ql);
        return a3._reactRootContainer = k, a3[uf] = k.current, sf(8 === a3.nodeType ? a3.parentNode : a3), Sk(function() {
          gl(b2, k, c2, d2);
        }), k;
      }(c, b, a2, e, d);
    return hl(g);
  }
  nl.prototype.render = ml.prototype.render = function(a2) {
    var b = this._internalRoot;
    if (null === b)
      throw Error(p(409));
    gl(a2, b, null, null);
  }, nl.prototype.unmount = ml.prototype.unmount = function() {
    var a2 = this._internalRoot;
    if (null !== a2) {
      this._internalRoot = null;
      var b = a2.containerInfo;
      Sk(function() {
        gl(null, a2, null, null);
      }), b[uf] = null;
    }
  }, nl.prototype.unstable_scheduleHydration = function(a2) {
    if (a2) {
      var b = Hc();
      a2 = { blockedOn: null, target: a2, priority: b };
      for (var c = 0; c < Qc.length && 0 !== b && b < Qc[c].priority; c++)
        ;
      Qc.splice(c, 0, a2), 0 === c && Vc(a2);
    }
  }, Ec = function(a2) {
    switch (a2.tag) {
      case 3:
        var b = a2.stateNode;
        if (b.current.memoizedState.isDehydrated) {
          var c = tc(b.pendingLanes);
          0 !== c && (Cc(b, 1 | c), Ek(b, B()), 0 == (6 & K) && (Hj = B() + 500, jg()));
        }
        break;
      case 13:
        Sk(function() {
          var b2 = Zg(a2, 1);
          if (null !== b2) {
            var c2 = L();
            mh(b2, a2, 1, c2);
          }
        }), jl(a2, 1);
    }
  }, Fc = function(a2) {
    if (13 === a2.tag) {
      var b = Zg(a2, 134217728);
      null !== b && mh(b, a2, 134217728, L()), jl(a2, 134217728);
    }
  }, Gc = function(a2) {
    if (13 === a2.tag) {
      var b = lh(a2), c = Zg(a2, b);
      null !== c && mh(c, a2, b, L()), jl(a2, b);
    }
  }, Hc = function() {
    return C;
  }, Ic = function(a2, b) {
    var c = C;
    try {
      return C = a2, b();
    } finally {
      C = c;
    }
  }, yb = function(a2, b, c) {
    switch (b) {
      case "input":
        if (bb(a2, c), b = c.name, "radio" === c.type && null != b) {
          for (c = a2; c.parentNode; )
            c = c.parentNode;
          for (c = c.querySelectorAll("input[name=" + JSON.stringify("" + b) + '][type="radio"]'), b = 0; b < c.length; b++) {
            var d = c[b];
            if (d !== a2 && d.form === a2.form) {
              var e = Db(d);
              if (!e)
                throw Error(p(90));
              Wa(d), bb(d, e);
            }
          }
        }
        break;
      case "textarea":
        ib(a2, c);
        break;
      case "select":
        null != (b = c.value) && fb(a2, !!c.multiple, b, false);
    }
  }, Gb = Rk, Hb = Sk;
  var tl = { usingClientEntryPoint: false, Events: [Cb, ue, Db, Eb, Fb, Rk] }, ul = { findFiberByHostInstance: Wc, bundleType: 0, version: "18.2.0", rendererPackageName: "react-dom" }, vl = { bundleType: ul.bundleType, version: ul.version, rendererPackageName: ul.rendererPackageName, rendererConfig: ul.rendererConfig, overrideHookState: null, overrideHookStateDeletePath: null, overrideHookStateRenamePath: null, overrideProps: null, overridePropsDeletePath: null, overridePropsRenamePath: null, setErrorHandler: null, setSuspenseHandler: null, scheduleUpdate: null, currentDispatcherRef: ua.ReactCurrentDispatcher, findHostInstanceByFiber: function(a2) {
    return null === (a2 = Zb(a2)) ? null : a2.stateNode;
  }, findFiberByHostInstance: ul.findFiberByHostInstance || function() {
    return null;
  }, findHostInstancesForRefresh: null, scheduleRefresh: null, scheduleRoot: null, setRefreshHandler: null, getCurrentFiber: null, reconcilerVersion: "18.2.0-next-9e3b772b8-20220608" };
  if ("undefined" != typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) {
    var wl = __REACT_DEVTOOLS_GLOBAL_HOOK__;
    if (!wl.isDisabled && wl.supportsFiber)
      try {
        kc = wl.inject(vl), lc = wl;
      } catch (a2) {
      }
  }
  return reactDom_production_min.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = tl, reactDom_production_min.createPortal = function(a2, b) {
    var c = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null;
    if (!ol(b))
      throw Error(p(200));
    return function(a3, b2, c2) {
      var d = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;
      return { $$typeof: wa, key: null == d ? null : "" + d, children: a3, containerInfo: b2, implementation: c2 };
    }(a2, b, null, c);
  }, reactDom_production_min.createRoot = function(a2, b) {
    if (!ol(a2))
      throw Error(p(299));
    var c = false, d = "", e = ll;
    return null != b && (true === b.unstable_strictMode && (c = true), void 0 !== b.identifierPrefix && (d = b.identifierPrefix), void 0 !== b.onRecoverableError && (e = b.onRecoverableError)), b = cl(a2, 1, false, null, 0, c, 0, d, e), a2[uf] = b.current, sf(8 === a2.nodeType ? a2.parentNode : a2), new ml(b);
  }, reactDom_production_min.findDOMNode = function(a2) {
    if (null == a2)
      return null;
    if (1 === a2.nodeType)
      return a2;
    var b = a2._reactInternals;
    if (void 0 === b) {
      if ("function" == typeof a2.render)
        throw Error(p(188));
      throw a2 = Object.keys(a2).join(","), Error(p(268, a2));
    }
    return null === (a2 = Zb(b)) ? null : a2.stateNode;
  }, reactDom_production_min.flushSync = function(a2) {
    return Sk(a2);
  }, reactDom_production_min.hydrate = function(a2, b, c) {
    if (!pl(b))
      throw Error(p(200));
    return sl(null, a2, b, true, c);
  }, reactDom_production_min.hydrateRoot = function(a2, b, c) {
    if (!ol(a2))
      throw Error(p(405));
    var d = null != c && c.hydratedSources || null, e = false, f = "", g = ll;
    if (null != c && (true === c.unstable_strictMode && (e = true), void 0 !== c.identifierPrefix && (f = c.identifierPrefix), void 0 !== c.onRecoverableError && (g = c.onRecoverableError)), b = fl(b, null, a2, 1, null != c ? c : null, e, 0, f, g), a2[uf] = b.current, sf(a2), d)
      for (a2 = 0; a2 < d.length; a2++)
        e = (e = (c = d[a2])._getVersion)(c._source), null == b.mutableSourceEagerHydrationData ? b.mutableSourceEagerHydrationData = [c, e] : b.mutableSourceEagerHydrationData.push(c, e);
    return new nl(b);
  }, reactDom_production_min.render = function(a2, b, c) {
    if (!pl(b))
      throw Error(p(200));
    return sl(null, a2, b, false, c);
  }, reactDom_production_min.unmountComponentAtNode = function(a2) {
    if (!pl(a2))
      throw Error(p(40));
    return !!a2._reactRootContainer && (Sk(function() {
      sl(null, null, a2, false, function() {
        a2._reactRootContainer = null, a2[uf] = null;
      });
    }), true);
  }, reactDom_production_min.unstable_batchedUpdates = Rk, reactDom_production_min.unstable_renderSubtreeIntoContainer = function(a2, b, c, d) {
    if (!pl(c))
      throw Error(p(200));
    if (null == a2 || void 0 === a2._reactInternals)
      throw Error(p(38));
    return sl(a2, b, c, false, d);
  }, reactDom_production_min.version = "18.2.0-next-9e3b772b8-20220608", reactDom_production_min;
}();
var reactDomExports$1 = reactDom$2.exports;

var jsxRuntime$2 = {exports: {}};

var reactJsxRuntime_development = {};

var jsxs_1;
var jsx_1;
var Fragment$1;
"use strict";
/**
 * @license React
 * react-jsx-runtime.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
if (true) {
  (function() {
    "use strict";
    var React = reactExports;
    var REACT_ELEMENT_TYPE = Symbol.for("react.element");
    var REACT_PORTAL_TYPE = Symbol.for("react.portal");
    var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
    var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
    var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
    var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
    var REACT_CONTEXT_TYPE = Symbol.for("react.context");
    var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
    var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
    var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
    var REACT_MEMO_TYPE = Symbol.for("react.memo");
    var REACT_LAZY_TYPE = Symbol.for("react.lazy");
    var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
    var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = "@@iterator";
    function getIteratorFn(maybeIterable) {
      if (maybeIterable === null || typeof maybeIterable !== "object") {
        return null;
      }
      var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
      if (typeof maybeIterator === "function") {
        return maybeIterator;
      }
      return null;
    }
    var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    function error(format) {
      {
        {
          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
            args[_key2 - 1] = arguments[_key2];
          }
          printWarning("error", format, args);
        }
      }
    }
    function printWarning(level, format, args) {
      {
        var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
        var stack = ReactDebugCurrentFrame2.getStackAddendum();
        if (stack !== "") {
          format += "%s";
          args = args.concat([stack]);
        }
        var argsWithFormat = args.map(function(item) {
          return String(item);
        });
        argsWithFormat.unshift("Warning: " + format);
        Function.prototype.apply.call(console[level], console, argsWithFormat);
      }
    }
    var enableScopeAPI = false;
    var enableCacheElement = false;
    var enableTransitionTracing = false;
    var enableLegacyHidden = false;
    var enableDebugTracing = false;
    var REACT_MODULE_REFERENCE;
    {
      REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
    }
    function isValidElementType(type) {
      if (typeof type === "string" || typeof type === "function") {
        return true;
      }
      if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
        return true;
      }
      if (typeof type === "object" && type !== null) {
        if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
        // types supported by any Flight configuration anywhere since
        // we don't know which Flight build this will end up being used
        // with.
        type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
          return true;
        }
      }
      return false;
    }
    function getWrappedName(outerType, innerType, wrapperName) {
      var displayName = outerType.displayName;
      if (displayName) {
        return displayName;
      }
      var functionName = innerType.displayName || innerType.name || "";
      return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
    }
    function getContextName(type) {
      return type.displayName || "Context";
    }
    function getComponentNameFromType(type) {
      if (type == null) {
        return null;
      }
      {
        if (typeof type.tag === "number") {
          error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
        }
      }
      if (typeof type === "function") {
        return type.displayName || type.name || null;
      }
      if (typeof type === "string") {
        return type;
      }
      switch (type) {
        case REACT_FRAGMENT_TYPE:
          return "Fragment";
        case REACT_PORTAL_TYPE:
          return "Portal";
        case REACT_PROFILER_TYPE:
          return "Profiler";
        case REACT_STRICT_MODE_TYPE:
          return "StrictMode";
        case REACT_SUSPENSE_TYPE:
          return "Suspense";
        case REACT_SUSPENSE_LIST_TYPE:
          return "SuspenseList";
      }
      if (typeof type === "object") {
        switch (type.$$typeof) {
          case REACT_CONTEXT_TYPE:
            var context = type;
            return getContextName(context) + ".Consumer";
          case REACT_PROVIDER_TYPE:
            var provider = type;
            return getContextName(provider._context) + ".Provider";
          case REACT_FORWARD_REF_TYPE:
            return getWrappedName(type, type.render, "ForwardRef");
          case REACT_MEMO_TYPE:
            var outerName = type.displayName || null;
            if (outerName !== null) {
              return outerName;
            }
            return getComponentNameFromType(type.type) || "Memo";
          case REACT_LAZY_TYPE: {
            var lazyComponent = type;
            var payload = lazyComponent._payload;
            var init = lazyComponent._init;
            try {
              return getComponentNameFromType(init(payload));
            } catch (x) {
              return null;
            }
          }
        }
      }
      return null;
    }
    var assign = Object.assign;
    var disabledDepth = 0;
    var prevLog;
    var prevInfo;
    var prevWarn;
    var prevError;
    var prevGroup;
    var prevGroupCollapsed;
    var prevGroupEnd;
    function disabledLog() {
    }
    disabledLog.__reactDisabledLog = true;
    function disableLogs() {
      {
        if (disabledDepth === 0) {
          prevLog = console.log;
          prevInfo = console.info;
          prevWarn = console.warn;
          prevError = console.error;
          prevGroup = console.group;
          prevGroupCollapsed = console.groupCollapsed;
          prevGroupEnd = console.groupEnd;
          var props = {
            configurable: true,
            enumerable: true,
            value: disabledLog,
            writable: true
          };
          Object.defineProperties(console, {
            info: props,
            log: props,
            warn: props,
            error: props,
            group: props,
            groupCollapsed: props,
            groupEnd: props
          });
        }
        disabledDepth++;
      }
    }
    function reenableLogs() {
      {
        disabledDepth--;
        if (disabledDepth === 0) {
          var props = {
            configurable: true,
            enumerable: true,
            writable: true
          };
          Object.defineProperties(console, {
            log: assign({}, props, {
              value: prevLog
            }),
            info: assign({}, props, {
              value: prevInfo
            }),
            warn: assign({}, props, {
              value: prevWarn
            }),
            error: assign({}, props, {
              value: prevError
            }),
            group: assign({}, props, {
              value: prevGroup
            }),
            groupCollapsed: assign({}, props, {
              value: prevGroupCollapsed
            }),
            groupEnd: assign({}, props, {
              value: prevGroupEnd
            })
          });
        }
        if (disabledDepth < 0) {
          error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
        }
      }
    }
    var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
    var prefix;
    function describeBuiltInComponentFrame(name, source, ownerFn) {
      {
        if (prefix === void 0) {
          try {
            throw Error();
          } catch (x) {
            var match = x.stack.trim().match(/\n( *(at )?)/);
            prefix = match && match[1] || "";
          }
        }
        return "\n" + prefix + name;
      }
    }
    var reentry = false;
    var componentFrameCache;
    {
      var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
      componentFrameCache = new PossiblyWeakMap();
    }
    function describeNativeComponentFrame(fn, construct) {
      if (!fn || reentry) {
        return "";
      }
      {
        var frame = componentFrameCache.get(fn);
        if (frame !== void 0) {
          return frame;
        }
      }
      var control;
      reentry = true;
      var previousPrepareStackTrace = Error.prepareStackTrace;
      Error.prepareStackTrace = void 0;
      var previousDispatcher;
      {
        previousDispatcher = ReactCurrentDispatcher.current;
        ReactCurrentDispatcher.current = null;
        disableLogs();
      }
      try {
        if (construct) {
          var Fake = function() {
            throw Error();
          };
          Object.defineProperty(Fake.prototype, "props", {
            set: function() {
              throw Error();
            }
          });
          if (typeof Reflect === "object" && Reflect.construct) {
            try {
              Reflect.construct(Fake, []);
            } catch (x) {
              control = x;
            }
            Reflect.construct(fn, [], Fake);
          } else {
            try {
              Fake.call();
            } catch (x) {
              control = x;
            }
            fn.call(Fake.prototype);
          }
        } else {
          try {
            throw Error();
          } catch (x) {
            control = x;
          }
          fn();
        }
      } catch (sample) {
        if (sample && control && typeof sample.stack === "string") {
          var sampleLines = sample.stack.split("\n");
          var controlLines = control.stack.split("\n");
          var s = sampleLines.length - 1;
          var c = controlLines.length - 1;
          while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
            c--;
          }
          for (; s >= 1 && c >= 0; s--, c--) {
            if (sampleLines[s] !== controlLines[c]) {
              if (s !== 1 || c !== 1) {
                do {
                  s--;
                  c--;
                  if (c < 0 || sampleLines[s] !== controlLines[c]) {
                    var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                    if (fn.displayName && _frame.includes("<anonymous>")) {
                      _frame = _frame.replace("<anonymous>", fn.displayName);
                    }
                    {
                      if (typeof fn === "function") {
                        componentFrameCache.set(fn, _frame);
                      }
                    }
                    return _frame;
                  }
                } while (s >= 1 && c >= 0);
              }
              break;
            }
          }
        }
      } finally {
        reentry = false;
        {
          ReactCurrentDispatcher.current = previousDispatcher;
          reenableLogs();
        }
        Error.prepareStackTrace = previousPrepareStackTrace;
      }
      var name = fn ? fn.displayName || fn.name : "";
      var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
      {
        if (typeof fn === "function") {
          componentFrameCache.set(fn, syntheticFrame);
        }
      }
      return syntheticFrame;
    }
    function describeFunctionComponentFrame(fn, source, ownerFn) {
      {
        return describeNativeComponentFrame(fn, false);
      }
    }
    function shouldConstruct(Component) {
      var prototype = Component.prototype;
      return !!(prototype && prototype.isReactComponent);
    }
    function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
      if (type == null) {
        return "";
      }
      if (typeof type === "function") {
        {
          return describeNativeComponentFrame(type, shouldConstruct(type));
        }
      }
      if (typeof type === "string") {
        return describeBuiltInComponentFrame(type);
      }
      switch (type) {
        case REACT_SUSPENSE_TYPE:
          return describeBuiltInComponentFrame("Suspense");
        case REACT_SUSPENSE_LIST_TYPE:
          return describeBuiltInComponentFrame("SuspenseList");
      }
      if (typeof type === "object") {
        switch (type.$$typeof) {
          case REACT_FORWARD_REF_TYPE:
            return describeFunctionComponentFrame(type.render);
          case REACT_MEMO_TYPE:
            return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
          case REACT_LAZY_TYPE: {
            var lazyComponent = type;
            var payload = lazyComponent._payload;
            var init = lazyComponent._init;
            try {
              return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
            } catch (x) {
            }
          }
        }
      }
      return "";
    }
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var loggedTypeFailures = {};
    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
    function setCurrentlyValidatingElement(element) {
      {
        if (element) {
          var owner = element._owner;
          var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
          ReactDebugCurrentFrame.setExtraStackFrame(stack);
        } else {
          ReactDebugCurrentFrame.setExtraStackFrame(null);
        }
      }
    }
    function checkPropTypes(typeSpecs, values, location, componentName, element) {
      {
        var has = Function.call.bind(hasOwnProperty);
        for (var typeSpecName in typeSpecs) {
          if (has(typeSpecs, typeSpecName)) {
            var error$1 = void 0;
            try {
              if (typeof typeSpecs[typeSpecName] !== "function") {
                var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                err.name = "Invariant Violation";
                throw err;
              }
              error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
            } catch (ex) {
              error$1 = ex;
            }
            if (error$1 && !(error$1 instanceof Error)) {
              setCurrentlyValidatingElement(element);
              error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
              setCurrentlyValidatingElement(null);
            }
            if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
              loggedTypeFailures[error$1.message] = true;
              setCurrentlyValidatingElement(element);
              error("Failed %s type: %s", location, error$1.message);
              setCurrentlyValidatingElement(null);
            }
          }
        }
      }
    }
    var isArrayImpl = Array.isArray;
    function isArray(a) {
      return isArrayImpl(a);
    }
    function typeName(value) {
      {
        var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
        var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
        return type;
      }
    }
    function willCoercionThrow(value) {
      {
        try {
          testStringCoercion(value);
          return false;
        } catch (e) {
          return true;
        }
      }
    }
    function testStringCoercion(value) {
      return "" + value;
    }
    function checkKeyStringCoercion(value) {
      {
        if (willCoercionThrow(value)) {
          error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
          return testStringCoercion(value);
        }
      }
    }
    var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
    var RESERVED_PROPS = {
      key: true,
      ref: true,
      __self: true,
      __source: true
    };
    var specialPropKeyWarningShown;
    var specialPropRefWarningShown;
    var didWarnAboutStringRefs;
    {
      didWarnAboutStringRefs = {};
    }
    function hasValidRef(config) {
      {
        if (hasOwnProperty.call(config, "ref")) {
          var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
          if (getter && getter.isReactWarning) {
            return false;
          }
        }
      }
      return config.ref !== void 0;
    }
    function hasValidKey(config) {
      {
        if (hasOwnProperty.call(config, "key")) {
          var getter = Object.getOwnPropertyDescriptor(config, "key").get;
          if (getter && getter.isReactWarning) {
            return false;
          }
        }
      }
      return config.key !== void 0;
    }
    function warnIfStringRefCannotBeAutoConverted(config, self) {
      {
        if (typeof config.ref === "string" && ReactCurrentOwner.current && self && ReactCurrentOwner.current.stateNode !== self) {
          var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
          if (!didWarnAboutStringRefs[componentName]) {
            error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config.ref);
            didWarnAboutStringRefs[componentName] = true;
          }
        }
      }
    }
    function defineKeyPropWarningGetter(props, displayName) {
      {
        var warnAboutAccessingKey = function() {
          if (!specialPropKeyWarningShown) {
            specialPropKeyWarningShown = true;
            error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
          }
        };
        warnAboutAccessingKey.isReactWarning = true;
        Object.defineProperty(props, "key", {
          get: warnAboutAccessingKey,
          configurable: true
        });
      }
    }
    function defineRefPropWarningGetter(props, displayName) {
      {
        var warnAboutAccessingRef = function() {
          if (!specialPropRefWarningShown) {
            specialPropRefWarningShown = true;
            error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
          }
        };
        warnAboutAccessingRef.isReactWarning = true;
        Object.defineProperty(props, "ref", {
          get: warnAboutAccessingRef,
          configurable: true
        });
      }
    }
    var ReactElement = function(type, key, ref, self, source, owner, props) {
      var element = {
        // This tag allows us to uniquely identify this as a React Element
        $$typeof: REACT_ELEMENT_TYPE,
        // Built-in properties that belong on the element
        type,
        key,
        ref,
        props,
        // Record the component responsible for creating this element.
        _owner: owner
      };
      {
        element._store = {};
        Object.defineProperty(element._store, "validated", {
          configurable: false,
          enumerable: false,
          writable: true,
          value: false
        });
        Object.defineProperty(element, "_self", {
          configurable: false,
          enumerable: false,
          writable: false,
          value: self
        });
        Object.defineProperty(element, "_source", {
          configurable: false,
          enumerable: false,
          writable: false,
          value: source
        });
        if (Object.freeze) {
          Object.freeze(element.props);
          Object.freeze(element);
        }
      }
      return element;
    };
    function jsxDEV(type, config, maybeKey, source, self) {
      {
        var propName;
        var props = {};
        var key = null;
        var ref = null;
        if (maybeKey !== void 0) {
          {
            checkKeyStringCoercion(maybeKey);
          }
          key = "" + maybeKey;
        }
        if (hasValidKey(config)) {
          {
            checkKeyStringCoercion(config.key);
          }
          key = "" + config.key;
        }
        if (hasValidRef(config)) {
          ref = config.ref;
          warnIfStringRefCannotBeAutoConverted(config, self);
        }
        for (propName in config) {
          if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
            props[propName] = config[propName];
          }
        }
        if (type && type.defaultProps) {
          var defaultProps = type.defaultProps;
          for (propName in defaultProps) {
            if (props[propName] === void 0) {
              props[propName] = defaultProps[propName];
            }
          }
        }
        if (key || ref) {
          var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
          if (key) {
            defineKeyPropWarningGetter(props, displayName);
          }
          if (ref) {
            defineRefPropWarningGetter(props, displayName);
          }
        }
        return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
      }
    }
    var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
    var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
    function setCurrentlyValidatingElement$1(element) {
      {
        if (element) {
          var owner = element._owner;
          var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
          ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
        } else {
          ReactDebugCurrentFrame$1.setExtraStackFrame(null);
        }
      }
    }
    var propTypesMisspellWarningShown;
    {
      propTypesMisspellWarningShown = false;
    }
    function isValidElement(object) {
      {
        return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
      }
    }
    function getDeclarationErrorAddendum() {
      {
        if (ReactCurrentOwner$1.current) {
          var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);
          if (name) {
            return "\n\nCheck the render method of `" + name + "`.";
          }
        }
        return "";
      }
    }
    function getSourceInfoErrorAddendum(source) {
      {
        if (source !== void 0) {
          var fileName = source.fileName.replace(/^.*[\\\/]/, "");
          var lineNumber = source.lineNumber;
          return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
        }
        return "";
      }
    }
    var ownerHasKeyUseWarning = {};
    function getCurrentComponentErrorInfo(parentType) {
      {
        var info = getDeclarationErrorAddendum();
        if (!info) {
          var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
          if (parentName) {
            info = "\n\nCheck the top-level render call using <" + parentName + ">.";
          }
        }
        return info;
      }
    }
    function validateExplicitKey(element, parentType) {
      {
        if (!element._store || element._store.validated || element.key != null) {
          return;
        }
        element._store.validated = true;
        var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
        if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
          return;
        }
        ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
        var childOwner = "";
        if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {
          childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
        }
        setCurrentlyValidatingElement$1(element);
        error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
        setCurrentlyValidatingElement$1(null);
      }
    }
    function validateChildKeys(node, parentType) {
      {
        if (typeof node !== "object") {
          return;
        }
        if (isArray(node)) {
          for (var i = 0; i < node.length; i++) {
            var child = node[i];
            if (isValidElement(child)) {
              validateExplicitKey(child, parentType);
            }
          }
        } else if (isValidElement(node)) {
          if (node._store) {
            node._store.validated = true;
          }
        } else if (node) {
          var iteratorFn = getIteratorFn(node);
          if (typeof iteratorFn === "function") {
            if (iteratorFn !== node.entries) {
              var iterator = iteratorFn.call(node);
              var step;
              while (!(step = iterator.next()).done) {
                if (isValidElement(step.value)) {
                  validateExplicitKey(step.value, parentType);
                }
              }
            }
          }
        }
      }
    }
    function validatePropTypes(element) {
      {
        var type = element.type;
        if (type === null || type === void 0 || typeof type === "string") {
          return;
        }
        var propTypes;
        if (typeof type === "function") {
          propTypes = type.propTypes;
        } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
        // Inner props are checked in the reconciler.
        type.$$typeof === REACT_MEMO_TYPE)) {
          propTypes = type.propTypes;
        } else {
          return;
        }
        if (propTypes) {
          var name = getComponentNameFromType(type);
          checkPropTypes(propTypes, element.props, "prop", name, element);
        } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
          propTypesMisspellWarningShown = true;
          var _name = getComponentNameFromType(type);
          error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
        }
        if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
          error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
        }
      }
    }
    function validateFragmentProps(fragment) {
      {
        var keys = Object.keys(fragment.props);
        for (var i = 0; i < keys.length; i++) {
          var key = keys[i];
          if (key !== "children" && key !== "key") {
            setCurrentlyValidatingElement$1(fragment);
            error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
            setCurrentlyValidatingElement$1(null);
            break;
          }
        }
        if (fragment.ref !== null) {
          setCurrentlyValidatingElement$1(fragment);
          error("Invalid attribute `ref` supplied to `React.Fragment`.");
          setCurrentlyValidatingElement$1(null);
        }
      }
    }
    function jsxWithValidation(type, props, key, isStaticChildren, source, self) {
      {
        var validType = isValidElementType(type);
        if (!validType) {
          var info = "";
          if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
            info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
          }
          var sourceInfo = getSourceInfoErrorAddendum(source);
          if (sourceInfo) {
            info += sourceInfo;
          } else {
            info += getDeclarationErrorAddendum();
          }
          var typeString;
          if (type === null) {
            typeString = "null";
          } else if (isArray(type)) {
            typeString = "array";
          } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
            typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
            info = " Did you accidentally export a JSX literal instead of a component?";
          } else {
            typeString = typeof type;
          }
          error("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
        }
        var element = jsxDEV(type, props, key, source, self);
        if (element == null) {
          return element;
        }
        if (validType) {
          var children = props.children;
          if (children !== void 0) {
            if (isStaticChildren) {
              if (isArray(children)) {
                for (var i = 0; i < children.length; i++) {
                  validateChildKeys(children[i], type);
                }
                if (Object.freeze) {
                  Object.freeze(children);
                }
              } else {
                error("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
              }
            } else {
              validateChildKeys(children, type);
            }
          }
        }
        if (type === REACT_FRAGMENT_TYPE) {
          validateFragmentProps(element);
        } else {
          validatePropTypes(element);
        }
        return element;
      }
    }
    function jsxWithValidationStatic(type, props, key) {
      {
        return jsxWithValidation(type, props, key, true);
      }
    }
    function jsxWithValidationDynamic(type, props, key) {
      {
        return jsxWithValidation(type, props, key, false);
      }
    }
    var jsx = jsxWithValidationDynamic;
    var jsxs = jsxWithValidationStatic;
    Fragment$1 = reactJsxRuntime_development.Fragment = REACT_FRAGMENT_TYPE;
    jsx_1 = reactJsxRuntime_development.jsx = jsx;
    jsxs_1 = reactJsxRuntime_development.jsxs = jsxs;
  })();
}

var jsxRuntime = jsxRuntime$2.exports;

"use strict";
if (false) {
  module.exports = require("./cjs/react-jsx-runtime.production.min.js");
} else {
  jsxRuntime$2.exports = reactJsxRuntime_development;
}

var jsxRuntimeExports = jsxRuntime$2.exports;
var jsxRuntime$1 = /*@__PURE__*/getDefaultExportFromCjs(jsxRuntimeExports);

const logLevels = ["trace", "debug", "info", "warn", "error", "critical"], LogNode = { Auth: "Auth", AppCenter: "AppCenter", Client: "Client", OTA: "OTA", SelectiveSync: "SelectiveSync", Nanoflow: "Nanoflow", NanoflowDebugger: "NanoflowDebugger", Database: "Database", FileSystem: "FileSystem", Navigation: "Navigation", Network: "Network", Startup: "Startup", Synchronization: "Synchronization" };
class LogManager {
  constructor() {
    this.logHandlers = [], this.loggers = /* @__PURE__ */ new Map(), this.delayedLogs = [], this.processLog = (level, node, ...args) => {
      this.shouldProcessLog(level, node, ...args) && this.logHandlers.forEach((handler) => handler(level, node, ...args));
    }, this.processLogDebounced = (level, node, ...args) => {
      this.shouldProcessLog(level, node, ...args) && (this.delayTimer && clearTimeout(this.delayTimer), this.delayedLogs.push({ level, node, args }), this.delayTimer = setTimeout(() => {
        this.delayedLogs.forEach((delayedLog) => {
          this.logHandlers.forEach((handler) => handler(delayedLog.level, delayedLog.node, ...delayedLog.args));
        }), this.delayedLogs = [];
      }, 500));
    };
  }
  addHandler(handler) {
    this.logHandlers.push(handler);
  }
  removeHandler(handler) {
    const indexToDelete = this.logHandlers.indexOf(handler);
    -1 !== indexToDelete && this.logHandlers.splice(indexToDelete, 1);
  }
  getLogFilter() {
    return this.filter;
  }
  setLogFilter(logFilter) {
    this.filter = logFilter;
  }
  getLogger(node = LogNode.Client) {
    if (!this.loggers.has(node)) {
      if (!Object.prototype.hasOwnProperty.call(LogNode, node)) {
        const defaultLogger = this.getLogger();
        return defaultLogger.warn(`Invalid log node requested: "${node}". Returning a logger with default node instead.`), defaultLogger;
      }
      const createLogger = (logsProcessor) => Object.assign({}, ...logLevels.map((level) => ({ [level]: (...args) => {
        logsProcessor("warn" === level ? "warning" : level, node, ...args);
      } })), { log: (level, ...args) => {
        logsProcessor(level, node, ...args);
      } }), logger = { ...createLogger(this.processLog), debounced: createLogger(this.processLogDebounced) };
      this.loggers.set(node, logger);
    }
    return this.loggers.get(node);
  }
  shouldProcessLog(level, node, ...args) {
    return void 0 === this.filter || this.filter(level, node, ...args);
  }
  static get() {
    return LogManager.instance || (LogManager.instance = new LogManager()), LogManager.instance;
  }
}
function logUnhandledErrors() {
  if ("function" == typeof window.addEventListener) {
    const defaultLogger = LogManager.get().getLogger();
    window.addEventListener("error", (event) => defaultLogger.error(event.error ?? event.message)), window.addEventListener("unhandledrejection", (event) => defaultLogger.error(event.reason));
  }
}
function registerConsoleLogsListener() {
  LogManager.get().addHandler(function() {
    const originalLog = {};
    return ["debug", "info", "log", "warn", "error"].forEach((clientLevel) => {
      originalLog[clientLevel] = console[clientLevel];
      const runtimeLevel = function(clientLevel2) {
        switch (clientLevel2) {
          case "warn":
            return "warning";
          case "log":
            return "debug";
          default:
            return clientLevel2;
        }
      }(clientLevel);
      console[clientLevel] = (...args) => LogManager.get().getLogger().log(runtimeLevel, ...args);
    }), (runtimeLevel, node, ...args) => {
      const clientLevel = function(runtimeLevel2) {
        switch (runtimeLevel2) {
          case "trace":
            return "debug";
          case "critical":
            return "error";
          case "warning":
            return "warn";
          default:
            return runtimeLevel2;
        }
      }(runtimeLevel);
      if (void 0 === clientLevel)
        return;
      const [firstArg, ...rest] = args, argsToPass = "string" == typeof firstArg ? [`[${node}] ${firstArg}`, ...rest] : [`[${node}]`, ...args];
      originalLog[clientLevel].call(console, ...argsToPass);
    };
  }());
}
const defaultLogFilter = (_level, _node, ...args) => !args.some((a) => "string" == typeof a && a.includes("setstate-in-render"));

/*
 *  big.js v6.1.1
 *  A small, fast, easy-to-use library for arbitrary-precision decimal arithmetic.
 *  Copyright (c) 2021 Michael Mclaughlin
 *  https://github.com/MikeMcl/big.js/LICENCE.md
 */


/************************************** EDITABLE DEFAULTS *****************************************/


  // The default values below must be integers within the stated ranges.

  /*
   * The maximum number of decimal places (DP) of the results of operations involving division:
   * div and sqrt, and pow with negative exponents.
   */
var DP = 20,          // 0 to MAX_DP

  /*
   * The rounding mode (RM) used when rounding to the above decimal places.
   *
   *  0  Towards zero (i.e. truncate, no rounding).       (ROUND_DOWN)
   *  1  To nearest neighbour. If equidistant, round up.  (ROUND_HALF_UP)
   *  2  To nearest neighbour. If equidistant, to even.   (ROUND_HALF_EVEN)
   *  3  Away from zero.                                  (ROUND_UP)
   */
  RM = 1,             // 0, 1, 2 or 3

  // The maximum value of DP and Big.DP.
  MAX_DP = 1E6,       // 0 to 1000000

  // The maximum magnitude of the exponent argument to the pow method.
  MAX_POWER = 1E6,    // 1 to 1000000

  /*
   * The negative exponent (NE) at and beneath which toString returns exponential notation.
   * (JavaScript numbers: -7)
   * -1000000 is the minimum recommended exponent value of a Big.
   */
  NE = -7,            // 0 to -1000000

  /*
   * The positive exponent (PE) at and above which toString returns exponential notation.
   * (JavaScript numbers: 21)
   * 1000000 is the maximum recommended exponent value of a Big, but this limit is not enforced.
   */
  PE = 21,            // 0 to 1000000

  /*
   * When true, an error will be thrown if a primitive number is passed to the Big constructor,
   * or if valueOf is called, or if toNumber is called on a Big which cannot be converted to a
   * primitive number without a loss of precision.
   */
  STRICT = false,     // true or false


/**************************************************************************************************/


  // Error messages.
  NAME = '[big.js] ',
  INVALID = NAME + 'Invalid ',
  INVALID_DP = INVALID + 'decimal places',
  INVALID_RM = INVALID + 'rounding mode',
  DIV_BY_ZERO = NAME + 'Division by zero',

  // The shared prototype object.
  P = {},
  UNDEFINED = void 0,
  NUMERIC = /^-?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i;


/*
 * Create and return a Big constructor.
 */
function _Big_() {

  /*
   * The Big constructor and exported function.
   * Create and return a new instance of a Big number object.
   *
   * n {number|string|Big} A numeric value.
   */
  function Big(n) {
    var x = this;

    // Enable constructor usage without new.
    if (!(x instanceof Big)) return n === UNDEFINED ? _Big_() : new Big(n);

    // Duplicate.
    if (n instanceof Big) {
      x.s = n.s;
      x.e = n.e;
      x.c = n.c.slice();
    } else {
      if (typeof n !== 'string') {
        if (Big.strict === true) {
          throw TypeError(INVALID + 'number');
        }

        // Minus zero?
        n = n === 0 && 1 / n < 0 ? '-0' : String(n);
      }

      parse$2(x, n);
    }

    // Retain a reference to this Big constructor.
    // Shadow Big.prototype.constructor which points to Object.
    x.constructor = Big;
  }

  Big.prototype = P;
  Big.DP = DP;
  Big.RM = RM;
  Big.NE = NE;
  Big.PE = PE;
  Big.strict = STRICT;
  Big.roundDown = 0;
  Big.roundHalfUp = 1;
  Big.roundHalfEven = 2;
  Big.roundUp = 3;

  return Big;
}


/*
 * Parse the number or string value passed to a Big constructor.
 *
 * x {Big} A Big number instance.
 * n {number|string} A numeric value.
 */
function parse$2(x, n) {
  var e, i, nl;

  if (!NUMERIC.test(n)) {
    throw Error(INVALID + 'number');
  }

  // Determine sign.
  x.s = n.charAt(0) == '-' ? (n = n.slice(1), -1) : 1;

  // Decimal point?
  if ((e = n.indexOf('.')) > -1) n = n.replace('.', '');

  // Exponential form?
  if ((i = n.search(/e/i)) > 0) {

    // Determine exponent.
    if (e < 0) e = i;
    e += +n.slice(i + 1);
    n = n.substring(0, i);
  } else if (e < 0) {

    // Integer.
    e = n.length;
  }

  nl = n.length;

  // Determine leading zeros.
  for (i = 0; i < nl && n.charAt(i) == '0';) ++i;

  if (i == nl) {

    // Zero.
    x.c = [x.e = 0];
  } else {

    // Determine trailing zeros.
    for (; nl > 0 && n.charAt(--nl) == '0';);
    x.e = e - i - 1;
    x.c = [];

    // Convert string to array of digits without leading/trailing zeros.
    for (e = 0; i <= nl;) x.c[e++] = +n.charAt(i++);
  }

  return x;
}


/*
 * Round Big x to a maximum of sd significant digits using rounding mode rm.
 *
 * x {Big} The Big to round.
 * sd {number} Significant digits: integer, 0 to MAX_DP inclusive.
 * rm {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).
 * [more] {boolean} Whether the result of division was truncated.
 */
function round(x, sd, rm, more) {
  var xc = x.c;

  if (rm === UNDEFINED) rm = x.constructor.RM;
  if (rm !== 0 && rm !== 1 && rm !== 2 && rm !== 3) {
    throw Error(INVALID_RM);
  }

  if (sd < 1) {
    more =
      rm === 3 && (more || !!xc[0]) || sd === 0 && (
      rm === 1 && xc[0] >= 5 ||
      rm === 2 && (xc[0] > 5 || xc[0] === 5 && (more || xc[1] !== UNDEFINED))
    );

    xc.length = 1;

    if (more) {

      // 1, 0.1, 0.01, 0.001, 0.0001 etc.
      x.e = x.e - sd + 1;
      xc[0] = 1;
    } else {

      // Zero.
      xc[0] = x.e = 0;
    }
  } else if (sd < xc.length) {

    // xc[sd] is the digit after the digit that may be rounded up.
    more =
      rm === 1 && xc[sd] >= 5 ||
      rm === 2 && (xc[sd] > 5 || xc[sd] === 5 &&
        (more || xc[sd + 1] !== UNDEFINED || xc[sd - 1] & 1)) ||
      rm === 3 && (more || !!xc[0]);

    // Remove any digits after the required precision.
    xc.length = sd--;

    // Round up?
    if (more) {

      // Rounding up may mean the previous digit has to be rounded up.
      for (; ++xc[sd] > 9;) {
        xc[sd] = 0;
        if (!sd--) {
          ++x.e;
          xc.unshift(1);
        }
      }
    }

    // Remove trailing zeros.
    for (sd = xc.length; !xc[--sd];) xc.pop();
  }

  return x;
}


/*
 * Return a string representing the value of Big x in normal or exponential notation.
 * Handles P.toExponential, P.toFixed, P.toJSON, P.toPrecision, P.toString and P.valueOf.
 */
function stringify(x, doExponential, isNonzero) {
  var e = x.e,
    s = x.c.join(''),
    n = s.length;

  // Exponential notation?
  if (doExponential) {
    s = s.charAt(0) + (n > 1 ? '.' + s.slice(1) : '') + (e < 0 ? 'e' : 'e+') + e;

  // Normal notation.
  } else if (e < 0) {
    for (; ++e;) s = '0' + s;
    s = '0.' + s;
  } else if (e > 0) {
    if (++e > n) {
      for (e -= n; e--;) s += '0';
    } else if (e < n) {
      s = s.slice(0, e) + '.' + s.slice(e);
    }
  } else if (n > 1) {
    s = s.charAt(0) + '.' + s.slice(1);
  }

  return x.s < 0 && isNonzero ? '-' + s : s;
}


// Prototype/instance methods


/*
 * Return a new Big whose value is the absolute value of this Big.
 */
P.abs = function () {
  var x = new this.constructor(this);
  x.s = 1;
  return x;
};


/*
 * Return 1 if the value of this Big is greater than the value of Big y,
 *       -1 if the value of this Big is less than the value of Big y, or
 *        0 if they have the same value.
 */
P.cmp = function (y) {
  var isneg,
    x = this,
    xc = x.c,
    yc = (y = new x.constructor(y)).c,
    i = x.s,
    j = y.s,
    k = x.e,
    l = y.e;

  // Either zero?
  if (!xc[0] || !yc[0]) return !xc[0] ? !yc[0] ? 0 : -j : i;

  // Signs differ?
  if (i != j) return i;

  isneg = i < 0;

  // Compare exponents.
  if (k != l) return k > l ^ isneg ? 1 : -1;

  j = (k = xc.length) < (l = yc.length) ? k : l;

  // Compare digit by digit.
  for (i = -1; ++i < j;) {
    if (xc[i] != yc[i]) return xc[i] > yc[i] ^ isneg ? 1 : -1;
  }

  // Compare lengths.
  return k == l ? 0 : k > l ^ isneg ? 1 : -1;
};


/*
 * Return a new Big whose value is the value of this Big divided by the value of Big y, rounded,
 * if necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.
 */
P.div = function (y) {
  var x = this,
    Big = x.constructor,
    a = x.c,                  // dividend
    b = (y = new Big(y)).c,   // divisor
    k = x.s == y.s ? 1 : -1,
    dp = Big.DP;

  if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {
    throw Error(INVALID_DP);
  }

  // Divisor is zero?
  if (!b[0]) {
    throw Error(DIV_BY_ZERO);
  }

  // Dividend is 0? Return +-0.
  if (!a[0]) {
    y.s = k;
    y.c = [y.e = 0];
    return y;
  }

  var bl, bt, n, cmp, ri,
    bz = b.slice(),
    ai = bl = b.length,
    al = a.length,
    r = a.slice(0, bl),   // remainder
    rl = r.length,
    q = y,                // quotient
    qc = q.c = [],
    qi = 0,
    p = dp + (q.e = x.e - y.e) + 1;    // precision of the result

  q.s = k;
  k = p < 0 ? 0 : p;

  // Create version of divisor with leading zero.
  bz.unshift(0);

  // Add zeros to make remainder as long as divisor.
  for (; rl++ < bl;) r.push(0);

  do {

    // n is how many times the divisor goes into current remainder.
    for (n = 0; n < 10; n++) {

      // Compare divisor and remainder.
      if (bl != (rl = r.length)) {
        cmp = bl > rl ? 1 : -1;
      } else {
        for (ri = -1, cmp = 0; ++ri < bl;) {
          if (b[ri] != r[ri]) {
            cmp = b[ri] > r[ri] ? 1 : -1;
            break;
          }
        }
      }

      // If divisor < remainder, subtract divisor from remainder.
      if (cmp < 0) {

        // Remainder can't be more than 1 digit longer than divisor.
        // Equalise lengths using divisor with extra leading zero?
        for (bt = rl == bl ? b : bz; rl;) {
          if (r[--rl] < bt[rl]) {
            ri = rl;
            for (; ri && !r[--ri];) r[ri] = 9;
            --r[ri];
            r[rl] += 10;
          }
          r[rl] -= bt[rl];
        }

        for (; !r[0];) r.shift();
      } else {
        break;
      }
    }

    // Add the digit n to the result array.
    qc[qi++] = cmp ? n : ++n;

    // Update the remainder.
    if (r[0] && cmp) r[rl] = a[ai] || 0;
    else r = [a[ai]];

  } while ((ai++ < al || r[0] !== UNDEFINED) && k--);

  // Leading zero? Do not remove if result is simply zero (qi == 1).
  if (!qc[0] && qi != 1) {

    // There can't be more than one zero.
    qc.shift();
    q.e--;
    p--;
  }

  // Round?
  if (qi > p) round(q, p, Big.RM, r[0] !== UNDEFINED);

  return q;
};


/*
 * Return true if the value of this Big is equal to the value of Big y, otherwise return false.
 */
P.eq = function (y) {
  return this.cmp(y) === 0;
};


/*
 * Return true if the value of this Big is greater than the value of Big y, otherwise return
 * false.
 */
P.gt = function (y) {
  return this.cmp(y) > 0;
};


/*
 * Return true if the value of this Big is greater than or equal to the value of Big y, otherwise
 * return false.
 */
P.gte = function (y) {
  return this.cmp(y) > -1;
};


/*
 * Return true if the value of this Big is less than the value of Big y, otherwise return false.
 */
P.lt = function (y) {
  return this.cmp(y) < 0;
};


/*
 * Return true if the value of this Big is less than or equal to the value of Big y, otherwise
 * return false.
 */
P.lte = function (y) {
  return this.cmp(y) < 1;
};


/*
 * Return a new Big whose value is the value of this Big minus the value of Big y.
 */
P.minus = P.sub = function (y) {
  var i, j, t, xlty,
    x = this,
    Big = x.constructor,
    a = x.s,
    b = (y = new Big(y)).s;

  // Signs differ?
  if (a != b) {
    y.s = -b;
    return x.plus(y);
  }

  var xc = x.c.slice(),
    xe = x.e,
    yc = y.c,
    ye = y.e;

  // Either zero?
  if (!xc[0] || !yc[0]) {
    if (yc[0]) {
      y.s = -b;
    } else if (xc[0]) {
      y = new Big(x);
    } else {
      y.s = 1;
    }
    return y;
  }

  // Determine which is the bigger number. Prepend zeros to equalise exponents.
  if (a = xe - ye) {

    if (xlty = a < 0) {
      a = -a;
      t = xc;
    } else {
      ye = xe;
      t = yc;
    }

    t.reverse();
    for (b = a; b--;) t.push(0);
    t.reverse();
  } else {

    // Exponents equal. Check digit by digit.
    j = ((xlty = xc.length < yc.length) ? xc : yc).length;

    for (a = b = 0; b < j; b++) {
      if (xc[b] != yc[b]) {
        xlty = xc[b] < yc[b];
        break;
      }
    }
  }

  // x < y? Point xc to the array of the bigger number.
  if (xlty) {
    t = xc;
    xc = yc;
    yc = t;
    y.s = -y.s;
  }

  /*
   * Append zeros to xc if shorter. No need to add zeros to yc if shorter as subtraction only
   * needs to start at yc.length.
   */
  if ((b = (j = yc.length) - (i = xc.length)) > 0) for (; b--;) xc[i++] = 0;

  // Subtract yc from xc.
  for (b = i; j > a;) {
    if (xc[--j] < yc[j]) {
      for (i = j; i && !xc[--i];) xc[i] = 9;
      --xc[i];
      xc[j] += 10;
    }

    xc[j] -= yc[j];
  }

  // Remove trailing zeros.
  for (; xc[--b] === 0;) xc.pop();

  // Remove leading zeros and adjust exponent accordingly.
  for (; xc[0] === 0;) {
    xc.shift();
    --ye;
  }

  if (!xc[0]) {

    // n - n = +0
    y.s = 1;

    // Result must be zero.
    xc = [ye = 0];
  }

  y.c = xc;
  y.e = ye;

  return y;
};


/*
 * Return a new Big whose value is the value of this Big modulo the value of Big y.
 */
P.mod = function (y) {
  var ygtx,
    x = this,
    Big = x.constructor,
    a = x.s,
    b = (y = new Big(y)).s;

  if (!y.c[0]) {
    throw Error(DIV_BY_ZERO);
  }

  x.s = y.s = 1;
  ygtx = y.cmp(x) == 1;
  x.s = a;
  y.s = b;

  if (ygtx) return new Big(x);

  a = Big.DP;
  b = Big.RM;
  Big.DP = Big.RM = 0;
  x = x.div(y);
  Big.DP = a;
  Big.RM = b;

  return this.minus(x.times(y));
};


/*
 * Return a new Big whose value is the value of this Big plus the value of Big y.
 */
P.plus = P.add = function (y) {
  var e, k, t,
    x = this,
    Big = x.constructor;

  y = new Big(y);

  // Signs differ?
  if (x.s != y.s) {
    y.s = -y.s;
    return x.minus(y);
  }

  var xe = x.e,
    xc = x.c,
    ye = y.e,
    yc = y.c;

  // Either zero?
  if (!xc[0] || !yc[0]) {
    if (!yc[0]) {
      if (xc[0]) {
        y = new Big(x);
      } else {
        y.s = x.s;
      }
    }
    return y;
  }

  xc = xc.slice();

  // Prepend zeros to equalise exponents.
  // Note: reverse faster than unshifts.
  if (e = xe - ye) {
    if (e > 0) {
      ye = xe;
      t = yc;
    } else {
      e = -e;
      t = xc;
    }

    t.reverse();
    for (; e--;) t.push(0);
    t.reverse();
  }

  // Point xc to the longer array.
  if (xc.length - yc.length < 0) {
    t = yc;
    yc = xc;
    xc = t;
  }

  e = yc.length;

  // Only start adding at yc.length - 1 as the further digits of xc can be left as they are.
  for (k = 0; e; xc[e] %= 10) k = (xc[--e] = xc[e] + yc[e] + k) / 10 | 0;

  // No need to check for zero, as +x + +y != 0 && -x + -y != 0

  if (k) {
    xc.unshift(k);
    ++ye;
  }

  // Remove trailing zeros.
  for (e = xc.length; xc[--e] === 0;) xc.pop();

  y.c = xc;
  y.e = ye;

  return y;
};


/*
 * Return a Big whose value is the value of this Big raised to the power n.
 * If n is negative, round to a maximum of Big.DP decimal places using rounding
 * mode Big.RM.
 *
 * n {number} Integer, -MAX_POWER to MAX_POWER inclusive.
 */
P.pow = function (n) {
  var x = this,
    one = new x.constructor('1'),
    y = one,
    isneg = n < 0;

  if (n !== ~~n || n < -MAX_POWER || n > MAX_POWER) {
    throw Error(INVALID + 'exponent');
  }

  if (isneg) n = -n;

  for (;;) {
    if (n & 1) y = y.times(x);
    n >>= 1;
    if (!n) break;
    x = x.times(x);
  }

  return isneg ? one.div(y) : y;
};


/*
 * Return a new Big whose value is the value of this Big rounded to a maximum precision of sd
 * significant digits using rounding mode rm, or Big.RM if rm is not specified.
 *
 * sd {number} Significant digits: integer, 1 to MAX_DP inclusive.
 * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).
 */
P.prec = function (sd, rm) {
  if (sd !== ~~sd || sd < 1 || sd > MAX_DP) {
    throw Error(INVALID + 'precision');
  }
  return round(new this.constructor(this), sd, rm);
};


/*
 * Return a new Big whose value is the value of this Big rounded to a maximum of dp decimal places
 * using rounding mode rm, or Big.RM if rm is not specified.
 * If dp is negative, round to an integer which is a multiple of 10**-dp.
 * If dp is not specified, round to 0 decimal places.
 *
 * dp? {number} Integer, -MAX_DP to MAX_DP inclusive.
 * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).
 */
P.round = function (dp, rm) {
  if (dp === UNDEFINED) dp = 0;
  else if (dp !== ~~dp || dp < -MAX_DP || dp > MAX_DP) {
    throw Error(INVALID_DP);
  }
  return round(new this.constructor(this), dp + this.e + 1, rm);
};


/*
 * Return a new Big whose value is the square root of the value of this Big, rounded, if
 * necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.
 */
P.sqrt = function () {
  var r, c, t,
    x = this,
    Big = x.constructor,
    s = x.s,
    e = x.e,
    half = new Big('0.5');

  // Zero?
  if (!x.c[0]) return new Big(x);

  // Negative?
  if (s < 0) {
    throw Error(NAME + 'No square root');
  }

  // Estimate.
  s = Math.sqrt(x + '');

  // Math.sqrt underflow/overflow?
  // Re-estimate: pass x coefficient to Math.sqrt as integer, then adjust the result exponent.
  if (s === 0 || s === 1 / 0) {
    c = x.c.join('');
    if (!(c.length + e & 1)) c += '0';
    s = Math.sqrt(c);
    e = ((e + 1) / 2 | 0) - (e < 0 || e & 1);
    r = new Big((s == 1 / 0 ? '5e' : (s = s.toExponential()).slice(0, s.indexOf('e') + 1)) + e);
  } else {
    r = new Big(s + '');
  }

  e = r.e + (Big.DP += 4);

  // Newton-Raphson iteration.
  do {
    t = r;
    r = half.times(t.plus(x.div(t)));
  } while (t.c.slice(0, e).join('') !== r.c.slice(0, e).join(''));

  return round(r, (Big.DP -= 4) + r.e + 1, Big.RM);
};


/*
 * Return a new Big whose value is the value of this Big times the value of Big y.
 */
P.times = P.mul = function (y) {
  var c,
    x = this,
    Big = x.constructor,
    xc = x.c,
    yc = (y = new Big(y)).c,
    a = xc.length,
    b = yc.length,
    i = x.e,
    j = y.e;

  // Determine sign of result.
  y.s = x.s == y.s ? 1 : -1;

  // Return signed 0 if either 0.
  if (!xc[0] || !yc[0]) {
    y.c = [y.e = 0];
    return y;
  }

  // Initialise exponent of result as x.e + y.e.
  y.e = i + j;

  // If array xc has fewer digits than yc, swap xc and yc, and lengths.
  if (a < b) {
    c = xc;
    xc = yc;
    yc = c;
    j = a;
    a = b;
    b = j;
  }

  // Initialise coefficient array of result with zeros.
  for (c = new Array(j = a + b); j--;) c[j] = 0;

  // Multiply.

  // i is initially xc.length.
  for (i = b; i--;) {
    b = 0;

    // a is yc.length.
    for (j = a + i; j > i;) {

      // Current sum of products at this digit position, plus carry.
      b = c[j] + yc[i] * xc[j - i - 1] + b;
      c[j--] = b % 10;

      // carry
      b = b / 10 | 0;
    }

    c[j] = b;
  }

  // Increment result exponent if there is a final carry, otherwise remove leading zero.
  if (b) ++y.e;
  else c.shift();

  // Remove trailing zeros.
  for (i = c.length; !c[--i];) c.pop();
  y.c = c;

  return y;
};


/*
 * Return a string representing the value of this Big in exponential notation rounded to dp fixed
 * decimal places using rounding mode rm, or Big.RM if rm is not specified.
 *
 * dp? {number} Decimal places: integer, 0 to MAX_DP inclusive.
 * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).
 */
P.toExponential = function (dp, rm) {
  var x = this,
    n = x.c[0];

  if (dp !== UNDEFINED) {
    if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {
      throw Error(INVALID_DP);
    }
    x = round(new x.constructor(x), ++dp, rm);
    for (; x.c.length < dp;) x.c.push(0);
  }

  return stringify(x, true, !!n);
};


/*
 * Return a string representing the value of this Big in normal notation rounded to dp fixed
 * decimal places using rounding mode rm, or Big.RM if rm is not specified.
 *
 * dp? {number} Decimal places: integer, 0 to MAX_DP inclusive.
 * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).
 *
 * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.
 * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.
 */
P.toFixed = function (dp, rm) {
  var x = this,
    n = x.c[0];

  if (dp !== UNDEFINED) {
    if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {
      throw Error(INVALID_DP);
    }
    x = round(new x.constructor(x), dp + x.e + 1, rm);

    // x.e may have changed if the value is rounded up.
    for (dp = dp + x.e + 1; x.c.length < dp;) x.c.push(0);
  }

  return stringify(x, false, !!n);
};


/*
 * Return a string representing the value of this Big.
 * Return exponential notation if this Big has a positive exponent equal to or greater than
 * Big.PE, or a negative exponent equal to or less than Big.NE.
 * Omit the sign for negative zero.
 */
P.toJSON = P.toString = function () {
  var x = this,
    Big = x.constructor;
  return stringify(x, x.e <= Big.NE || x.e >= Big.PE, !!x.c[0]);
};


/*
 * Return the value of this Big as a primitve number.
 */
P.toNumber = function () {
  var n = Number(stringify(this, true, true));
  if (this.constructor.strict === true && !this.eq(n.toString())) {
    throw Error(NAME + 'Imprecise conversion');
  }
  return n;
};


/*
 * Return a string representing the value of this Big rounded to sd significant digits using
 * rounding mode rm, or Big.RM if rm is not specified.
 * Use exponential notation if sd is less than the number of digits necessary to represent
 * the integer part of the value in normal notation.
 *
 * sd {number} Significant digits: integer, 1 to MAX_DP inclusive.
 * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).
 */
P.toPrecision = function (sd, rm) {
  var x = this,
    Big = x.constructor,
    n = x.c[0];

  if (sd !== UNDEFINED) {
    if (sd !== ~~sd || sd < 1 || sd > MAX_DP) {
      throw Error(INVALID + 'precision');
    }
    x = round(new Big(x), sd, rm);
    for (; x.c.length < sd;) x.c.push(0);
  }

  return stringify(x, sd <= x.e || x.e <= Big.NE || x.e >= Big.PE, !!n);
};


/*
 * Return a string representing the value of this Big.
 * Return exponential notation if this Big has a positive exponent equal to or greater than
 * Big.PE, or a negative exponent equal to or less than Big.NE.
 * Include the sign for negative zero.
 */
P.valueOf = function () {
  var x = this,
    Big = x.constructor;
  if (Big.strict === true) {
    throw Error(NAME + 'valueOf disallowed');
  }
  return stringify(x, x.e <= Big.NE || x.e >= Big.PE, true);
};


// Export


var Big = _Big_();

function buildLocalizeFn(args2) {
  return function(dirtyIndex, options) {
    var valuesArray;
    if ("formatting" === (null != options && options.context ? String(options.context) : "standalone") && args2.formattingValues) {
      var defaultWidth = args2.defaultFormattingWidth || args2.defaultWidth, width = null != options && options.width ? String(options.width) : defaultWidth;
      valuesArray = args2.formattingValues[width] || args2.formattingValues[defaultWidth];
    } else {
      var _defaultWidth = args2.defaultWidth, _width = null != options && options.width ? String(options.width) : args2.defaultWidth;
      valuesArray = args2.values[_width] || args2.values[_defaultWidth];
    }
    return valuesArray[args2.argumentCallback ? args2.argumentCallback(dirtyIndex) : dirtyIndex];
  };
}
function buildMatchFn(args2) {
  return function(string) {
    var options = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, width = options.width, matchPattern2 = width && args2.matchPatterns[width] || args2.matchPatterns[args2.defaultMatchWidth], matchResult = string.match(matchPattern2);
    if (!matchResult)
      return null;
    var value, matchedString = matchResult[0], parsePatterns2 = width && args2.parsePatterns[width] || args2.parsePatterns[args2.defaultParseWidth], key = Array.isArray(parsePatterns2) ? function(array, predicate) {
      for (var key2 = 0; key2 < array.length; key2++)
        if (predicate(array[key2]))
          return key2;
      return;
    }(parsePatterns2, function(pattern) {
      return pattern.test(matchedString);
    }) : function(object, predicate) {
      for (var key2 in object)
        if (object.hasOwnProperty(key2) && predicate(object[key2]))
          return key2;
      return;
    }(parsePatterns2, function(pattern) {
      return pattern.test(matchedString);
    });
    return value = args2.valueCallback ? args2.valueCallback(key) : key, { value: value = options.valueCallback ? options.valueCallback(value) : value, rest: string.slice(matchedString.length) };
  };
}
function buildFormatLongFn(args2) {
  return function() {
    var options = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, width = options.width ? String(options.width) : args2.defaultWidth;
    return args2.formats[width] || args2.formats[args2.defaultWidth];
  };
}
var args, formatDistanceLocale = { lessThanXSeconds: { one: "less than a second", other: "less than {{count}} seconds" }, xSeconds: { one: "1 second", other: "{{count}} seconds" }, halfAMinute: "half a minute", lessThanXMinutes: { one: "less than a minute", other: "less than {{count}} minutes" }, xMinutes: { one: "1 minute", other: "{{count}} minutes" }, aboutXHours: { one: "about 1 hour", other: "about {{count}} hours" }, xHours: { one: "1 hour", other: "{{count}} hours" }, xDays: { one: "1 day", other: "{{count}} days" }, aboutXWeeks: { one: "about 1 week", other: "about {{count}} weeks" }, xWeeks: { one: "1 week", other: "{{count}} weeks" }, aboutXMonths: { one: "about 1 month", other: "about {{count}} months" }, xMonths: { one: "1 month", other: "{{count}} months" }, aboutXYears: { one: "about 1 year", other: "about {{count}} years" }, xYears: { one: "1 year", other: "{{count}} years" }, overXYears: { one: "over 1 year", other: "over {{count}} years" }, almostXYears: { one: "almost 1 year", other: "almost {{count}} years" } }, formatLong = { date: buildFormatLongFn({ formats: { full: "EEEE, MMMM do, y", long: "MMMM do, y", medium: "MMM d, y", short: "MM/dd/yyyy" }, defaultWidth: "full" }), time: buildFormatLongFn({ formats: { full: "h:mm:ss a zzzz", long: "h:mm:ss a z", medium: "h:mm:ss a", short: "h:mm a" }, defaultWidth: "full" }), dateTime: buildFormatLongFn({ formats: { full: "{{date}} 'at' {{time}}", long: "{{date}} 'at' {{time}}", medium: "{{date}}, {{time}}", short: "{{date}}, {{time}}" }, defaultWidth: "full" }) }, formatRelativeLocale = { lastWeek: "'last' eeee 'at' p", yesterday: "'yesterday at' p", today: "'today at' p", tomorrow: "'tomorrow at' p", nextWeek: "eeee 'at' p", other: "P" }, locale = { code: "en-US", formatDistance: function(token, count, options) {
  var result, tokenValue = formatDistanceLocale[token];
  return result = "string" == typeof tokenValue ? tokenValue : 1 === count ? tokenValue.one : tokenValue.other.replace("{{count}}", count.toString()), null != options && options.addSuffix ? options.comparison && options.comparison > 0 ? "in " + result : result + " ago" : result;
}, formatLong, formatRelative: function(token, _date, _baseDate, _options) {
  return formatRelativeLocale[token];
}, localize: { ordinalNumber: function(dirtyNumber, _options) {
  var number = Number(dirtyNumber), rem100 = number % 100;
  if (rem100 > 20 || rem100 < 10)
    switch (rem100 % 10) {
      case 1:
        return number + "st";
      case 2:
        return number + "nd";
      case 3:
        return number + "rd";
    }
  return number + "th";
}, era: buildLocalizeFn({ values: { narrow: ["B", "A"], abbreviated: ["BC", "AD"], wide: ["Before Christ", "Anno Domini"] }, defaultWidth: "wide" }), quarter: buildLocalizeFn({ values: { narrow: ["1", "2", "3", "4"], abbreviated: ["Q1", "Q2", "Q3", "Q4"], wide: ["1st quarter", "2nd quarter", "3rd quarter", "4th quarter"] }, defaultWidth: "wide", argumentCallback: function(quarter) {
  return quarter - 1;
} }), month: buildLocalizeFn({ values: { narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"], abbreviated: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], wide: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"] }, defaultWidth: "wide" }), day: buildLocalizeFn({ values: { narrow: ["S", "M", "T", "W", "T", "F", "S"], short: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"], abbreviated: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"], wide: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"] }, defaultWidth: "wide" }), dayPeriod: buildLocalizeFn({ values: { narrow: { am: "a", pm: "p", midnight: "mi", noon: "n", morning: "morning", afternoon: "afternoon", evening: "evening", night: "night" }, abbreviated: { am: "AM", pm: "PM", midnight: "midnight", noon: "noon", morning: "morning", afternoon: "afternoon", evening: "evening", night: "night" }, wide: { am: "a.m.", pm: "p.m.", midnight: "midnight", noon: "noon", morning: "morning", afternoon: "afternoon", evening: "evening", night: "night" } }, defaultWidth: "wide", formattingValues: { narrow: { am: "a", pm: "p", midnight: "mi", noon: "n", morning: "in the morning", afternoon: "in the afternoon", evening: "in the evening", night: "at night" }, abbreviated: { am: "AM", pm: "PM", midnight: "midnight", noon: "noon", morning: "in the morning", afternoon: "in the afternoon", evening: "in the evening", night: "at night" }, wide: { am: "a.m.", pm: "p.m.", midnight: "midnight", noon: "noon", morning: "in the morning", afternoon: "in the afternoon", evening: "in the evening", night: "at night" } }, defaultFormattingWidth: "wide" }) }, match: { ordinalNumber: (args = { matchPattern: /^(\d+)(th|st|nd|rd)?/i, parsePattern: /\d+/i, valueCallback: function(value) {
  return parseInt(value, 10);
} }, function(string) {
  var options = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, matchResult = string.match(args.matchPattern);
  if (!matchResult)
    return null;
  var matchedString = matchResult[0], parseResult = string.match(args.parsePattern);
  if (!parseResult)
    return null;
  var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];
  return { value: value = options.valueCallback ? options.valueCallback(value) : value, rest: string.slice(matchedString.length) };
}), era: buildMatchFn({ matchPatterns: { narrow: /^(b|a)/i, abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i, wide: /^(before christ|before common era|anno domini|common era)/i }, defaultMatchWidth: "wide", parsePatterns: { any: [/^b/i, /^(a|c)/i] }, defaultParseWidth: "any" }), quarter: buildMatchFn({ matchPatterns: { narrow: /^[1234]/i, abbreviated: /^q[1234]/i, wide: /^[1234](th|st|nd|rd)? quarter/i }, defaultMatchWidth: "wide", parsePatterns: { any: [/1/i, /2/i, /3/i, /4/i] }, defaultParseWidth: "any", valueCallback: function(index) {
  return index + 1;
} }), month: buildMatchFn({ matchPatterns: { narrow: /^[jfmasond]/i, abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i, wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i }, defaultMatchWidth: "wide", parsePatterns: { narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i], any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i] }, defaultParseWidth: "any" }), day: buildMatchFn({ matchPatterns: { narrow: /^[smtwf]/i, short: /^(su|mo|tu|we|th|fr|sa)/i, abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i, wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i }, defaultMatchWidth: "wide", parsePatterns: { narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i], any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i] }, defaultParseWidth: "any" }), dayPeriod: buildMatchFn({ matchPatterns: { narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i, any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i }, defaultMatchWidth: "any", parsePatterns: { any: { am: /^a/i, pm: /^p/i, midnight: /^mi/i, noon: /^no/i, morning: /morning/i, afternoon: /afternoon/i, evening: /evening/i, night: /night/i } }, defaultParseWidth: "any" }) }, options: { weekStartsOn: 0, firstWeekContainsDate: 1 } };
function matchPattern(values) {
  return new RegExp(`^(${values.map(escape$1).join("|")})`, "i");
}
function parsePatterns(values) {
  return values.map((value) => new RegExp(`^${escape$1(value)}`, "i"));
}
function escape$1(value) {
  return value.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
}
let localeConfig, dateFnsLocale;
function startupLocalization(config, roundingMode) {
  const code = config.code.toLowerCase().replace("_", "-");
  localeConfig = { ...config, code }, dateFnsLocale = function({ dates, firstDayOfWeek, minimalDaysInFirstWeek }) {
    const eraValues = { wide: dates.eras }, monthValues = { narrow: dates.shortMonths, abbreviated: dates.shortMonths, wide: dates.months }, dayValues = { narrow: dates.shortWeekdays, short: dates.shortWeekdays, abbreviated: dates.shortWeekdays, wide: dates.weekdays }, dayPeriodValues = { wide: { am: dates.dayPeriods[0], pm: dates.dayPeriods[1] } }, matchEraPatterns = { any: matchPattern(dates.eras) }, parseEraPatterns = { any: parsePatterns(dates.eras) }, matchMonthPatterns = { narrow: matchPattern(dates.shortMonths), abbreviated: matchPattern(dates.shortMonths), wide: matchPattern(dates.months) }, parseMonthPatterns = { narrow: parsePatterns(dates.shortMonths), abbreviated: parsePatterns(dates.shortMonths), wide: parsePatterns(dates.months) }, matchDayPatterns = { narrow: matchPattern(dates.shortWeekdays), short: matchPattern(dates.shortWeekdays), abbreviated: matchPattern(dates.shortWeekdays), wide: matchPattern(dates.weekdays) }, parseDayPatterns = { narrow: parsePatterns(dates.shortWeekdays), short: parsePatterns(dates.shortWeekdays), abbreviated: parsePatterns(dates.shortWeekdays), wide: parsePatterns(dates.weekdays) }, matchDayPeriodPatterns = { any: matchPattern(dates.dayPeriods) }, parseDayPeriodPatterns = { any: { am: ensure(parsePatterns(dates.dayPeriods)[0]), pm: ensure(parsePatterns(dates.dayPeriods)[1]) } };
    return { ...locale, options: { weekStartsOn: firstDayOfWeek, firstWeekContainsDate: minimalDaysInFirstWeek }, localize: { ...locale.localize, era: buildLocalizeFn({ values: eraValues, defaultWidth: "wide" }), month: buildLocalizeFn({ values: monthValues, defaultWidth: "wide" }), day: buildLocalizeFn({ values: dayValues, defaultWidth: "wide" }), dayPeriod: buildLocalizeFn({ values: dayPeriodValues, defaultWidth: "wide" }) }, match: { ...locale.match, era: buildMatchFn({ matchPatterns: matchEraPatterns, defaultMatchWidth: "any", parsePatterns: parseEraPatterns, defaultParseWidth: "any" }), month: buildMatchFn({ matchPatterns: matchMonthPatterns, defaultMatchWidth: "wide", parsePatterns: parseMonthPatterns, defaultParseWidth: "wide" }), day: buildMatchFn({ matchPatterns: matchDayPatterns, defaultMatchWidth: "wide", parsePatterns: parseDayPatterns, defaultParseWidth: "wide" }), dayPeriod: buildMatchFn({ matchPatterns: matchDayPeriodPatterns, defaultMatchWidth: "any", parsePatterns: parseDayPeriodPatterns, defaultParseWidth: "any" }) } };
  }(localeConfig), Big.RM = "HALF_UP" === roundingMode ? Big.roundHalfUp : Big.roundHalfEven;
}
function getLocale() {
  if (!localeConfig)
    throw new Error("Locale not initialized");
  return localeConfig;
}
function getDateFnsLocale() {
  if (!dateFnsLocale)
    throw new Error("DateFns locale not initialized");
  return dateFnsLocale;
}

let languageIndex = 0, translations = {};
const NO_TRANSLATION = "[No translation]";
function selectTranslation(translationTexts) {
  return translationTexts[languageIndex];
}
function updateActiveLanguageIndex(languageCodes, activeLanguageCode) {
  const activeLanguageIndex = languageCodes.indexOf(activeLanguageCode);
  languageIndex = activeLanguageIndex > -1 ? activeLanguageIndex : 0;
}
function setSystemTexts(systemTexts) {
  translations = systemTexts;
}
function translate(namespace, messageKey, ...args) {
  const translation = translations[`${namespace}.${messageKey}`];
  if (!translation)
    return NO_TRANSLATION;
  return ensure(selectTranslation(translation)).replace(/\{(\d+)\}/g, (match, n) => args[n - 1] ?? match);
}
function translateLoginMessage(messageKey) {
  let message = translate("mendix.signin", messageKey);
  return message === NO_TRANSLATION && window.i18nMap && (message = window.i18nMap[messageKey]), message;
}

class DescribedError extends Error {
  constructor(message) {
    super(message), Object.setPrototypeOf(this, DescribedError.prototype);
  }
}
var queryString$1 = {}, strictUriEncode = (str) => encodeURIComponent(str).replace(/[!'()*]/g, (x) => `%${x.charCodeAt(0).toString(16).toUpperCase()}`), singleMatcher = new RegExp("(%[a-f0-9]{2})|([^%]+?)", "gi"), multiMatcher = new RegExp("(%[a-f0-9]{2})+", "gi");
function decodeComponents(components, split) {
  try {
    return [decodeURIComponent(components.join(""))];
  } catch (err) {
  }
  if (1 === components.length)
    return components;
  split = split || 1;
  var left = components.slice(0, split), right = components.slice(split);
  return Array.prototype.concat.call([], decodeComponents(left), decodeComponents(right));
}
function decode(input) {
  try {
    return decodeURIComponent(input);
  } catch (err) {
    for (var tokens = input.match(singleMatcher) || [], i = 1; i < tokens.length; i++)
      tokens = (input = decodeComponents(tokens, i).join("")).match(singleMatcher) || [];
    return input;
  }
}
var decodeUriComponent = function(encodedURI) {
  if ("string" != typeof encodedURI)
    throw new TypeError("Expected `encodedURI` to be of type `string`, got `" + typeof encodedURI + "`");
  try {
    return encodedURI = encodedURI.replace(/\+/g, " "), decodeURIComponent(encodedURI);
  } catch (err) {
    return function(input) {
      for (var replaceMap = { "%FE%FF": "\uFFFD\uFFFD", "%FF%FE": "\uFFFD\uFFFD" }, match = multiMatcher.exec(input); match; ) {
        try {
          replaceMap[match[0]] = decodeURIComponent(match[0]);
        } catch (err2) {
          var result = decode(match[0]);
          result !== match[0] && (replaceMap[match[0]] = result);
        }
        match = multiMatcher.exec(input);
      }
      replaceMap["%C2"] = "\uFFFD";
      for (var entries = Object.keys(replaceMap), i = 0; i < entries.length; i++) {
        var key = entries[i];
        input = input.replace(new RegExp(key, "g"), replaceMap[key]);
      }
      return input;
    }(encodedURI);
  }
}, splitOnFirst = (string, separator) => {
  if ("string" != typeof string || "string" != typeof separator)
    throw new TypeError("Expected the arguments to be of type `string`");
  if ("" === separator)
    return [string];
  const separatorIndex = string.indexOf(separator);
  return -1 === separatorIndex ? [string] : [string.slice(0, separatorIndex), string.slice(separatorIndex + separator.length)];
}, filterObj = function(obj, predicate) {
  for (var ret = {}, keys = Object.keys(obj), isArr = Array.isArray(predicate), i = 0; i < keys.length; i++) {
    var key = keys[i], val = obj[key];
    (isArr ? -1 !== predicate.indexOf(key) : predicate(key, val, obj)) && (ret[key] = val);
  }
  return ret;
};
!function(exports) {
  const strictUriEncode$1 = strictUriEncode, decodeComponent = decodeUriComponent, splitOnFirst$1 = splitOnFirst, filterObject = filterObj, encodeFragmentIdentifier = Symbol("encodeFragmentIdentifier");
  function validateArrayFormatSeparator(value) {
    if ("string" != typeof value || 1 !== value.length)
      throw new TypeError("arrayFormatSeparator must be single character string");
  }
  function encode(value, options) {
    return options.encode ? options.strict ? strictUriEncode$1(value) : encodeURIComponent(value) : value;
  }
  function decode2(value, options) {
    return options.decode ? decodeComponent(value) : value;
  }
  function keysSorter(input) {
    return Array.isArray(input) ? input.sort() : "object" == typeof input ? keysSorter(Object.keys(input)).sort((a, b) => Number(a) - Number(b)).map((key) => input[key]) : input;
  }
  function removeHash(input) {
    const hashStart = input.indexOf("#");
    return -1 !== hashStart && (input = input.slice(0, hashStart)), input;
  }
  function extract(input) {
    const queryStart = (input = removeHash(input)).indexOf("?");
    return -1 === queryStart ? "" : input.slice(queryStart + 1);
  }
  function parseValue(value, options) {
    return options.parseNumbers && !Number.isNaN(Number(value)) && "string" == typeof value && "" !== value.trim() ? value = Number(value) : !options.parseBooleans || null === value || "true" !== value.toLowerCase() && "false" !== value.toLowerCase() || (value = "true" === value.toLowerCase()), value;
  }
  function parse(query, options) {
    validateArrayFormatSeparator((options = Object.assign({ decode: true, sort: true, arrayFormat: "none", arrayFormatSeparator: ",", parseNumbers: false, parseBooleans: false }, options)).arrayFormatSeparator);
    const formatter = function(options2) {
      let result;
      switch (options2.arrayFormat) {
        case "index":
          return (key, value, accumulator) => {
            result = /\[(\d*)\]$/.exec(key), key = key.replace(/\[\d*\]$/, ""), result ? (void 0 === accumulator[key] && (accumulator[key] = {}), accumulator[key][result[1]] = value) : accumulator[key] = value;
          };
        case "bracket":
          return (key, value, accumulator) => {
            result = /(\[\])$/.exec(key), key = key.replace(/\[\]$/, ""), result ? void 0 !== accumulator[key] ? accumulator[key] = [].concat(accumulator[key], value) : accumulator[key] = [value] : accumulator[key] = value;
          };
        case "colon-list-separator":
          return (key, value, accumulator) => {
            result = /(:list)$/.exec(key), key = key.replace(/:list$/, ""), result ? void 0 !== accumulator[key] ? accumulator[key] = [].concat(accumulator[key], value) : accumulator[key] = [value] : accumulator[key] = value;
          };
        case "comma":
        case "separator":
          return (key, value, accumulator) => {
            const isArray = "string" == typeof value && value.includes(options2.arrayFormatSeparator), isEncodedArray = "string" == typeof value && !isArray && decode2(value, options2).includes(options2.arrayFormatSeparator);
            value = isEncodedArray ? decode2(value, options2) : value;
            const newValue = isArray || isEncodedArray ? value.split(options2.arrayFormatSeparator).map((item) => decode2(item, options2)) : null === value ? value : decode2(value, options2);
            accumulator[key] = newValue;
          };
        case "bracket-separator":
          return (key, value, accumulator) => {
            const isArray = /(\[\])$/.test(key);
            if (key = key.replace(/\[\]$/, ""), !isArray)
              return void (accumulator[key] = value ? decode2(value, options2) : value);
            const arrayValue = null === value ? [] : value.split(options2.arrayFormatSeparator).map((item) => decode2(item, options2));
            void 0 !== accumulator[key] ? accumulator[key] = [].concat(accumulator[key], arrayValue) : accumulator[key] = arrayValue;
          };
        default:
          return (key, value, accumulator) => {
            void 0 !== accumulator[key] ? accumulator[key] = [].concat(accumulator[key], value) : accumulator[key] = value;
          };
      }
    }(options), ret = /* @__PURE__ */ Object.create(null);
    if ("string" != typeof query)
      return ret;
    if (!(query = query.trim().replace(/^[?#&]/, "")))
      return ret;
    for (const param of query.split("&")) {
      if ("" === param)
        continue;
      let [key, value] = splitOnFirst$1(options.decode ? param.replace(/\+/g, " ") : param, "=");
      value = void 0 === value ? null : ["comma", "separator", "bracket-separator"].includes(options.arrayFormat) ? value : decode2(value, options), formatter(decode2(key, options), value, ret);
    }
    for (const key of Object.keys(ret)) {
      const value = ret[key];
      if ("object" == typeof value && null !== value)
        for (const k of Object.keys(value))
          value[k] = parseValue(value[k], options);
      else
        ret[key] = parseValue(value, options);
    }
    return false === options.sort ? ret : (true === options.sort ? Object.keys(ret).sort() : Object.keys(ret).sort(options.sort)).reduce((result, key) => {
      const value = ret[key];
      return Boolean(value) && "object" == typeof value && !Array.isArray(value) ? result[key] = keysSorter(value) : result[key] = value, result;
    }, /* @__PURE__ */ Object.create(null));
  }
  exports.extract = extract, exports.parse = parse, exports.stringify = (object, options) => {
    if (!object)
      return "";
    validateArrayFormatSeparator((options = Object.assign({ encode: true, strict: true, arrayFormat: "none", arrayFormatSeparator: "," }, options)).arrayFormatSeparator);
    const shouldFilter = (key) => options.skipNull && null == object[key] || options.skipEmptyString && "" === object[key], formatter = function(options2) {
      switch (options2.arrayFormat) {
        case "index":
          return (key) => (result, value) => {
            const index = result.length;
            return void 0 === value || options2.skipNull && null === value || options2.skipEmptyString && "" === value ? result : null === value ? [...result, [encode(key, options2), "[", index, "]"].join("")] : [...result, [encode(key, options2), "[", encode(index, options2), "]=", encode(value, options2)].join("")];
          };
        case "bracket":
          return (key) => (result, value) => void 0 === value || options2.skipNull && null === value || options2.skipEmptyString && "" === value ? result : null === value ? [...result, [encode(key, options2), "[]"].join("")] : [...result, [encode(key, options2), "[]=", encode(value, options2)].join("")];
        case "colon-list-separator":
          return (key) => (result, value) => void 0 === value || options2.skipNull && null === value || options2.skipEmptyString && "" === value ? result : null === value ? [...result, [encode(key, options2), ":list="].join("")] : [...result, [encode(key, options2), ":list=", encode(value, options2)].join("")];
        case "comma":
        case "separator":
        case "bracket-separator": {
          const keyValueSep = "bracket-separator" === options2.arrayFormat ? "[]=" : "=";
          return (key) => (result, value) => void 0 === value || options2.skipNull && null === value || options2.skipEmptyString && "" === value ? result : (value = null === value ? "" : value, 0 === result.length ? [[encode(key, options2), keyValueSep, encode(value, options2)].join("")] : [[result, encode(value, options2)].join(options2.arrayFormatSeparator)]);
        }
        default:
          return (key) => (result, value) => void 0 === value || options2.skipNull && null === value || options2.skipEmptyString && "" === value ? result : null === value ? [...result, encode(key, options2)] : [...result, [encode(key, options2), "=", encode(value, options2)].join("")];
      }
    }(options), objectCopy = {};
    for (const key of Object.keys(object))
      shouldFilter(key) || (objectCopy[key] = object[key]);
    const keys = Object.keys(objectCopy);
    return false !== options.sort && keys.sort(options.sort), keys.map((key) => {
      const value = object[key];
      return void 0 === value ? "" : null === value ? encode(key, options) : Array.isArray(value) ? 0 === value.length && "bracket-separator" === options.arrayFormat ? encode(key, options) + "[]" : value.reduce(formatter(key), []).join("&") : encode(key, options) + "=" + encode(value, options);
    }).filter((x) => x.length > 0).join("&");
  }, exports.parseUrl = (url, options) => {
    options = Object.assign({ decode: true }, options);
    const [url_, hash] = splitOnFirst$1(url, "#");
    return Object.assign({ url: url_.split("?")[0] || "", query: parse(extract(url), options) }, options && options.parseFragmentIdentifier && hash ? { fragmentIdentifier: decode2(hash, options) } : {});
  }, exports.stringifyUrl = (object, options) => {
    options = Object.assign({ encode: true, strict: true, [encodeFragmentIdentifier]: true }, options);
    const url = removeHash(object.url).split("?")[0] || "", queryFromUrl = exports.extract(object.url), parsedQueryFromUrl = exports.parse(queryFromUrl, { sort: false }), query = Object.assign(parsedQueryFromUrl, object.query);
    let queryString2 = exports.stringify(query, options);
    queryString2 && (queryString2 = `?${queryString2}`);
    let hash = function(url2) {
      let hash2 = "";
      const hashStart = url2.indexOf("#");
      return -1 !== hashStart && (hash2 = url2.slice(hashStart)), hash2;
    }(object.url);
    return object.fragmentIdentifier && (hash = `#${options[encodeFragmentIdentifier] ? encode(object.fragmentIdentifier, options) : object.fragmentIdentifier}`), `${url}${queryString2}${hash}`;
  }, exports.pick = (input, filter, options) => {
    options = Object.assign({ parseFragmentIdentifier: true, [encodeFragmentIdentifier]: false }, options);
    const { url, query, fragmentIdentifier } = exports.parseUrl(input, options);
    return exports.stringifyUrl({ url, query: filterObject(query, filter), fragmentIdentifier }, options);
  }, exports.exclude = (input, filter, options) => {
    const exclusionFilter = Array.isArray(filter) ? (key) => !filter.includes(key) : (key, value) => !filter(key, value);
    return exports.pick(input, exclusionFilter, options);
  };
}(queryString$1);
var queryString = getDefaultExportFromCjs$1(queryString$1);
class Stopwatch {
  constructor() {
    this.startedAt = 0, this.reset();
  }
  measure() {
    const delta = performance.now() - this.startedAt;
    return { ms: delta, toString: () => delta.toFixed(1) };
  }
  reset() {
    this.startedAt = performance.now();
  }
}
class ConnectionError extends Error {
  constructor(message) {
    super(message), Object.setPrototypeOf(this, ConnectionError.prototype);
  }
}
class DescribedServerError extends DescribedError {
  constructor(message) {
    super(message), Object.setPrototypeOf(this, DescribedServerError.prototype);
  }
}
let middlewares = [];
function registerMiddleware(middleware) {
  return middlewares.push(middleware), () => {
    const index = middlewares.indexOf(middleware);
    -1 !== index && middlewares.splice(index, 1);
  };
}
async function applyMiddleware(request, actual) {
  return async function doProcess(index, req) {
    if (index === middlewares.length)
      return actual(req);
    return ensure(middlewares[index])(req, (r) => doProcess(index + 1, r));
  }(0, request);
}
class ResponseTypeError extends Error {
}
class ServerError extends Error {
  constructor(status, message) {
    super(message ?? "Internal server error"), this.status = status, Object.setPrototypeOf(this, ServerError.prototype);
  }
}
class UnauthorizedError extends ServerError {
  constructor(status) {
    super(status), Object.setPrototypeOf(this, UnauthorizedError.prototype);
  }
}
class ValidationError extends Error {
  constructor(original = {}) {
    super(), this.original = original, Object.setPrototypeOf(this, ValidationError.prototype);
  }
}
const logger$e = LogManager.get().getLogger(LogNode.Network);
async function get(url, handleAs) {
  logger$e.trace(`Starting GET ${url}`);
  const stopwatch = new Stopwatch(), request = { url, init: { method: "get", headers: new Headers(), cache: "force-cache", credentials: "include" } }, response = await applyMiddleware(request, doFetch);
  if (logger$e.trace(`Finished GET ${url} in ${stopwatch.measure()} milliseconds. Response code ${response.status}.`), !response.ok)
    throw new ServerError(response.status, response.statusText);
  switch (handleAs) {
    case "text":
      return response.text();
    case "json":
      return ensureJsonResponse(response);
    case "blob":
      return response.blob();
  }
}
async function doFetch(outgoingRequest) {
  let response;
  outgoingRequest.init.body = isJson(outgoingRequest.body) ? JSON.stringify(outgoingRequest.body) : outgoingRequest.body;
  try {
    response = await window.fetch(outgoingRequest.url, outgoingRequest.init);
  } catch (e) {
    throw new ConnectionError(e instanceof Error ? e.message : String(e));
  }
  switch (response.status) {
    case 200:
      return response;
    case 400:
    case 401:
    case 402:
    case 403:
    case 460:
      throw new UnauthorizedError(response.status);
    case 502:
    case 504:
      throw new ServerError(response.status, response.statusText);
    case 551:
      throw new ValidationError(await response.json());
    case 560:
      const description = await getXasErrorDescription(response);
      throw description ? new DescribedServerError(description) : new ServerError(response.status);
    case 12029:
      throw new ConnectionError("No connection");
    default:
      throw new ServerError(response.status, await getXasErrorDescription(response));
  }
}
async function getXasErrorDescription(response) {
  const json = await ensureJsonResponse(response);
  return json && "description" in json ? json.description : void 0;
}
async function ensureJsonResponse(response) {
  const textContent = await response.text();
  try {
    return JSON.parse(textContent);
  } catch (e) {
    throw new ResponseTypeError(`Expected response body to be JSON. Instead received: "${textContent}"`);
  }
}
const post = function(postFn) {
  const networkLogger = LogManager.get().getLogger(LogNode.Network);
  return async function(url, data) {
    const xasAction = "object" == typeof (payload = data) && null !== payload && "action" in payload && "string" == typeof payload.action ? data.action : void 0;
    var payload;
    void 0 !== xasAction ? networkLogger.trace(`Starting runtime action: ${xasAction}`) : networkLogger.trace(`Starting POST ${url}`);
    const stopwatch = new Stopwatch(), response = await postFn(url, data);
    return void 0 !== xasAction ? networkLogger.trace(`Finished runtime action "${xasAction}" in ${stopwatch.measure()} milliseconds.`) : networkLogger.trace(`Finished POST ${url} in ${stopwatch.measure()} milliseconds.`), response;
  };
}(async function(url, data) {
  const request = { url, body: data, init: { method: "post", headers: new Headers({ Accept: "application/json", ...isJson(data) ? { "Content-Type": "application/json" } : {} }), redirect: "error", credentials: "include" } };
  return ensureJsonResponse(await applyMiddleware(request, doFetch));
});
async function retrieveByIds(guids, schema) {
  return post(xasUrl(), { action: "retrieve_by_ids", params: { ids: guids, schema } });
}
async function retrieveByPath(guid, path, entity, direction, changes, objects) {
  return post(xasUrl(), { action: "retrieve_by_path", params: { id: guid, path, entity, direction }, changes, objects });
}
async function retrieveByXPath(xpath, schema = {}, wantCount = false) {
  return post(xasUrl(), { action: "retrieve_by_xpath", params: { xpath, schema, count: wantCount } });
}
async function retrieve(operationId, args, options, changes, objects) {
  return post(xasUrl(), { action: "runtimeOperation", operationId, params: args, options, changes, objects });
}
async function executeAction$1(params, context, changes, objects, asyncId) {
  return post(xasUrl(), { action: "executeaction", params: { ...params, asyncid: asyncId }, changes, objects, context: context.getGuids() });
}
async function pollBackgroundJob(asyncId) {
  return post(xasUrl(), { action: "poll_background_job", params: { asyncid: asyncId } });
}
async function instantiate(entity, changes, objects) {
  return post(xasUrl(), { action: "instantiate", params: { objecttype: entity }, changes, objects });
}
async function validate$1(changes, objects) {
  return post(xasUrl(), { action: "validate", params: {}, changes, objects });
}
async function commit(guids, context, changes, objects) {
  return post(xasUrl(), { action: "commit", params: { guids }, changes, objects, context: context.getGuids() });
}
async function rollback(guids, changes, objects) {
  return post(xasUrl(), { action: "rollback", params: { guids }, changes, objects });
}
async function _delete(guids, changes, objects) {
  return post(xasUrl(), { action: "delete", params: { guids }, changes, objects });
}
async function runtimeOperation(operationId, args, changes, objects, validationGuids, asyncId) {
  return post(xasUrl(), { action: "runtimeOperation", operationId, params: args, asyncid: asyncId, validationGuids, changes, objects });
}
async function login$1(username, password, useAuthToken) {
  return post(xasUrl(), { action: "login", params: { username, password, useAuthToken } });
}
async function getSessionData(params) {
  return post(xasUrl(), { action: "get_session_data", params: { ...params, version: 2 } });
}
async function logout() {
  return post(xasUrl(), { action: "logout", params: {} });
}
async function keepalive() {
  return post(xasUrl(), { action: "keepalive", params: {} });
}
async function _export(params, changes, objects, asyncId) {
  await post(xasUrl(), { action: "export", params: { ...params, asyncid: asyncId }, changes, objects });
}
async function synchronizeObjects$1(changes, fileGuidMapping, returnObjects, deletes, extraGuidsToRetrieve, incompatibleChanges) {
  return post(xasUrl(), { action: "synchronize_objects", changes, fileGuidMapping, returnObjects, deletes, extraGuidsToRetrieve: extraGuidsToRetrieve ?? [], incompatibleChanges: incompatibleChanges ?? [] });
}
async function createGuids(entities) {
  return post(xasUrl(), { action: "create_guids", params: { entities } });
}
async function upload(guid, name, params, blob, changes, objects) {
  const url = mx.remoteUrl + "file?" + queryString$1.stringify({ ...params, guid }), formData = new FormData();
  return formData.append("data", JSON.stringify({ changes, objects })), name ? formData.append("blob", blob, name) : formData.append("blob", blob), post(url, formData);
}
function xasUrl(url = mx.remoteUrl) {
  return url + "xas/";
}
var DayOfWeek;
!function(DayOfWeek2) {
  DayOfWeek2[DayOfWeek2.Sunday = 0] = "Sunday", DayOfWeek2[DayOfWeek2.Monday = 1] = "Monday", DayOfWeek2[DayOfWeek2.Tuesday = 2] = "Tuesday", DayOfWeek2[DayOfWeek2.Wednesday = 3] = "Wednesday", DayOfWeek2[DayOfWeek2.Thursday = 4] = "Thursday", DayOfWeek2[DayOfWeek2.Friday = 5] = "Friday", DayOfWeek2[DayOfWeek2.Saturday = 6] = "Saturday";
}(DayOfWeek || (DayOfWeek = {}));

async function withFinally(promise, finallyFun) {
  return promise.then((d) => (finallyFun(), d), (e) => (finallyFun(), Promise.reject(e)));
}
async function never() {
  return new Promise(() => {
  });
}
async function wait(timeout = 0) {
  return new Promise((resolve) => {
    setTimeout(() => {
      resolve();
    }, timeout);
  });
}
async function methodToPromise(subject, functionName, ...args) {
  return new Promise((resolve, reject) => subject[functionName](...args, resolve, reject));
}

let asyncIdCounter = (/* @__PURE__ */ new Date()).getTime();
async function executeAsync(action) {
  const asyncId = asyncIdCounter++;
  await action(asyncId);
  let timeout = 500;
  for (; ; ) {
    const result = await pollBackgroundJob(asyncId);
    if (result.response.finished)
      return result;
    await wait(timeout), timeout = Math.min(timeout + 500, 8e3);
  }
}
const microflowInfo = {};
function getMicroflowInfo(operationId) {
  return microflowInfo[operationId];
}
let globalData, globalOnlineData, globalOfflineData;
function getData() {
  return ensure(globalData);
}
function onlineData() {
  return ensure(globalOnlineData);
}
function offlineData() {
  return ensure(globalOfflineData);
}
function initializeCore(sessionData, languageCodes, microflows, newOnlineData, newOfflineData) {
  startupLocalization(sessionData.locale, sessionData.uiconfig.roundingmode), updateActiveLanguageIndex(languageCodes, sessionData.locale.code), function(microflows2 = {}) {
    for (const [key, operationIds] of Object.entries(microflows2))
      for (const operationId of operationIds.split(",")) {
        const mfData = JSON.parse(key);
        microflowInfo[operationId] = { parameters: mfData.p }, mfData.a && (microflowInfo[operationId].followedAssociations = mfData.a.map(([association, fromEntity]) => ({ association, fromEntity })));
      }
  }(microflows), globalOnlineData = newOnlineData, globalOfflineData = newOfflineData;
}
function setData(s) {
  globalData = s;
}
async function getByGuids(guids) {
  return new Promise((resolve, reject) => getData().get({ guids, callback: resolve, error: reject }));
}
async function getByGuid(guid) {
  return new Promise((resolve, reject) => getData().get({ guid, callback(obj) {
    resolve(obj ?? void 0);
  }, error: reject }));
}
const DEFAULT_ATTRIBUTE_VALUES = { String: null, Integer: null, Long: null, Decimal: null, Enum: null, HashString: null, ObjectReference: null, ObjectReferenceSet: [], DateTime: null, Boolean: false, AutoNumber: "0", Binary: null, EnumSet: null };
function createMxObjectJSON(guid, entityMeta) {
  const json = { guid, objectType: entityMeta.name, attributes: {} };
  return getAttributesMeta(entityMeta.name).forEach((attrMeta) => {
    const value = !entityMeta.isPersistable && isSystemAttribute(attrMeta.name) ? function(attr) {
      switch (attr) {
        case SystemAttribute.Owner:
        case SystemAttribute.ChangedBy:
          return getSession().getUserId();
        case SystemAttribute.CreatedDate:
        case SystemAttribute.ChangedDate:
          return Date.now();
      }
    }(attrMeta.name) : void 0 === attrMeta.defaultValue ? DEFAULT_ATTRIBUTE_VALUES[attrMeta.type] : "DateTime" === attrMeta.type && "[%CurrentDateTime%]" === attrMeta.defaultValue ? (/* @__PURE__ */ new Date()).getTime() : attrMeta.defaultValue;
    json.attributes[attrMeta.name] = { value, readonly: attrMeta.isAlwaysReadOnly };
  }), json;
}
function getCachedObjectsByPath(guid, direction, path, objectCache) {
  let cachedObjects = [], uncachedGuids = [];
  const association = getAssociationStep(path);
  if ("reverse" === direction)
    cachedObjects = objectCache.getAllObjects().filter((mxobj) => mxobj.getReferences(association).includes(guid));
  else {
    const rootMxObj = objectCache.getObject(guid);
    rootMxObj && ({ cachedObjects, uncachedGuids } = getRefsObjects(rootMxObj, objectCache, association));
  }
  return { cachedObjects, uncachedGuids };
}
function getRefsObjects(rootMxObj, objectCache, association) {
  const refGuids = rootMxObj.getReferences(association);
  return { cachedObjects: refGuids.map((refGuid) => objectCache.getObject(refGuid)).filter((mxobj) => null !== mxobj), uncachedGuids: refGuids.filter((refGuid) => !objectCache.has(refGuid)) };
}
function getAssociationStep(path) {
  const steps = path.split("/");
  return 1 === steps.length ? path : steps[0];
}

function runActionInComputed(action) {
  return allowStateChangesInsideComputed(() => runInAction(action));
}
configure({ enforceActions: "always" });
const scheduledActions = [];
function scheduleAction(action) {
  scheduledActions.push(action), 1 === scheduledActions.length && setTimeout(() => runInAction(() => scheduledActions.splice(0).forEach((f) => f())), 0);
}

function __decorate(decorators, target, key, desc) {
  var d, c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc;
  if ("object" == typeof Reflect && "function" == typeof Reflect.decorate)
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      (d = decorators[i]) && (r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r);
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}
"function" == typeof SuppressedError && SuppressedError;
const pathSeparator = ";", rootPath = `*${pathSeparator}`;
function isAncestorOrSelf(parent, path) {
  return path.startsWith(parent);
}
class StoreBackend {
  constructor() {
    this.recordGroups = /* @__PURE__ */ new Map(), this.slotObservers = /* @__PURE__ */ new Map();
  }
  get$(widgetId, slot, path) {
    const recordsGroup = this.getOrCreateGroup(widgetId, slot);
    let recordWithExactPath;
    return fromComputation$(`backend.get$(${widgetId}, ${slot}, ${path})`, () => {
      if (recordWithExactPath)
        return recordWithExactPath.get();
      const bestMatchingRecord = recordsGroup.filter(([recordPath]) => isAncestorOrSelf(recordPath, path)).pop();
      return bestMatchingRecord ? (bestMatchingRecord[0] === path && (recordWithExactPath = bestMatchingRecord[1]), bestMatchingRecord[1].get()) : void 0;
    });
  }
  set(widgetId, slot, path, value) {
    const recordsGroup = this.getOrCreateGroup(widgetId, slot), existingRecord = recordsGroup.filter(([recordPath]) => isAncestorOrSelf(recordPath, path)).pop();
    if (existingRecord)
      return void existingRecord[1].set(value);
    const newRecord = tuple(path, observable.box(value, { deep: false, name: `backend.box(${widgetId}, ${slot}, ${path})`, equals: deepEqual$1 })), moreSpecificRecordIndex = recordsGroup.findIndex(([recordPath]) => recordPath.length > newRecord.length);
    -1 === moreSpecificRecordIndex ? recordsGroup.push(newRecord) : recordsGroup.splice(moreSpecificRecordIndex, 0, newRecord);
  }
  getAllEntries$(slot, path) {
    const slotObserver = this.slotObservers.get(slot) ?? createAtom(`backend.slot(${slot})`);
    return this.slotObservers.set(slot, slotObserver), fromComputation$(`backend.getAll$(${slot}, ${path})`, () => {
      slotObserver.reportObserved();
      const result = [];
      for (const [key, recordsGroup] of this.recordGroups.entries()) {
        const [groupSlot, widgetId] = key.split("\xBB");
        if (groupSlot === slot)
          for (const [recordPath, recordBox] of recordsGroup.toJS().reverse())
            path && !isAncestorOrSelf(path, recordPath) || result.push({ widgetId, path: recordPath, value: recordBox.get() });
      }
      return result;
    });
  }
  free(widgetId, slot, path) {
    const recordsKey = `${slot}\xBB${widgetId}`, recordsGroup = this.recordGroups.get(recordsKey);
    void 0 !== recordsGroup && (recordsGroup.filter(([recordPath]) => isAncestorOrSelf(path, recordPath)).forEach((record) => recordsGroup.remove(record)), 0 === recordsGroup.length && this.recordGroups.delete(recordsKey));
  }
  getUsedSlots() {
    return unique(Array.from(this.recordGroups.keys()).map((key) => ensure(key.split("\xBB")[0])));
  }
  getOrCreateGroup(widgetId, slot) {
    const recordsKey = `${slot}\xBB${widgetId}`, existingGroup = this.recordGroups.get(recordsKey);
    if (existingGroup)
      return existingGroup;
    const newGroup = observable.array([], { deep: false, name: `backend.group(${widgetId}, ${slot})` });
    return this.recordGroups.set(recordsKey, newGroup), runActionInComputed(() => this.slotObservers.get(slot)?.reportChanged()), newGroup;
  }
}
__decorate([action], StoreBackend.prototype, "set", null), __decorate([action], StoreBackend.prototype, "free", null);
class StoreFrontend {
  constructor(backend, path, onBackendUpdateRequested, subscriptionPriority) {
    this.backend = backend, this.path = path, this.onBackendUpdateRequested = onBackendUpdateRequested, this.subscriptionPriority = subscriptionPriority, this.localMirrors = /* @__PURE__ */ new Map(), this.updateCallbacks = [], this.destroyed = false;
  }
  useSlot(widgetId, slot) {
    const localMirror = this.getOrCreateLocalMirror(widgetId, slot);
    return tuple(localMirror.value$, action(localMirror.setValue));
  }
  getAll$(slot) {
    const allEntries$ = this.backend.getAllEntries$(slot, this.path);
    return fromComputation$("getAll$({slot})", () => allEntries$.dependOn().map((e) => e.value));
  }
  getSubscriptionPriority() {
    return this.subscriptionPriority;
  }
  addUpdateCallback(callback) {
    this.destroyed ? callback() : (this.updateCallbacks.push(callback), this.onBackendUpdateRequested());
  }
  updateFromBackend() {
    for (const mirror of this.localMirrors.values())
      mirror.updateFromBackend();
    this.flushUpdateCallbacks();
  }
  destroy() {
    for (const mirror of this.localMirrors.values())
      mirror.free();
    this.localMirrors.clear(), this.flushUpdateCallbacks(), this.destroyed = true;
  }
  flushUpdateCallbacks() {
    this.updateCallbacks.splice(0).forEach((c) => c());
  }
  getOrCreateLocalMirror(widgetId, slot) {
    const key = `${widgetId}\u2192${slot}`, existingMirror = this.localMirrors.get(key);
    if (existingMirror)
      return existingMirror;
    let localValue;
    const backendValue$ = this.backend.get$(widgetId, slot, this.path);
    let currentBackendValue, backendValueSubscription;
    const [localValueTracker$, localValueChanged] = useDependency(`localValue(${widgetId}, ${slot})`, () => {
      ensure(backendValueSubscription)(), backendValueSubscription = void 0;
    }, () => {
      currentBackendValue = localValue = readUntracked(backendValue$), backendValueSubscription = reaction(() => backendValue$.dependOn(), (v) => {
        v !== currentBackendValue && (currentBackendValue = v, this.onBackendUpdateRequested());
      }, { name: `copy backendValue for (${widgetId}, ${slot})` });
    });
    let didSetValue = false;
    const newMirror = { value$: fromComputation$(`get$(${widgetId}, ${slot})`, () => (localValueTracker$.dependOn(), localValue)), setValue: (value) => {
      if (!this.localMirrors.has(key))
        throw new Error(`Error trying to set value to ${key}. The slot has already been freed.`);
      didSetValue = true, deepEqual$1(value, localValue) || localValueChanged(), this.backend.set(widgetId, slot, this.path, value), currentBackendValue = localValue = value;
    }, updateFromBackend: () => {
      void 0 === backendValueSubscription || deepEqual$1(currentBackendValue, localValue) || (localValueChanged(), localValue = currentBackendValue);
    }, free: () => {
      didSetValue && this.backend.free(widgetId, slot, this.path);
    } };
    return this.localMirrors.set(key, newMirror), newMirror;
  }
}
__decorate([action], StoreFrontend.prototype, "updateFromBackend", null), __decorate([action], StoreFrontend.prototype, "destroy", null);
const StoreBackendContext = reactExports.createContext(void 0), StorePathContext = reactExports.createContext(void 0), SubscriptionPriorityContext = reactExports.createContext(0);
function RootStoreProvider(props) {
  return jsxRuntimeExports.jsx(StoreBackendContext.Provider, { value: props.backend, children: jsxRuntimeExports.jsx(StorePathContext.Provider, { value: rootPath, children: props.children }) });
}
function useComponentStore() {
  const backend = ensure(reactExports.useContext(StoreBackendContext)), storePath = ensure(reactExports.useContext(StorePathContext)), subscriptionPriority = reactExports.useContext(SubscriptionPriorityContext), forceUpdate = useForceUpdate(), frontend = reactExports.useMemo(() => new StoreFrontend(backend, storePath, forceUpdate, subscriptionPriority), [backend, storePath, forceUpdate, subscriptionPriority]);
  return reactExports.useLayoutEffect(() => () => frontend.destroy(), [backend]), frontend.updateFromBackend(), frontend;
}
function useStoreBackendValue(widgetId, slot) {
  const backend = ensure(reactExports.useContext(StoreBackendContext)), storePath = ensure(reactExports.useContext(StorePathContext));
  useEnsureConstantValues(backend, storePath, widgetId, slot);
  return [reactExports.useMemo(() => backend.get$(widgetId, slot, storePath), []), reactExports.useCallback((value) => backend.set(widgetId, slot, storePath, value), [])];
}
function useOwnStoreBackendSlot(widgetId, slot) {
  const backend = ensure(reactExports.useContext(StoreBackendContext)), storePath = ensure(reactExports.useContext(StorePathContext));
  useEnsureConstantValues(backend, storePath, widgetId, slot), reactExports.useLayoutEffect(() => () => backend.free(widgetId, slot, storePath), []);
}
function NestedStoreProvider(props) {
  const childStorePath = function(parent, namespace) {
    if (namespace.includes(pathSeparator))
      throw new AssertionError(`Illegal character '${pathSeparator}' in namespace: ${namespace}`);
    return `${parent}${namespace}${pathSeparator}`;
  }(ensure(reactExports.useContext(StorePathContext)), props.namespace);
  return jsxRuntimeExports.jsxs(StorePathContext.Provider, { value: childStorePath, children: [props.setupStore ? jsxRuntimeExports.jsx(CurrentStoreHandler, { callback: props.setupStore }) : null, props.children] });
}
function CurrentStoreHandler(props) {
  const currentStore = useComponentStore();
  return reactExports.useMemo(() => props.callback(currentStore), [props.callback, currentStore]), null;
}

const randomStr = Array(3).fill(null).map(() => Math.floor(20 * Math.random())).map((num) => "abcdefghijklmnopqrst"[num]).join("");
let counter = 0;
function newId(prefix = "id") {
  return `${prefix}_${randomStr}_${counter++}`;
}

const associationsToIds = {}, idsToAssociationInfo = {}, idsToAssociationType = {};
function ensureAssociationId(associationPath, dataSourceId, selectableObjectsId) {
  const key = JSON.stringify([associationPath, dataSourceId, selectableObjectsId]), existingId = associationsToIds[key];
  if (existingId)
    return existingId;
  const id = newId("assoc");
  return associationsToIds[key] = id, idsToAssociationInfo[id] = Object.freeze({ associationPath, dataSourceId, selectableObjectsId }), id;
}
function getAssociationInfoById(id) {
  return idsToAssociationInfo[id];
}
function registerAssociationType(id, associationType) {
  idsToAssociationType[id] = associationType;
}
function getAssociationTypeById(id) {
  return idsToAssociationType[id];
}
const attributesToIds = {}, idsToAttributeInfo = {}, idsToAttributeType = {};
function ensureAttributeId(attributePath, dataSourceId) {
  const key = JSON.stringify([attributePath, dataSourceId]), existingId = attributesToIds[key];
  if (existingId)
    return existingId;
  const id = newId("attr");
  return attributesToIds[key] = id, idsToAttributeInfo[id] = Object.freeze({ attributePath, dataSourceId }), id;
}
function getAttributeInfoById(id) {
  return idsToAttributeInfo[id];
}
function registerAttributeType(id, attributeType, isUnlocalizedDate = false, enumUniverse) {
  idsToAttributeType[id] = [attributeType, isUnlocalizedDate, enumUniverse];
}
function getAttributeTypeById(id) {
  return idsToAttributeType[id]?.[0];
}
function isUnlocalizedDateAttribute(id) {
  return idsToAttributeType[id]?.[1] ?? false;
}
function getEnumUniverseById(id) {
  return idsToAttributeType[id]?.[2];
}
const expressionSymbol = Symbol("filterExpression"), dataSourceIdSymbol$1 = Symbol("dataSourceId"), attributeIdToFilterableFlag = {};
function registerFilterAttribute(attributeId, filterable) {
  attributeIdToFilterableFlag[attributeId] = filterable;
}
function isFilterable(attributeId) {
  return attributeIdToFilterableFlag[attributeId];
}
function freezeExpression(obj) {
  return obj[expressionSymbol] || (obj[expressionSymbol] = true, Object.freeze(obj)), obj;
}
function assertValidFilterCondition$1(filter, dataSourceId) {
  if (void 0 === filter)
    return true;
  if (!isFilterCondition(filter))
    throw new AssertionError("setFilter: argument must be a FilterCondition and be created with the filter API or obtained from a ListValue");
  return function assertValidExpressions(expr) {
    switch (expr.type) {
      case "attribute":
        const attributeInfo = getAttributeInfoById(expr.attributeId);
        if (void 0 === attributeInfo)
          throw new AssertionError(`setFilter: FilterCondition uses an attribute with invalid id '${expr.attributeId}'`);
        if (!isFilterable(expr.attributeId))
          throw new AssertionError(`setFilter: FilterCondition uses an attribute with id '${expr.attributeId}' which is not filterable`);
        if (attributeInfo.dataSourceId !== dataSourceId)
          throw new AssertionError(`"setFilter: FilterCondition uses an attribute with id '${expr.attributeId}' which is linked to a different data source`);
        break;
      case "literal":
        break;
      case "function":
        "arg" in expr ? assertValidExpressions(expr.arg) : "arg1" in expr ? (assertValidExpressions(expr.arg1), assertValidExpressions(expr.arg2)) : expr.args.forEach(assertValidExpressions);
        break;
      case "association":
        const associationInfo = getAssociationInfoById(expr.associationId);
        if (void 0 === associationInfo)
          throw new AssertionError(`setFilter: FilterCondition uses an association with invalid id '${expr.associationId}'`);
        if (!isFilterable(expr.associationId))
          throw new AssertionError(`setFilter: FilterCondition uses an association with id '${expr.associationId}' which is not filterable`);
        if (associationInfo.dataSourceId !== dataSourceId)
          throw new AssertionError(`"setFilter: FilterCondition uses an association with id '${expr.associationId}' which is linked to a different data source`);
    }
  }(filter), true;
}
function isFilterCondition(expr) {
  return isFilterExpression(expr) && "function" === expr.type;
}
function isValueExpression(expr) {
  return isAttributeExpression(expr) || isLiteralExpression(expr) || isAssociationExpression(expr);
}
function isAttributeExpression(expr) {
  return isFilterExpression(expr) && "attribute" === expr.type;
}
function isLiteralExpression(expr) {
  return isFilterExpression(expr) && "literal" === expr.type;
}
function isAssociationExpression(expr) {
  return isFilterExpression(expr) && "association" === expr.type;
}
function isFilterExpression(expr) {
  return "object" == typeof expr && null !== expr && expressionSymbol in expr && Object.isFrozen(expr);
}
function equalFilterCondition(a, b) {
  return deepEqual$1(a, b);
}

const objectSymbol = Symbol("mxObject"), dataSourceIdSymbol = Symbol("dataSourceId");
function toObjectItem(obj, dataSourceId) {
  return { id: obj.getGuid(), [objectSymbol]: obj, [dataSourceIdSymbol]: dataSourceId };
}
function fromObjectItem(item, dataSourceId, description) {
  function throwError(message) {
    throw new Error(description ? `${message} (${description})` : message);
  }
  return isObjectItem(item) || throwError("Only an ObjectItem can be passed to a template."), isDataSourceValid(item, dataSourceId) || throwError("An ObjectItem can only be passed to a template that is linked to the same data source."), item[objectSymbol];
}
function isObjectItem(item) {
  return "object" == typeof item && null != item && objectSymbol in item && dataSourceIdSymbol in item;
}
function isObjectItemArray(value) {
  return Array.isArray(value) && value.every(isObjectItem);
}
function getDataSourceId(item) {
  return item[dataSourceIdSymbol];
}
function isDataSourceValid(item, dataSourceId) {
  return getDataSourceId(item) === dataSourceId;
}

function attribute(attributeId) {
  return function(attributeId2) {
    if (!function(attributeId3) {
      if ("string" != typeof attributeId3)
        return false;
      return void 0 !== getAttributeInfoById(attributeId3);
    }(attributeId2))
      throw new AssertionError(`Argument of function "attribute" is not a valid attribute id: ${attributeId2}`);
    if (!isFilterable(attributeId2))
      throw new AssertionError(`Argument of function "attribute" is not a filterable attribute id: ${attributeId2}`);
  }(attributeId), freezeExpression({ type: "attribute", attributeId });
}
function literal(value) {
  const valueType = function(value2) {
    const type = typeof value2;
    switch (type) {
      case "boolean":
      case "string":
      case "undefined":
        return type;
      case "object":
        if (value2 instanceof Big)
          return "Numeric";
        if (value2 instanceof Date)
          return "DateTime";
        if (isObjectItem(value2))
          return "Reference";
        if (isObjectItemArray(value2)) {
          if (0 === value2.length)
            throw new AssertionError('Argument of function "literal" cannot be an empty array, use empty() instead.');
          return "ReferenceSet";
        }
    }
    throw new AssertionError(`Argument of function "literal" is not a valid literal value: ${value2}`);
  }(value), literalValue = function(value2, valueType2) {
    switch (valueType2) {
      case "Reference":
        const item = value2;
        return { value: item.id, [dataSourceIdSymbol$1]: getDataSourceId(item) };
      case "ReferenceSet":
        const items = value2, dataSourceIds = items.map(getDataSourceId);
        if (unique(dataSourceIds).length > 1)
          throw new AssertionError('Argument of function "literal" cannot contain object items from multiple data sources');
        return { value: Object.freeze(items.map((v) => v.id)), [dataSourceIdSymbol$1]: dataSourceIds[0] };
      default:
        return { value: Object.freeze(value2) };
    }
  }(value, valueType);
  return freezeExpression({ type: "literal", ...literalValue, valueType });
}
function empty() {
  return literal(void 0);
}
function association(associationId) {
  return function(associationId2) {
    if (!function(associationId3) {
      if ("string" != typeof associationId3)
        return false;
      return void 0 !== getAssociationInfoById(associationId3);
    }(associationId2))
      throw new AssertionError(`Argument of function "association" is not a valid association id: ${associationId2}`);
    if (!isFilterable(associationId2))
      throw new AssertionError(`Argument of function "association" is not a filterable association id: ${associationId2}`);
  }(associationId), freezeExpression({ type: "association", associationId });
}
function and(...args) {
  return assertAtLeastTwoArguments("and", args), assertValidFilterConditions("and", args), multiaryFunction("and", ...args);
}
function or(...args) {
  return assertAtLeastTwoArguments("or", args), assertValidFilterConditions("or", args), multiaryFunction("or", ...args);
}
function not(arg) {
  return assertValidFilterCondition("not", arg), function(functionName, arg2) {
    return functionExpression$1(functionName, { arg: arg2 });
  }("not", arg);
}
function equals(arg1, arg2) {
  return assertValidValueExpression("equals", arg1, 0), assertValidValueExpression("equals", arg2, 1), assertCompatibleValueTypes("equals", arg1, arg2), assertValidEnumTypes("equals", arg1, arg2), assertValidReferenceSets("equals", arg1, arg2), binaryFunction("=", arg1, arg2);
}
function notEqual(arg1, arg2) {
  return assertValidValueExpression("notEqual", arg1, 0), assertValidValueExpression("notEqual", arg2, 1), assertCompatibleValueTypes("notEqual", arg1, arg2), assertValidEnumTypes("notEqual", arg1, arg2), assertValidReferenceSets("notEqual", arg1, arg2), binaryFunction("!=", arg1, arg2);
}
const allowedOrderedComparisonTypes = ["string", "Numeric", "DateTime"];
function greaterThan(arg1, arg2) {
  return assertValidValueExpression("greaterThan", arg1, 0), assertValidValueExpression("greaterThan", arg2, 1), assertCompatibleValueTypes("greaterThan", arg1, arg2, allowedOrderedComparisonTypes), binaryFunction(">", arg1, arg2);
}
function lessThan(arg1, arg2) {
  return assertValidValueExpression("lessThan", arg1, 0), assertValidValueExpression("lessThan", arg2, 1), assertCompatibleValueTypes("lessThan", arg1, arg2, allowedOrderedComparisonTypes), binaryFunction("<", arg1, arg2);
}
function greaterThanOrEqual(arg1, arg2) {
  return assertValidValueExpression("greaterThanOrEqual", arg1, 0), assertValidValueExpression("greaterThanOrEqual", arg2, 1), assertCompatibleValueTypes("greaterThanOrEqual", arg1, arg2, allowedOrderedComparisonTypes), binaryFunction(">=", arg1, arg2);
}
function lessThanOrEqual(arg1, arg2) {
  return assertValidValueExpression("lessThanOrEqual", arg1, 0), assertValidValueExpression("lessThanOrEqual", arg2, 1), assertCompatibleValueTypes("lessThanOrEqual", arg1, arg2, allowedOrderedComparisonTypes), binaryFunction("<=", arg1, arg2);
}
const allowedStringFunctionAttributeTypes = ["String", "Integer", "Long", "Decimal", "AutoNumber"];
function contains(arg1, arg2) {
  switch (assertValidExpression("attribute or association expression", (expr) => isAttributeExpression(expr) || isAssociationExpression(expr), "contains", arg1, 0), assertValidLiteralExpression("contains", arg2, 1), arg1.type) {
    case "association":
      assertExpectedType("contains", 0, getAssociationType(arg1.associationId), ["ReferenceSet"]), assertExpectedType("contains", 1, getValueType(arg2), ["Reference", "ReferenceSet"]), assertCompatibleDataSources("contains", arg1, arg2);
      break;
    case "attribute":
      assertExpectedType("contains", 0, getAttributeType(arg1.attributeId), allowedStringFunctionAttributeTypes), assertExpectedType("contains", 1, getValueType(arg2), ["string"]);
      break;
    default:
      crash();
  }
  return binaryFunction("contains", arg1, arg2);
}
function startsWith(arg1, arg2) {
  return assertValidAttributeExpression("startsWith", arg1, 0), assertValidLiteralExpression("startsWith", arg2, 1), assertExpectedType("startsWith", 0, getAttributeType(arg1.attributeId), allowedStringFunctionAttributeTypes), assertExpectedType("startsWith", 1, getValueType(arg2), ["string"]), binaryFunction("starts-with", arg1, arg2);
}
function endsWith(arg1, arg2) {
  return assertValidAttributeExpression("endsWith", arg1, 0), assertValidLiteralExpression("endsWith", arg2, 1), assertExpectedType("endsWith", 0, getAttributeType(arg1.attributeId), allowedStringFunctionAttributeTypes), assertExpectedType("endsWith", 1, getValueType(arg2), ["string"]), binaryFunction("ends-with", arg1, arg2);
}
function dayEquals(arg1, arg2) {
  return assertValidAttributeExpression("dayEquals", arg1, 0), assertValidLiteralExpression("dayEquals", arg2, 1), assertCompatibleValueTypes("dayEquals", arg1, arg2, ["DateTime"]), binaryFunction("day:=", arg1, arg2);
}
function dayNotEqual(arg1, arg2) {
  return assertValidAttributeExpression("dayNotEqual", arg1, 0), assertValidLiteralExpression("dayNotEqual", arg2, 1), assertCompatibleValueTypes("dayNotEqual", arg1, arg2, ["DateTime"]), binaryFunction("day:!=", arg1, arg2);
}
function dayGreaterThan(arg1, arg2) {
  return assertValidAttributeExpression("dayGreaterThan", arg1, 0), assertValidLiteralExpression("dayGreaterThan", arg2, 1), assertCompatibleValueTypes("dayGreaterThan", arg1, arg2, ["DateTime"]), binaryFunction("day:>", arg1, arg2);
}
function dayLessThan(arg1, arg2) {
  return assertValidAttributeExpression("dayLessThan", arg1, 0), assertValidLiteralExpression("dayLessThan", arg2, 1), assertCompatibleValueTypes("dayLessThan", arg1, arg2, ["DateTime"]), binaryFunction("day:<", arg1, arg2);
}
function dayGreaterThanOrEqual(arg1, arg2) {
  return assertValidAttributeExpression("dayGreaterThanOrEqual", arg1, 0), assertValidLiteralExpression("dayGreaterThanOrEqual", arg2, 1), assertCompatibleValueTypes("dayGreaterThanOrEqual", arg1, arg2, ["DateTime"]), binaryFunction("day:>=", arg1, arg2);
}
function dayLessThanOrEqual(arg1, arg2) {
  return assertValidAttributeExpression("dayLessThanOrEqual", arg1, 0), assertValidLiteralExpression("dayLessThanOrEqual", arg2, 1), assertCompatibleValueTypes("dayLessThanOrEqual", arg1, arg2, ["DateTime"]), binaryFunction("day:<=", arg1, arg2);
}
function binaryFunction(functionName, arg1, arg2) {
  return functionExpression$1(functionName, { arg1, arg2 });
}
function multiaryFunction(functionName, ...args) {
  return functionExpression$1(functionName, { args: Object.freeze(args) });
}
function functionExpression$1(functionName, args) {
  return freezeExpression({ type: "function", name: functionName, ...args });
}
function assertAtLeastTwoArguments(functionName, args) {
  if (args.length < 2)
    throw new AssertionError(`The "${functionName}" function requires at least two arguments.`);
}
function assertValidFilterConditions(functionName, args) {
  args.forEach((arg, i) => assertValidFilterCondition(functionName, arg, i));
}
function assertValidFilterCondition(functionName, arg, index) {
  assertValidExpression("filter condition", isFilterCondition, functionName, arg, index);
}
function assertValidValueExpression(functionName, arg, index) {
  assertValidExpression("value expression", isValueExpression, functionName, arg, index);
}
function assertValidAttributeExpression(functionName, arg, index) {
  assertValidExpression("attribute expression", isAttributeExpression, functionName, arg, index);
}
function assertValidLiteralExpression(functionName, arg, index) {
  assertValidExpression("literal expression", isLiteralExpression, functionName, arg, index);
}
function assertValidExpression(description, predicate, functionName, arg, index) {
  const argument = void 0 !== index ? `Argument #${index}` : "Argument";
  if (null == arg)
    throw new AssertionError(`${argument} of function "${functionName}" cannot be ${arg}`);
  if (!predicate(arg))
    throw new AssertionError(`${argument} of function "${functionName}" is not a valid ${description}`);
}
function assertCompatibleValueTypes(functionName, arg1, arg2, expectedTypes = []) {
  const type1 = getValueType(arg1), type2 = getValueType(arg2);
  if (assertExpectedType(functionName, 0, type1, expectedTypes), assertExpectedType(functionName, 1, type2, expectedTypes), type1 !== type2 && "undefined" !== type1 && "undefined" !== type2)
    throw new AssertionError(`The arguments of function "${functionName}" have incompatible types (${type1} != ${type2}).`);
  assertCompatibleDataSources(functionName, arg1, arg2);
}
function assertCompatibleDataSources(functionName, arg1, arg2) {
  const dataSourceId1 = getSelectableObjectsId(arg1), dataSourceId2 = getSelectableObjectsId(arg2);
  if (dataSourceId1 !== dataSourceId2 && void 0 !== dataSourceId1 && void 0 !== dataSourceId2)
    throw new AssertionError(`The arguments of function "${functionName}" are incompatible, because they are not referring to objects from the same data source.`);
}
function assertValidReferenceSets(functionName, arg1, arg2) {
  if (assertNoReferenceSetLiteral(functionName, 0, arg1), assertNoReferenceSetLiteral(functionName, 1, arg2), isReferenceSetAssociation(arg1) && isReferenceSetAssociation(arg2))
    throw new AssertionError(`The arguments of function "${functionName}" cannot both be reference set associations.`);
}
function assertNoReferenceSetLiteral(functionName, index, arg) {
  if (isLiteralExpression(arg) && "ReferenceSet" === arg.valueType)
    throw new AssertionError(`Argument #${index} of function "${functionName}" cannot be a reference set literal, only empty().`);
}
function isReferenceSetAssociation(arg1) {
  return "association" === arg1.type && "ReferenceSet" === getAssociationType(arg1.associationId);
}
function assertValidEnumTypes(functionName, arg1, arg2) {
  const enumUniverse1 = isEnumAttribute(arg1) ? getEnumUniverse(arg1.attributeId) : void 0, enumUniverse2 = isEnumAttribute(arg2) ? getEnumUniverse(arg2.attributeId) : void 0;
  if (void 0 === enumUniverse1 && void 0 === enumUniverse2)
    return;
  if (void 0 !== enumUniverse1 && void 0 !== enumUniverse2) {
    if (!deepEqual$1(enumUniverse1, enumUniverse2)) {
      const universe1 = `[${enumUniverse1.join(", ")}]`, universe2 = `[${enumUniverse2.join(", ")}]`;
      throw new AssertionError(`Arguments of function "${functionName}" are incompatible enum attributes (${universe1} != ${universe2}).`);
    }
    return;
  }
  const enumUniverse = enumUniverse1 ?? enumUniverse2;
  function checkEnumLiteral(index, arg) {
    if ("literal" !== arg.type)
      return;
    const literalValue = arg.value;
    if (void 0 !== literalValue && !enumUniverse.includes(literalValue)) {
      const universe = `[${enumUniverse.join(", ")}]`;
      throw new AssertionError(`Argument #${index} of function "${functionName}" has an invalid enum literal value (${literalValue} != ${universe}).`);
    }
  }
  checkEnumLiteral(0, arg1), checkEnumLiteral(1, arg2);
}
function assertExpectedType(functionName, index, actual, expected) {
  if (0 !== expected.length && !expected.includes(actual)) {
    const expectedString = 1 === expected.length ? expected[0] : `[${expected.join(", ")}]`;
    throw new AssertionError(`Argument #${index} of function "${functionName}" has an incompatible type (${actual} != ${expectedString}).`);
  }
}
function getValueType(expression) {
  switch (expression.type) {
    case "attribute":
      return function(attributeId) {
        const attributeType = getAttributeType(attributeId);
        switch (attributeType) {
          case "Boolean":
            return "boolean";
          case "DateTime":
            return "DateTime";
          case "AutoNumber":
          case "Integer":
          case "Long":
          case "Decimal":
            return "Numeric";
          case "Enum":
          case "String":
          case "HashString":
            return "string";
          case "Binary":
          case "EnumSet":
          case "ObjectReference":
          case "ObjectReferenceSet":
            throw new AssertionError("Unsupported attribute type: " + attributeType);
        }
      }(expression.attributeId);
    case "literal":
      return expression.valueType;
    case "association":
      return getAssociationType(expression.associationId);
  }
}
function getSelectableObjectsId(expression) {
  switch (expression.type) {
    case "attribute":
      return;
    case "literal":
      return expression[dataSourceIdSymbol$1];
    case "association":
      return getAssociationInfoById(expression.associationId)?.selectableObjectsId;
  }
}
function getAttributeType(attributeId) {
  return ensure(getAttributeTypeById(attributeId));
}
function getAssociationType(associationId) {
  return ensure(getAssociationTypeById(associationId));
}
function isEnumAttribute(arg) {
  return "attribute" === arg.type && "Enum" === getAttributeType(arg.attributeId);
}
function getEnumUniverse(attributeId) {
  return ensure(getEnumUniverseById(attributeId));
}

const pageScope = "$$globalScope";

var module$2, classnames = { exports: {} };
/*!
	Copyright (c) 2018 Jed Watson.
	Licensed under the MIT License (MIT), see
	http://jedwatson.github.io/classnames
*/
module$2 = classnames, function() {
  var hasOwn = {}.hasOwnProperty;
  function classNames2() {
    for (var classes = "", i = 0; i < arguments.length; i++) {
      var arg = arguments[i];
      arg && (classes = appendClass(classes, parseValue(arg)));
    }
    return classes;
  }
  function parseValue(arg) {
    if ("string" == typeof arg || "number" == typeof arg)
      return arg;
    if ("object" != typeof arg)
      return "";
    if (Array.isArray(arg))
      return classNames2.apply(null, arg);
    if (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes("[native code]"))
      return arg.toString();
    var classes = "";
    for (var key in arg)
      hasOwn.call(arg, key) && arg[key] && (classes = appendClass(classes, key));
    return classes;
  }
  function appendClass(value, newClass) {
    return newClass ? value ? value + " " + newClass : value + newClass : value;
  }
  module$2.exports ? (classNames2.default = classNames2, module$2.exports = classNames2) : window.classNames = classNames2;
}();
var classNames = getDefaultExportFromCjs$1(classnames.exports);

function isMobileDevice() {
  return /(iPhone|iPod|iPad|Android|Windows Phone)/.test(navigator.userAgent);
}
const DISABLE_INTERACTION_ATTRIBUTE = "data-disable-interaction", FOCUS_CONTEXT_ATTRIBUTE = "data-focusindex", FOCUS_CAPTURING_ATTRIBUTE = "data-focus-capturing", FOCUS_CAPTURING_MODAL = "modal", FOCUS_CAPTURING_NON_MODAL = "non-modal";
function initialize() {
  document.body.addEventListener("keydown", onKeyDown), document.body.addEventListener("focusin", onFocusIn), document.body.addEventListener("mousedown", onMouseDown);
}
function onMouseDown(e) {
  document.body.hasAttribute(DISABLE_INTERACTION_ATTRIBUTE) && e.preventDefault();
}
function onKeyDown(e) {
  if (document.body.hasAttribute(DISABLE_INTERACTION_ATTRIBUTE))
    e.preventDefault();
  else if ("Tab" === e.key) {
    const nextInput = function(target, reverse = false) {
      const element = target && getHTMLElement(target), wrapAround = () => findNextNonWrapping(getFocusCapturingRoot(element) ?? document.body, reverse);
      return (element && findNextNonWrapping(element, reverse)) ?? wrapAround();
    }(e.target, e.shiftKey);
    nextInput && (e.preventDefault(), setFocus(nextInput));
  }
}
function onFocusIn(e) {
  const target = e.target;
  if (target === document.body)
    return;
  const focusRoot = getFocusRoot(target);
  focusRoot.contains(target) || function(container) {
    const first = findFirst(container);
    first && setFocus(first);
  }(focusRoot);
}
function setFocus(element) {
  !function() {
    const selection = document.getSelection();
    if (null === selection || function(selection2) {
      if (1 === selection2.rangeCount) {
        const range = selection2.getRangeAt(0);
        return range.startOffset === range.endOffset;
      }
      return 0 === selection2.rangeCount;
    }(selection))
      return;
    selection.removeAllRanges(), selection.addRange(document.createRange());
  }(), element.focus(), function(element2) {
    const input = element2;
    "text" !== input.type && "password" !== input.type || input.select();
  }(element);
}
function getFocus() {
  const activeElement = document.activeElement && getHTMLElement(document.activeElement);
  return activeElement !== document.body ? activeElement : null;
}
function findFirst(container) {
  return findNextInContainer(container, false);
}
function findNextNonWrapping(element, reverse = false) {
  const focusRoot = getFocusRoot(element);
  let current, found;
  if (focusRoot.contains(element))
    current = element;
  else {
    if (isFocusable(focusRoot))
      return focusRoot;
    current = focusRoot;
  }
  if (!reverse && isFocusContext(current) && !skipContainer(current) && (found = findNextInContainer(current, !!reverse), found))
    return found;
  do {
    const context = findFocusContext(current, focusRoot);
    if (found = findNextInContainer(context, !!reverse, current), found)
      return found;
    if (reverse && isFocusable(context))
      return context;
    current = context;
  } while (current !== focusRoot);
  return null;
}
function findFocusContext(element, focusRoot) {
  if (element === focusRoot)
    return focusRoot;
  let current = element;
  for (; current !== focusRoot && current.parentElement; )
    if (current = current.parentElement, isFocusContext(current))
      return current;
  return focusRoot;
}
function getFocusRoot(element) {
  const capturingRoot = getFocusCapturingRoot(element);
  return capturingRoot ? function() {
    const focusRoots = document.querySelectorAll(`[${FOCUS_CAPTURING_ATTRIBUTE}=${FOCUS_CAPTURING_MODAL}]`);
    return Array.from(focusRoots).filter(isHTMLElement).sort((a, b) => Number(b.style.zIndex) - Number(a.style.zIndex))[0];
  }() ?? capturingRoot : document.body;
}
function getFocusCapturingRoot(element) {
  if (!element || element === document.body)
    return document.body;
  let current = element;
  for (; current && isHTMLElement(current); ) {
    const captureMode = current.getAttribute(FOCUS_CAPTURING_ATTRIBUTE);
    if (captureMode === FOCUS_CAPTURING_MODAL || captureMode === FOCUS_CAPTURING_NON_MODAL)
      return current;
    current = current.parentElement;
  }
  return null;
}
function findNextInContainer(container, reverse, afterElement) {
  const startTabIndex = afterElement && afterElement !== container ? getEffectiveTabIndex(afterElement) : void 0, candidates = gatherDescendants(container), tabIndices = Object.keys(candidates).map((s) => parseInt(s, 10)).filter(/* @__PURE__ */ function(startTabIndex2, reverse2) {
    return void 0 === startTabIndex2 ? (_) => true : reverse2 ? (t) => compareTabIndex(t, startTabIndex2) <= 0 : (t) => compareTabIndex(t, startTabIndex2) >= 0;
  }(startTabIndex, reverse)).sort(compareTabIndex);
  reverse && tabIndices.reverse();
  for (const tabIndex of tabIndices)
    if (tabIndex in candidates) {
      let array = ensure(candidates[tabIndex]);
      reverse && array.reverse(), tabIndex === startTabIndex && (array = array.slice(array.indexOf(afterElement) + 1));
      const candidate = findNextInArray(array, reverse);
      if (candidate)
        return candidate;
    }
  return null;
}
function findNextInArray(array, reverse) {
  for (const element of array) {
    if (!reverse && isFocusable(element))
      return element;
    if (isFocusContext(element) && !skipContainer(element)) {
      const candidate = findNextInContainer(element, reverse);
      if (candidate)
        return candidate;
    }
    if (reverse && isFocusable(element))
      return element;
  }
  return null;
}
function gatherDescendants(e, output = {}) {
  for (let i = 0; i < e.children.length; i++) {
    const child = e.children.item(i);
    if (!isHTMLElement(child))
      continue;
    const tabIndex = getEffectiveTabIndex(child);
    (output[tabIndex] = output[tabIndex] ?? []).push(child), isFocusContext(child) || gatherDescendants(child, output);
  }
  return output;
}
function compareTabIndex(a, b) {
  return a === b ? 0 : 0 === a ? 1 : 0 === b ? -1 : a - b;
}
function isFocusContext(element) {
  return element === document.body || null !== element.getAttribute(FOCUS_CONTEXT_ATTRIBUTE);
}
function getEffectiveTabIndex(element) {
  const tabIndexValue = getIntAttribute(element, FOCUS_CONTEXT_ATTRIBUTE) ?? getTabIndex(element);
  return Math.max(0, tabIndexValue ?? 0);
}
function getTabIndex(element) {
  const tabIndex = getIntAttribute(element, "tabindex");
  return -32768 !== tabIndex ? tabIndex : null;
}
function getIntAttribute(element, attribute) {
  const value = element.getAttribute(attribute);
  return value ? parseInt(value, 10) : null;
}
function skipContainer(element) {
  return "-1" === element.getAttribute(FOCUS_CONTEXT_ATTRIBUTE);
}
function isFocusable(element) {
  return isNavigableElement(element) && function(element2) {
    return function(element3) {
      if (0 === element3.offsetWidth && 0 === element3.offsetHeight)
        return false;
      return "visible" === window.getComputedStyle(element3).visibility;
    }(element2) && function(element3) {
      return !element3.disabled;
    }(element2);
  }(element);
}
function isNavigableElement(element) {
  if (skipContainer(element))
    return false;
  return (getTabIndex(element) ?? getDefaultTabIndex(element)) >= 0;
}
function getFocusableContainer(target) {
  let element = getHTMLElement(target);
  for (; element; ) {
    if (null !== getTabIndex(element) || 0 === getDefaultTabIndex(element))
      return element;
    element = element.parentElement;
  }
  return null;
}
function getDefaultTabIndex(element) {
  switch (element.tagName.toLowerCase()) {
    case "a":
    case "area":
    case "button":
    case "input":
    case "object":
    case "select":
    case "textarea":
      return 0;
    default:
      return element.getAttribute("contenteditable") ? 0 : -1;
  }
}
function getHTMLElement(target) {
  return isHTMLElement(target) ? target : function(target2) {
    return "parentElement" in target2;
  }(target) ? target.parentElement : null;
}
function isHTMLElement(target) {
  return "offsetParent" in target;
}
function moveFocusTo(node) {
  isMobileDevice() ? function() {
    const current = getFocus();
    current && current.blur();
  }() : setFocus(node);
}

async function cancelChanges(config, { currentForm }) {
  currentForm.setSuspend(true);
  try {
    await methodToPromise(currentForm, "publish", "rollback");
    const objectsToRollback = currentForm.getSubmitObjects();
    mx.isOffline() ? await new Promise((resolve, reject) => getData().rollback({ mxobjs: objectsToRollback, callback: resolve, error: reject })) : await onlineData().executeObjectAction(config.operationId, "rollback", objectsToRollback), config.closePage && await methodToPromise(currentForm, "close");
  } finally {
    currentForm.setSuspend(false);
  }
}

const compute = Symbol("compute");
function isComputation(value) {
  return "object" == typeof value && null != value?.[compute];
}
function processComputation(computation, store, widgetId, propertyPath) {
  return computation[compute](store, widgetId, propertyPath);
}
const result = Symbol("result");
function isComputationResult(value) {
  return "object" == typeof value && null != value?.[result];
}
function toValue(computationResult) {
  return computationResult[result];
}
function asResult(value) {
  return { [result]: value };
}
function asProperty(func) {
  return (c) => ({ [compute]: (s, w, p) => {
    const funcResult = func(c, s, w, p);
    return Array.isArray(funcResult) ? funcResult : [funcResult, void 0];
  } });
}

const ErrorBoundaryFallbackContext = reactExports.createContext(() => null);
let ErrorBoundary$1 = class ErrorBoundary extends reactExports.Component {
  constructor() {
    super(...arguments), this.state = { hasError: false };
  }
  render() {
    return this.state.hasError ? jsxRuntimeExports.jsx(ErrorBoundaryFallbackContext.Consumer, { children: (fallbackComponent) => reactExports.createElement(fallbackComponent, { errorMessage: `Could not render widget '${this.props.widgetId}'` }) }) : this.props.children;
  }
  static getDerivedStateFromError() {
    return { hasError: true };
  }
};
const typeCache = /* @__PURE__ */ new Map();
function asPluginWidgets(componentMap) {
  const result = {};
  return Object.entries(componentMap).forEach(([key, wrappedComponent]) => {
    result["$" + key] = asPluginWidget(wrappedComponent);
  }), result;
}
const WidgetIdContext = reactExports.createContext("not a widget");
function asPluginWidget(wrappedComponent) {
  const cachedResult = typeCache.get(wrappedComponent);
  if (void 0 !== cachedResult)
    return cachedResult;
  const componentName = friendlyName(wrappedComponent), uncachedComponent = function(wrappedComponent2, componentName2) {
    const MemoisedComponent = reactExports.memo(function(component, componentName3) {
      if (component.prototype?.isReactComponent) {
        const FunctionalWrapper = (props) => reactExports.createElement(component, props);
        return FunctionalWrapper.displayName = componentName3, FunctionalWrapper;
      }
      return component.displayName = componentName3, component;
    }(wrappedComponent2, componentName2));
    return (wrapperProps) => {
      const [correctWidgetId] = reactExports.useState(() => wrapperProps.$widgetId);
      if (wrapperProps.$widgetId !== correctWidgetId || void 0 === correctWidgetId)
        throw new AssertionError(`Parent of component ${componentName2} did not correctly assign keys.`);
      const store = useComponentStore(), [formSuspended$] = store.useSlot(pageScope, "formSuspended"), [mappedProps, onAfterUpdates] = reactExports.useMemo(() => mapWrapperProps(wrapperProps, store, wrapperProps.$widgetId, ""), []);
      let disposer;
      const [computedProps, setComputedProps] = reactExports.useState(() => {
        if (!isDependable(mappedProps))
          return mappedProps;
        let firstRun = true, initialComputedProps = {};
        return disposer = autorun(() => {
          const props = mappedProps.dependOn(), suspended = formSuspended$.dependOn();
          firstRun ? initialComputedProps = props : suspended || setComputedProps(props);
        }, { name: `Props of ${wrapperProps.$widgetId}` }), firstRun = false, initialComputedProps;
      });
      return reactExports.useLayoutEffect(() => disposer, []), onAfterUpdates.length && reactExports.useLayoutEffect(() => onAfterUpdates.forEach((l) => l()), [computedProps]), jsxRuntimeExports.jsx(WidgetIdContext.Provider, { value: correctWidgetId, children: jsxRuntimeExports.jsx(ErrorBoundary$1, { widgetId: toFriendlyId(correctWidgetId), children: jsxRuntimeExports.jsx(SubscriptionPriorityContext.Provider, { value: reactExports.useContext(SubscriptionPriorityContext) + 1, children: jsxRuntimeExports.jsx(MemoisedComponent, { ...computedProps }) }) }) });
    };
  }(wrappedComponent, componentName);
  return uncachedComponent.displayName = `pluginWidget(${componentName})`, typeCache.set(wrappedComponent, uncachedComponent), uncachedComponent;
}
function mapWrapperProps(value, store, widgetId, propPath) {
  const mappedEntries = Object.entries(value).map(([key, valueItem]) => "$widgetId" === key ? tuple("name", tuple(toWidgetName(widgetId), [])) : tuple(key, mapWrapperProp(valueItem, store, widgetId, `${propPath}/${key}`)));
  return [mappedEntries.some(([_, [mappedItem]]) => isDependable(mappedItem)) ? fromComputation$(`Prop ${propPath || "root"} of ${widgetId}`, () => Object.fromEntries(mappedEntries.map(([key, [mappedItem]]) => [key, isDependable(mappedItem) ? mappedItem.dependOn() : mappedItem]))) : Object.fromEntries(mappedEntries.map(([key, [mappedItem]]) => [key, mappedItem])), mappedEntries.flatMap(([, [, onAfterUpdate]]) => onAfterUpdate)];
}
function mapWrapperProp(value, store, widgetId, propPath) {
  if (isComputationResult(value))
    return [toValue(value), []];
  if (isComputation(value)) {
    const [dependable, onAfterUpdate] = processComputation(value, store, widgetId, propPath);
    return [dependable, onAfterUpdate ? [onAfterUpdate] : []];
  }
  if (Array.isArray(value)) {
    if (reactExports.isValidElement(value[0]) || function(array) {
      return 0 === array.length || array.every((e) => null === e || "object" != typeof e);
    }(value))
      return [value, []];
    const mappedItems = value.map((valueItem, index) => mapWrapperProp(valueItem, store, widgetId, `${propPath}/${index}`));
    return [mappedItems.some(([mappedItem]) => isDependable(mappedItem)) ? fromComputation$(`Prop ${propPath} of ${widgetId}`, () => mappedItems.map(([mappedItem]) => isDependable(mappedItem) ? mappedItem.dependOn() : mappedItem)) : mappedItems.map(([mappedItem]) => mappedItem), mappedItems.flatMap(([_, onAfterUpdate]) => onAfterUpdate)];
  }
  return !reactExports.isValidElement(value) && isJson(value) ? mapWrapperProps(value, store, widgetId, propPath) : [value, []];
}

const MAIN_PLACEHOLDER_NAME = "Main", PlaceholderProperty = asProperty((config, store, widgetId) => {
  const [form$] = store.useSlot(pageScope, "form");
  return fromComputation$(`Content of ${widgetId}`, () => {
    const form = ensure(form$.dependOn())[0], placeholderContent = form.getPlaceholderContent(config.id);
    return "function" == typeof placeholderContent ? placeholderContent(form.getHistoryId()) : placeholderContent;
  });
});

const Fragment = (props) => jsxRuntimeExports.jsx(reactExports.Fragment, { children: props.content });

class ActionRegistry {
  constructor() {
    this.handlers = {};
  }
  registerHandler(id, callback) {
    this.handlers[id] = callback;
  }
  unregisterHandler(id) {
    delete this.handlers[id];
  }
  getHandler(id) {
    return this.handlers[id];
  }
}
const ActionContext = t.createContext(void 0);

const knownEnumerations = /* @__PURE__ */ new Map();
function addEnumerations(enumerations) {
  Object.entries(enumerations).forEach(([e, enumerationValue]) => {
    knownEnumerations.has(e) || knownEnumerations.set(e, enumerationValue);
  });
}
function translateEnumeration(enumeration, value) {
  const knownOption = ensure(knownEnumerations.get(enumeration)).find(([option]) => option === value);
  return knownOption ? knownOption[1] : value;
}
function getEnumerationOptions(enumeration) {
  return ensure(knownEnumerations.get(enumeration)).map(([option]) => option);
}
function clientToAttributeValue(value, type) {
  switch (type) {
    case "DateTime":
      return "" !== value ? new Date(value) : void 0;
    case "AutoNumber":
      return new Big(value);
    case "String":
      return value;
    default:
      return "" !== value ? value : void 0;
  }
}
function attributeToClientValue(value) {
  return void 0 === value ? "" : value instanceof Date ? value.getTime() : value;
}
function runtimeValueToAttributeValue(runtimeValue, type) {
  return clientToAttributeValue(runtimeValueToClientValue(runtimeValue, type), type);
}
function attributeValueToRuntimeValue(attributeValue) {
  return clientToRuntimeValue(attributeToClientValue(attributeValue));
}
function runtimeValueToClientValue(value, type) {
  if (null == value)
    return "";
  switch (type) {
    case "Integer":
    case "Long":
    case "Decimal":
      return new Big(value);
    case "Date":
    case "DateTime":
      return value;
    case "Boolean":
      return Boolean(value);
    case "ObjectReferenceSet":
      return Array.isArray(value) && value.length > 0 ? value : "";
    default:
      return String(value);
  }
}
function assertIsAttributeValue(value, entity, attribute) {
  const type = getAttributeType$1(entity, attribute);
  if (!type)
    throw new AssertionError(`Attribute ${attribute} is not accessible.`);
  "Enum" === type ? function(condition) {
    if (!condition)
      throw new AssertionError(`Value ${value} is not assignable to attribute of type ${type}.`);
  }(void 0 === value || "string" == typeof value && getEnumerationOptions(getAttributeEnumerationType(entity, attribute)).includes(value)) : assertIsNonEnumValue(value, type);
}
function assertIsNonEnumValue(value, type, allowUndefinedRefSets = false) {
  switch (type) {
    case "String":
    case "ObjectReference":
    case "HashString":
      return assertIs("string" == typeof value || void 0 === value);
    case "ObjectReferenceSet":
      return assertIs(Array.isArray(value) && value.every((v) => "string" == typeof v) || void 0 === value && allowUndefinedRefSets);
    case "Boolean":
      return assertIs("boolean" == typeof value);
    case "DateTime":
      return assertIs(void 0 === value || value instanceof Date && !isNaN(value.getTime()));
    case "Integer":
    case "Long":
    case "Decimal":
      return assertIs(value instanceof Big || void 0 === value);
    default:
      throw new AssertionError(`Attribute type ${type} is not supported.`);
  }
  function assertIs(condition) {
    if (!condition)
      throw new AssertionError(`Value ${value} is not assignable to attribute of type ${type}.`);
  }
}
function clientToRuntimeValue(value, keepEmptyStringValue = false) {
  return "" === value ? keepEmptyStringValue ? "" : null : value instanceof Big ? value.toString() : value;
}
function anyToClientValue(value, type) {
  if (null == value || "" === value)
    return "ObjectReferenceSet" === type ? [] : "";
  switch (type) {
    case "Boolean":
      return Boolean(value);
    case "Decimal":
    case "Integer":
    case "Long":
      return new Big(value);
    case "DateTime":
      return Number(value);
    case "ObjectReference":
      if (Array.isArray(value))
        throw new Error("Trying to set single object reference to multiple values");
      return value.toString();
    case "ObjectReferenceSet":
      if (!Array.isArray(value))
        throw new Error("Trying to set object reference set to single value");
      return value.map((guid) => guid.toString());
    default:
      return String(value);
  }
}
function assertIsPositiveInteger(value) {
  if ("number" == typeof value && value >= 0 && Math.floor(value) === value)
    return true;
  throw new AssertionError(`Value ${value} should be a positive integer.`);
}
function assertIsBoolean(value) {
  if ("boolean" == typeof value)
    return true;
  throw new AssertionError(`Value ${value} should be a boolean.`);
}
function runtimeValueToArgument(value, type) {
  if ("" !== value && null != value)
    return Array.isArray(value) ? value.length ? { guids: value } : void 0 : "ObjectReference" === type ? { guid: "string" == typeof value ? value : crash() } : { value };
}
function attributeValueToActionArgument(value, kind) {
  switch (kind) {
    case "object":
      return { id: value };
    case "list":
      return { ids: value };
    case "primitive":
      return { primitive: value };
  }
}
function actionArgumentToWidgetVariable(actionArgument) {
  if (actionArgument)
    return "object" in actionArgument ? available(actionArgument.object) : "id" in actionArgument ? actionArgument.id : "ids" in actionArgument ? actionArgument.ids : crash();
}
function attributeValueToRuntimeArgument(value, kind) {
  switch (kind) {
    case "object":
      return { guid: value };
    case "list":
      return { guids: value };
    case "primitive":
      return { value: attributeValueToRuntimeValue(value) };
  }
}

function mapObject(obj, func, scope = null) {
  return Object.keys(obj).reduce(function(acc, key) {
    return acc[key] = func.call(scope, obj[key], key), acc;
  }, {});
}
function objectFromArray(arr) {
  return arr.reduce(function(acc, pair) {
    return acc[pair[0]] = pair[1], acc;
  }, {});
}
function objectIsEmpty(obj) {
  for (var i in obj)
    return false;
  return true;
}
function getFileError(doc) {
  var area, json, error = null;
  return (area = doc.getElementsByTagName("textarea")[0]) && (json = JSON.parse(area.value)).type && "exception" === json.type && ((error = new DescribedServerError(json.description))._type = "exception"), error;
}
var DECIMAL_TOO_BIG = new Big("1e20"), INT_MIN = new Big(2).pow(31).times(-1), INT_MAX = new Big(2).pow(31).minus(1), LONG_MIN = new Big(2).pow(63).times(-1), LONG_MAX = new Big(2).pow(63).minus(1);
function checkRange(value, min, max) {
  return value.gte(min) && value.lte(max);
}
const validation = { OK: 0, NOT_INTEGER: 1, RANGE_INTEGER: 2, RANGE_LONG: 3, RANGE_DECIMAL: 4 };
function validate(value, type) {
  if (/^(Integer|Long|Decimal)$/.test(type)) {
    if ("" === value || null === value)
      return validation.OK;
    if (value instanceof Big || (value = new Big(value)), ("Integer" === type || "Long" === type) && function(value2) {
      return !value2.mod(1).eq(0);
    }(value))
      return validation.NOT_INTEGER;
    if ("Integer" === type && !checkRange(value, INT_MIN, INT_MAX))
      return validation.RANGE_INTEGER;
    if ("Long" === type && !checkRange(value, LONG_MIN, LONG_MAX))
      return validation.RANGE_LONG;
    if ("Decimal" === type && value.abs().gte(DECIMAL_TOO_BIG))
      return validation.RANGE_DECIMAL;
    if ("Decimal" === type && !value.mod(1e-8).eq(0))
      return validation.RANGE_DECIMAL;
  }
  return validation.OK;
}
function localizeDate(date) {
  const newDate = /* @__PURE__ */ new Date();
  return newDate.setFullYear(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate()), newDate.setHours(date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.getUTCMilliseconds()), newDate;
}
function delocalizeDate(date) {
  const newDate = /* @__PURE__ */ new Date();
  return newDate.setUTCFullYear(date.getFullYear(), date.getMonth(), date.getDate()), newDate.setUTCHours(date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()), newDate;
}
const snapshot = Symbol("snapshot");
class MxObject {
  get jsonData() {
    return this._jsonData;
  }
  constructor(kwArgs) {
    this._guid = "0", this._unavailable = false, this.id = "mendix.lib.MxObject";
    const untrustedArgs = kwArgs, objectType = untrustedArgs.json?.objectType;
    if (!untrustedArgs.meta || !objectType)
      throw new AssertionError(`new MxObject(): cannot create Mendix object. Check entity access for entity ${objectType}`);
    this.metaData = kwArgs.meta, this._isPartial = kwArgs.isPartial ?? false, this._jsonData = kwArgs.json, this._updateFromJsonData(), this.id += "(" + objectType + ":" + this._guid + ")", this._partialTreeId = this._isPartial ? kwArgs.partialTreeId ?? newId("partial") : void 0;
  }
  resetFromJSON(json) {
    this._jsonData = json, this._updateFromJsonData();
  }
  markAsUnavailable() {
    this._jsonData = { guid: this._guid, attributes: {} }, this._updateFromJsonData(), this._unavailable = true;
  }
  _updateFromJsonData() {
    this._guid = this._jsonData.guid;
    for (const key in this._jsonData.attributes) {
      const attr = key;
      this._setAttributeValue(attr, this._getAttributeValue(attr));
    }
  }
  getGuid() {
    return this._guid;
  }
  hasChanges() {
    return !objectIsEmpty(getData().getChanges(this._guid));
  }
  snapshot() {
    return this[snapshot] ?? (this[snapshot] = new MxObjectSnapshot(this));
  }
  isUnavailable() {
    return this._unavailable;
  }
  isPartial() {
    return this._isPartial;
  }
  set(attr, value) {
    this._setContent(attr, value);
  }
  set2(attr, value) {
    this._setContent(attr, attributeToClientValue(value));
  }
  isReadonlyAttr(attr) {
    if (this.has(attr)) {
      const value = this._jsonData.attributes[attr];
      return !(!value || !("readonly" in value)) && value.readonly;
    }
    {
      const attrMeta = this.metaData.attributes[attr];
      return void 0 === attrMeta || attrMeta.isAlwaysReadOnly;
    }
  }
  fetch(path, callback, error) {
    let pathComponents;
    pathComponents = path ? path instanceof Array ? path.slice() : path.split("/") : [], this.isA(pathComponents[0]) && pathComponents.shift();
    let obj = this;
    const performFetch = () => {
      if (0 === pathComponents.length)
        callback(obj);
      else if (1 === pathComponents.length)
        callback(obj.get(pathComponents[0]));
      else {
        const ref = pathComponents.shift(), entity = pathComponents.shift();
        obj._fetchReference(ref, entity, (result) => {
          void 0 === result ? callback(null) : Array.isArray(result) ? 0 === pathComponents.length ? callback(result) : handleError$1(new AssertionError(`${this.id}.fetch : ${obj} reference set should be last reference in path`)) : (obj = result, performFetch());
        }, handleError$1);
      }
    };
    function handleError$1(e) {
      error ? error(e) : handleError(e);
    }
    performFetch();
  }
  _fetchReference(attr, entity, callback, error) {
    const references = this.getReferences(attr);
    0 !== references.length ? getData().get({ guids: references, callback: (objs) => {
      if (this.isObjectReferenceSet(attr))
        0 === objs.length || objs[0].isA(entity) ? callback(objs) : callback(void 0);
      else {
        const obj = objs[0];
        obj?.isA(entity) ? callback(obj) : callback(void 0);
      }
    }, error }) : callback(void 0);
  }
  get(attr) {
    if ("string" != typeof attr)
      throw new AssertionError(`parameter attr ${attr} is not of type String`);
    return this.has(attr) ? this._convertToClientValue(attr, this.getRawValue(attr)) : null;
  }
  get2(attr) {
    if ("string" != typeof attr)
      throw new AssertionError(`parameter attr ${attr} is not of type String`);
    return clientToAttributeValue(this.has(attr) ? this._convertToClientValue(attr, this.getRawValue(attr)) : null, this.getAttributeType(attr));
  }
  getOriginalValue(attr) {
    if ("string" != typeof attr)
      throw new AssertionError(`parameter attr ${attr} is not of type String`);
    return this.has(attr) ? this._convertToClientValue(attr, this._getRawOriginalValue(attr)) : null;
  }
  has(attr) {
    if ("string" != typeof attr)
      throw new AssertionError("attribute parameter is not a string");
    return hasKey(this._jsonData.attributes, attr);
  }
  getReferences(attr) {
    if ("string" != typeof attr)
      throw new AssertionError(`parameter attr ${attr} is not of type String.`);
    if (!this.has(attr))
      return [];
    if (!this.isReference(attr))
      throw new AssertionError("attribute " + attr + " is not an ObjectReference(Set).");
    const ref = this.getRawValue(attr);
    return this.isObjectReference(attr) ? null == ref ? [] : [ref] : null == ref ? [] : ref.slice();
  }
  getOriginalReferences(attr) {
    if ("string" != typeof attr)
      throw new AssertionError(`parameter attr ${attr} is not of type String.`);
    if (!this.has(attr))
      return [];
    if (!this.isReference(attr))
      throw new AssertionError("attribute " + attr + " is not an ObjectReference(Set).");
    const ref = this._getRawOriginalValue(attr);
    return this.isObjectReference(attr) ? null == ref ? [] : [ref] : null == ref ? [] : ref.slice();
  }
  getReference(attr) {
    return this.get(attr);
  }
  isEnum(attr) {
    return "Enum" === this.metaData.attributes[attr]?.type;
  }
  isNumeric(attr) {
    return isNumericType(this.metaData.attributes[attr]?.type);
  }
  isPassword(attr) {
    return "HashString" === this.metaData.attributes[attr]?.type;
  }
  isDate(attr) {
    return "DateTime" === this.metaData.attributes[attr]?.type;
  }
  isLocalizedDate(attr) {
    return Boolean(this.metaData.attributes[attr]?.isDateLocalized);
  }
  isBoolean(attr) {
    return "Boolean" === this.metaData.attributes[attr]?.type;
  }
  isReference(attr) {
    return isReferenceType(this.metaData.attributes[attr]?.type);
  }
  isObjectReference(attr) {
    return "ObjectReference" === this.metaData.attributes[attr]?.type;
  }
  isObjectReferenceSet(attr) {
    return "ObjectReferenceSet" === this.metaData.attributes[attr]?.type;
  }
  hasChildren(attr) {
    if ("string" != typeof attr)
      throw new AssertionError(`parameter attr (${attr}) is not of type String.`);
    return !this._attributeChanged(attr) && this._hasChildren(attr);
  }
  getChildren(attr) {
    if ("string" != typeof attr)
      throw new AssertionError(`parameter attr (${attr}) is not of type String.`);
    if (!this.has(attr))
      return [];
    if (!this.isReference(attr))
      throw new AssertionError(`attribute ${attr} is not an ObjectReference(Set).`);
    return this._attributeChanged(attr) ? [] : this._hasChildren(attr) ? this._getChildren(attr) : [];
  }
  getChild(attr) {
    if ("string" != typeof attr)
      throw new AssertionError(`parameter attr(${attr}) is not of type String.`);
    if (!this.has(attr))
      return;
    if (!this.isObjectReference(attr))
      throw new AssertionError("attribute " + attr + " is not an ObjectReference.");
    const children = this.getChildren(attr);
    return 0 === children.length ? null : children[0];
  }
  removeReferences(attr, guidsArg) {
    if ("string" != typeof attr)
      throw new AssertionError("parameter attr is not of type String.");
    if (!this.has(attr))
      return false;
    if (!this.isReference(attr))
      throw new AssertionError("attempt to remove Reference from non-Reference attribute : " + attr);
    const guids = Array.isArray(guidsArg) ? guidsArg : [guidsArg];
    if (this._attributeChanged(attr) || !this._hasChildren(attr))
      this.isObjectReference(attr) ? this._setContent(attr, null) : this._setContent(attr, arraySubtract(this.getReferences(attr), guids));
    else {
      if (!this.isObjectReference(attr)) {
        const attribute = this._jsonData.attributes[attr], value = attribute && "value" in attribute ? attribute.value : attribute;
        for (const guid of guids)
          delete value[guid];
        const val = arraySubtract(this.getReferences(attr), guids);
        return this._makeChange(attr, val);
      }
      this._setContent(attr, null);
    }
    return true;
  }
  addReference(attr, guid) {
    if ("string" != typeof attr)
      throw new AssertionError("parameter attr is not of type String.");
    if (!guid)
      throw new AssertionError("parameter guid is not set.");
    if (!this.has(attr))
      return false;
    if (!this.isReference(attr))
      throw new AssertionError("attempt to add Reference to non-Reference attribute : " + attr);
    if (this.isObjectReference(attr))
      this._setContent(attr, guid);
    else {
      const guids = this.getReferences(attr);
      guids.join(";").match(guid) || (guids.push(guid), this._setContent(attr, guids));
    }
    return true;
  }
  addReferences(attr, guids) {
    if ("string" != typeof attr)
      throw new AssertionError("parameter attr is not of type String.");
    if (!Array.isArray(guids))
      throw new AssertionError("parameter guids is not an Array.");
    if (!this.has(attr))
      return false;
    if (!this.isObjectReferenceSet(attr))
      throw new AssertionError("attempt to add References to non-ReferenceSet attribute : " + attr);
    const currentGuids = this.getReferences(attr), guidsToAdd = guids.filter((guid) => !currentGuids.includes(guid));
    return guidsToAdd.length > 0 && this._setContent(attr, currentGuids.concat(guidsToAdd)), true;
  }
  getReferenceAttributes() {
    return Object.values(this.metaData.attributes).filter((attrMeta) => isReferenceType(attrMeta.type) && this.has(attrMeta.name)).map((attrMeta) => attrMeta.name);
  }
  getAttributes() {
    return Object.values(this.metaData.attributes).filter((attrMeta) => this.has(attrMeta.name)).map((attrMeta) => attrMeta.name);
  }
  getPrimitives() {
    return Object.values(this.metaData.attributes).filter((attrMeta) => !isReferenceType(attrMeta.type) && this.has(attrMeta.name)).map((attrMeta) => attrMeta.name);
  }
  getAttributeType(attr) {
    return !!this.has(attr) && this.metaData.attributes[attr].type;
  }
  getSelectorEntity(attr) {
    return this.has(attr) ? this.metaData.attributes[attr]?.referenceEntity ?? false : null;
  }
  getEntity() {
    return this.metaData.name;
  }
  isPersistable() {
    return this.metaData.isPersistable;
  }
  isRemoteFileEntity() {
    return !!this.metaData.isRemoteFileEntity;
  }
  isNew() {
    return getData().isNew(this._guid);
  }
  isA(classname) {
    return isEntityA(this.metaData.name, classname);
  }
  hasSuperEntities() {
    return this.metaData.generalizations.length > 0;
  }
  getSuperEntities() {
    return this.metaData.generalizations;
  }
  hasSubEntities() {
    return this.metaData.specializations.length > 0;
  }
  getSubEntities() {
    return this.metaData.specializations;
  }
  inheritsFrom(className) {
    return this.metaData.generalizations.includes(className);
  }
  toJSON() {
    return this._jsonData;
  }
  toString() {
    return this._partialTreeId ? `${this.getGuid()}_${this._partialTreeId}` : this.getGuid();
  }
  getRawValue(attr) {
    const objectChanges = getData().getChanges(this._guid);
    return Object.prototype.hasOwnProperty.call(objectChanges, attr) ? objectChanges[attr].value : this._getRawOriginalValue(attr);
  }
  _getRawOriginalValue(attr) {
    return this._hasChildren(attr) ? this._getChildValue(attr) : this._getAttributeValue(attr);
  }
  _attributeChanged(attr) {
    const changes = getData().getChanges(this._guid);
    return Object.prototype.hasOwnProperty.call(changes, attr);
  }
  _getChildren(attr) {
    return (this.isObjectReference(attr) ? [this._getAttributeValue(attr)] : Object.values(this._getAttributeValue(attr))).map((json) => MxObject.fromJson(json, true, this._partialTreeId));
  }
  _getChildValue(attr) {
    const guids = this._getChildren(attr).map((child) => child.getGuid());
    return this.isObjectReference(attr) ? 0 === guids.length ? null : guids[0] : guids;
  }
  _convertToRuntimeValue(attr, value) {
    const attributeType = this.getAttributeType(attr), clientValue = anyToClientValue(value, attributeType), runtimeValue = clientToRuntimeValue(clientValue, "String" === attributeType && "" === value);
    if (this.isNumeric(attr) && validate(runtimeValue, attributeType) !== validation.OK)
      throw new Error(`Cannot set invalid value '${value}' to MxObject attribute '${attr}'`);
    return this.isDate(attr) && !this.isLocalizedDate(attr) && "number" == typeof runtimeValue ? delocalizeDate(new Date(runtimeValue)).getTime() : this.isPassword(attr) ? value.replace(/[\s\t]+$/, "").replace(/^[\s\t]+/, "") : runtimeValue;
  }
  _convertToClientValue(attr, value) {
    if ("string" != typeof attr)
      throw new Error("mendix/lib/MxMetaObject.isDate : parameter attr is not of type String.");
    const preConverted = runtimeValueToClientValue(value, this.metaData.attributes[attr]?.type);
    return this.isDate(attr) && "" !== preConverted ? this.isLocalizedDate(attr) ? preConverted : localizeDate(new Date(preConverted)).getTime() : preConverted;
  }
  _setContent(attr, value) {
    if ("string" != typeof attr)
      throw new AssertionError(`parameter attr (${attr}) is not of type String.`);
    if (!hasKey(this.metaData.attributes, attr))
      return;
    const newValue = this._convertToRuntimeValue(attr, value), oldValue = this.getRawValue(attr);
    newValue !== oldValue && (this._makeChange(attr, newValue), this.metaData.attributes[attr]?.isBidiReference && (getObjects(this.isObjectReference(attr) ? [oldValue] : arraySubtract(oldValue, newValue)).filter((mxObj) => !mxObj.isReadonlyAttr(attr) && mxObj.getReferences(attr).includes(this._guid)).forEach((mxObj) => mxObj.removeReferences(attr, [this._guid])), getObjects(this.isObjectReference(attr) ? [newValue] : arraySubtract(newValue, oldValue)).filter((mxObj) => !mxObj.isReadonlyAttr(attr) && !mxObj.getReferences(attr).includes(this._guid)).forEach((mxObj) => mxObj.addReference(attr, this._guid))));
  }
  _hasChildren(attr) {
    if (!this.isReference(attr))
      return false;
    const value = this._getAttributeValue(attr);
    return null !== value && "object" == typeof value && !Array.isArray(value);
  }
  _getAttributeValue(attr) {
    const val = this._jsonData.attributes[attr] ?? null;
    return val && "value" in val ? val.value : val;
  }
  _setAttributeValue(attr, value) {
    const val = this._jsonData.attributes[attr];
    void 0 === value && (value = null), val && "value" in val ? val.value = value : this._jsonData.attributes[attr] = value;
  }
  _makeChange(attr, value) {
    if (this.isUnavailable())
      throw new AssertionError(`Cannot modify attribute ${attr} of an unavailable object.`);
    getData().makeChange(this._guid, attr, value), publish({ guid: this._guid, attr }).catch(handleError);
  }
  static fromJson(json, isPartial = false, partialTreeId) {
    return new MxObject({ json, meta: getEntityMeta(json.objectType), isPartial, partialTreeId });
  }
}
function getObjects(guids) {
  return guids.map((guid) => getData().getCachedObject(guid)).filter((mxObject) => null != mxObject);
}
function arraySubtract(lhs, rhs) {
  return lhs.filter((item) => !rhs.includes(item));
}
class MxObjectSnapshot extends MxObject {
  constructor(mxObject) {
    super({ meta: mxObject.metaData, json: { guid: mxObject.getGuid(), objectType: mxObject.getEntity() } }), this._mxObject = mxObject, this.isSnapshot = true;
  }
  resetFromJSON(json) {
    super.resetFromJSON(json), this._mxObject.resetFromJSON(json);
  }
  markAsUnavailable() {
    super.markAsUnavailable(), this._mxObject.markAsUnavailable();
  }
  hasChanges() {
    return false;
  }
  snapshot() {
    return this;
  }
  isReadonlyAttr(_attr) {
    return true;
  }
  isPartial() {
    return this._mxObject.isPartial();
  }
  toString() {
    return this._mxObject.toString();
  }
  _fetchReference(attr, entity, callback, error) {
    super._fetchReference(attr, entity, (result) => {
      result instanceof MxObject ? callback(result.snapshot()) : Array.isArray(result) ? callback(result.map((mxobj) => mxobj.snapshot())) : callback(result);
    }, error);
  }
  has(attr) {
    return this._mxObject.has(attr);
  }
  toJSON() {
    return this._mxObject.toJSON();
  }
  _attributeChanged(_attr) {
    return false;
  }
  getRawValue(attr) {
    return this._mxObject._getRawOriginalValue(attr);
  }
  _getAttributeValue(attr) {
    return this._mxObject._getAttributeValue(attr);
  }
  _makeChange(attr) {
    throw new AssertionError(`Cannot modify attribute ${attr} of a read-only object.`);
  }
  _getChildren(attr) {
    return this._mxObject._getChildren(attr).map((mxobj) => mxobj.snapshot());
  }
  convertToEditable() {
    return getData().removeChanges(this.getGuid()), this._mxObject;
  }
}

function _typeof(o) {
  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
    return typeof o2;
  } : function(o2) {
    return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
  }, _typeof(o);
}
function toInteger(dirtyNumber) {
  if (null === dirtyNumber || true === dirtyNumber || false === dirtyNumber)
    return NaN;
  var number = Number(dirtyNumber);
  return isNaN(number) ? number : number < 0 ? Math.ceil(number) : Math.floor(number);
}
function requiredArgs(required, args) {
  if (args.length < required)
    throw new TypeError(required + " argument" + (required > 1 ? "s" : "") + " required, but only " + args.length + " present");
}
function toDate(argument) {
  requiredArgs(1, arguments);
  var argStr = Object.prototype.toString.call(argument);
  return argument instanceof Date || "object" === _typeof(argument) && "[object Date]" === argStr ? new Date(argument.getTime()) : "number" == typeof argument || "[object Number]" === argStr ? new Date(argument) : ("string" != typeof argument && "[object String]" !== argStr || "undefined" == typeof console || (console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"), console.warn(new Error().stack)), /* @__PURE__ */ new Date(NaN));
}

var defaultOptions = {};
function getDefaultOptions() {
  return defaultOptions;
}
function startOfWeek(dirtyDate, options) {
  var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(1, arguments);
  var defaultOptions2 = getDefaultOptions(), weekStartsOn = toInteger(null !== (_ref = null !== (_ref2 = null !== (_ref3 = null !== (_options$weekStartsOn = null == options ? void 0 : options.weekStartsOn) && void 0 !== _options$weekStartsOn ? _options$weekStartsOn : null == options || null === (_options$locale = options.locale) || void 0 === _options$locale || null === (_options$locale$optio = _options$locale.options) || void 0 === _options$locale$optio ? void 0 : _options$locale$optio.weekStartsOn) && void 0 !== _ref3 ? _ref3 : defaultOptions2.weekStartsOn) && void 0 !== _ref2 ? _ref2 : null === (_defaultOptions$local = defaultOptions2.locale) || void 0 === _defaultOptions$local || null === (_defaultOptions$local2 = _defaultOptions$local.options) || void 0 === _defaultOptions$local2 ? void 0 : _defaultOptions$local2.weekStartsOn) && void 0 !== _ref ? _ref : 0);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6))
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  var date = toDate(dirtyDate), day = date.getDay(), diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  return date.setDate(date.getDate() - diff), date.setHours(0, 0, 0, 0), date;
}

function addDays(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate), amount = toInteger(dirtyAmount);
  return isNaN(amount) ? /* @__PURE__ */ new Date(NaN) : amount ? (date.setDate(date.getDate() + amount), date) : date;
}
function subDays(dirtyDate, dirtyAmount) {
  return requiredArgs(2, arguments), addDays(dirtyDate, -toInteger(dirtyAmount));
}

function startOfDay(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  return date.setHours(0, 0, 0, 0), date;
}
function endOfDay(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  return date.setHours(23, 59, 59, 999), date;
}
function endOfMonth(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate), month = date.getMonth();
  return date.setFullYear(date.getFullYear(), month + 1, 0), date.setHours(23, 59, 59, 999), date;
}
function startOfMinute(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  return date.setSeconds(0, 0), date;
}
function startOfMonth(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  return date.setDate(1), date.setHours(0, 0, 0, 0), date;
}
function endOfYear(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate), year = date.getFullYear();
  return date.setFullYear(year + 1, 0, 0), date.setHours(23, 59, 59, 999), date;
}
function startOfYear(dirtyDate) {
  requiredArgs(1, arguments);
  var cleanDate = toDate(dirtyDate), date = /* @__PURE__ */ new Date(0);
  return date.setFullYear(cleanDate.getFullYear(), 0, 1), date.setHours(0, 0, 0, 0), date;
}
function endOfWeek(dirtyDate, options) {
  var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(1, arguments);
  var defaultOptions = getDefaultOptions(), weekStartsOn = toInteger(null !== (_ref = null !== (_ref2 = null !== (_ref3 = null !== (_options$weekStartsOn = null == options ? void 0 : options.weekStartsOn) && void 0 !== _options$weekStartsOn ? _options$weekStartsOn : null == options || null === (_options$locale = options.locale) || void 0 === _options$locale || null === (_options$locale$optio = _options$locale.options) || void 0 === _options$locale$optio ? void 0 : _options$locale$optio.weekStartsOn) && void 0 !== _ref3 ? _ref3 : defaultOptions.weekStartsOn) && void 0 !== _ref2 ? _ref2 : null === (_defaultOptions$local = defaultOptions.locale) || void 0 === _defaultOptions$local || null === (_defaultOptions$local2 = _defaultOptions$local.options) || void 0 === _defaultOptions$local2 ? void 0 : _defaultOptions$local2.weekStartsOn) && void 0 !== _ref ? _ref : 0);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6))
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  var date = toDate(dirtyDate), day = date.getDay(), diff = 6 + (day < weekStartsOn ? -7 : 0) - (day - weekStartsOn);
  return date.setDate(date.getDate() + diff), date.setHours(23, 59, 59, 999), date;
}
function startOfHour(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  return date.setMinutes(0, 0, 0), date;
}
function runtimeValueToExpressionVariable(runtimeValue, type, getObject) {
  return function(value, type2, getObject2) {
    switch (type2) {
      case "ObjectReferenceSet":
        return Array.isArray(value) ? value.map((guid) => getObject2(guid)) : new Array();
      case "ObjectReference":
        return void 0 !== value ? getObject2(value) : void 0;
      default:
        return value;
    }
  }(runtimeValueToAttributeValue(runtimeValue, type), type, getObject);
}
function expressionVariableToRuntimeValue(value) {
  const attributeValue = expressionVariableToAttributeValue(value), clientValue = attributeToClientValue(attributeValue);
  return clientToRuntimeValue(clientValue, "" === value);
}
function expressionVariableToAttributeValue(value) {
  return isArrayOf(MxObject, value) ? value.map((obj) => obj.getGuid()) : value instanceof MxObject ? value.getGuid() : value;
}
function anyToExpressionVariable(value) {
  switch (typeof value) {
    case "undefined":
    case "string":
    case "boolean":
      return value;
    case "number":
      return new Big(value);
    default:
      if (value instanceof Big || value instanceof Date || value instanceof MxObject)
        return value;
      if (null === value)
        return;
      if (Array.isArray(value)) {
        if (value.every((elem) => elem instanceof MxObject))
          return value;
        throw new AssertionError(`Array ${value.join(", ")} cannot be used as Nanoflow variable, because it contains something else then MxObjects.`);
      }
      throw new AssertionError(`Value ${value} cannot be used as Nanoflow variable.`);
  }
}
function actionArgumentToExpressionVariable(argument) {
  if (argument) {
    if ("object" in argument)
      return argument.object;
    if ("objects" in argument)
      return argument.objects;
    throw new AssertionError();
  }
}
function expressionVariableToRuntimeArgument(value) {
  if (void 0 !== value)
    return isMxObjectArray(value) ? { guids: value.map((o) => o.getGuid()) } : value instanceof MxObject ? { guid: value.getGuid() } : { value: expressionVariableToRuntimeValue(value) };
}
function toRuntimeArgument(object, attribute) {
  return runtimeValueToArgument(object.getRawValue(attribute), object.getAttributeType(attribute));
}
function isMxObjectArray(variable) {
  return Array.isArray(variable) && variable.every((e) => e instanceof MxObject);
}
function addDaysExtended(func, amount) {
  return (date, options) => addDays(func(date, options), amount);
}
function subDaysExtended(func, amount) {
  return (date, options) => subDays(func(date, options), amount);
}
const funcMap = { beginOfCurrentMinute: startOfMinute, endOfCurrentMinute: function(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  return date.setSeconds(59, 999), date;
}, beginOfCurrentHour: startOfHour, endOfCurrentHour: function(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  return date.setMinutes(59, 59, 999), date;
}, beginOfCurrentDay: startOfDay, endOfCurrentDay: endOfDay, beginOfCurrentWeek: startOfWeek, endOfCurrentWeek: endOfWeek, beginOfCurrentMonth: startOfMonth, endOfCurrentMonth: endOfMonth, beginOfCurrentYear: startOfYear, endOfCurrentYear: endOfYear, beginOfYesterday: subDaysExtended(startOfDay, 1), endOfYesterday: subDaysExtended(endOfDay, 1), beginOfTomorrow: addDaysExtended(startOfDay, 1), endOfTomorrow: addDaysExtended(endOfDay, 1) };
function createExpressionTokens(getNow) {
  const tokensCollection = { currentUser: () => getSession().getUserId(), currentDateTime: getNow };
  return Object.entries(funcMap).forEach(([exposedName, func]) => {
    tokensCollection[exposedName] = () => func(getNow(), { locale: getDateFnsLocale() }), tokensCollection[exposedName + "UTC"] = () => delocalizeDate(func(localizeDate(getNow())));
  }), tokensCollection;
}

const dirtyGuids = /* @__PURE__ */ new Set();
function markAsDirty(guids) {
  guids.forEach((guid) => dirtyGuids.add(guid));
}
function unmarkAsDirty(guids) {
  guids.forEach((guid) => dirtyGuids.delete(guid));
}
function clearDirtyGuids() {
  dirtyGuids.clear();
}
function isDirtyGuid(guid) {
  return dirtyGuids.has(guid);
}

function addMilliseconds(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var timestamp = toDate(dirtyDate).getTime(), amount = toInteger(dirtyAmount);
  return new Date(timestamp + amount);
}
function getTimezoneOffsetInMilliseconds(date) {
  var utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));
  return utcDate.setUTCFullYear(date.getFullYear()), date.getTime() - utcDate.getTime();
}
function isValid(dirtyDate) {
  if (requiredArgs(1, arguments), !function(value) {
    return requiredArgs(1, arguments), value instanceof Date || "object" === _typeof(value) && "[object Date]" === Object.prototype.toString.call(value);
  }(dirtyDate) && "number" != typeof dirtyDate)
    return false;
  var date = toDate(dirtyDate);
  return !isNaN(Number(date));
}
function subMilliseconds(dirtyDate, dirtyAmount) {
  return requiredArgs(2, arguments), addMilliseconds(dirtyDate, -toInteger(dirtyAmount));
}
function startOfUTCISOWeek(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate), day = date.getUTCDay(), diff = (day < 1 ? 7 : 0) + day - 1;
  return date.setUTCDate(date.getUTCDate() - diff), date.setUTCHours(0, 0, 0, 0), date;
}
function getUTCISOWeekYear(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate), year = date.getUTCFullYear(), fourthOfJanuaryOfNextYear = /* @__PURE__ */ new Date(0);
  fourthOfJanuaryOfNextYear.setUTCFullYear(year + 1, 0, 4), fourthOfJanuaryOfNextYear.setUTCHours(0, 0, 0, 0);
  var startOfNextYear = startOfUTCISOWeek(fourthOfJanuaryOfNextYear), fourthOfJanuaryOfThisYear = /* @__PURE__ */ new Date(0);
  fourthOfJanuaryOfThisYear.setUTCFullYear(year, 0, 4), fourthOfJanuaryOfThisYear.setUTCHours(0, 0, 0, 0);
  var startOfThisYear = startOfUTCISOWeek(fourthOfJanuaryOfThisYear);
  return date.getTime() >= startOfNextYear.getTime() ? year + 1 : date.getTime() >= startOfThisYear.getTime() ? year : year - 1;
}
var MILLISECONDS_IN_WEEK$1 = 6048e5;
function getUTCISOWeek(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate), diff = startOfUTCISOWeek(date).getTime() - function(dirtyDate2) {
    requiredArgs(1, arguments);
    var year = getUTCISOWeekYear(dirtyDate2), fourthOfJanuary = /* @__PURE__ */ new Date(0);
    return fourthOfJanuary.setUTCFullYear(year, 0, 4), fourthOfJanuary.setUTCHours(0, 0, 0, 0), startOfUTCISOWeek(fourthOfJanuary);
  }(date).getTime();
  return Math.round(diff / MILLISECONDS_IN_WEEK$1) + 1;
}
function startOfUTCWeek(dirtyDate, options) {
  var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(1, arguments);
  var defaultOptions = getDefaultOptions(), weekStartsOn = toInteger(null !== (_ref = null !== (_ref2 = null !== (_ref3 = null !== (_options$weekStartsOn = null == options ? void 0 : options.weekStartsOn) && void 0 !== _options$weekStartsOn ? _options$weekStartsOn : null == options || null === (_options$locale = options.locale) || void 0 === _options$locale || null === (_options$locale$optio = _options$locale.options) || void 0 === _options$locale$optio ? void 0 : _options$locale$optio.weekStartsOn) && void 0 !== _ref3 ? _ref3 : defaultOptions.weekStartsOn) && void 0 !== _ref2 ? _ref2 : null === (_defaultOptions$local = defaultOptions.locale) || void 0 === _defaultOptions$local || null === (_defaultOptions$local2 = _defaultOptions$local.options) || void 0 === _defaultOptions$local2 ? void 0 : _defaultOptions$local2.weekStartsOn) && void 0 !== _ref ? _ref : 0);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6))
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  var date = toDate(dirtyDate), day = date.getUTCDay(), diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  return date.setUTCDate(date.getUTCDate() - diff), date.setUTCHours(0, 0, 0, 0), date;
}
function getUTCWeekYear(dirtyDate, options) {
  var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate), year = date.getUTCFullYear(), defaultOptions = getDefaultOptions(), firstWeekContainsDate = toInteger(null !== (_ref = null !== (_ref2 = null !== (_ref3 = null !== (_options$firstWeekCon = null == options ? void 0 : options.firstWeekContainsDate) && void 0 !== _options$firstWeekCon ? _options$firstWeekCon : null == options || null === (_options$locale = options.locale) || void 0 === _options$locale || null === (_options$locale$optio = _options$locale.options) || void 0 === _options$locale$optio ? void 0 : _options$locale$optio.firstWeekContainsDate) && void 0 !== _ref3 ? _ref3 : defaultOptions.firstWeekContainsDate) && void 0 !== _ref2 ? _ref2 : null === (_defaultOptions$local = defaultOptions.locale) || void 0 === _defaultOptions$local || null === (_defaultOptions$local2 = _defaultOptions$local.options) || void 0 === _defaultOptions$local2 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) && void 0 !== _ref ? _ref : 1);
  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7))
    throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");
  var firstWeekOfNextYear = /* @__PURE__ */ new Date(0);
  firstWeekOfNextYear.setUTCFullYear(year + 1, 0, firstWeekContainsDate), firstWeekOfNextYear.setUTCHours(0, 0, 0, 0);
  var startOfNextYear = startOfUTCWeek(firstWeekOfNextYear, options), firstWeekOfThisYear = /* @__PURE__ */ new Date(0);
  firstWeekOfThisYear.setUTCFullYear(year, 0, firstWeekContainsDate), firstWeekOfThisYear.setUTCHours(0, 0, 0, 0);
  var startOfThisYear = startOfUTCWeek(firstWeekOfThisYear, options);
  return date.getTime() >= startOfNextYear.getTime() ? year + 1 : date.getTime() >= startOfThisYear.getTime() ? year : year - 1;
}
var MILLISECONDS_IN_WEEK = 6048e5;
function getUTCWeek(dirtyDate, options) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate), diff = startOfUTCWeek(date, options).getTime() - function(dirtyDate2, options2) {
    var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
    requiredArgs(1, arguments);
    var defaultOptions = getDefaultOptions(), firstWeekContainsDate = toInteger(null !== (_ref = null !== (_ref2 = null !== (_ref3 = null !== (_options$firstWeekCon = null == options2 ? void 0 : options2.firstWeekContainsDate) && void 0 !== _options$firstWeekCon ? _options$firstWeekCon : null == options2 || null === (_options$locale = options2.locale) || void 0 === _options$locale || null === (_options$locale$optio = _options$locale.options) || void 0 === _options$locale$optio ? void 0 : _options$locale$optio.firstWeekContainsDate) && void 0 !== _ref3 ? _ref3 : defaultOptions.firstWeekContainsDate) && void 0 !== _ref2 ? _ref2 : null === (_defaultOptions$local = defaultOptions.locale) || void 0 === _defaultOptions$local || null === (_defaultOptions$local2 = _defaultOptions$local.options) || void 0 === _defaultOptions$local2 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) && void 0 !== _ref ? _ref : 1), year = getUTCWeekYear(dirtyDate2, options2), firstWeek = /* @__PURE__ */ new Date(0);
    return firstWeek.setUTCFullYear(year, 0, firstWeekContainsDate), firstWeek.setUTCHours(0, 0, 0, 0), startOfUTCWeek(firstWeek, options2);
  }(date, options).getTime();
  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;
}
function addLeadingZeros(number, targetLength) {
  for (var sign = number < 0 ? "-" : "", output = Math.abs(number).toString(); output.length < targetLength; )
    output = "0" + output;
  return sign + output;
}
var formatters$1_y = function(date, token) {
  var signedYear = date.getUTCFullYear(), year = signedYear > 0 ? signedYear : 1 - signedYear;
  return addLeadingZeros("yy" === token ? year % 100 : year, token.length);
}, formatters$1_M = function(date, token) {
  var month = date.getUTCMonth();
  return "M" === token ? String(month + 1) : addLeadingZeros(month + 1, 2);
}, formatters$1_d = function(date, token) {
  return addLeadingZeros(date.getUTCDate(), token.length);
}, formatters$1_h = function(date, token) {
  return addLeadingZeros(date.getUTCHours() % 12 || 12, token.length);
}, formatters$1_H = function(date, token) {
  return addLeadingZeros(date.getUTCHours(), token.length);
}, formatters$1_m = function(date, token) {
  return addLeadingZeros(date.getUTCMinutes(), token.length);
}, formatters$1_s = function(date, token) {
  return addLeadingZeros(date.getUTCSeconds(), token.length);
}, formatters$1_S = function(date, token) {
  var numberOfDigits = token.length, milliseconds = date.getUTCMilliseconds();
  return addLeadingZeros(Math.floor(milliseconds * Math.pow(10, numberOfDigits - 3)), token.length);
}, dayPeriodEnum_midnight = "midnight", dayPeriodEnum_noon = "noon", dayPeriodEnum_morning = "morning", dayPeriodEnum_afternoon = "afternoon", dayPeriodEnum_evening = "evening", dayPeriodEnum_night = "night", formatters = { G: function(date, token, localize) {
  var era = date.getUTCFullYear() > 0 ? 1 : 0;
  switch (token) {
    case "G":
    case "GG":
    case "GGG":
      return localize.era(era, { width: "abbreviated" });
    case "GGGGG":
      return localize.era(era, { width: "narrow" });
    default:
      return localize.era(era, { width: "wide" });
  }
}, y: function(date, token, localize) {
  if ("yo" === token) {
    var signedYear = date.getUTCFullYear(), year = signedYear > 0 ? signedYear : 1 - signedYear;
    return localize.ordinalNumber(year, { unit: "year" });
  }
  return formatters$1_y(date, token);
}, Y: function(date, token, localize, options) {
  var signedWeekYear = getUTCWeekYear(date, options), weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear;
  return "YY" === token ? addLeadingZeros(weekYear % 100, 2) : "Yo" === token ? localize.ordinalNumber(weekYear, { unit: "year" }) : addLeadingZeros(weekYear, token.length);
}, R: function(date, token) {
  return addLeadingZeros(getUTCISOWeekYear(date), token.length);
}, u: function(date, token) {
  return addLeadingZeros(date.getUTCFullYear(), token.length);
}, Q: function(date, token, localize) {
  var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);
  switch (token) {
    case "Q":
      return String(quarter);
    case "QQ":
      return addLeadingZeros(quarter, 2);
    case "Qo":
      return localize.ordinalNumber(quarter, { unit: "quarter" });
    case "QQQ":
      return localize.quarter(quarter, { width: "abbreviated", context: "formatting" });
    case "QQQQQ":
      return localize.quarter(quarter, { width: "narrow", context: "formatting" });
    default:
      return localize.quarter(quarter, { width: "wide", context: "formatting" });
  }
}, q: function(date, token, localize) {
  var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);
  switch (token) {
    case "q":
      return String(quarter);
    case "qq":
      return addLeadingZeros(quarter, 2);
    case "qo":
      return localize.ordinalNumber(quarter, { unit: "quarter" });
    case "qqq":
      return localize.quarter(quarter, { width: "abbreviated", context: "standalone" });
    case "qqqqq":
      return localize.quarter(quarter, { width: "narrow", context: "standalone" });
    default:
      return localize.quarter(quarter, { width: "wide", context: "standalone" });
  }
}, M: function(date, token, localize) {
  var month = date.getUTCMonth();
  switch (token) {
    case "M":
    case "MM":
      return formatters$1_M(date, token);
    case "Mo":
      return localize.ordinalNumber(month + 1, { unit: "month" });
    case "MMM":
      return localize.month(month, { width: "abbreviated", context: "formatting" });
    case "MMMMM":
      return localize.month(month, { width: "narrow", context: "formatting" });
    default:
      return localize.month(month, { width: "wide", context: "formatting" });
  }
}, L: function(date, token, localize) {
  var month = date.getUTCMonth();
  switch (token) {
    case "L":
      return String(month + 1);
    case "LL":
      return addLeadingZeros(month + 1, 2);
    case "Lo":
      return localize.ordinalNumber(month + 1, { unit: "month" });
    case "LLL":
      return localize.month(month, { width: "abbreviated", context: "standalone" });
    case "LLLLL":
      return localize.month(month, { width: "narrow", context: "standalone" });
    default:
      return localize.month(month, { width: "wide", context: "standalone" });
  }
}, w: function(date, token, localize, options) {
  var week = getUTCWeek(date, options);
  return "wo" === token ? localize.ordinalNumber(week, { unit: "week" }) : addLeadingZeros(week, token.length);
}, I: function(date, token, localize) {
  var isoWeek = getUTCISOWeek(date);
  return "Io" === token ? localize.ordinalNumber(isoWeek, { unit: "week" }) : addLeadingZeros(isoWeek, token.length);
}, d: function(date, token, localize) {
  return "do" === token ? localize.ordinalNumber(date.getUTCDate(), { unit: "date" }) : formatters$1_d(date, token);
}, D: function(date, token, localize) {
  var dayOfYear = function(dirtyDate) {
    requiredArgs(1, arguments);
    var date2 = toDate(dirtyDate), timestamp = date2.getTime();
    date2.setUTCMonth(0, 1), date2.setUTCHours(0, 0, 0, 0);
    var difference = timestamp - date2.getTime();
    return Math.floor(difference / 864e5) + 1;
  }(date);
  return "Do" === token ? localize.ordinalNumber(dayOfYear, { unit: "dayOfYear" }) : addLeadingZeros(dayOfYear, token.length);
}, E: function(date, token, localize) {
  var dayOfWeek = date.getUTCDay();
  switch (token) {
    case "E":
    case "EE":
    case "EEE":
      return localize.day(dayOfWeek, { width: "abbreviated", context: "formatting" });
    case "EEEEE":
      return localize.day(dayOfWeek, { width: "narrow", context: "formatting" });
    case "EEEEEE":
      return localize.day(dayOfWeek, { width: "short", context: "formatting" });
    default:
      return localize.day(dayOfWeek, { width: "wide", context: "formatting" });
  }
}, e: function(date, token, localize, options) {
  var dayOfWeek = date.getUTCDay(), localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;
  switch (token) {
    case "e":
      return String(localDayOfWeek);
    case "ee":
      return addLeadingZeros(localDayOfWeek, 2);
    case "eo":
      return localize.ordinalNumber(localDayOfWeek, { unit: "day" });
    case "eee":
      return localize.day(dayOfWeek, { width: "abbreviated", context: "formatting" });
    case "eeeee":
      return localize.day(dayOfWeek, { width: "narrow", context: "formatting" });
    case "eeeeee":
      return localize.day(dayOfWeek, { width: "short", context: "formatting" });
    default:
      return localize.day(dayOfWeek, { width: "wide", context: "formatting" });
  }
}, c: function(date, token, localize, options) {
  var dayOfWeek = date.getUTCDay(), localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;
  switch (token) {
    case "c":
      return String(localDayOfWeek);
    case "cc":
      return addLeadingZeros(localDayOfWeek, token.length);
    case "co":
      return localize.ordinalNumber(localDayOfWeek, { unit: "day" });
    case "ccc":
      return localize.day(dayOfWeek, { width: "abbreviated", context: "standalone" });
    case "ccccc":
      return localize.day(dayOfWeek, { width: "narrow", context: "standalone" });
    case "cccccc":
      return localize.day(dayOfWeek, { width: "short", context: "standalone" });
    default:
      return localize.day(dayOfWeek, { width: "wide", context: "standalone" });
  }
}, i: function(date, token, localize) {
  var dayOfWeek = date.getUTCDay(), isoDayOfWeek = 0 === dayOfWeek ? 7 : dayOfWeek;
  switch (token) {
    case "i":
      return String(isoDayOfWeek);
    case "ii":
      return addLeadingZeros(isoDayOfWeek, token.length);
    case "io":
      return localize.ordinalNumber(isoDayOfWeek, { unit: "day" });
    case "iii":
      return localize.day(dayOfWeek, { width: "abbreviated", context: "formatting" });
    case "iiiii":
      return localize.day(dayOfWeek, { width: "narrow", context: "formatting" });
    case "iiiiii":
      return localize.day(dayOfWeek, { width: "short", context: "formatting" });
    default:
      return localize.day(dayOfWeek, { width: "wide", context: "formatting" });
  }
}, a: function(date, token, localize) {
  var dayPeriodEnumValue = date.getUTCHours() / 12 >= 1 ? "pm" : "am";
  switch (token) {
    case "a":
    case "aa":
      return localize.dayPeriod(dayPeriodEnumValue, { width: "abbreviated", context: "formatting" });
    case "aaa":
      return localize.dayPeriod(dayPeriodEnumValue, { width: "abbreviated", context: "formatting" }).toLowerCase();
    case "aaaaa":
      return localize.dayPeriod(dayPeriodEnumValue, { width: "narrow", context: "formatting" });
    default:
      return localize.dayPeriod(dayPeriodEnumValue, { width: "wide", context: "formatting" });
  }
}, b: function(date, token, localize) {
  var dayPeriodEnumValue, hours = date.getUTCHours();
  switch (dayPeriodEnumValue = 12 === hours ? dayPeriodEnum_noon : 0 === hours ? dayPeriodEnum_midnight : hours / 12 >= 1 ? "pm" : "am", token) {
    case "b":
    case "bb":
      return localize.dayPeriod(dayPeriodEnumValue, { width: "abbreviated", context: "formatting" });
    case "bbb":
      return localize.dayPeriod(dayPeriodEnumValue, { width: "abbreviated", context: "formatting" }).toLowerCase();
    case "bbbbb":
      return localize.dayPeriod(dayPeriodEnumValue, { width: "narrow", context: "formatting" });
    default:
      return localize.dayPeriod(dayPeriodEnumValue, { width: "wide", context: "formatting" });
  }
}, B: function(date, token, localize) {
  var dayPeriodEnumValue, hours = date.getUTCHours();
  switch (dayPeriodEnumValue = hours >= 17 ? dayPeriodEnum_evening : hours >= 12 ? dayPeriodEnum_afternoon : hours >= 4 ? dayPeriodEnum_morning : dayPeriodEnum_night, token) {
    case "B":
    case "BB":
    case "BBB":
      return localize.dayPeriod(dayPeriodEnumValue, { width: "abbreviated", context: "formatting" });
    case "BBBBB":
      return localize.dayPeriod(dayPeriodEnumValue, { width: "narrow", context: "formatting" });
    default:
      return localize.dayPeriod(dayPeriodEnumValue, { width: "wide", context: "formatting" });
  }
}, h: function(date, token, localize) {
  if ("ho" === token) {
    var hours = date.getUTCHours() % 12;
    return 0 === hours && (hours = 12), localize.ordinalNumber(hours, { unit: "hour" });
  }
  return formatters$1_h(date, token);
}, H: function(date, token, localize) {
  return "Ho" === token ? localize.ordinalNumber(date.getUTCHours(), { unit: "hour" }) : formatters$1_H(date, token);
}, K: function(date, token, localize) {
  var hours = date.getUTCHours() % 12;
  return "Ko" === token ? localize.ordinalNumber(hours, { unit: "hour" }) : addLeadingZeros(hours, token.length);
}, k: function(date, token, localize) {
  var hours = date.getUTCHours();
  return 0 === hours && (hours = 24), "ko" === token ? localize.ordinalNumber(hours, { unit: "hour" }) : addLeadingZeros(hours, token.length);
}, m: function(date, token, localize) {
  return "mo" === token ? localize.ordinalNumber(date.getUTCMinutes(), { unit: "minute" }) : formatters$1_m(date, token);
}, s: function(date, token, localize) {
  return "so" === token ? localize.ordinalNumber(date.getUTCSeconds(), { unit: "second" }) : formatters$1_s(date, token);
}, S: function(date, token) {
  return formatters$1_S(date, token);
}, X: function(date, token, _localize, options) {
  var timezoneOffset = (options._originalDate || date).getTimezoneOffset();
  if (0 === timezoneOffset)
    return "Z";
  switch (token) {
    case "X":
      return formatTimezoneWithOptionalMinutes(timezoneOffset);
    case "XXXX":
    case "XX":
      return formatTimezone(timezoneOffset);
    default:
      return formatTimezone(timezoneOffset, ":");
  }
}, x: function(date, token, _localize, options) {
  var timezoneOffset = (options._originalDate || date).getTimezoneOffset();
  switch (token) {
    case "x":
      return formatTimezoneWithOptionalMinutes(timezoneOffset);
    case "xxxx":
    case "xx":
      return formatTimezone(timezoneOffset);
    default:
      return formatTimezone(timezoneOffset, ":");
  }
}, O: function(date, token, _localize, options) {
  var timezoneOffset = (options._originalDate || date).getTimezoneOffset();
  switch (token) {
    case "O":
    case "OO":
    case "OOO":
      return "GMT" + formatTimezoneShort(timezoneOffset, ":");
    default:
      return "GMT" + formatTimezone(timezoneOffset, ":");
  }
}, z: function(date, token, _localize, options) {
  var timezoneOffset = (options._originalDate || date).getTimezoneOffset();
  switch (token) {
    case "z":
    case "zz":
    case "zzz":
      return "GMT" + formatTimezoneShort(timezoneOffset, ":");
    default:
      return "GMT" + formatTimezone(timezoneOffset, ":");
  }
}, t: function(date, token, _localize, options) {
  var originalDate = options._originalDate || date;
  return addLeadingZeros(Math.floor(originalDate.getTime() / 1e3), token.length);
}, T: function(date, token, _localize, options) {
  return addLeadingZeros((options._originalDate || date).getTime(), token.length);
} };
function formatTimezoneShort(offset, dirtyDelimiter) {
  var sign = offset > 0 ? "-" : "+", absOffset = Math.abs(offset), hours = Math.floor(absOffset / 60), minutes = absOffset % 60;
  if (0 === minutes)
    return sign + String(hours);
  var delimiter = dirtyDelimiter;
  return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);
}
function formatTimezoneWithOptionalMinutes(offset, dirtyDelimiter) {
  return offset % 60 == 0 ? (offset > 0 ? "-" : "+") + addLeadingZeros(Math.abs(offset) / 60, 2) : formatTimezone(offset, dirtyDelimiter);
}
function formatTimezone(offset, dirtyDelimiter) {
  var delimiter = dirtyDelimiter || "", sign = offset > 0 ? "-" : "+", absOffset = Math.abs(offset);
  return sign + addLeadingZeros(Math.floor(absOffset / 60), 2) + delimiter + addLeadingZeros(absOffset % 60, 2);
}
var dateLongFormatter = function(pattern, formatLong) {
  switch (pattern) {
    case "P":
      return formatLong.date({ width: "short" });
    case "PP":
      return formatLong.date({ width: "medium" });
    case "PPP":
      return formatLong.date({ width: "long" });
    default:
      return formatLong.date({ width: "full" });
  }
}, timeLongFormatter = function(pattern, formatLong) {
  switch (pattern) {
    case "p":
      return formatLong.time({ width: "short" });
    case "pp":
      return formatLong.time({ width: "medium" });
    case "ppp":
      return formatLong.time({ width: "long" });
    default:
      return formatLong.time({ width: "full" });
  }
}, longFormatters = { p: timeLongFormatter, P: function(pattern, formatLong) {
  var dateTimeFormat, matchResult = pattern.match(/(P+)(p+)?/) || [], datePattern = matchResult[1], timePattern = matchResult[2];
  if (!timePattern)
    return dateLongFormatter(pattern, formatLong);
  switch (datePattern) {
    case "P":
      dateTimeFormat = formatLong.dateTime({ width: "short" });
      break;
    case "PP":
      dateTimeFormat = formatLong.dateTime({ width: "medium" });
      break;
    case "PPP":
      dateTimeFormat = formatLong.dateTime({ width: "long" });
      break;
    default:
      dateTimeFormat = formatLong.dateTime({ width: "full" });
  }
  return dateTimeFormat.replace("{{date}}", dateLongFormatter(datePattern, formatLong)).replace("{{time}}", timeLongFormatter(timePattern, formatLong));
} }, protectedDayOfYearTokens = ["D", "DD"], protectedWeekYearTokens = ["YY", "YYYY"];
function isProtectedDayOfYearToken(token) {
  return -1 !== protectedDayOfYearTokens.indexOf(token);
}
function isProtectedWeekYearToken(token) {
  return -1 !== protectedWeekYearTokens.indexOf(token);
}
function throwProtectedError(token, format2, input) {
  if ("YYYY" === token)
    throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(format2, "`) for formatting years to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
  if ("YY" === token)
    throw new RangeError("Use `yy` instead of `YY` (in `".concat(format2, "`) for formatting years to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
  if ("D" === token)
    throw new RangeError("Use `d` instead of `D` (in `".concat(format2, "`) for formatting days of the month to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
  if ("DD" === token)
    throw new RangeError("Use `dd` instead of `DD` (in `".concat(format2, "`) for formatting days of the month to the input `").concat(input, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
}
var formattingTokensRegExp$1 = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g, longFormattingTokensRegExp$1 = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g, escapedStringRegExp$1 = /^'([^]*?)'?$/, doubleQuoteRegExp$1 = /''/g, unescapedLatinCharacterRegExp$1 = /[a-zA-Z]/;
function format(dirtyDate, dirtyFormatStr, options) {
  var _ref, _options$locale, _ref2, _ref3, _ref4, _options$firstWeekCon, _options$locale2, _options$locale2$opti, _defaultOptions$local, _defaultOptions$local2, _ref5, _ref6, _ref7, _options$weekStartsOn, _options$locale3, _options$locale3$opti, _defaultOptions$local3, _defaultOptions$local4;
  requiredArgs(2, arguments);
  var formatStr = String(dirtyFormatStr), defaultOptions = getDefaultOptions(), locale$1 = null !== (_ref = null !== (_options$locale = null == options ? void 0 : options.locale) && void 0 !== _options$locale ? _options$locale : defaultOptions.locale) && void 0 !== _ref ? _ref : locale, firstWeekContainsDate = toInteger(null !== (_ref2 = null !== (_ref3 = null !== (_ref4 = null !== (_options$firstWeekCon = null == options ? void 0 : options.firstWeekContainsDate) && void 0 !== _options$firstWeekCon ? _options$firstWeekCon : null == options || null === (_options$locale2 = options.locale) || void 0 === _options$locale2 || null === (_options$locale2$opti = _options$locale2.options) || void 0 === _options$locale2$opti ? void 0 : _options$locale2$opti.firstWeekContainsDate) && void 0 !== _ref4 ? _ref4 : defaultOptions.firstWeekContainsDate) && void 0 !== _ref3 ? _ref3 : null === (_defaultOptions$local = defaultOptions.locale) || void 0 === _defaultOptions$local || null === (_defaultOptions$local2 = _defaultOptions$local.options) || void 0 === _defaultOptions$local2 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) && void 0 !== _ref2 ? _ref2 : 1);
  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7))
    throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");
  var weekStartsOn = toInteger(null !== (_ref5 = null !== (_ref6 = null !== (_ref7 = null !== (_options$weekStartsOn = null == options ? void 0 : options.weekStartsOn) && void 0 !== _options$weekStartsOn ? _options$weekStartsOn : null == options || null === (_options$locale3 = options.locale) || void 0 === _options$locale3 || null === (_options$locale3$opti = _options$locale3.options) || void 0 === _options$locale3$opti ? void 0 : _options$locale3$opti.weekStartsOn) && void 0 !== _ref7 ? _ref7 : defaultOptions.weekStartsOn) && void 0 !== _ref6 ? _ref6 : null === (_defaultOptions$local3 = defaultOptions.locale) || void 0 === _defaultOptions$local3 || null === (_defaultOptions$local4 = _defaultOptions$local3.options) || void 0 === _defaultOptions$local4 ? void 0 : _defaultOptions$local4.weekStartsOn) && void 0 !== _ref5 ? _ref5 : 0);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6))
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  if (!locale$1.localize)
    throw new RangeError("locale must contain localize property");
  if (!locale$1.formatLong)
    throw new RangeError("locale must contain formatLong property");
  var originalDate = toDate(dirtyDate);
  if (!isValid(originalDate))
    throw new RangeError("Invalid time value");
  var utcDate = subMilliseconds(originalDate, getTimezoneOffsetInMilliseconds(originalDate)), formatterOptions = { firstWeekContainsDate, weekStartsOn, locale: locale$1, _originalDate: originalDate };
  return formatStr.match(longFormattingTokensRegExp$1).map(function(substring) {
    var firstCharacter = substring[0];
    return "p" === firstCharacter || "P" === firstCharacter ? (0, longFormatters[firstCharacter])(substring, locale$1.formatLong) : substring;
  }).join("").match(formattingTokensRegExp$1).map(function(substring) {
    if ("''" === substring)
      return "'";
    var firstCharacter = substring[0];
    if ("'" === firstCharacter)
      return function(input) {
        var matched = input.match(escapedStringRegExp$1);
        if (!matched)
          return input;
        return matched[1].replace(doubleQuoteRegExp$1, "'");
      }(substring);
    var formatter = formatters[firstCharacter];
    if (formatter)
      return null != options && options.useAdditionalWeekYearTokens || !isProtectedWeekYearToken(substring) || throwProtectedError(substring, dirtyFormatStr, String(dirtyDate)), null != options && options.useAdditionalDayOfYearTokens || !isProtectedDayOfYearToken(substring) || throwProtectedError(substring, dirtyFormatStr, String(dirtyDate)), formatter(utcDate, substring, locale$1.localize, formatterOptions);
    if (firstCharacter.match(unescapedLatinCharacterRegExp$1))
      throw new RangeError("Format string contains an unescaped latin alphabet character `" + firstCharacter + "`");
    return substring;
  }).join("");
}
function assign$1(target, object) {
  if (null == target)
    throw new TypeError("assign requires that input parameter not be null or undefined");
  for (var property in object)
    Object.prototype.hasOwnProperty.call(object, property) && (target[property] = object[property]);
  return target;
}
function _arrayLikeToArray(r, a) {
  (null == a || a > r.length) && (a = r.length);
  for (var e = 0, n = Array(a); e < a; e++)
    n[e] = r[e];
  return n;
}
function _createForOfIteratorHelper(r, e) {
  var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (!t) {
    if (Array.isArray(r) || (t = function(r2, a2) {
      if (r2) {
        if ("string" == typeof r2)
          return _arrayLikeToArray(r2, a2);
        var t2 = {}.toString.call(r2).slice(8, -1);
        return "Object" === t2 && r2.constructor && (t2 = r2.constructor.name), "Map" === t2 || "Set" === t2 ? Array.from(r2) : "Arguments" === t2 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t2) ? _arrayLikeToArray(r2, a2) : void 0;
      }
    }(r)) || e) {
      t && (r = t);
      var _n = 0, F = function() {
      };
      return { s: F, n: function() {
        return _n >= r.length ? { done: true } : { done: false, value: r[_n++] };
      }, e: function(r2) {
        throw r2;
      }, f: F };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var o, a = true, u = false;
  return { s: function() {
    t = t.call(r);
  }, n: function() {
    var r2 = t.next();
    return a = r2.done, r2;
  }, e: function(r2) {
    u = true, o = r2;
  }, f: function() {
    try {
      a || null == t.return || t.return();
    } finally {
      if (u)
        throw o;
    }
  } };
}
function _assertThisInitialized(e) {
  if (void 0 === e)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function _setPrototypeOf(t, e) {
  return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t2, e2) {
    return t2.__proto__ = e2, t2;
  }, _setPrototypeOf(t, e);
}
function _inherits(t, e) {
  if ("function" != typeof e && null !== e)
    throw new TypeError("Super expression must either be null or a function");
  t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: true, configurable: true } }), Object.defineProperty(t, "prototype", { writable: false }), e && _setPrototypeOf(t, e);
}
function _getPrototypeOf(t) {
  return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t2) {
    return t2.__proto__ || Object.getPrototypeOf(t2);
  }, _getPrototypeOf(t);
}
function _isNativeReflectConstruct() {
  try {
    var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
  } catch (t2) {
  }
  return (_isNativeReflectConstruct = function() {
    return !!t;
  })();
}
function _createSuper(t) {
  var r = _isNativeReflectConstruct();
  return function() {
    var e, o = _getPrototypeOf(t);
    if (r) {
      var s = _getPrototypeOf(this).constructor;
      e = Reflect.construct(o, arguments, s);
    } else
      e = o.apply(this, arguments);
    return function(t2, e2) {
      if (e2 && ("object" == _typeof(e2) || "function" == typeof e2))
        return e2;
      if (void 0 !== e2)
        throw new TypeError("Derived constructors may only return object or undefined");
      return _assertThisInitialized(t2);
    }(this, e);
  };
}
function _classCallCheck(a, n) {
  if (!(a instanceof n))
    throw new TypeError("Cannot call a class as a function");
}
function toPropertyKey(t) {
  var i = function(t2, r) {
    if ("object" != _typeof(t2) || !t2)
      return t2;
    var e = t2[Symbol.toPrimitive];
    if (void 0 !== e) {
      var i2 = e.call(t2, r || "default");
      if ("object" != _typeof(i2))
        return i2;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r ? String : Number)(t2);
  }(t, "string");
  return "symbol" == _typeof(i) ? i : i + "";
}
function _createClass(e, r, t) {
  return r && function(e2, r2) {
    for (var t2 = 0; t2 < r2.length; t2++) {
      var o = r2[t2];
      o.enumerable = o.enumerable || false, o.configurable = true, "value" in o && (o.writable = true), Object.defineProperty(e2, toPropertyKey(o.key), o);
    }
  }(e.prototype, r), Object.defineProperty(e, "prototype", { writable: false }), e;
}
function _defineProperty(e, r, t) {
  return (r = toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: true, configurable: true, writable: true }) : e[r] = t, e;
}
var Setter = function() {
  function Setter2() {
    _classCallCheck(this, Setter2), _defineProperty(this, "priority", void 0), _defineProperty(this, "subPriority", 0);
  }
  return _createClass(Setter2, [{ key: "validate", value: function(_utcDate, _options) {
    return true;
  } }]), Setter2;
}(), ValueSetter = function(_Setter) {
  _inherits(ValueSetter2, Setter);
  var _super = _createSuper(ValueSetter2);
  function ValueSetter2(value, validateValue, setValue, priority, subPriority) {
    var _this;
    return _classCallCheck(this, ValueSetter2), (_this = _super.call(this)).value = value, _this.validateValue = validateValue, _this.setValue = setValue, _this.priority = priority, subPriority && (_this.subPriority = subPriority), _this;
  }
  return _createClass(ValueSetter2, [{ key: "validate", value: function(utcDate, options) {
    return this.validateValue(utcDate, this.value, options);
  } }, { key: "set", value: function(utcDate, flags, options) {
    return this.setValue(utcDate, flags, this.value, options);
  } }]), ValueSetter2;
}(), DateToSystemTimezoneSetter = function(_Setter2) {
  _inherits(DateToSystemTimezoneSetter2, Setter);
  var _super2 = _createSuper(DateToSystemTimezoneSetter2);
  function DateToSystemTimezoneSetter2() {
    var _this2;
    _classCallCheck(this, DateToSystemTimezoneSetter2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)
      args[_key] = arguments[_key];
    return _defineProperty(_assertThisInitialized(_this2 = _super2.call.apply(_super2, [this].concat(args))), "priority", 10), _defineProperty(_assertThisInitialized(_this2), "subPriority", -1), _this2;
  }
  return _createClass(DateToSystemTimezoneSetter2, [{ key: "set", value: function(date, flags) {
    if (flags.timestampIsSet)
      return date;
    var convertedDate = /* @__PURE__ */ new Date(0);
    return convertedDate.setFullYear(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate()), convertedDate.setHours(date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.getUTCMilliseconds()), convertedDate;
  } }]), DateToSystemTimezoneSetter2;
}(), Parser = function() {
  function Parser2() {
    _classCallCheck(this, Parser2), _defineProperty(this, "incompatibleTokens", void 0), _defineProperty(this, "priority", void 0), _defineProperty(this, "subPriority", void 0);
  }
  return _createClass(Parser2, [{ key: "run", value: function(dateString, token, match, options) {
    var result = this.parse(dateString, token, match, options);
    return result ? { setter: new ValueSetter(result.value, this.validate, this.set, this.priority, this.subPriority), rest: result.rest } : null;
  } }, { key: "validate", value: function(_utcDate, _value, _options) {
    return true;
  } }]), Parser2;
}(), EraParser = function(_Parser) {
  _inherits(EraParser2, Parser);
  var _super = _createSuper(EraParser2);
  function EraParser2() {
    var _this;
    _classCallCheck(this, EraParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)
      args[_key] = arguments[_key];
    return _defineProperty(_assertThisInitialized(_this = _super.call.apply(_super, [this].concat(args))), "priority", 140), _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["R", "u", "t", "T"]), _this;
  }
  return _createClass(EraParser2, [{ key: "parse", value: function(dateString, token, match) {
    switch (token) {
      case "G":
      case "GG":
      case "GGG":
        return match.era(dateString, { width: "abbreviated" }) || match.era(dateString, { width: "narrow" });
      case "GGGGG":
        return match.era(dateString, { width: "narrow" });
      default:
        return match.era(dateString, { width: "wide" }) || match.era(dateString, { width: "abbreviated" }) || match.era(dateString, { width: "narrow" });
    }
  } }, { key: "set", value: function(date, flags, value) {
    return flags.era = value, date.setUTCFullYear(value, 0, 1), date.setUTCHours(0, 0, 0, 0), date;
  } }]), EraParser2;
}(), numericPatterns_month = /^(1[0-2]|0?\d)/, numericPatterns_date = /^(3[0-1]|[0-2]?\d)/, numericPatterns_dayOfYear = /^(36[0-6]|3[0-5]\d|[0-2]?\d?\d)/, numericPatterns_week = /^(5[0-3]|[0-4]?\d)/, numericPatterns_hour23h = /^(2[0-3]|[0-1]?\d)/, numericPatterns_hour24h = /^(2[0-4]|[0-1]?\d)/, numericPatterns_hour11h = /^(1[0-1]|0?\d)/, numericPatterns_hour12h = /^(1[0-2]|0?\d)/, numericPatterns_minute = /^[0-5]?\d/, numericPatterns_second = /^[0-5]?\d/, numericPatterns_singleDigit = /^\d/, numericPatterns_twoDigits = /^\d{1,2}/, numericPatterns_threeDigits = /^\d{1,3}/, numericPatterns_fourDigits = /^\d{1,4}/, numericPatterns_anyDigitsSigned = /^-?\d+/, numericPatterns_singleDigitSigned = /^-?\d/, numericPatterns_twoDigitsSigned = /^-?\d{1,2}/, numericPatterns_threeDigitsSigned = /^-?\d{1,3}/, numericPatterns_fourDigitsSigned = /^-?\d{1,4}/, timezonePatterns_basicOptionalMinutes = /^([+-])(\d{2})(\d{2})?|Z/, timezonePatterns_basic = /^([+-])(\d{2})(\d{2})|Z/, timezonePatterns_basicOptionalSeconds = /^([+-])(\d{2})(\d{2})((\d{2}))?|Z/, timezonePatterns_extended = /^([+-])(\d{2}):(\d{2})|Z/, timezonePatterns_extendedOptionalSeconds = /^([+-])(\d{2}):(\d{2})(:(\d{2}))?|Z/;
function mapValue(parseFnResult, mapFn) {
  return parseFnResult ? { value: mapFn(parseFnResult.value), rest: parseFnResult.rest } : parseFnResult;
}
function parseNumericPattern(pattern, dateString) {
  var matchResult = dateString.match(pattern);
  return matchResult ? { value: parseInt(matchResult[0], 10), rest: dateString.slice(matchResult[0].length) } : null;
}
function parseTimezonePattern(pattern, dateString) {
  var matchResult = dateString.match(pattern);
  return matchResult ? "Z" === matchResult[0] ? { value: 0, rest: dateString.slice(1) } : { value: ("+" === matchResult[1] ? 1 : -1) * (36e5 * (matchResult[2] ? parseInt(matchResult[2], 10) : 0) + 6e4 * (matchResult[3] ? parseInt(matchResult[3], 10) : 0) + 1e3 * (matchResult[5] ? parseInt(matchResult[5], 10) : 0)), rest: dateString.slice(matchResult[0].length) } : null;
}
function parseAnyDigitsSigned(dateString) {
  return parseNumericPattern(numericPatterns_anyDigitsSigned, dateString);
}
function parseNDigits(n, dateString) {
  switch (n) {
    case 1:
      return parseNumericPattern(numericPatterns_singleDigit, dateString);
    case 2:
      return parseNumericPattern(numericPatterns_twoDigits, dateString);
    case 3:
      return parseNumericPattern(numericPatterns_threeDigits, dateString);
    case 4:
      return parseNumericPattern(numericPatterns_fourDigits, dateString);
    default:
      return parseNumericPattern(new RegExp("^\\d{1," + n + "}"), dateString);
  }
}
function parseNDigitsSigned(n, dateString) {
  switch (n) {
    case 1:
      return parseNumericPattern(numericPatterns_singleDigitSigned, dateString);
    case 2:
      return parseNumericPattern(numericPatterns_twoDigitsSigned, dateString);
    case 3:
      return parseNumericPattern(numericPatterns_threeDigitsSigned, dateString);
    case 4:
      return parseNumericPattern(numericPatterns_fourDigitsSigned, dateString);
    default:
      return parseNumericPattern(new RegExp("^-?\\d{1," + n + "}"), dateString);
  }
}
function dayPeriodEnumToHours(dayPeriod) {
  switch (dayPeriod) {
    case "morning":
      return 4;
    case "evening":
      return 17;
    case "pm":
    case "noon":
    case "afternoon":
      return 12;
    default:
      return 0;
  }
}
function normalizeTwoDigitYear(twoDigitYear, currentYear) {
  var result, isCommonEra = currentYear > 0, absCurrentYear = isCommonEra ? currentYear : 1 - currentYear;
  if (absCurrentYear <= 50)
    result = twoDigitYear || 100;
  else {
    var rangeEnd = absCurrentYear + 50;
    result = twoDigitYear + 100 * Math.floor(rangeEnd / 100) - (twoDigitYear >= rangeEnd % 100 ? 100 : 0);
  }
  return isCommonEra ? result : 1 - result;
}
function isLeapYearIndex(year) {
  return year % 400 == 0 || year % 4 == 0 && year % 100 != 0;
}
var YearParser = function(_Parser) {
  _inherits(YearParser2, Parser);
  var _super = _createSuper(YearParser2);
  function YearParser2() {
    var _this;
    _classCallCheck(this, YearParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)
      args[_key] = arguments[_key];
    return _defineProperty(_assertThisInitialized(_this = _super.call.apply(_super, [this].concat(args))), "priority", 130), _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["Y", "R", "u", "w", "I", "i", "e", "c", "t", "T"]), _this;
  }
  return _createClass(YearParser2, [{ key: "parse", value: function(dateString, token, match) {
    var valueCallback = function(year) {
      return { year, isTwoDigitYear: "yy" === token };
    };
    switch (token) {
      case "y":
        return mapValue(parseNDigits(4, dateString), valueCallback);
      case "yo":
        return mapValue(match.ordinalNumber(dateString, { unit: "year" }), valueCallback);
      default:
        return mapValue(parseNDigits(token.length, dateString), valueCallback);
    }
  } }, { key: "validate", value: function(_date, value) {
    return value.isTwoDigitYear || value.year > 0;
  } }, { key: "set", value: function(date, flags, value) {
    var currentYear = date.getUTCFullYear();
    if (value.isTwoDigitYear) {
      var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);
      return date.setUTCFullYear(normalizedTwoDigitYear, 0, 1), date.setUTCHours(0, 0, 0, 0), date;
    }
    var year = "era" in flags && 1 !== flags.era ? 1 - value.year : value.year;
    return date.setUTCFullYear(year, 0, 1), date.setUTCHours(0, 0, 0, 0), date;
  } }]), YearParser2;
}(), LocalWeekYearParser = function(_Parser) {
  _inherits(LocalWeekYearParser2, Parser);
  var _super = _createSuper(LocalWeekYearParser2);
  function LocalWeekYearParser2() {
    var _this;
    _classCallCheck(this, LocalWeekYearParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)
      args[_key] = arguments[_key];
    return _defineProperty(_assertThisInitialized(_this = _super.call.apply(_super, [this].concat(args))), "priority", 130), _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["y", "R", "u", "Q", "q", "M", "L", "I", "d", "D", "i", "t", "T"]), _this;
  }
  return _createClass(LocalWeekYearParser2, [{ key: "parse", value: function(dateString, token, match) {
    var valueCallback = function(year) {
      return { year, isTwoDigitYear: "YY" === token };
    };
    switch (token) {
      case "Y":
        return mapValue(parseNDigits(4, dateString), valueCallback);
      case "Yo":
        return mapValue(match.ordinalNumber(dateString, { unit: "year" }), valueCallback);
      default:
        return mapValue(parseNDigits(token.length, dateString), valueCallback);
    }
  } }, { key: "validate", value: function(_date, value) {
    return value.isTwoDigitYear || value.year > 0;
  } }, { key: "set", value: function(date, flags, value, options) {
    var currentYear = getUTCWeekYear(date, options);
    if (value.isTwoDigitYear) {
      var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);
      return date.setUTCFullYear(normalizedTwoDigitYear, 0, options.firstWeekContainsDate), date.setUTCHours(0, 0, 0, 0), startOfUTCWeek(date, options);
    }
    var year = "era" in flags && 1 !== flags.era ? 1 - value.year : value.year;
    return date.setUTCFullYear(year, 0, options.firstWeekContainsDate), date.setUTCHours(0, 0, 0, 0), startOfUTCWeek(date, options);
  } }]), LocalWeekYearParser2;
}(), ISOWeekYearParser = function(_Parser) {
  _inherits(ISOWeekYearParser2, Parser);
  var _super = _createSuper(ISOWeekYearParser2);
  function ISOWeekYearParser2() {
    var _this;
    _classCallCheck(this, ISOWeekYearParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)
      args[_key] = arguments[_key];
    return _defineProperty(_assertThisInitialized(_this = _super.call.apply(_super, [this].concat(args))), "priority", 130), _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["G", "y", "Y", "u", "Q", "q", "M", "L", "w", "d", "D", "e", "c", "t", "T"]), _this;
  }
  return _createClass(ISOWeekYearParser2, [{ key: "parse", value: function(dateString, token) {
    return parseNDigitsSigned("R" === token ? 4 : token.length, dateString);
  } }, { key: "set", value: function(_date, _flags, value) {
    var firstWeekOfYear = /* @__PURE__ */ new Date(0);
    return firstWeekOfYear.setUTCFullYear(value, 0, 4), firstWeekOfYear.setUTCHours(0, 0, 0, 0), startOfUTCISOWeek(firstWeekOfYear);
  } }]), ISOWeekYearParser2;
}(), ExtendedYearParser = function(_Parser) {
  _inherits(ExtendedYearParser2, Parser);
  var _super = _createSuper(ExtendedYearParser2);
  function ExtendedYearParser2() {
    var _this;
    _classCallCheck(this, ExtendedYearParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)
      args[_key] = arguments[_key];
    return _defineProperty(_assertThisInitialized(_this = _super.call.apply(_super, [this].concat(args))), "priority", 130), _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["G", "y", "Y", "R", "w", "I", "i", "e", "c", "t", "T"]), _this;
  }
  return _createClass(ExtendedYearParser2, [{ key: "parse", value: function(dateString, token) {
    return parseNDigitsSigned("u" === token ? 4 : token.length, dateString);
  } }, { key: "set", value: function(date, _flags, value) {
    return date.setUTCFullYear(value, 0, 1), date.setUTCHours(0, 0, 0, 0), date;
  } }]), ExtendedYearParser2;
}(), QuarterParser = function(_Parser) {
  _inherits(QuarterParser2, Parser);
  var _super = _createSuper(QuarterParser2);
  function QuarterParser2() {
    var _this;
    _classCallCheck(this, QuarterParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)
      args[_key] = arguments[_key];
    return _defineProperty(_assertThisInitialized(_this = _super.call.apply(_super, [this].concat(args))), "priority", 120), _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["Y", "R", "q", "M", "L", "w", "I", "d", "D", "i", "e", "c", "t", "T"]), _this;
  }
  return _createClass(QuarterParser2, [{ key: "parse", value: function(dateString, token, match) {
    switch (token) {
      case "Q":
      case "QQ":
        return parseNDigits(token.length, dateString);
      case "Qo":
        return match.ordinalNumber(dateString, { unit: "quarter" });
      case "QQQ":
        return match.quarter(dateString, { width: "abbreviated", context: "formatting" }) || match.quarter(dateString, { width: "narrow", context: "formatting" });
      case "QQQQQ":
        return match.quarter(dateString, { width: "narrow", context: "formatting" });
      default:
        return match.quarter(dateString, { width: "wide", context: "formatting" }) || match.quarter(dateString, { width: "abbreviated", context: "formatting" }) || match.quarter(dateString, { width: "narrow", context: "formatting" });
    }
  } }, { key: "validate", value: function(_date, value) {
    return value >= 1 && value <= 4;
  } }, { key: "set", value: function(date, _flags, value) {
    return date.setUTCMonth(3 * (value - 1), 1), date.setUTCHours(0, 0, 0, 0), date;
  } }]), QuarterParser2;
}(), StandAloneQuarterParser = function(_Parser) {
  _inherits(StandAloneQuarterParser2, Parser);
  var _super = _createSuper(StandAloneQuarterParser2);
  function StandAloneQuarterParser2() {
    var _this;
    _classCallCheck(this, StandAloneQuarterParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)
      args[_key] = arguments[_key];
    return _defineProperty(_assertThisInitialized(_this = _super.call.apply(_super, [this].concat(args))), "priority", 120), _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["Y", "R", "Q", "M", "L", "w", "I", "d", "D", "i", "e", "c", "t", "T"]), _this;
  }
  return _createClass(StandAloneQuarterParser2, [{ key: "parse", value: function(dateString, token, match) {
    switch (token) {
      case "q":
      case "qq":
        return parseNDigits(token.length, dateString);
      case "qo":
        return match.ordinalNumber(dateString, { unit: "quarter" });
      case "qqq":
        return match.quarter(dateString, { width: "abbreviated", context: "standalone" }) || match.quarter(dateString, { width: "narrow", context: "standalone" });
      case "qqqqq":
        return match.quarter(dateString, { width: "narrow", context: "standalone" });
      default:
        return match.quarter(dateString, { width: "wide", context: "standalone" }) || match.quarter(dateString, { width: "abbreviated", context: "standalone" }) || match.quarter(dateString, { width: "narrow", context: "standalone" });
    }
  } }, { key: "validate", value: function(_date, value) {
    return value >= 1 && value <= 4;
  } }, { key: "set", value: function(date, _flags, value) {
    return date.setUTCMonth(3 * (value - 1), 1), date.setUTCHours(0, 0, 0, 0), date;
  } }]), StandAloneQuarterParser2;
}(), MonthParser = function(_Parser) {
  _inherits(MonthParser2, Parser);
  var _super = _createSuper(MonthParser2);
  function MonthParser2() {
    var _this;
    _classCallCheck(this, MonthParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)
      args[_key] = arguments[_key];
    return _defineProperty(_assertThisInitialized(_this = _super.call.apply(_super, [this].concat(args))), "incompatibleTokens", ["Y", "R", "q", "Q", "L", "w", "I", "D", "i", "e", "c", "t", "T"]), _defineProperty(_assertThisInitialized(_this), "priority", 110), _this;
  }
  return _createClass(MonthParser2, [{ key: "parse", value: function(dateString, token, match) {
    var valueCallback = function(value) {
      return value - 1;
    };
    switch (token) {
      case "M":
        return mapValue(parseNumericPattern(numericPatterns_month, dateString), valueCallback);
      case "MM":
        return mapValue(parseNDigits(2, dateString), valueCallback);
      case "Mo":
        return mapValue(match.ordinalNumber(dateString, { unit: "month" }), valueCallback);
      case "MMM":
        return match.month(dateString, { width: "abbreviated", context: "formatting" }) || match.month(dateString, { width: "narrow", context: "formatting" });
      case "MMMMM":
        return match.month(dateString, { width: "narrow", context: "formatting" });
      default:
        return match.month(dateString, { width: "wide", context: "formatting" }) || match.month(dateString, { width: "abbreviated", context: "formatting" }) || match.month(dateString, { width: "narrow", context: "formatting" });
    }
  } }, { key: "validate", value: function(_date, value) {
    return value >= 0 && value <= 11;
  } }, { key: "set", value: function(date, _flags, value) {
    return date.setUTCMonth(value, 1), date.setUTCHours(0, 0, 0, 0), date;
  } }]), MonthParser2;
}(), StandAloneMonthParser = function(_Parser) {
  _inherits(StandAloneMonthParser2, Parser);
  var _super = _createSuper(StandAloneMonthParser2);
  function StandAloneMonthParser2() {
    var _this;
    _classCallCheck(this, StandAloneMonthParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)
      args[_key] = arguments[_key];
    return _defineProperty(_assertThisInitialized(_this = _super.call.apply(_super, [this].concat(args))), "priority", 110), _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["Y", "R", "q", "Q", "M", "w", "I", "D", "i", "e", "c", "t", "T"]), _this;
  }
  return _createClass(StandAloneMonthParser2, [{ key: "parse", value: function(dateString, token, match) {
    var valueCallback = function(value) {
      return value - 1;
    };
    switch (token) {
      case "L":
        return mapValue(parseNumericPattern(numericPatterns_month, dateString), valueCallback);
      case "LL":
        return mapValue(parseNDigits(2, dateString), valueCallback);
      case "Lo":
        return mapValue(match.ordinalNumber(dateString, { unit: "month" }), valueCallback);
      case "LLL":
        return match.month(dateString, { width: "abbreviated", context: "standalone" }) || match.month(dateString, { width: "narrow", context: "standalone" });
      case "LLLLL":
        return match.month(dateString, { width: "narrow", context: "standalone" });
      default:
        return match.month(dateString, { width: "wide", context: "standalone" }) || match.month(dateString, { width: "abbreviated", context: "standalone" }) || match.month(dateString, { width: "narrow", context: "standalone" });
    }
  } }, { key: "validate", value: function(_date, value) {
    return value >= 0 && value <= 11;
  } }, { key: "set", value: function(date, _flags, value) {
    return date.setUTCMonth(value, 1), date.setUTCHours(0, 0, 0, 0), date;
  } }]), StandAloneMonthParser2;
}();
var LocalWeekParser = function(_Parser) {
  _inherits(LocalWeekParser2, Parser);
  var _super = _createSuper(LocalWeekParser2);
  function LocalWeekParser2() {
    var _this;
    _classCallCheck(this, LocalWeekParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)
      args[_key] = arguments[_key];
    return _defineProperty(_assertThisInitialized(_this = _super.call.apply(_super, [this].concat(args))), "priority", 100), _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["y", "R", "u", "q", "Q", "M", "L", "I", "d", "D", "i", "t", "T"]), _this;
  }
  return _createClass(LocalWeekParser2, [{ key: "parse", value: function(dateString, token, match) {
    switch (token) {
      case "w":
        return parseNumericPattern(numericPatterns_week, dateString);
      case "wo":
        return match.ordinalNumber(dateString, { unit: "week" });
      default:
        return parseNDigits(token.length, dateString);
    }
  } }, { key: "validate", value: function(_date, value) {
    return value >= 1 && value <= 53;
  } }, { key: "set", value: function(date, _flags, value, options) {
    return startOfUTCWeek(function(dirtyDate, dirtyWeek, options2) {
      requiredArgs(2, arguments);
      var date2 = toDate(dirtyDate), week = toInteger(dirtyWeek), diff = getUTCWeek(date2, options2) - week;
      return date2.setUTCDate(date2.getUTCDate() - 7 * diff), date2;
    }(date, value, options), options);
  } }]), LocalWeekParser2;
}();
var ISOWeekParser = function(_Parser) {
  _inherits(ISOWeekParser2, Parser);
  var _super = _createSuper(ISOWeekParser2);
  function ISOWeekParser2() {
    var _this;
    _classCallCheck(this, ISOWeekParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)
      args[_key] = arguments[_key];
    return _defineProperty(_assertThisInitialized(_this = _super.call.apply(_super, [this].concat(args))), "priority", 100), _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["y", "Y", "u", "q", "Q", "M", "L", "w", "d", "D", "e", "c", "t", "T"]), _this;
  }
  return _createClass(ISOWeekParser2, [{ key: "parse", value: function(dateString, token, match) {
    switch (token) {
      case "I":
        return parseNumericPattern(numericPatterns_week, dateString);
      case "Io":
        return match.ordinalNumber(dateString, { unit: "week" });
      default:
        return parseNDigits(token.length, dateString);
    }
  } }, { key: "validate", value: function(_date, value) {
    return value >= 1 && value <= 53;
  } }, { key: "set", value: function(date, _flags, value) {
    return startOfUTCISOWeek(function(dirtyDate, dirtyISOWeek) {
      requiredArgs(2, arguments);
      var date2 = toDate(dirtyDate), isoWeek = toInteger(dirtyISOWeek), diff = getUTCISOWeek(date2) - isoWeek;
      return date2.setUTCDate(date2.getUTCDate() - 7 * diff), date2;
    }(date, value));
  } }]), ISOWeekParser2;
}(), DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], DAYS_IN_MONTH_LEAP_YEAR = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], DateParser = function(_Parser) {
  _inherits(DateParser2, Parser);
  var _super = _createSuper(DateParser2);
  function DateParser2() {
    var _this;
    _classCallCheck(this, DateParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)
      args[_key] = arguments[_key];
    return _defineProperty(_assertThisInitialized(_this = _super.call.apply(_super, [this].concat(args))), "priority", 90), _defineProperty(_assertThisInitialized(_this), "subPriority", 1), _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["Y", "R", "q", "Q", "w", "I", "D", "i", "e", "c", "t", "T"]), _this;
  }
  return _createClass(DateParser2, [{ key: "parse", value: function(dateString, token, match) {
    switch (token) {
      case "d":
        return parseNumericPattern(numericPatterns_date, dateString);
      case "do":
        return match.ordinalNumber(dateString, { unit: "date" });
      default:
        return parseNDigits(token.length, dateString);
    }
  } }, { key: "validate", value: function(date, value) {
    var isLeapYear = isLeapYearIndex(date.getUTCFullYear()), month = date.getUTCMonth();
    return isLeapYear ? value >= 1 && value <= DAYS_IN_MONTH_LEAP_YEAR[month] : value >= 1 && value <= DAYS_IN_MONTH[month];
  } }, { key: "set", value: function(date, _flags, value) {
    return date.setUTCDate(value), date.setUTCHours(0, 0, 0, 0), date;
  } }]), DateParser2;
}(), DayOfYearParser = function(_Parser) {
  _inherits(DayOfYearParser2, Parser);
  var _super = _createSuper(DayOfYearParser2);
  function DayOfYearParser2() {
    var _this;
    _classCallCheck(this, DayOfYearParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)
      args[_key] = arguments[_key];
    return _defineProperty(_assertThisInitialized(_this = _super.call.apply(_super, [this].concat(args))), "priority", 90), _defineProperty(_assertThisInitialized(_this), "subpriority", 1), _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["Y", "R", "q", "Q", "M", "L", "w", "I", "d", "E", "i", "e", "c", "t", "T"]), _this;
  }
  return _createClass(DayOfYearParser2, [{ key: "parse", value: function(dateString, token, match) {
    switch (token) {
      case "D":
      case "DD":
        return parseNumericPattern(numericPatterns_dayOfYear, dateString);
      case "Do":
        return match.ordinalNumber(dateString, { unit: "date" });
      default:
        return parseNDigits(token.length, dateString);
    }
  } }, { key: "validate", value: function(date, value) {
    return isLeapYearIndex(date.getUTCFullYear()) ? value >= 1 && value <= 366 : value >= 1 && value <= 365;
  } }, { key: "set", value: function(date, _flags, value) {
    return date.setUTCMonth(0, value), date.setUTCHours(0, 0, 0, 0), date;
  } }]), DayOfYearParser2;
}();
function setUTCDay(dirtyDate, dirtyDay, options) {
  var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
  requiredArgs(2, arguments);
  var defaultOptions = getDefaultOptions(), weekStartsOn = toInteger(null !== (_ref = null !== (_ref2 = null !== (_ref3 = null !== (_options$weekStartsOn = null == options ? void 0 : options.weekStartsOn) && void 0 !== _options$weekStartsOn ? _options$weekStartsOn : null == options || null === (_options$locale = options.locale) || void 0 === _options$locale || null === (_options$locale$optio = _options$locale.options) || void 0 === _options$locale$optio ? void 0 : _options$locale$optio.weekStartsOn) && void 0 !== _ref3 ? _ref3 : defaultOptions.weekStartsOn) && void 0 !== _ref2 ? _ref2 : null === (_defaultOptions$local = defaultOptions.locale) || void 0 === _defaultOptions$local || null === (_defaultOptions$local2 = _defaultOptions$local.options) || void 0 === _defaultOptions$local2 ? void 0 : _defaultOptions$local2.weekStartsOn) && void 0 !== _ref ? _ref : 0);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6))
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  var date = toDate(dirtyDate), day = toInteger(dirtyDay), diff = ((day % 7 + 7) % 7 < weekStartsOn ? 7 : 0) + day - date.getUTCDay();
  return date.setUTCDate(date.getUTCDate() + diff), date;
}
var DayParser = function(_Parser) {
  _inherits(DayParser2, Parser);
  var _super = _createSuper(DayParser2);
  function DayParser2() {
    var _this;
    _classCallCheck(this, DayParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)
      args[_key] = arguments[_key];
    return _defineProperty(_assertThisInitialized(_this = _super.call.apply(_super, [this].concat(args))), "priority", 90), _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["D", "i", "e", "c", "t", "T"]), _this;
  }
  return _createClass(DayParser2, [{ key: "parse", value: function(dateString, token, match) {
    switch (token) {
      case "E":
      case "EE":
      case "EEE":
        return match.day(dateString, { width: "abbreviated", context: "formatting" }) || match.day(dateString, { width: "short", context: "formatting" }) || match.day(dateString, { width: "narrow", context: "formatting" });
      case "EEEEE":
        return match.day(dateString, { width: "narrow", context: "formatting" });
      case "EEEEEE":
        return match.day(dateString, { width: "short", context: "formatting" }) || match.day(dateString, { width: "narrow", context: "formatting" });
      default:
        return match.day(dateString, { width: "wide", context: "formatting" }) || match.day(dateString, { width: "abbreviated", context: "formatting" }) || match.day(dateString, { width: "short", context: "formatting" }) || match.day(dateString, { width: "narrow", context: "formatting" });
    }
  } }, { key: "validate", value: function(_date, value) {
    return value >= 0 && value <= 6;
  } }, { key: "set", value: function(date, _flags, value, options) {
    return (date = setUTCDay(date, value, options)).setUTCHours(0, 0, 0, 0), date;
  } }]), DayParser2;
}(), LocalDayParser = function(_Parser) {
  _inherits(LocalDayParser2, Parser);
  var _super = _createSuper(LocalDayParser2);
  function LocalDayParser2() {
    var _this;
    _classCallCheck(this, LocalDayParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)
      args[_key] = arguments[_key];
    return _defineProperty(_assertThisInitialized(_this = _super.call.apply(_super, [this].concat(args))), "priority", 90), _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["y", "R", "u", "q", "Q", "M", "L", "I", "d", "D", "E", "i", "c", "t", "T"]), _this;
  }
  return _createClass(LocalDayParser2, [{ key: "parse", value: function(dateString, token, match, options) {
    var valueCallback = function(value) {
      var wholeWeekDays = 7 * Math.floor((value - 1) / 7);
      return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays;
    };
    switch (token) {
      case "e":
      case "ee":
        return mapValue(parseNDigits(token.length, dateString), valueCallback);
      case "eo":
        return mapValue(match.ordinalNumber(dateString, { unit: "day" }), valueCallback);
      case "eee":
        return match.day(dateString, { width: "abbreviated", context: "formatting" }) || match.day(dateString, { width: "short", context: "formatting" }) || match.day(dateString, { width: "narrow", context: "formatting" });
      case "eeeee":
        return match.day(dateString, { width: "narrow", context: "formatting" });
      case "eeeeee":
        return match.day(dateString, { width: "short", context: "formatting" }) || match.day(dateString, { width: "narrow", context: "formatting" });
      default:
        return match.day(dateString, { width: "wide", context: "formatting" }) || match.day(dateString, { width: "abbreviated", context: "formatting" }) || match.day(dateString, { width: "short", context: "formatting" }) || match.day(dateString, { width: "narrow", context: "formatting" });
    }
  } }, { key: "validate", value: function(_date, value) {
    return value >= 0 && value <= 6;
  } }, { key: "set", value: function(date, _flags, value, options) {
    return (date = setUTCDay(date, value, options)).setUTCHours(0, 0, 0, 0), date;
  } }]), LocalDayParser2;
}(), StandAloneLocalDayParser = function(_Parser) {
  _inherits(StandAloneLocalDayParser2, Parser);
  var _super = _createSuper(StandAloneLocalDayParser2);
  function StandAloneLocalDayParser2() {
    var _this;
    _classCallCheck(this, StandAloneLocalDayParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)
      args[_key] = arguments[_key];
    return _defineProperty(_assertThisInitialized(_this = _super.call.apply(_super, [this].concat(args))), "priority", 90), _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["y", "R", "u", "q", "Q", "M", "L", "I", "d", "D", "E", "i", "e", "t", "T"]), _this;
  }
  return _createClass(StandAloneLocalDayParser2, [{ key: "parse", value: function(dateString, token, match, options) {
    var valueCallback = function(value) {
      var wholeWeekDays = 7 * Math.floor((value - 1) / 7);
      return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays;
    };
    switch (token) {
      case "c":
      case "cc":
        return mapValue(parseNDigits(token.length, dateString), valueCallback);
      case "co":
        return mapValue(match.ordinalNumber(dateString, { unit: "day" }), valueCallback);
      case "ccc":
        return match.day(dateString, { width: "abbreviated", context: "standalone" }) || match.day(dateString, { width: "short", context: "standalone" }) || match.day(dateString, { width: "narrow", context: "standalone" });
      case "ccccc":
        return match.day(dateString, { width: "narrow", context: "standalone" });
      case "cccccc":
        return match.day(dateString, { width: "short", context: "standalone" }) || match.day(dateString, { width: "narrow", context: "standalone" });
      default:
        return match.day(dateString, { width: "wide", context: "standalone" }) || match.day(dateString, { width: "abbreviated", context: "standalone" }) || match.day(dateString, { width: "short", context: "standalone" }) || match.day(dateString, { width: "narrow", context: "standalone" });
    }
  } }, { key: "validate", value: function(_date, value) {
    return value >= 0 && value <= 6;
  } }, { key: "set", value: function(date, _flags, value, options) {
    return (date = setUTCDay(date, value, options)).setUTCHours(0, 0, 0, 0), date;
  } }]), StandAloneLocalDayParser2;
}();
var ISODayParser = function(_Parser) {
  _inherits(ISODayParser2, Parser);
  var _super = _createSuper(ISODayParser2);
  function ISODayParser2() {
    var _this;
    _classCallCheck(this, ISODayParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)
      args[_key] = arguments[_key];
    return _defineProperty(_assertThisInitialized(_this = _super.call.apply(_super, [this].concat(args))), "priority", 90), _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["y", "Y", "u", "q", "Q", "M", "L", "w", "d", "D", "E", "e", "c", "t", "T"]), _this;
  }
  return _createClass(ISODayParser2, [{ key: "parse", value: function(dateString, token, match) {
    var valueCallback = function(value) {
      return 0 === value ? 7 : value;
    };
    switch (token) {
      case "i":
      case "ii":
        return parseNDigits(token.length, dateString);
      case "io":
        return match.ordinalNumber(dateString, { unit: "day" });
      case "iii":
        return mapValue(match.day(dateString, { width: "abbreviated", context: "formatting" }) || match.day(dateString, { width: "short", context: "formatting" }) || match.day(dateString, { width: "narrow", context: "formatting" }), valueCallback);
      case "iiiii":
        return mapValue(match.day(dateString, { width: "narrow", context: "formatting" }), valueCallback);
      case "iiiiii":
        return mapValue(match.day(dateString, { width: "short", context: "formatting" }) || match.day(dateString, { width: "narrow", context: "formatting" }), valueCallback);
      default:
        return mapValue(match.day(dateString, { width: "wide", context: "formatting" }) || match.day(dateString, { width: "abbreviated", context: "formatting" }) || match.day(dateString, { width: "short", context: "formatting" }) || match.day(dateString, { width: "narrow", context: "formatting" }), valueCallback);
    }
  } }, { key: "validate", value: function(_date, value) {
    return value >= 1 && value <= 7;
  } }, { key: "set", value: function(date, _flags, value) {
    return date = function(dirtyDate, dirtyDay) {
      requiredArgs(2, arguments);
      var day = toInteger(dirtyDay);
      day % 7 == 0 && (day -= 7);
      var date2 = toDate(dirtyDate), diff = ((day % 7 + 7) % 7 < 1 ? 7 : 0) + day - date2.getUTCDay();
      return date2.setUTCDate(date2.getUTCDate() + diff), date2;
    }(date, value), date.setUTCHours(0, 0, 0, 0), date;
  } }]), ISODayParser2;
}(), AMPMParser = function(_Parser) {
  _inherits(AMPMParser2, Parser);
  var _super = _createSuper(AMPMParser2);
  function AMPMParser2() {
    var _this;
    _classCallCheck(this, AMPMParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)
      args[_key] = arguments[_key];
    return _defineProperty(_assertThisInitialized(_this = _super.call.apply(_super, [this].concat(args))), "priority", 80), _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["b", "B", "H", "k", "t", "T"]), _this;
  }
  return _createClass(AMPMParser2, [{ key: "parse", value: function(dateString, token, match) {
    switch (token) {
      case "a":
      case "aa":
      case "aaa":
        return match.dayPeriod(dateString, { width: "abbreviated", context: "formatting" }) || match.dayPeriod(dateString, { width: "narrow", context: "formatting" });
      case "aaaaa":
        return match.dayPeriod(dateString, { width: "narrow", context: "formatting" });
      default:
        return match.dayPeriod(dateString, { width: "wide", context: "formatting" }) || match.dayPeriod(dateString, { width: "abbreviated", context: "formatting" }) || match.dayPeriod(dateString, { width: "narrow", context: "formatting" });
    }
  } }, { key: "set", value: function(date, _flags, value) {
    return date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0), date;
  } }]), AMPMParser2;
}(), AMPMMidnightParser = function(_Parser) {
  _inherits(AMPMMidnightParser2, Parser);
  var _super = _createSuper(AMPMMidnightParser2);
  function AMPMMidnightParser2() {
    var _this;
    _classCallCheck(this, AMPMMidnightParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)
      args[_key] = arguments[_key];
    return _defineProperty(_assertThisInitialized(_this = _super.call.apply(_super, [this].concat(args))), "priority", 80), _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["a", "B", "H", "k", "t", "T"]), _this;
  }
  return _createClass(AMPMMidnightParser2, [{ key: "parse", value: function(dateString, token, match) {
    switch (token) {
      case "b":
      case "bb":
      case "bbb":
        return match.dayPeriod(dateString, { width: "abbreviated", context: "formatting" }) || match.dayPeriod(dateString, { width: "narrow", context: "formatting" });
      case "bbbbb":
        return match.dayPeriod(dateString, { width: "narrow", context: "formatting" });
      default:
        return match.dayPeriod(dateString, { width: "wide", context: "formatting" }) || match.dayPeriod(dateString, { width: "abbreviated", context: "formatting" }) || match.dayPeriod(dateString, { width: "narrow", context: "formatting" });
    }
  } }, { key: "set", value: function(date, _flags, value) {
    return date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0), date;
  } }]), AMPMMidnightParser2;
}(), DayPeriodParser = function(_Parser) {
  _inherits(DayPeriodParser2, Parser);
  var _super = _createSuper(DayPeriodParser2);
  function DayPeriodParser2() {
    var _this;
    _classCallCheck(this, DayPeriodParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)
      args[_key] = arguments[_key];
    return _defineProperty(_assertThisInitialized(_this = _super.call.apply(_super, [this].concat(args))), "priority", 80), _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["a", "b", "t", "T"]), _this;
  }
  return _createClass(DayPeriodParser2, [{ key: "parse", value: function(dateString, token, match) {
    switch (token) {
      case "B":
      case "BB":
      case "BBB":
        return match.dayPeriod(dateString, { width: "abbreviated", context: "formatting" }) || match.dayPeriod(dateString, { width: "narrow", context: "formatting" });
      case "BBBBB":
        return match.dayPeriod(dateString, { width: "narrow", context: "formatting" });
      default:
        return match.dayPeriod(dateString, { width: "wide", context: "formatting" }) || match.dayPeriod(dateString, { width: "abbreviated", context: "formatting" }) || match.dayPeriod(dateString, { width: "narrow", context: "formatting" });
    }
  } }, { key: "set", value: function(date, _flags, value) {
    return date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0), date;
  } }]), DayPeriodParser2;
}(), Hour1to12Parser = function(_Parser) {
  _inherits(Hour1to12Parser2, Parser);
  var _super = _createSuper(Hour1to12Parser2);
  function Hour1to12Parser2() {
    var _this;
    _classCallCheck(this, Hour1to12Parser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)
      args[_key] = arguments[_key];
    return _defineProperty(_assertThisInitialized(_this = _super.call.apply(_super, [this].concat(args))), "priority", 70), _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["H", "K", "k", "t", "T"]), _this;
  }
  return _createClass(Hour1to12Parser2, [{ key: "parse", value: function(dateString, token, match) {
    switch (token) {
      case "h":
        return parseNumericPattern(numericPatterns_hour12h, dateString);
      case "ho":
        return match.ordinalNumber(dateString, { unit: "hour" });
      default:
        return parseNDigits(token.length, dateString);
    }
  } }, { key: "validate", value: function(_date, value) {
    return value >= 1 && value <= 12;
  } }, { key: "set", value: function(date, _flags, value) {
    var isPM = date.getUTCHours() >= 12;
    return isPM && value < 12 ? date.setUTCHours(value + 12, 0, 0, 0) : isPM || 12 !== value ? date.setUTCHours(value, 0, 0, 0) : date.setUTCHours(0, 0, 0, 0), date;
  } }]), Hour1to12Parser2;
}(), Hour0to23Parser = function(_Parser) {
  _inherits(Hour0to23Parser2, Parser);
  var _super = _createSuper(Hour0to23Parser2);
  function Hour0to23Parser2() {
    var _this;
    _classCallCheck(this, Hour0to23Parser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)
      args[_key] = arguments[_key];
    return _defineProperty(_assertThisInitialized(_this = _super.call.apply(_super, [this].concat(args))), "priority", 70), _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["a", "b", "h", "K", "k", "t", "T"]), _this;
  }
  return _createClass(Hour0to23Parser2, [{ key: "parse", value: function(dateString, token, match) {
    switch (token) {
      case "H":
        return parseNumericPattern(numericPatterns_hour23h, dateString);
      case "Ho":
        return match.ordinalNumber(dateString, { unit: "hour" });
      default:
        return parseNDigits(token.length, dateString);
    }
  } }, { key: "validate", value: function(_date, value) {
    return value >= 0 && value <= 23;
  } }, { key: "set", value: function(date, _flags, value) {
    return date.setUTCHours(value, 0, 0, 0), date;
  } }]), Hour0to23Parser2;
}(), Hour0To11Parser = function(_Parser) {
  _inherits(Hour0To11Parser2, Parser);
  var _super = _createSuper(Hour0To11Parser2);
  function Hour0To11Parser2() {
    var _this;
    _classCallCheck(this, Hour0To11Parser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)
      args[_key] = arguments[_key];
    return _defineProperty(_assertThisInitialized(_this = _super.call.apply(_super, [this].concat(args))), "priority", 70), _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["h", "H", "k", "t", "T"]), _this;
  }
  return _createClass(Hour0To11Parser2, [{ key: "parse", value: function(dateString, token, match) {
    switch (token) {
      case "K":
        return parseNumericPattern(numericPatterns_hour11h, dateString);
      case "Ko":
        return match.ordinalNumber(dateString, { unit: "hour" });
      default:
        return parseNDigits(token.length, dateString);
    }
  } }, { key: "validate", value: function(_date, value) {
    return value >= 0 && value <= 11;
  } }, { key: "set", value: function(date, _flags, value) {
    return date.getUTCHours() >= 12 && value < 12 ? date.setUTCHours(value + 12, 0, 0, 0) : date.setUTCHours(value, 0, 0, 0), date;
  } }]), Hour0To11Parser2;
}(), Hour1To24Parser = function(_Parser) {
  _inherits(Hour1To24Parser2, Parser);
  var _super = _createSuper(Hour1To24Parser2);
  function Hour1To24Parser2() {
    var _this;
    _classCallCheck(this, Hour1To24Parser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)
      args[_key] = arguments[_key];
    return _defineProperty(_assertThisInitialized(_this = _super.call.apply(_super, [this].concat(args))), "priority", 70), _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["a", "b", "h", "H", "K", "t", "T"]), _this;
  }
  return _createClass(Hour1To24Parser2, [{ key: "parse", value: function(dateString, token, match) {
    switch (token) {
      case "k":
        return parseNumericPattern(numericPatterns_hour24h, dateString);
      case "ko":
        return match.ordinalNumber(dateString, { unit: "hour" });
      default:
        return parseNDigits(token.length, dateString);
    }
  } }, { key: "validate", value: function(_date, value) {
    return value >= 1 && value <= 24;
  } }, { key: "set", value: function(date, _flags, value) {
    var hours = value <= 24 ? value % 24 : value;
    return date.setUTCHours(hours, 0, 0, 0), date;
  } }]), Hour1To24Parser2;
}(), MinuteParser = function(_Parser) {
  _inherits(MinuteParser2, Parser);
  var _super = _createSuper(MinuteParser2);
  function MinuteParser2() {
    var _this;
    _classCallCheck(this, MinuteParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)
      args[_key] = arguments[_key];
    return _defineProperty(_assertThisInitialized(_this = _super.call.apply(_super, [this].concat(args))), "priority", 60), _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["t", "T"]), _this;
  }
  return _createClass(MinuteParser2, [{ key: "parse", value: function(dateString, token, match) {
    switch (token) {
      case "m":
        return parseNumericPattern(numericPatterns_minute, dateString);
      case "mo":
        return match.ordinalNumber(dateString, { unit: "minute" });
      default:
        return parseNDigits(token.length, dateString);
    }
  } }, { key: "validate", value: function(_date, value) {
    return value >= 0 && value <= 59;
  } }, { key: "set", value: function(date, _flags, value) {
    return date.setUTCMinutes(value, 0, 0), date;
  } }]), MinuteParser2;
}(), SecondParser = function(_Parser) {
  _inherits(SecondParser2, Parser);
  var _super = _createSuper(SecondParser2);
  function SecondParser2() {
    var _this;
    _classCallCheck(this, SecondParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)
      args[_key] = arguments[_key];
    return _defineProperty(_assertThisInitialized(_this = _super.call.apply(_super, [this].concat(args))), "priority", 50), _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["t", "T"]), _this;
  }
  return _createClass(SecondParser2, [{ key: "parse", value: function(dateString, token, match) {
    switch (token) {
      case "s":
        return parseNumericPattern(numericPatterns_second, dateString);
      case "so":
        return match.ordinalNumber(dateString, { unit: "second" });
      default:
        return parseNDigits(token.length, dateString);
    }
  } }, { key: "validate", value: function(_date, value) {
    return value >= 0 && value <= 59;
  } }, { key: "set", value: function(date, _flags, value) {
    return date.setUTCSeconds(value, 0), date;
  } }]), SecondParser2;
}(), FractionOfSecondParser = function(_Parser) {
  _inherits(FractionOfSecondParser2, Parser);
  var _super = _createSuper(FractionOfSecondParser2);
  function FractionOfSecondParser2() {
    var _this;
    _classCallCheck(this, FractionOfSecondParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)
      args[_key] = arguments[_key];
    return _defineProperty(_assertThisInitialized(_this = _super.call.apply(_super, [this].concat(args))), "priority", 30), _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["t", "T"]), _this;
  }
  return _createClass(FractionOfSecondParser2, [{ key: "parse", value: function(dateString, token) {
    return mapValue(parseNDigits(token.length, dateString), function(value) {
      return Math.floor(value * Math.pow(10, 3 - token.length));
    });
  } }, { key: "set", value: function(date, _flags, value) {
    return date.setUTCMilliseconds(value), date;
  } }]), FractionOfSecondParser2;
}(), ISOTimezoneWithZParser = function(_Parser) {
  _inherits(ISOTimezoneWithZParser2, Parser);
  var _super = _createSuper(ISOTimezoneWithZParser2);
  function ISOTimezoneWithZParser2() {
    var _this;
    _classCallCheck(this, ISOTimezoneWithZParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)
      args[_key] = arguments[_key];
    return _defineProperty(_assertThisInitialized(_this = _super.call.apply(_super, [this].concat(args))), "priority", 10), _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["t", "T", "x"]), _this;
  }
  return _createClass(ISOTimezoneWithZParser2, [{ key: "parse", value: function(dateString, token) {
    switch (token) {
      case "X":
        return parseTimezonePattern(timezonePatterns_basicOptionalMinutes, dateString);
      case "XX":
        return parseTimezonePattern(timezonePatterns_basic, dateString);
      case "XXXX":
        return parseTimezonePattern(timezonePatterns_basicOptionalSeconds, dateString);
      case "XXXXX":
        return parseTimezonePattern(timezonePatterns_extendedOptionalSeconds, dateString);
      default:
        return parseTimezonePattern(timezonePatterns_extended, dateString);
    }
  } }, { key: "set", value: function(date, flags, value) {
    return flags.timestampIsSet ? date : new Date(date.getTime() - value);
  } }]), ISOTimezoneWithZParser2;
}(), ISOTimezoneParser = function(_Parser) {
  _inherits(ISOTimezoneParser2, Parser);
  var _super = _createSuper(ISOTimezoneParser2);
  function ISOTimezoneParser2() {
    var _this;
    _classCallCheck(this, ISOTimezoneParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)
      args[_key] = arguments[_key];
    return _defineProperty(_assertThisInitialized(_this = _super.call.apply(_super, [this].concat(args))), "priority", 10), _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", ["t", "T", "X"]), _this;
  }
  return _createClass(ISOTimezoneParser2, [{ key: "parse", value: function(dateString, token) {
    switch (token) {
      case "x":
        return parseTimezonePattern(timezonePatterns_basicOptionalMinutes, dateString);
      case "xx":
        return parseTimezonePattern(timezonePatterns_basic, dateString);
      case "xxxx":
        return parseTimezonePattern(timezonePatterns_basicOptionalSeconds, dateString);
      case "xxxxx":
        return parseTimezonePattern(timezonePatterns_extendedOptionalSeconds, dateString);
      default:
        return parseTimezonePattern(timezonePatterns_extended, dateString);
    }
  } }, { key: "set", value: function(date, flags, value) {
    return flags.timestampIsSet ? date : new Date(date.getTime() - value);
  } }]), ISOTimezoneParser2;
}(), TimestampSecondsParser = function(_Parser) {
  _inherits(TimestampSecondsParser2, Parser);
  var _super = _createSuper(TimestampSecondsParser2);
  function TimestampSecondsParser2() {
    var _this;
    _classCallCheck(this, TimestampSecondsParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)
      args[_key] = arguments[_key];
    return _defineProperty(_assertThisInitialized(_this = _super.call.apply(_super, [this].concat(args))), "priority", 40), _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", "*"), _this;
  }
  return _createClass(TimestampSecondsParser2, [{ key: "parse", value: function(dateString) {
    return parseAnyDigitsSigned(dateString);
  } }, { key: "set", value: function(_date, _flags, value) {
    return [new Date(1e3 * value), { timestampIsSet: true }];
  } }]), TimestampSecondsParser2;
}(), TimestampMillisecondsParser = function(_Parser) {
  _inherits(TimestampMillisecondsParser2, Parser);
  var _super = _createSuper(TimestampMillisecondsParser2);
  function TimestampMillisecondsParser2() {
    var _this;
    _classCallCheck(this, TimestampMillisecondsParser2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)
      args[_key] = arguments[_key];
    return _defineProperty(_assertThisInitialized(_this = _super.call.apply(_super, [this].concat(args))), "priority", 20), _defineProperty(_assertThisInitialized(_this), "incompatibleTokens", "*"), _this;
  }
  return _createClass(TimestampMillisecondsParser2, [{ key: "parse", value: function(dateString) {
    return parseAnyDigitsSigned(dateString);
  } }, { key: "set", value: function(_date, _flags, value) {
    return [new Date(value), { timestampIsSet: true }];
  } }]), TimestampMillisecondsParser2;
}(), parsers = { G: new EraParser(), y: new YearParser(), Y: new LocalWeekYearParser(), R: new ISOWeekYearParser(), u: new ExtendedYearParser(), Q: new QuarterParser(), q: new StandAloneQuarterParser(), M: new MonthParser(), L: new StandAloneMonthParser(), w: new LocalWeekParser(), I: new ISOWeekParser(), d: new DateParser(), D: new DayOfYearParser(), E: new DayParser(), e: new LocalDayParser(), c: new StandAloneLocalDayParser(), i: new ISODayParser(), a: new AMPMParser(), b: new AMPMMidnightParser(), B: new DayPeriodParser(), h: new Hour1to12Parser(), H: new Hour0to23Parser(), K: new Hour0To11Parser(), k: new Hour1To24Parser(), m: new MinuteParser(), s: new SecondParser(), S: new FractionOfSecondParser(), X: new ISOTimezoneWithZParser(), x: new ISOTimezoneParser(), t: new TimestampSecondsParser(), T: new TimestampMillisecondsParser() }, formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g, longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g, escapedStringRegExp = /^'([^]*?)'?$/, doubleQuoteRegExp = /''/g, notWhitespaceRegExp = /\S/, unescapedLatinCharacterRegExp = /[a-zA-Z]/;
function parse$1(dirtyDateString, dirtyFormatString, dirtyReferenceDate, options) {
  var _ref, _options$locale, _ref2, _ref3, _ref4, _options$firstWeekCon, _options$locale2, _options$locale2$opti, _defaultOptions$local, _defaultOptions$local2, _ref5, _ref6, _ref7, _options$weekStartsOn, _options$locale3, _options$locale3$opti, _defaultOptions$local3, _defaultOptions$local4;
  requiredArgs(3, arguments);
  var dateString = String(dirtyDateString), formatString = String(dirtyFormatString), defaultOptions = getDefaultOptions(), locale$1 = null !== (_ref = null !== (_options$locale = null == options ? void 0 : options.locale) && void 0 !== _options$locale ? _options$locale : defaultOptions.locale) && void 0 !== _ref ? _ref : locale;
  if (!locale$1.match)
    throw new RangeError("locale must contain match property");
  var firstWeekContainsDate = toInteger(null !== (_ref2 = null !== (_ref3 = null !== (_ref4 = null !== (_options$firstWeekCon = null == options ? void 0 : options.firstWeekContainsDate) && void 0 !== _options$firstWeekCon ? _options$firstWeekCon : null == options || null === (_options$locale2 = options.locale) || void 0 === _options$locale2 || null === (_options$locale2$opti = _options$locale2.options) || void 0 === _options$locale2$opti ? void 0 : _options$locale2$opti.firstWeekContainsDate) && void 0 !== _ref4 ? _ref4 : defaultOptions.firstWeekContainsDate) && void 0 !== _ref3 ? _ref3 : null === (_defaultOptions$local = defaultOptions.locale) || void 0 === _defaultOptions$local || null === (_defaultOptions$local2 = _defaultOptions$local.options) || void 0 === _defaultOptions$local2 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) && void 0 !== _ref2 ? _ref2 : 1);
  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7))
    throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");
  var weekStartsOn = toInteger(null !== (_ref5 = null !== (_ref6 = null !== (_ref7 = null !== (_options$weekStartsOn = null == options ? void 0 : options.weekStartsOn) && void 0 !== _options$weekStartsOn ? _options$weekStartsOn : null == options || null === (_options$locale3 = options.locale) || void 0 === _options$locale3 || null === (_options$locale3$opti = _options$locale3.options) || void 0 === _options$locale3$opti ? void 0 : _options$locale3$opti.weekStartsOn) && void 0 !== _ref7 ? _ref7 : defaultOptions.weekStartsOn) && void 0 !== _ref6 ? _ref6 : null === (_defaultOptions$local3 = defaultOptions.locale) || void 0 === _defaultOptions$local3 || null === (_defaultOptions$local4 = _defaultOptions$local3.options) || void 0 === _defaultOptions$local4 ? void 0 : _defaultOptions$local4.weekStartsOn) && void 0 !== _ref5 ? _ref5 : 0);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6))
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  if ("" === formatString)
    return "" === dateString ? toDate(dirtyReferenceDate) : /* @__PURE__ */ new Date(NaN);
  var _step, subFnOptions = { firstWeekContainsDate, weekStartsOn, locale: locale$1 }, setters = [new DateToSystemTimezoneSetter()], tokens = formatString.match(longFormattingTokensRegExp).map(function(substring) {
    var firstCharacter = substring[0];
    return firstCharacter in longFormatters ? (0, longFormatters[firstCharacter])(substring, locale$1.formatLong) : substring;
  }).join("").match(formattingTokensRegExp), usedTokens = [], _iterator = _createForOfIteratorHelper(tokens);
  try {
    var _loop = function() {
      var token = _step.value;
      null != options && options.useAdditionalWeekYearTokens || !isProtectedWeekYearToken(token) || throwProtectedError(token, formatString, dirtyDateString), null != options && options.useAdditionalDayOfYearTokens || !isProtectedDayOfYearToken(token) || throwProtectedError(token, formatString, dirtyDateString);
      var firstCharacter = token[0], parser = parsers[firstCharacter];
      if (parser) {
        var incompatibleTokens = parser.incompatibleTokens;
        if (Array.isArray(incompatibleTokens)) {
          var incompatibleToken = usedTokens.find(function(usedToken) {
            return incompatibleTokens.includes(usedToken.token) || usedToken.token === firstCharacter;
          });
          if (incompatibleToken)
            throw new RangeError("The format string mustn't contain `".concat(incompatibleToken.fullToken, "` and `").concat(token, "` at the same time"));
        } else if ("*" === parser.incompatibleTokens && usedTokens.length > 0)
          throw new RangeError("The format string mustn't contain `".concat(token, "` and any other token at the same time"));
        usedTokens.push({ token: firstCharacter, fullToken: token });
        var parseResult = parser.run(dateString, token, locale$1.match, subFnOptions);
        if (!parseResult)
          return { v: /* @__PURE__ */ new Date(NaN) };
        options.mxBuddhistCalendar && ["y", "Y"].includes(firstCharacter) && (parseResult.setter.value.year -= 543), setters.push(parseResult.setter), dateString = parseResult.rest;
      } else {
        if (firstCharacter.match(unescapedLatinCharacterRegExp))
          throw new RangeError("Format string contains an unescaped latin alphabet character `" + firstCharacter + "`");
        if ("''" === token ? token = "'" : "'" === firstCharacter && (token = token.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, "'")), 0 !== dateString.indexOf(token))
          return { v: /* @__PURE__ */ new Date(NaN) };
        dateString = dateString.slice(token.length);
      }
    };
    for (_iterator.s(); !(_step = _iterator.n()).done; ) {
      var _ret = _loop();
      if ("object" === _typeof(_ret))
        return _ret.v;
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  if (dateString.length > 0 && notWhitespaceRegExp.test(dateString))
    return /* @__PURE__ */ new Date(NaN);
  var uniquePrioritySetters = setters.map(function(setter2) {
    return setter2.priority;
  }).sort(function(a, b) {
    return b - a;
  }).filter(function(priority, index, array) {
    return array.indexOf(priority) === index;
  }).map(function(priority) {
    return setters.filter(function(setter2) {
      return setter2.priority === priority;
    }).sort(function(a, b) {
      return b.subPriority - a.subPriority;
    });
  }).map(function(setterArray) {
    return setterArray[0];
  }), date = toDate(dirtyReferenceDate);
  if (isNaN(date.getTime()))
    return /* @__PURE__ */ new Date(NaN);
  var _step2, utcDate = subMilliseconds(date, getTimezoneOffsetInMilliseconds(date)), flags = {}, _iterator2 = _createForOfIteratorHelper(uniquePrioritySetters);
  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
      var setter = _step2.value;
      if (!setter.validate(utcDate, subFnOptions))
        return /* @__PURE__ */ new Date(NaN);
      var result = setter.set(utcDate, flags, subFnOptions);
      Array.isArray(result) ? (utcDate = result[0], assign$1(flags, result[1])) : utcDate = result;
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }
  return utcDate;
}
function toDateFnsPattern(mendixPattern) {
  return replaceSymbols(mendixPattern, [{ existing: "yyy", replacement: "yyyy" }, { existing: "E", replacement: "e" }, { existing: "EE", replacement: "ee" }, { existing: "YYY", replacement: "YYYY" }, { existing: "Z", replacement: "XX" }, { existing: "ZZ", replacement: "XX" }, { existing: "ZZZ", replacement: "XX" }, { existing: "ZZZZ", replacement: "zzzz" }]);
}
function toMendixPattern(runtimePattern) {
  return replaceSymbols(runtimePattern, [{ existing: "GGGG", replacement: "GGG" }, { existing: "GGGGG", replacement: "GGG" }, { existing: "GGGGGG", replacement: "GGG" }, { existing: "MMMMM", replacement: "MMMM" }, { existing: "E", replacement: "EEE" }, { existing: "EE", replacement: "EEE" }, { existing: "EEEEE", replacement: "EEEE" }, { existing: "EEEEEE", replacement: "EEEE" }, { existing: "S", replacement: "SSS" }, { existing: "SS", replacement: "SSS" }, { existing: "SSSS", replacement: "'0'SSS" }, { existing: "SSSSS", replacement: "'00'SSS" }, { existing: "SSSSSS", replacement: "'000'SSS" }, { existing: "W", replacement: "'W'" }, { existing: "WW", replacement: "'WW'" }, { existing: "WWW", replacement: "'WWW'" }, { existing: "WWWW", replacement: "'WWWW'" }, { existing: "WWWWW", replacement: "'WWWWW'" }, { existing: "WWWWWW", replacement: "'WWWWWW'" }, { existing: "F", replacement: "'F'" }, { existing: "FF", replacement: "'FF'" }, { existing: "FFF", replacement: "'FFF'" }, { existing: "FFFF", replacement: "'FFFF'" }, { existing: "FFFFF", replacement: "'FFFFF'" }, { existing: "FFFFFF", replacement: "'FFFFFF'" }, { existing: "Z", replacement: "'Z'" }, { existing: "ZZ", replacement: "'ZZ'" }, { existing: "ZZZ", replacement: "'ZZZ'" }, { existing: "ZZZZ", replacement: "'ZZZZ'" }, { existing: "ZZZZZ", replacement: "'ZZZZZ'" }, { existing: "ZZZZZZ", replacement: "'ZZZZZZ'" }, { existing: "z", replacement: "'z'" }, { existing: "zz", replacement: "'zz'" }, { existing: "zzz", replacement: "'zzz'" }, { existing: "zzzz", replacement: "'zzzz'" }, { existing: "zzzzz", replacement: "'zzzzz'" }, { existing: "zzzzzz", replacement: "'zzzzzz'" }, { existing: "X", replacement: "'X'" }, { existing: "XX", replacement: "'XX'" }, { existing: "XXX", replacement: "'XXX'" }, { existing: "XXXX", replacement: "'XXXX'" }, { existing: "XXXXX", replacement: "'XXXXX'" }, { existing: "XXXXXX", replacement: "'XXXXXX'" }]);
}
function replaceSymbols(haystack, symbols) {
  const result = haystack.match(/''|'(?:''|[^'])+(?:'|$)|(.)\1*/g) ?? [];
  return symbols.reduce((symbolGroups, { existing, replacement }) => symbolGroups.map((value) => value === existing ? replacement : value), result).join("");
}
function shouldUseBuddhistCalendar(languageTag) {
  return /th$/i.test(languageTag);
}
function preformatBuddhistCalendar(locale2, date, pattern) {
  const year = function(dirtyDate) {
    return requiredArgs(1, arguments), toDate(dirtyDate).getFullYear();
  }(date) + 543, weekYear = function(dirtyDate, options) {
    var _ref, _ref2, _ref3, _options$firstWeekCon, _options$locale, _options$locale$optio, _defaultOptions$local, _defaultOptions$local2;
    requiredArgs(1, arguments);
    var date2 = toDate(dirtyDate), year2 = date2.getFullYear(), defaultOptions = getDefaultOptions(), firstWeekContainsDate = toInteger(null !== (_ref = null !== (_ref2 = null !== (_ref3 = null !== (_options$firstWeekCon = null == options ? void 0 : options.firstWeekContainsDate) && void 0 !== _options$firstWeekCon ? _options$firstWeekCon : null == options || null === (_options$locale = options.locale) || void 0 === _options$locale || null === (_options$locale$optio = _options$locale.options) || void 0 === _options$locale$optio ? void 0 : _options$locale$optio.firstWeekContainsDate) && void 0 !== _ref3 ? _ref3 : defaultOptions.firstWeekContainsDate) && void 0 !== _ref2 ? _ref2 : null === (_defaultOptions$local = defaultOptions.locale) || void 0 === _defaultOptions$local || null === (_defaultOptions$local2 = _defaultOptions$local.options) || void 0 === _defaultOptions$local2 ? void 0 : _defaultOptions$local2.firstWeekContainsDate) && void 0 !== _ref ? _ref : 1);
    if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7))
      throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");
    var firstWeekOfNextYear = /* @__PURE__ */ new Date(0);
    firstWeekOfNextYear.setFullYear(year2 + 1, 0, firstWeekContainsDate), firstWeekOfNextYear.setHours(0, 0, 0, 0);
    var startOfNextYear = startOfWeek(firstWeekOfNextYear, options), firstWeekOfThisYear = /* @__PURE__ */ new Date(0);
    firstWeekOfThisYear.setFullYear(year2, 0, firstWeekContainsDate), firstWeekOfThisYear.setHours(0, 0, 0, 0);
    var startOfThisYear = startOfWeek(firstWeekOfThisYear, options);
    return date2.getTime() >= startOfNextYear.getTime() ? year2 + 1 : date2.getTime() >= startOfThisYear.getTime() ? year2 : year2 - 1;
  }(date, { locale: locale2 }) + 543;
  return replaceSymbols(pattern, [{ existing: "yy", replacement: `'${twoDigit(year)}'` }, { existing: "yyyy", replacement: `'${year}'` }, { existing: "YY", replacement: `  ${twoDigit(weekYear)}'` }, { existing: "YYYY", replacement: `'${weekYear}'` }]);
}
function twoDigit(year) {
  return year.toString().slice(-2);
}
const DAY_OF_WEEK_DATE_FNS = "i", DAY_OF_WEEK_JAVA = "u";
function formatDate$1(date, formatterConfig) {
  let pattern = toDateFnsPattern(getDateTimePattern(formatterConfig));
  if (shouldUseBuddhistCalendar(getLocale().languageTag) && (pattern = preformatBuddhistCalendar(getDateFnsLocale(), date, pattern)), pattern.includes(DAY_OF_WEEK_JAVA)) {
    const { startIndex, endIndex, convertedPattern } = convertDayOfWeekPattern(pattern), formattedDate = format(date, convertedPattern, getDateFnsOptions());
    return formattedDate.slice(0, startIndex) + "0".repeat(endIndex - startIndex) + formattedDate.slice(startIndex);
  }
  return format(date, pattern, getDateFnsOptions());
}
function parseDate(value, formatterConfig, fallbackDate = /* @__PURE__ */ new Date()) {
  const datePattern = toDateFnsPattern(getDateTimePattern(formatterConfig)), options = { ...getDateFnsOptions(), mxBuddhistCalendar: shouldUseBuddhistCalendar(getLocale().languageTag) }, patterns = [replaceSymbols(datePattern, [{ existing: "yyyy", replacement: "yy" }]), datePattern];
  for (const pattern of patterns) {
    const { startIndex, endIndex, convertedPattern } = convertDayOfWeekPattern(pattern), date = parse$1(value.slice(0, startIndex) + value.slice(endIndex), convertedPattern, fallbackDate, options);
    if (!isNaN(date.getTime()))
      return date;
  }
}
function getDateTimePattern(formatterConfig = { type: "datetime" }) {
  return "custom" !== formatterConfig.type ? getLocale().patterns[formatterConfig.type] : formatterConfig.pattern;
}
function getDateFormatPlaceholder(formatterConfig) {
  return getDateTimePattern(formatterConfig).replace(/('.*?(?:'|$))|(\w)+/g, (match, group1, group2) => group1 ? "''" === group1 ? "'" : group1.replace(/'/g, "") : "a" === group2 ? getLocale().dates.dayPeriods.join("/") : match.toLowerCase());
}
function getDateFnsOptions() {
  return { useAdditionalDayOfYearTokens: true, useAdditionalWeekYearTokens: true, locale: getDateFnsLocale() };
}
function convertDayOfWeekPattern(pattern) {
  return { startIndex: pattern.indexOf(DAY_OF_WEEK_JAVA), endIndex: pattern.lastIndexOf(DAY_OF_WEEK_JAVA), convertedPattern: pattern.replace(/u+/g, DAY_OF_WEEK_DATE_FNS) };
}

function addMonths(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var date = toDate(dirtyDate), amount = toInteger(dirtyAmount);
  if (isNaN(amount))
    return /* @__PURE__ */ new Date(NaN);
  if (!amount)
    return date;
  var dayOfMonth = date.getDate(), endOfDesiredMonth = new Date(date.getTime());
  return endOfDesiredMonth.setMonth(date.getMonth() + amount + 1, 0), dayOfMonth >= endOfDesiredMonth.getDate() ? endOfDesiredMonth : (date.setFullYear(endOfDesiredMonth.getFullYear(), endOfDesiredMonth.getMonth(), dayOfMonth), date);
}
function addYears(dirtyDate, dirtyAmount) {
  return requiredArgs(2, arguments), addMonths(dirtyDate, 12 * toInteger(dirtyAmount));
}
function subMonths(dirtyDate, dirtyAmount) {
  return requiredArgs(2, arguments), addMonths(dirtyDate, -toInteger(dirtyAmount));
}
function subYears(dirtyDate, dirtyAmount) {
  return requiredArgs(2, arguments), addYears(dirtyDate, -toInteger(dirtyAmount));
}

function parseNumber(text, decimalsCount) {
  const { numbers } = getLocale();
  if (!function(text2, groupingSeparator, decimalSeparator) {
    const decimalPart = `\\${decimalSeparator}\\d+`;
    return Boolean(new RegExp(`^-?((\\d+|\\d{1,3}(?:\\${groupingSeparator}\\d{3})*)(${decimalPart})?|${decimalPart})(e[+-]?\\d+)?$`).exec(text2));
  }(text, numbers.groupingSeparator, numbers.decimalSeparator))
    return;
  let value;
  try {
    value = new Big(text.split(numbers.groupingSeparator).join("").split(numbers.decimalSeparator).join("."));
  } catch (e) {
    return;
  }
  return null != decimalsCount && decimalsCount >= 0 ? value.round(decimalsCount) : value;
}
function formatNumber(value, groupDigits, decimalsCount) {
  const { numbers } = getLocale(), isNegative = value.lt(0), decimalPrecision = void 0 !== decimalsCount && decimalsCount < 0 ? void 0 : decimalsCount;
  let [intPart, decimalPart = ""] = value.toFixed(decimalPrecision).split(".");
  if (!intPart)
    throw new Error(`Value '${value}' cannot be formatted as number.`);
  return isNegative && (intPart = intPart.slice(1)), groupDigits && (intPart = function(digits, groupSize = 3) {
    const parts = [];
    let remainder = digits;
    for (; remainder.length > groupSize; ) {
      const groupPosition = remainder.length - groupSize;
      parts.unshift(remainder.substring(groupPosition)), remainder = remainder.substring(0, groupPosition);
    }
    remainder && parts.unshift(remainder);
    return parts;
  }(intPart).join(numbers.groupingSeparator)), decimalPart && (decimalPart = numbers.decimalSeparator + decimalPart), (isNegative ? numbers.minusSign : "") + intPart + decimalPart;
}
function formatValue(value, type, config) {
  if (void 0 === value)
    return "";
  switch (type) {
    case "Decimal":
    case "Integer":
    case "Long":
      if (!(value instanceof Big))
        throw new Error(`Value '${value}' cannot be formatted as a numeric value.`);
      const numberConfig = config, groupDigits = numberConfig?.groupDigits, decimalPrecision = numberConfig?.decimalPrecision;
      return formatNumber(value, groupDigits, decimalPrecision);
    case "DateTime":
      if (!(value instanceof Date))
        throw new Error(`Value '${value}' cannot be formatted as Date.`);
      return formatDate$1(value, config);
    case "Boolean":
      return translate("mxui.common", value.toString());
    default:
      return String(value);
  }
}

var MILLISECONDS_IN_HOUR = 36e5;
function addHours(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addMilliseconds(dirtyDate, amount * MILLISECONDS_IN_HOUR);
}
var MILLISECONDS_IN_MINUTE = 6e4;
function addMinutes(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addMilliseconds(dirtyDate, amount * MILLISECONDS_IN_MINUTE);
}
function addQuarters(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addMonths(dirtyDate, 3 * amount);
}
function addSeconds(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addMilliseconds(dirtyDate, 1e3 * amount);
}
function addWeeks(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addDays(dirtyDate, 7 * amount);
}
class AccessDeniedError extends Error {
  constructor(variableName, entityName, attributeName) {
    super(`Unable to get a member from variable $${variableName}, because you do not have sufficient permissions to "${entityName}.${attributeName}".`), this.variableName = variableName, this.entityName = entityName, this.attributeName = attributeName, Object.setPrototypeOf(this, AccessDeniedError.prototype);
  }
}
class EmptyVariableAccessError extends Error {
  constructor(variableName) {
    super(`Unable to get a member from an empty variable $${variableName}.`), this.variableName = variableName, Object.setPrototypeOf(this, EmptyVariableAccessError.prototype);
  }
}
let synchronizationInProgress = false;
async function runInSynchronizationLock(fn) {
  if (synchronizationInProgress)
    throw new DescribedError(translate("mxui.sys.UI", "simultaneous_sync_error"));
  synchronizationInProgress = true, await publish({ param: "synchronizationState" });
  try {
    return await fn();
  } finally {
    synchronizationInProgress = false, await publish({ param: "synchronizationState" });
  }
}
function operationErrorText(operator, ...args) {
  return `Operator ${operator} not supported in expression ${operator}(${args.join(", ")})`;
}
function toNumber(expressionResult) {
  const number = Number(expressionResult);
  if (isNaN(number))
    throw new AssertionError("Unexpected expression value");
  return number;
}
const betweenMonthsYearsFunctionMap = { calendarMonthsBetween: function(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var dateLeft = toDate(dirtyDateLeft), dateRight = toDate(dirtyDateRight);
  return 12 * (dateLeft.getFullYear() - dateRight.getFullYear()) + (dateLeft.getMonth() - dateRight.getMonth());
}, calendarYearsBetween: function(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var dateLeft = toDate(dirtyDateLeft), dateRight = toDate(dirtyDateRight);
  return dateLeft.getFullYear() - dateRight.getFullYear();
} }, addFunctionMap = { addMilliseconds, addSeconds, addMinutes, addHours, addDays, addWeeks, addMonths, addQuarters, addYears }, beginOfFunctionMap = { beginOfDay: startOfDay, beginOfMonth: startOfMonth, beginOfYear: startOfYear }, endOfFunctionMap = { endOfDay, endOfMonth, endOfYear }, beginEndOfWeekFunctionMap = { beginOfWeek: startOfWeek, endOfWeek }, subFunctionMap = { subtractMilliseconds: subMilliseconds, subtractSeconds: function(dirtyDate, dirtyAmount) {
  return requiredArgs(2, arguments), addSeconds(dirtyDate, -toInteger(dirtyAmount));
}, subtractMinutes: function(dirtyDate, dirtyAmount) {
  return requiredArgs(2, arguments), addMinutes(dirtyDate, -toInteger(dirtyAmount));
}, subtractHours: function(dirtyDate, dirtyAmount) {
  return requiredArgs(2, arguments), addHours(dirtyDate, -toInteger(dirtyAmount));
}, subtractDays: subDays, subtractWeeks: function(dirtyDate, dirtyAmount) {
  return requiredArgs(2, arguments), addWeeks(dirtyDate, -toInteger(dirtyAmount));
}, subtractMonths: subMonths, subtractQuarters: function(dirtyDate, dirtyAmount) {
  return requiredArgs(2, arguments), addQuarters(dirtyDate, -toInteger(dirtyAmount));
}, subtractYears: subYears }, trimFunctionMap = { trimToSeconds: function(dirtyDate) {
  requiredArgs(1, arguments);
  var date = toDate(dirtyDate);
  return date.setMilliseconds(0), date;
}, trimToMinutes: startOfMinute, trimToHours: startOfHour, trimToDays: startOfDay, trimToMonths: startOfMonth, trimToYears: startOfYear }, expressionDateFunctions = { dateTime: (...args) => evaluateCreateDateTime(args, false, () => operationErrorText("dateTime", ...args)), dateTimeUTC: (...args) => evaluateCreateDateTime(args, true, () => operationErrorText("dateTimeUTC", ...args)), dateTimeToEpoch(arg) {
  if (arg instanceof Date)
    return new Big(arg.getTime());
  throw new Error(operationErrorText("dateTimeToEpoch", arg));
}, epochToDateTime(arg) {
  if (arg instanceof Big)
    return new Date(Number(arg));
  throw new Error(operationErrorText("epochToDateTime", arg));
}, ...createExpressionFunctionCollection({ millisecondsBetween: 1, secondsBetween: 1e3, minutesBetween: 6e4, hoursBetween: 36e5, daysBetween: 864e5, weeksBetween: 6048e5 }, function(args, scale, getErrorText) {
  const firstDate = args[0], secondDate = args[1];
  if (firstDate instanceof Date && secondDate instanceof Date) {
    return new Big(firstDate.getTime()).sub(secondDate.getTime()).abs().div(scale);
  }
  throw new Error(getErrorText());
}, false), ...createExpressionFunctionCollection(betweenMonthsYearsFunctionMap, function(args, betweenFunction, getErrorText) {
  const [date1, date2] = args;
  if (date1 instanceof Date && date2 instanceof Date)
    return new Big(betweenFunction(date1, date2)).abs();
  throw new Error(getErrorText());
}, false), ...createExpressionFunctionCollection(addFunctionMap, evaluateDateAddOrSubtract, true), ...createExpressionFunctionCollection(beginOfFunctionMap, evaluateBeginOrEndOf, false), ...createExpressionFunctionCollection(beginEndOfWeekFunctionMap, function(args, dateFunction, getErrorText) {
  const date = args[0];
  if (date instanceof Date)
    return dateFunction(date, { locale: getDateFnsLocale() });
  throw new Error(getErrorText());
}, false), ...createExpressionFunctionCollection(endOfFunctionMap, evaluateBeginOrEndOf, false), ...createExpressionFunctionCollection(subFunctionMap, evaluateDateAddOrSubtract, true), ...createExpressionFunctionCollection(trimFunctionMap, function(args, trimFunction, getErrorText, utc) {
  let date = args[0];
  if (date instanceof Date) {
    utc && (date = localizeDate(date));
    let newDate = trimFunction(date);
    return utc && (newDate = delocalizeDate(newDate)), newDate;
  }
  throw new Error(getErrorText());
}, true) };
function evaluateCreateDateTime(args, utc, getErrorText) {
  const numbers = args.map((arg) => {
    if (arg instanceof Big)
      return Number(arg);
    throw new Error(getErrorText());
  });
  return 1 === numbers.length && numbers.push(1), numbers[1] = ensure(numbers[1]) - 1, utc ? new Date(Date.UTC(...numbers)) : new Date(...numbers);
}
function evaluateDateAddOrSubtract(args, addFunction, getErrorText, utc) {
  let date = args[0];
  const add = args[1];
  if (date instanceof Date && add instanceof Big) {
    utc && (date = localizeDate(date));
    let newDate = addFunction(date, Number(add));
    return utc && (newDate = delocalizeDate(newDate)), newDate;
  }
  throw new Error(getErrorText());
}
function evaluateBeginOrEndOf(args, dateFunction, getErrorText) {
  const date = args[0];
  if (date instanceof Date)
    return dateFunction(date);
  throw new Error(getErrorText());
}
function createExpressionFunctionCollection(functionMap, evaluator2, utcVariant) {
  return Object.entries(functionMap).reduce((collection, [name, parameter]) => {
    if (collection[name] = (...args) => evaluator2(args, parameter, () => operationErrorText(name, ...args)), utcVariant) {
      const utcName = `${name}UTC`;
      collection[utcName] = (...args) => evaluator2(args, parameter, () => operationErrorText(utcName, ...args), true);
    }
    return collection;
  }, {});
}
const expressionFormatFunctions = { toString: (arg) => arg instanceof Big ? arg.toString() : void 0 === arg ? "" : arg instanceof Date ? formatDate$1(arg, { type: "datetime" }) : String(arg), parseInteger(arg, defaultValue) {
  if ("string" == typeof arg) {
    if (/^-?\d+$/.test(arg)) {
      const result = new Big(arg);
      return result.eq(-0) ? result.abs() : result;
    }
    if (void 0 === defaultValue)
      throw new Error(`Not parsable to Integer: ${arg}`);
    return defaultValue;
  }
  throw new Error(operationErrorText("parseInteger", arg));
}, parseDecimal(arg, defaultValue) {
  if ("string" == typeof arg) {
    const parsed = parseNumber(arg);
    if (void 0 === parsed && void 0 === defaultValue)
      throw new Error(`Not parsable to Decimal: ${arg}`);
    return parsed ?? defaultValue;
  }
  throw new Error(operationErrorText("parseDecimal", arg));
}, formatDecimal(arg) {
  if (arg instanceof Big)
    return formatNumber(arg);
  throw new Error(operationErrorText("formatDecimal", arg));
}, parseDateTime: (...args) => evaluateParseDateTime(args, false, operationErrorText("parseDateTime", ...args)), parseDateTimeUTC: (...args) => evaluateParseDateTime(args, true, operationErrorText("parseDateTimeUTC", ...args)), formatDate: (arg) => evaluateFormatDate(arg, { type: "date" }, false, operationErrorText("formatDate", arg)), formatDateUTC: (arg) => evaluateFormatDate(arg, { type: "date" }, true, operationErrorText("formatDateUTC", arg)), formatTime: (arg) => evaluateFormatDate(arg, { type: "time" }, false, operationErrorText("formatTime", arg)), formatTimeUTC: (arg) => evaluateFormatDate(arg, { type: "time" }, true, operationErrorText("formatTimeUTC", arg)), formatDateTime: (...args) => evaluateFormatDate(args[0], toFormatterConfig(args[1]), false, operationErrorText("formatDateTime", ...args)), formatDateTimeUTC: (...args) => evaluateFormatDate(args[0], toFormatterConfig(args[1]), true, operationErrorText("formatDateTimeUTC", ...args)), getCaption(arg, enumeration) {
  if (void 0 === arg)
    return "";
  if ("string" == typeof arg && "string" == typeof enumeration)
    return translateEnumeration(enumeration, arg);
  throw new Error(operationErrorText("getCaption", arg, enumeration));
}, getKey(arg) {
  if (void 0 === arg)
    return "";
  if ("string" == typeof arg)
    return arg;
  throw new Error(operationErrorText("getKey", arg));
}, _format(arg, formatStr) {
  if ("string" == typeof formatStr) {
    const format = JSON.parse(formatStr), type = arg instanceof Big ? "Decimal" : arg instanceof Date ? "DateTime" : "boolean" == typeof arg ? "Boolean" : "String";
    return formatValue(arg, type, format);
  }
  throw new Error(operationErrorText("_format", arg, formatStr));
} };
function evaluateParseDateTime(args, utc, errorText) {
  const [value, pattern, fallback] = args;
  if ("string" == typeof value && "string" == typeof pattern) {
    const parsed = parseDate(value.trim(), { type: "custom", pattern: toMendixPattern(pattern.trim()) });
    if (parsed instanceof Date)
      return utc ? delocalizeDate(parsed) : parsed;
    if (fallback instanceof Date)
      return fallback;
    throw new Error(`Unparseable date: "${value}"`);
  }
  throw new Error(errorText);
}
function evaluateFormatDate(arg, formatterConfig, utc, errorText) {
  if (arg instanceof Date)
    return utc && (arg = localizeDate(arg)), "custom" !== formatterConfig.type && (formatterConfig = { type: "custom", pattern: getLocale().nanoflowPatterns[formatterConfig.type] }), formatDate$1(arg, formatterConfig);
  throw new Error(errorText);
}
function toFormatterConfig(pattern) {
  return "string" == typeof pattern ? { type: "custom", pattern: toMendixPattern(pattern) } : { type: "datetime" };
}
function asList(arg, errorText) {
  if (arg instanceof Array)
    return arg;
  if (isString(arg))
    return arg.length > 0 ? [arg] : [];
  if (void 0 === arg)
    return [];
  throw new Error(errorText);
}
const expressionStringFunctions = { toUpperCase: (arg1) => asString(arg1).toUpperCase(), toLowerCase: (arg1) => asString(arg1).toLowerCase(), trim: (arg1) => asString(arg1).trim(), startsWith: (arg1, arg2) => (arg1 = asString(arg1), arg2 = asString(arg2), arg1.substr(0, arg2.length) === arg2), endsWith: (arg1, arg2) => (arg1 = asString(arg1), arg2 = asString(arg2), arg1.substr(arg1.length - arg2.length) === arg2), substring(arg1, arg2, arg3) {
  if (arg1 = asString(arg1), arg2?.gte(0)) {
    if (2 === arguments.length)
      return arg1.substr(Number(arg2));
    if (arg3?.gte(0))
      return arg1.substr(Number(arg2), Number(arg3));
  }
  throw new Error(operationErrorText("substring", arg1, arg2, arg3));
}, find(arg1, arg2, arg3) {
  if (arg1 = asString(arg1), arg2 = asString(arg2), 2 === arguments.length)
    return new Big(arg1.indexOf(arg2));
  if (void 0 !== arg3)
    return new Big(arg1.indexOf(arg2, Number(arg3)));
  throw new Error(operationErrorText("find", arg1, arg2, arg3));
}, findLast(arg1, arg2, arg3) {
  if (arg1 = asString(arg1), arg2 = asString(arg2), 2 === arguments.length)
    return new Big(arg1.lastIndexOf(arg2));
  if (void 0 !== arg3)
    return new Big(arg1.lastIndexOf(arg2, Number(arg3)));
  throw new Error(operationErrorText("findLast", arg1, arg2, arg3));
}, urlEncode: (arg1) => encodeURIComponent(asString(arg1)).replace("%20", "+"), urlDecode: (arg1) => decodeURIComponent(asString(arg1).replace("+", "%20")), isMatch(arg1, arg2) {
  if (void 0 !== arg2)
    return new RegExp(`^(${arg2})$`).test(asString(arg1));
  throw new Error(operationErrorText("isMatch", arg1, arg2));
}, replaceFirst(arg1, arg2, arg3) {
  if (void 0 !== arg2 && void 0 !== arg3) {
    const escapedForReplaceValue = arg3.replace(/\$/g, "$$$$");
    return asString(arg1).replace(new RegExp(arg2), escapedForReplaceValue);
  }
  throw new Error(operationErrorText("replaceFirst", arg1, arg2));
}, replaceAll(arg1, arg2, arg3) {
  if (void 0 !== arg2 && void 0 !== arg3) {
    const escapedForReplaceValue = arg3.replace(/\$/g, "$$$$");
    return asString(arg1).replace(new RegExp(arg2, "g"), escapedForReplaceValue);
  }
  throw new Error(operationErrorText("replaceAll", arg1, arg2));
} };
function asString(arg) {
  return void 0 === arg ? "" : arg;
}
const expressionLogicFunctions = { not: (arg) => !arg, "=": (arg1, arg2) => arg1 instanceof Big && arg2 instanceof Big ? arg1.eq(arg2) : arg1 instanceof Date && arg2 instanceof Date ? arg1.getTime() === arg2.getTime() : "string" == typeof arg1 || "string" == typeof arg2 ? (arg1 ?? "") === (arg2 ?? "") : arg1 instanceof Array && arg2 instanceof Array ? arg1.length === arg2.length && arg1.every((elem) => arg2.includes(elem)) : arg1 instanceof Array && void 0 === arg2 ? 0 === arg1.length : void 0 === arg1 && arg2 instanceof Array ? 0 === arg2.length : arg1 === arg2, "!=": (arg1, arg2) => !expressionLogicFunctions["="](arg1, arg2), ">"(arg1, arg2) {
  if (arg1 instanceof Big && arg2 instanceof Big)
    return arg1.gt(arg2);
  if (arg1 instanceof Date && arg2 instanceof Date)
    return arg1.getTime() > arg2.getTime();
  if (void 0 === arg1 || void 0 === arg2)
    throw new Error(operationErrorText(">", arg1, arg2));
  return arg1 > arg2;
}, ">=": (arg1, arg2) => expressionLogicFunctions["="](arg1, arg2) || expressionLogicFunctions[">"](arg1, arg2), "<"(arg1, arg2) {
  if (arg1 instanceof Big && arg2 instanceof Big)
    return arg1.lt(arg2);
  if (arg1 instanceof Date && arg2 instanceof Date)
    return arg1.getTime() < arg2.getTime();
  if (void 0 === arg1 || void 0 === arg2)
    throw new Error(operationErrorText("<", arg1, arg2));
  return arg1 < arg2;
}, "<=": (arg1, arg2) => expressionLogicFunctions["="](arg1, arg2) || expressionLogicFunctions["<"](arg1, arg2), contains: (arg1, arg2) => arg1 instanceof Array && "string" == typeof arg2 ? arg1.includes(arg2) : arg1 instanceof Array && arg2 instanceof Array ? arg2.every((elem) => arg1.includes(elem)) : asString(arg1).includes(asString(arg2)) }, expressionMathFunctions = { "+"(arg1, arg2) {
  if (arg1 instanceof Big && arg2 instanceof Big)
    return arg1.plus(arg2);
  if ("string" == typeof arg1)
    return arg1 + (void 0 !== arg2 ? arg2.toString() : "");
  if ("string" == typeof arg2)
    return (void 0 !== arg1 ? arg1.toString() : "") + arg2;
  throw new Error(operationErrorText("+", arg1, arg2));
}, "-"(arg1, arg2) {
  if (1 === arguments.length && void 0 !== arg1)
    return arg1.times(-1);
  if (void 0 !== arg1 && void 0 !== arg2)
    return arg1.minus(arg2);
  throw new Error(operationErrorText("-", arg1, arg2));
}, "*"(arg1, arg2) {
  if (void 0 !== arg1 && void 0 !== arg2)
    return arg1.times(arg2);
  throw new Error(operationErrorText("*", arg1, arg2));
}, div(arg1, arg2) {
  if (void 0 !== arg1 && void 0 !== arg2)
    return arg1.div(arg2);
  throw new Error(operationErrorText("div", arg1, arg2));
}, mod(arg1, arg2) {
  if (void 0 !== arg1 && void 0 !== arg2)
    return arg1.mod(arg2);
  throw new Error(operationErrorText("mod", arg1, arg2));
}, ":": (arg1, arg2) => expressionMathFunctions.div(arg1, arg2), max(...args) {
  if (args[0] instanceof Big)
    return args.reduce((n1, n2) => n1.gt(n2) ? n1 : n2);
  if (args[0] instanceof Date)
    return args.reduce((d1, d2) => d1.getTime() > d2.getTime() ? d1 : d2);
  throw new Error(operationErrorText("max", ...args));
}, min(...args) {
  if (args[0] instanceof Big)
    return args.reduce((n1, n2) => n1.lt(n2) ? n1 : n2);
  if (args[0] instanceof Date)
    return args.reduce((d1, d2) => d1.getTime() < d2.getTime() ? d1 : d2);
  throw new Error(operationErrorText("min", ...args));
}, round(arg, dp) {
  if (arg instanceof Big)
    return arg.round(void 0 === dp ? 0 : Number(dp));
  throw new Error(operationErrorText("round", arg));
}, random: () => new Big(Math.random()), floor(arg) {
  if (arg instanceof Big) {
    const fractional = arg.mod(1);
    return fractional.eq(0) ? arg.eq(-0) ? arg.abs() : arg : arg.minus(fractional).minus(arg.lt(0) ? 1 : 0);
  }
  throw new Error(operationErrorText("floor", arg));
}, ceil(arg) {
  if (arg instanceof Big) {
    const result = expressionMathFunctions.floor(arg.times(-1));
    return result.eq(0) ? result : result.times(-1);
  }
  throw new Error(operationErrorText("ceil", arg));
}, pow(arg, exponent) {
  if (arg instanceof Big && exponent instanceof Big)
    return Number(exponent) === Math.floor(Number(exponent)) ? arg.pow(Number(exponent)) : new Big(Math.pow(Number(arg), Number(exponent)));
  throw new Error(operationErrorText("pow", arg));
}, abs(arg) {
  if (arg instanceof Big)
    return arg.abs();
  throw new Error(operationErrorText("abs", arg));
}, sqrt(arg) {
  if (arg instanceof Big && arg.gte(0))
    return arg.sqrt();
  throw new Error(operationErrorText("sqrt", arg));
} }, expressionFunctions = { ...expressionDateFunctions, ...{ _newList: () => [], _toList: (arg1) => asList(arg1, operationErrorText("_toList", arg1)), _addToList(arg1, arg2) {
  const arr1 = asList(arg1, operationErrorText("_addToList", arg1, arg2)), arr2 = asList(arg2, operationErrorText("_addToList", arg1, arg2));
  return arr1.concat(arr2);
}, _removeFromList(arg1, arg2) {
  const arr1 = asList(arg1, operationErrorText("_removeFromList", arg1, arg2)), arr2 = asList(arg2, operationErrorText("_removeFromList", arg1, arg2));
  return arr1.filter((guid) => !arr2.includes(guid));
}, _unionLists(arg1, arg2) {
  const arr1 = asList(arg1, operationErrorText("_unionLists", arg1, arg2)), arr2 = asList(arg2, operationErrorText("_unionLists", arg1, arg2));
  return arr1.concat(arr2.filter((guid) => !arr1.includes(guid)));
}, _intersectLists(arg1, arg2) {
  const arr1 = asList(arg1, operationErrorText("_intersectLists", arg1, arg2)), arr2 = asList(arg2, operationErrorText("_intersectLists", arg1, arg2));
  return arr1.filter((guid) => arr2.includes(guid));
}, _listContains(arg1, arg2) {
  const arr1 = asList(arg1, operationErrorText("_listContains", arg1, arg2)), arr2 = asList(arg2, operationErrorText("_listContains", arg1, arg2));
  return arr2.length > 0 && arr2.every((guid) => arr1.includes(guid));
}, _head(arg1) {
  if (arg1 instanceof Array)
    return arg1.length > 0 ? arg1[0] : void 0;
  if (void 0 !== arg1)
    throw new Error(operationErrorText("_head", arg1));
} }, ...expressionLogicFunctions, ...expressionMathFunctions, ...expressionStringFunctions, ...expressionFormatFunctions, length: (arg1) => Array.isArray(arg1) ? new Big(arg1.length) : new Big(asString(arg1).length), isNew: (arg) => void 0 !== arg && getData().isNew(arg), isSynced(arg) {
  if (void 0 !== arg)
    return !isDirtyGuid(arg);
  throw new Error(operationErrorText("isSynced", arg));
}, isSyncing: { fn: () => synchronizationInProgress, staticDependencies: [{ param: "synchronizationState" }] }, _hasSomeRole: (...args) => getSession().hasSomeRole(args), _isNamedUser: () => !getSession().isGuest(), _catchEmptyVar: { fn: (arg1, arg2) => arg1 ?? arg2, errorHandler: (error, argIndex) => 0 === argIndex && error instanceof EmptyVariableAccessError ? { value: void 0 } : void 0 } };
const getExpressionFunction = (functionsCollection = expressionFunctions, (name) => {
  const fn = functionsCollection[name];
  if (function(fn2) {
    return "object" == typeof fn2 && null !== fn2 ? !(!("fn" in fn2) || "function" != typeof fn2.fn || "staticDependencies" in fn2 && !Array.isArray(fn2.staticDependencies) || "errorHandler" in fn2 && "function" != typeof fn2.errorHandler) : "function" == typeof fn2;
  }(fn))
    return fn;
  throw new Error(`Function ${name} is not known`);
});
var functionsCollection;
function mapMaybePromise(values, handle) {
  return values.some((v) => v instanceof Promise) ? Promise.all(values).then(handle) : handle(values);
}
class ExpressionContext {
  constructor(getVariable, config) {
    this.getVariable = getVariable, this.dependencies = [];
    const { trackDependencies = true, allowEmptyVariablesAccess = false } = config ?? {};
    this.trackDependencies = trackDependencies, this.allowEmptyVariableAccess = allowEmptyVariablesAccess;
  }
  resolveVariable(name) {
    const variable = this.getVariable(name);
    return this.trackDependencies && (isArrayOf(MxObject, variable) ? variable.forEach((obj) => this.addDependency({ guid: obj.getGuid() })) : variable instanceof MxObject && this.addDependency({ guid: variable.getGuid() })), expressionVariableToAttributeValue(variable);
  }
  resolveAttribute(variable, attribute) {
    const value = this.resolveWidgetVariable(variable);
    return value instanceof Promise ? value.then((obj) => void 0 === obj ? void 0 : this.resolveAttributeOf(obj, attribute, variable)) : void 0 === value ? void 0 : this.resolveAttributeOf(value, attribute, variable);
  }
  async resolvePath(variable, path) {
    const steps = path.split("/"), attribute = steps.length % 2 == 1 ? steps.pop() : void 0, objectVariable = await this.resolveWidgetVariable(variable);
    if (void 0 === objectVariable)
      return objectVariable;
    let objects = [objectVariable], resultIsList = false, lastEntity = ensure(objects[0]).getEntity();
    for (let i = 0; i < steps.length; i += 2) {
      const association = steps[i], entity = steps[i + 1], associationType = getAttributeType$1(lastEntity, association);
      if (!associationType)
        throw new AccessDeniedError(variable, lastEntity, association);
      "ObjectReferenceSet" === associationType && (resultIsList = true);
      const previousEntity = lastEntity;
      lastEntity = entity;
      const partialChildObjects = uniqueBy(objects.flatMap((obj) => {
        if (!obj.has(association))
          throw new AccessDeniedError(variable, previousEntity, association);
        return obj.getChildren(association);
      }), (o) => o.getGuid());
      if (partialChildObjects.length) {
        objects = partialChildObjects.filter((obj) => obj.isA(entity));
        continue;
      }
      const references = unique(objects.flatMap((obj) => {
        if (this.addDependency({ guid: obj.getGuid(), attr: association }), !obj.has(association))
          throw new AccessDeniedError(variable, previousEntity, association);
        return obj.getReferences(association);
      }));
      this.trackDependencies && references.forEach((guid) => this.addDependency({ guid })), objects = (await getByGuids(references)).filter((obj) => obj.isA(entity));
    }
    if (void 0 === attribute) {
      const guids = objects.map((o) => o.getGuid());
      return resultIsList ? guids : guids[0];
    }
    if (resultIsList)
      throw new AssertionError();
    return objects.length ? this.resolveAttributeOf(ensure(objects[0]), attribute, variable) : void 0;
  }
  getDependencies() {
    return this.dependencies.slice();
  }
  resolveWidgetVariable(variable) {
    const value = this.getVariable(variable);
    if (this.checkEmptyVariableAccess(value, variable), void 0 !== value) {
      if (value instanceof MxObject)
        return this.addDependency({ guid: value.getGuid() }), value;
      if ("string" == typeof value) {
        const guid = value;
        return this.addDependency({ guid }), getByGuid(guid).then((o) => (this.checkEmptyVariableAccess(o, variable), o));
      }
      throw new AssertionError();
    }
  }
  checkEmptyVariableAccess(value, variable) {
    if (void 0 === value && !this.allowEmptyVariableAccess)
      throw new EmptyVariableAccessError(variable);
  }
  resolveAttributeOf(obj, attribute, variable) {
    if ("type" === attribute)
      return obj.getEntity();
    if (!obj.has(attribute))
      throw new AccessDeniedError(variable, obj.getEntity(), attribute);
    return this.addDependency({ guid: obj.getGuid(), attr: attribute }), obj.get2(attribute);
  }
  addDependency(dependency) {
    if (!this.trackDependencies)
      return;
    this.dependencies.find((dep) => deepEqual$1(dep, dependency)) || this.dependencies.push(dependency);
  }
}
const logger$d = LogManager.get().getLogger(), evaluator = new class {
  constructor(getExpressionFunction2, expressionTokens, getConstants) {
    this.getExpressionFunction = getExpressionFunction2, this.expressionTokens = expressionTokens, this.getConstants = getConstants;
  }
  evaluate(expr, context) {
    switch (expr.type) {
      case "variable":
        return expr.path ? expr.path.includes("/") ? context.resolvePath(expr.variable, expr.path) : context.resolveAttribute(expr.variable, expr.path) : context.resolveVariable(expr.variable);
      case "conditional":
        return mapMaybePromise([this.evaluate(expr.condition, context)], ([conditionValue]) => this.evaluate(conditionValue ? expr.then : expr.else, context));
      case "function":
        const fn = this.getExpressionFunction(expr.name), errorHandler = function(fn2) {
          return "errorHandler" in fn2;
        }(fn) ? fn.errorHandler : void 0;
        return mapMaybePromise(function(evaluator2, context2, expressions, errorHandler2) {
          const parameters = [];
          let seenPromise = false;
          return expressions.forEach((exp, i) => {
            let result;
            try {
              result = evaluator2.evaluate(exp, context2), result instanceof Promise && (result = result.then(void 0, (e) => {
                const handledError = errorHandler2?.(e, i);
                return handledError ? Promise.resolve(handledError.value) : Promise.reject(e);
              }), seenPromise = true);
            } catch (e) {
              const handledError = errorHandler2?.(e, i);
              if (handledError)
                result = handledError.value;
              else {
                if (!seenPromise)
                  throw e;
                result = Promise.reject(e);
              }
            }
            parameters.push(result);
          }), parameters;
        }(this, context, expr.parameters, errorHandler), (values) => {
          const functionBody = "fn" in fn ? fn.fn : fn;
          return function(fn2) {
            return "staticDependencies" in fn2;
          }(fn) && fn.staticDependencies.forEach((dependency) => {
            context.addDependency(dependency);
          }), functionBody(...values);
        });
      case "literalNumeric":
        return new Big(expr.value);
      case "literal":
        return expr.value ?? void 0;
      case "token":
        return ensure(this.expressionTokens[expr.name])();
      case "constant":
        const constant = ensure(this.getConstants().find(({ name }) => expr.name === name));
        return runtimeValueToAttributeValue(constant.value, constant.type);
    }
  }
}(getExpressionFunction, createExpressionTokens(() => /* @__PURE__ */ new Date()), () => getSession().getConstants());
function evaluateFormExpression(expression, args) {
  const expressionContext = new ExpressionContext((param) => ensure(args[param])());
  return function(value) {
    if (value instanceof Promise)
      throw new AssertionError();
    return value;
  }(evaluator.evaluate(expression.expr, expressionContext));
}
async function evaluateActionExpression(expression, args) {
  const expressionContext = new ExpressionContext((param) => actionArgumentToExpressionVariable(args[param]));
  return evaluator.evaluate(expression, expressionContext);
}
async function evaluateExpressionValue(expression, currentObject) {
  const expressionContext = new ExpressionContext((name) => "currentObject" === name ? currentObject : crash(), { trackDependencies: false });
  return evaluator.evaluate(expression, expressionContext);
}
async function evaluateFlowExpression(expr, scope, resultKind) {
  const exprResult = await evaluator.evaluate(expr, new ExpressionContext((name) => scope.get(name), { trackDependencies: false, allowEmptyVariablesAccess: true }));
  switch (resultKind) {
    case "primitive":
      return exprResult;
    case "list":
      return Array.isArray(exprResult) ? getByGuids(exprResult) : void 0 === exprResult ? [] : crash();
    case "object":
      return "string" == typeof exprResult ? getByGuid(exprResult) : void 0 === exprResult ? void 0 : crash();
  }
}
function getFormExpressionResultFromStore$(description, expression, store, extraArgs = {}) {
  return getFormExpressionResult$(description, store, expression, (variable) => getVariableFromStore$(description, store, variable), extraArgs);
}
function getVariableFromStore$(description, store, variable) {
  const { widget: widgetId, source } = variable, [object$] = store.useSlot(widgetId, source);
  return fromComputation$(`Parameter of ${lowerCaseFirst(description)}: ${toFriendlyId(widgetId)}`, () => object$.dependOn() ?? ("object" === source ? loading() : void 0));
}
function getFormExpressionResult$(description, store, expression, resolveWidgetVariable, extraArgs = {}) {
  const objectArgs = mapValues(expression.args, resolveWidgetVariable), [recomputationTrigger$, triggerRecomputation] = useValue(`Dependencies of ${lowerCaseFirst(description)}`, {}), resultAndDependencies$ = fromRequest$(`Computation of ${lowerCaseFirst(description)}`, () => {
    recomputationTrigger$.dependOn();
    const dependencies = [], expressionContext = new ExpressionContext((param) => {
      if (containsKey(param, extraArgs)) {
        const extraArg = ensure(extraArgs[param]);
        return dependencies.push(() => extraArg.dependOn()), readUntracked(extraArg);
      }
      const expressionArg = ensure(objectArgs[param]);
      dependencies.push(() => expressionArg.dependOn());
      const expressionArgValue = readUntracked(expressionArg);
      if (expressionArgValue && "object" == typeof expressionArgValue && "status" in expressionArgValue) {
        if ("loading" === expressionArgValue.status)
          throw new LoadingVariableError();
        return "available" !== expressionArgValue.status || expressionArgValue.value.isUnavailable() ? void 0 : expressionArgValue.value;
      }
      return expressionArgValue;
    });
    try {
      const result = evaluator.evaluate(expression.expr, expressionContext);
      return result instanceof Promise ? [toResult(loading()), result.then((r) => toResult(available(r)), onError)] : toResult(available(result));
    } catch (e) {
      return onError(e);
    }
    function toResult(result) {
      return dependencies.push(...expressionContext.getDependencies().map((sub) => () => dependOnSubscription(sub, store))), available(tuple(result, dependencies));
    }
    function onError(e) {
      return e instanceof LoadingVariableError ? toResult(loading()) : e instanceof AccessDeniedError || e instanceof EmptyVariableAccessError ? (logger$d.debug(`An error occurred while evaluating ${lowerCaseFirst(description)}: ${e.message}`), toResult(unavailable())) : (handleError(new Error(`An error occurred while evaluating ${lowerCaseFirst(description)}: ${e instanceof Error ? e.message : e}`)), toResult(unavailable()));
    }
  }), previousResultAndDependencies$ = getPreviousValue$(resultAndDependencies$);
  return fromComputation$(description, () => {
    const resultAndDependencies = resultAndDependencies$.dependOn();
    if ("available" !== resultAndDependencies.status)
      throw new AssertionError();
    return resultAndDependencies.value[1].forEach((dep) => dep()), resultAndDependencies === previousResultAndDependencies$.dependOn() && scheduleSideEffect(action(() => triggerRecomputation({}))), resultAndDependencies.value[0];
  });
}
class LoadingVariableError extends Error {
  constructor() {
    super(), Object.setPrototypeOf(this, LoadingVariableError.prototype);
  }
}

const expressionTokens = createExpressionTokens(() => /* @__PURE__ */ new Date());
function toQueryFilter(constraint, getVariable) {
  switch (constraint.type) {
    case "attribute":
      return constraint;
    case "function":
      return { type: "function", name: constraint.name, parameters: constraint.parameters.map((p) => toQueryFilter(p, getVariable)) };
    case "literal":
      return { type: "value", ...toQueryFilterValue(constraint.value) };
    case "token":
      const expressionValue = ensure(expressionTokens[constraint.name])();
      return { type: "value", value: expressionValue, isGuid: "string" == typeof expressionValue };
    case "variable":
      return { type: "value", ...toQueryFilterValue(getVariable(constraint.name), constraint.attribute) };
  }
}
function toQueryFilterValue(source, attribute) {
  if (null == source)
    return { value: void 0, isGuid: false };
  if ("string" == typeof source || "boolean" == typeof source || source instanceof Date || source instanceof Big)
    return { value: source, isGuid: false };
  if ("number" == typeof source)
    return { value: new Big(source), isGuid: false };
  if (source instanceof MxObject) {
    if (void 0 !== attribute) {
      const attributeType = source.getAttributeType(attribute);
      return { value: clientToAttributeValue(runtimeValueToClientValue(source.getRawValue(attribute), attributeType), attributeType), isGuid: "ObjectReference" === attributeType };
    }
    return { value: source.getGuid(), isGuid: true };
  }
  throw new AssertionError(`Cannot use value '${source}' in query filter`);
}
function toXpathConstraint(filter) {
  switch (filter.type) {
    case "attribute":
      return filter.attribute;
    case "value":
      const value = filter.value;
      if (void 0 === value)
        return "empty";
      if ("string" == typeof value)
        return `'${escapeXml(value)}'`;
      if ("boolean" == typeof value)
        return value ? "true()" : "false()";
      if (value instanceof Big)
        return value.toString();
      if (value instanceof Date)
        return value.getTime().toString();
      throw new AssertionError();
    case "function":
      const association = filter.parameters.find((p) => "association" === p.type);
      return association ? function(association2, filter2) {
        const literal = filter2.parameters.find((p) => "value" === p.type);
        if (!literal)
          return getFunctionConstraint(filter2);
        const assocConstraint = toXpathConstraint(association2), literalValue = literal.value;
        if (void 0 === literalValue)
          switch (filter2.name) {
            case "=":
              return `not(${assocConstraint})`;
            case "!=":
              return assocConstraint;
            default:
              crash();
          }
        switch (filter2.name) {
          case "=":
            break;
          case "!=":
            return `(${assocConstraint} != ${toXpathConstraint(literal)} or not(${assocConstraint}))`;
          case "contains":
            if ("ReferenceSet" === association2.associationType)
              return Array.isArray(literalValue) ? `(${literalValue.map((guid) => `${assocConstraint} = '${guid}'`).join(" and ")})` : `(${assocConstraint} = ${toXpathConstraint(literal)})`;
            break;
          default:
            crash();
        }
        return getFunctionConstraint(filter2);
      }(association, filter) : getFunctionConstraint(filter);
    case "association":
      return filter.associationPath;
  }
}
function getFunctionConstraint(filter) {
  return /^(\W+|and|or)$/.test(filter.name) ? "(" + filter.parameters.map(toXpathConstraint).join(` ${filter.name} `) + ")" : `${filter.name}(` + filter.parameters.map(toXpathConstraint).join(", ") + ")";
}
function gatherRuntimeArgumentsFor(constraint, getVariable) {
  switch (constraint.type) {
    case "function":
      const result = {};
      return constraint.parameters.forEach((param) => Object.assign(result, gatherRuntimeArgumentsFor(param, getVariable))), result;
    case "variable":
      const attribute = constraint.attribute && "id" !== constraint.attribute ? constraint.attribute : void 0, runtimeName = constraint.name + (attribute ? "$" + attribute : ""), variable = getVariable(constraint.name), argument = variable instanceof MxObject && attribute ? toRuntimeArgument(variable, attribute) : expressionVariableToRuntimeArgument(variable);
      return void 0 !== argument ? { [runtimeName]: argument } : {};
    default:
      return {};
  }
}

let ui;
function getUI() {
  return ensure(ui);
}
function setUI(s) {
  ui = s;
}

class ObjectValidation {
  constructor(guid, fields) {
    this.guid = guid, this.fields = fields;
  }
  getGuid() {
    return this.guid;
  }
  getAttributes() {
    return Object.keys(this.fields).map((name) => ({ name, reason: this.fields[name] }));
  }
  getFields() {
    return this.getAttributes();
  }
  addAttribute(attr, message) {
    return !(attr in this.fields) && (this.fields[attr] = message, true);
  }
  addField(attr, message) {
    return this.addAttribute(attr, message);
  }
  removeAttribute(attr) {
    return attr in this.fields && (delete this.fields[attr], true);
  }
  removeField(attr) {
    return this.removeAttribute(attr);
  }
  getErrorReason(attr) {
    return this.fields[attr];
  }
  getReasonByAttribute(attr) {
    return this.getErrorReason(attr);
  }
  clone() {
    return new ObjectValidation(this.guid, { ...this.fields });
  }
  toString() {
    return Object.keys(this.fields).map((attr) => `${attr} ${this.fields[attr]}`).join("; ");
  }
  static describe(validations) {
    const list = [];
    for (let i = 0; void 0 !== validations[i]; i++) {
      const fields = validations[i].getFields();
      for (let x = 0; void 0 !== fields[x]; x++)
        list.push(translate("mendix.lib.Validations", "field_issue", fields[x].name, fields[x].reason));
    }
    return list.join("\n");
  }
  static fromResponse(dataValidations) {
    return dataValidations.map(({ guid, errorFields }) => {
      const fieldMap = {};
      return errorFields.forEach(({ name, message }) => {
        fieldMap[name] = message;
      }), new ObjectValidation(guid, fieldMap);
    });
  }
}

class FakePerformanceTracker {
  begin() {
  }
  end() {
  }
}
class WebPerformanceTracker {
  begin(name) {
    performance.mark(name);
  }
  end(name) {
    performance.measure(name, name);
  }
}
function isPerformanceTrackingEnabled() {
  return window?.MX_ENABLE_PERFORMANCE_TRACKING && "undefined" != typeof performance;
}
function getNanoflow(nanoflowId) {
  return nanoflowId();
}
var AggregateFunction;
function getInstructionDescription(instruction) {
  switch (instruction.type) {
    case "nanoflowCall":
      return `Call nanoflow: ${getNanoflow(instruction.flow).name}`;
    case "microflowCall":
      return `Call microflow: ${instruction.operationId}`;
    case "javaScriptActionCall":
      return "string" == typeof instruction.action ? `Call JavaScript Action: ${instruction.action}` : "Call JavaScript Action";
    case "openForm":
      return "Show page" + instruction.path;
    case "aggregate":
      return `Aggregate list $${instruction.inputVar}`;
    case "sortList":
      return `Sort list $${instruction.inputVar}`;
    case "filterListByExpression":
    case "filterList":
      return `Filter list $${instruction.inputVar}`;
    case "rangeFromList":
      return `Range from list $${instruction.inputVar}`;
    case "setVariable":
      return `Set variable $${instruction.outputVar}`;
    case "synchronize":
      const variables = "specific" === instruction.syncType ? `: ${instruction.variableNames.map((x) => `$${x}`).join(", ")}` : "";
      return `Synchronize ${instruction.syncType} objects${variables}`;
    case "associationRetrieve":
      return `Retrieve $${instruction.inputVar}/${instruction.association}`;
    case "databaseRetrieve":
      return `Retrieve ${instruction.entity} from database`;
    case "createObject":
      return `Create object $${instruction.outputVar}`;
    case "changeObject":
      return `Change object $${instruction.inputVar}/${instruction.member}`;
    case "commitObjects":
      return `Commit object(s) $${instruction.inputVar}`;
    case "deleteObjects":
      return `Delete object(s) $${instruction.inputVar}`;
    case "rollbackObjects":
      return `Rollback object(s) $${instruction.inputVar}`;
    case "whileLoop":
      return "Loop (while)";
    case "listLoop":
      return `Loop list $${instruction.listVar}`;
    default:
      return instruction.type.charAt(0).toUpperCase() + instruction.type.slice(1);
  }
}
!function(AggregateFunction2) {
  AggregateFunction2.Sum = "Sum", AggregateFunction2.Average = "Average", AggregateFunction2.Count = "Count", AggregateFunction2.Minimum = "Minimum", AggregateFunction2.Maximum = "Maximum", AggregateFunction2.All = "All", AggregateFunction2.Any = "Any", AggregateFunction2.Reduce = "Reduce";
}(AggregateFunction || (AggregateFunction = {}));
class AggregateExecutor {
  constructor(evaluateExp) {
    this.evaluateExp = evaluateExp, this.instructionType = "aggregate";
  }
  async execute(instruction, context) {
    const inputList = context.getScope().get(instruction.inputVar);
    if (!isMxObjectArray(inputList))
      throw new AssertionError();
    const scope = context.getScope();
    if (instruction.operation !== AggregateFunction.Count)
      if (instruction.useExpression) {
        const reducer = /* @__PURE__ */ function(context2, evaluateFlowExpression2, inputList2, expression, exposeCurrentResult) {
          return async (resultOnEmpty, fun, initialValue = void 0) => {
            if (0 === inputList2.length)
              return resultOnEmpty;
            const scope2 = context2.getScope();
            let res = initialValue !== firstFlag ? initialValue : void 0;
            try {
              initialValue === firstFlag && (scope2.set("currentObject", inputList2[0]), exposeCurrentResult && scope2.set("currentResult", res), res = await evaluateFlowExpression2(expression, scope2, "primitive"));
              for (const obj of inputList2) {
                scope2.set("currentObject", obj), exposeCurrentResult && scope2.set("currentResult", res);
                res = fun(res, await evaluateFlowExpression2(expression, scope2, "primitive"));
              }
            } finally {
              scope2.set("currentObject", void 0), scope2.set("currentResult", void 0);
            }
            return res;
          };
        }(context, this.evaluateExp, inputList, ensure(instruction.expression), instruction.operation === AggregateFunction.Reduce), value = await async function(reducer2, instruction2, inputList2, context2, evaluateFlowExpression2) {
          switch (instruction2.operation) {
            case AggregateFunction.Sum:
              return reducer2(Big(0), (a, b) => a.plus(b), Big(0));
            case AggregateFunction.Average:
              const sumResult = await reducer2(void 0, (a, b) => a.plus(b), Big(0));
              if (void 0 === sumResult)
                return;
              return sumResult.div(inputList2.length);
            case AggregateFunction.Minimum:
              return reducer2(void 0, (a, b) => a.lt(b) ? a : b, firstFlag);
            case AggregateFunction.Maximum:
              return reducer2(void 0, (a, b) => a.gt(b) ? a : b, firstFlag);
            case AggregateFunction.All:
              return reducer2(true, (a, b) => a && b, true);
            case AggregateFunction.Any:
              return reducer2(false, (a, b) => Boolean(a) || Boolean(b), false);
            case AggregateFunction.Reduce:
              const scope2 = context2.getScope(), init = await evaluateFlowExpression2(ensure(instruction2.initialExpression), scope2, "primitive");
              return reducer2(init, (_, a) => a, init);
            default:
              return;
          }
        }(reducer, instruction, inputList, context, this.evaluateExp);
        scope.set(instruction.outputVar, value);
      } else
        scope.set(instruction.outputVar, function(inputList2, operation, member) {
          const inputValues = inputList2.map((obj) => obj.get2(member)).filter((val) => val instanceof Big);
          switch (operation) {
            case AggregateFunction.Minimum:
              return 0 === inputValues.length ? void 0 : inputValues.reduce((curMin, curVal) => curVal.lt(curMin) ? curVal : curMin, ensure(inputValues[0]));
            case AggregateFunction.Maximum:
              return 0 === inputValues.length ? void 0 : inputValues.reduce((curMax, curVal) => curVal.gt(curMax) ? curVal : curMax, ensure(inputValues[0]));
            case AggregateFunction.Average:
              return 0 === inputValues.length ? void 0 : sum(inputValues).div(inputValues.length);
            case AggregateFunction.Sum:
              return sum(inputValues);
            default:
              return;
          }
        }(inputList, instruction.operation, ensure(instruction.member)));
    else
      scope.set(instruction.outputVar, new Big(inputList.length));
  }
}
function sum(values) {
  return values.reduce((sumValue, curValue) => sumValue.plus(curValue), new Big(0));
}
const firstFlag = Symbol("first");
class CopyVariableExecutor {
  constructor() {
    this.instructionType = "copyVariable";
  }
  async execute(instruction, context) {
    const input = context.getScope().get(instruction.inputVar);
    context.getScope().set(instruction.outputVar, input);
  }
}
class FilterListByExpressionExecutor {
  constructor(evaluateExp) {
    this.evaluateExp = evaluateExp, this.instructionType = "filterListByExpression";
  }
  async execute(instruction, context) {
    const input = context.getScope().get(instruction.inputVar);
    let result;
    const scope = context.getScope();
    try {
      if (!isMxObjectArray(input))
        throw new AssertionError();
      if (instruction.retrieveSingleObject)
        for (const obj of input) {
          scope.set("currentObject", obj);
          if (await this.evaluateExp(instruction.expr, context.getScope(), "primitive")) {
            result = obj;
            break;
          }
        }
      else {
        result = [];
        for (const obj of input) {
          scope.set("currentObject", obj);
          await this.evaluateExp(instruction.expr, context.getScope(), "primitive") && result.push(obj);
        }
      }
    } finally {
      scope.set("currentObject", void 0);
    }
    scope.set(instruction.outputVar, result);
  }
}
const isEqual = getExpressionFunction("=");
class FilterListExecutor {
  constructor(evaluateExp) {
    this.evaluateExp = evaluateExp, this.instructionType = "filterList";
  }
  async execute(instruction, context) {
    const input = context.getScope().get(instruction.inputVar), expected = await this.evaluateExp(instruction.expectedValue, context.getScope(), "primitive");
    if (!isMxObjectArray(input))
      throw new AssertionError();
    function equalsExpected(obj) {
      const value = obj.get2(instruction.attribute);
      return isEqual(value, expected);
    }
    instruction.retrieveSingleObject ? context.getScope().set(instruction.outputVar, input.find(equalsExpected)) : context.getScope().set(instruction.outputVar, input.filter(equalsExpected));
  }
}
class InheritanceSwitchExecutor {
  constructor() {
    this.instructionType = "inheritanceSwitch";
  }
  async execute(instruction, context) {
    const obj = context.getScope().get(instruction.inputVar);
    if (void 0 === obj)
      return { goto: ensure(instruction.targets[""]) };
    if (!(obj instanceof MxObject))
      throw new AssertionError();
    const target = [obj.getEntity(), ...obj.getSuperEntities()].find((t) => t in instruction.targets);
    if (!target)
      throw new AssertionError();
    return { goto: ensure(instruction.targets[target]) };
  }
}
class JavaScriptActionExecutor {
  constructor(evaluateExp, executeNanoflow) {
    this.evaluateExp = evaluateExp, this.executeNanoflow = executeNanoflow, this.instructionType = "javaScriptActionCall";
  }
  async execute(instruction, context) {
    const resolvedParameters = await Promise.all(instruction.parameters.map(async (param) => "nanoflowId" === param.kind ? this.createNanoflowWrapper(param.value, context) : this.evaluateExp(param.value, context.getScope(), param.kind))), action = await async function(jsActionId) {
      return jsActionId();
    }(instruction.action), result = await action(...resolvedParameters);
    instruction.outputVar && context.getScope().set(instruction.outputVar, anyToExpressionVariable(result));
  }
  createNanoflowWrapper(nanoflowId, context) {
    if (void 0 !== nanoflowId)
      return (args = {}) => {
        const flatArgs = Object.keys(args).map((name) => ({ name, value: anyToExpressionVariable(args[name]) }));
        return this.executeNanoflow(nanoflowId, flatArgs, context);
      };
  }
}
class JumpExecutor {
  constructor() {
    this.instructionType = "jump";
  }
  async execute(instruction, _context) {
    return { goto: instruction.target };
  }
}
class ListLoopExecutor {
  constructor(executeInstructions) {
    this.executeInstructions = executeInstructions, this.instructionType = "listLoop";
  }
  async execute(instruction, context) {
    const list = context.getScope().get(instruction.listVar);
    if (!Array.isArray(list))
      throw new AssertionError();
    for (const obj of list)
      if (context.getScope().set(instruction.iteratorVar, obj), await this.executeInstructions(instruction.body, context))
        break;
  }
}
class MicroflowCallExecutor {
  constructor(evaluateFlowExpression2) {
    this.evaluateFlowExpression = evaluateFlowExpression2, this.instructionType = "microflowCall", this.logger = LogManager.get().getLogger(LogNode.Nanoflow);
  }
  async execute({ operationId, parameters, outputVar }, context) {
    const stopwatch = new Stopwatch();
    this.logger.debug(`[${context.executionId}] Starting microflow call ${operationId}.`);
    const microflowParameters = await this.toRuntimeArguments(parameters, context), result = mx.isOffline() ? await offlineData().executeMicroflow(operationId, microflowParameters) : await onlineData().executeMicroflow(operationId, microflowParameters, context.currentForm);
    void 0 !== outputVar && context.getScope().set(outputVar, result), this.logger.debug(`[${context.executionId}] Finished microflow call ${operationId} in ${stopwatch.measure()} milliseconds.`);
  }
  async toRuntimeArguments(parameters, context) {
    const result = {};
    for (const { name, value, kind } of parameters) {
      const expressionResult = await this.evaluateFlowExpression(value, context.getScope(), kind);
      if ("object" === kind && expressionResult instanceof MxObject)
        result[name] = { guid: expressionResult.getGuid() };
      else if ("list" === kind && isMxObjectArray(expressionResult))
        result[name] = { guids: expressionResult.map((mxobj) => mxobj.getGuid()) };
      else if ("primitive" === kind) {
        const runtimeValue = expressionVariableToRuntimeValue(expressionResult);
        null !== runtimeValue && (result[name] = { value: runtimeValue });
      }
    }
    return result;
  }
}
class NanoflowCallExecutor {
  constructor(evaluateExpression, executeNanoflow) {
    this.evaluateExpression = evaluateExpression, this.executeNanoflow = executeNanoflow, this.instructionType = "nanoflowCall";
  }
  async execute({ flow, parameters, outputVar }, context) {
    const args = await Promise.all(parameters.map(async (parameter) => ({ name: parameter.name, value: await this.evaluateExpression(parameter.value, context.getScope(), parameter.kind) }))), result = await this.executeNanoflow(flow, args, context);
    void 0 !== outputVar && context.getScope().set(outputVar, result);
  }
}
class AssociationRetrieveExecutor {
  constructor() {
    this.instructionType = "associationRetrieve";
  }
  async execute(instruction, context) {
    const { inputVar, association, entity, retrieveSingleObject, direction, outputVar, operationId } = instruction, obj = context.getScope().get(inputVar);
    if (void 0 === obj)
      return void context.getScope().set(outputVar, retrieveSingleObject ? void 0 : []);
    if (!(obj instanceof MxObject))
      throw new AssertionError();
    const mxobjs = mx.isOffline() ? await async function(mxobj, path, entity2, direction2) {
      return new Promise((resolve, reject) => {
        getData().get({ guid: mxobj.getGuid(), path, entity: entity2, direction: direction2, callback: resolve, error: reject });
      });
    }(obj, association, entity, direction) : (await onlineData().retrieveByPathUsingOperationIdOrCache(obj.getGuid(), association, direction, entity, operationId)).mxObjects;
    context.getScope().set(outputVar, retrieveSingleObject ? mxobjs[0] : mxobjs);
  }
}
class ChangeObjectExecutor {
  constructor(evaluateExp) {
    this.evaluateExp = evaluateExp, this.instructionType = "changeObject";
  }
  async execute(instruction, context) {
    const obj = context.getScope().get(instruction.inputVar);
    if (void 0 === obj)
      return;
    if (!(obj instanceof MxObject))
      throw new AssertionError();
    if (obj.isReadonlyAttr(instruction.member))
      throw new Error(`Cannot set $${instruction.inputVar}/${instruction.member} because it is read-only`);
    const exprValue = await this.evaluateExp(instruction.value, context.getScope(), "primitive");
    obj.set2(instruction.member, exprValue instanceof Big ? exprValue.round(8) : exprValue);
  }
}
function collectObjects(inputVar, context) {
  const variable = context.getScope().get(inputVar);
  if (variable instanceof MxObject)
    return [variable];
  if (isMxObjectArray(variable) || void 0 === variable)
    return variable;
  throw new AssertionError();
}
class CommitObjectsExecutor {
  constructor() {
    this.instructionType = "commitObjects";
  }
  async execute(instruction, context) {
    const objectsToCommit = collectObjects(instruction.inputVar, context);
    if (void 0 === objectsToCommit || 0 === objectsToCommit.length)
      return;
    const uniqueObjectToCommit = uniqueBy(objectsToCommit, (obj) => obj.getGuid()), entity = ensure(uniqueObjectToCommit[0]).getEntity();
    mx.isOffline(entity) ? await new Promise((resolve, reject) => getData().commit({ mxobjs: objectsToCommit, callback: resolve, error: reject })) : await onlineData().executeObjectAction(instruction.operationId, "commit", objectsToCommit);
  }
}
class CreateObjectExecutor {
  constructor() {
    this.instructionType = "createObject";
  }
  async execute(instruction, context) {
    let obj;
    obj = mx.isOffline(instruction.objectType) ? await offlineData().create(instruction.objectType) : await onlineData().createObject(instruction.objectType, instruction.operationId), context.getScope().set(instruction.outputVar, obj);
  }
}
class DatabaseRetrieveExecutor {
  constructor(evaluateExp) {
    this.evaluateExp = evaluateExp, this.instructionType = "databaseRetrieve";
  }
  async execute(instruction, context) {
    const { entity, constraints, limitExpr, offsetExpr, takeFirst, sort, outputVar, operationId } = instruction, scope = context.getScope(), limit = limitExpr ? await this.evaluateExp(limitExpr, scope, "primitive") : void 0, offset = offsetExpr ? await this.evaluateExp(offsetExpr, scope, "primitive") : void 0, options = { ...offset ? { offset: Number(offset) } : {}, ...limit ? { amount: Number(limit) } : {}, ...sort ? { sort } : {} }, { mxObjects } = mx.isOffline(entity) ? await offlineData().retrieve(entity, constraints ? toQueryFilter(constraints, (name) => scope.get(name)) : void 0, options) : await onlineData().retrieveByXPath(operationId, constraints ? gatherRuntimeArgumentsFor(constraints, (name) => scope.get(name)) : {}, "", options, false);
    scope.set(outputVar, takeFirst ? mxObjects[0] : mxObjects);
  }
}
class DeleteObjectsExecutor {
  constructor() {
    this.instructionType = "deleteObjects";
  }
  async execute(instruction, context) {
    const variable = context.getScope().get(instruction.inputVar);
    let objectsToDelete = [];
    if (variable instanceof MxObject)
      objectsToDelete = [variable];
    else {
      if (!isMxObjectArray(variable)) {
        if (void 0 === variable)
          return;
        throw new AssertionError();
      }
      if (0 === variable.length)
        return;
      objectsToDelete = uniqueBy(variable, (obj) => obj.getGuid());
    }
    const entity = ensure(objectsToDelete[0]).getEntity();
    mx.isOffline(entity) ? await offlineData().delete(objectsToDelete) : await onlineData().executeObjectAction(instruction.operationId, "delete", objectsToDelete);
  }
}
class RollbackObjectsExecutor {
  constructor() {
    this.instructionType = "rollbackObjects";
  }
  async execute(instruction, context) {
    const objectsToRollback = collectObjects(instruction.inputVar, context);
    if (void 0 === objectsToRollback || 0 === objectsToRollback.length)
      return;
    const uniqueObjectToRollback = uniqueBy(objectsToRollback, (obj) => obj.getGuid()), entity = ensure(uniqueObjectToRollback[0]).getEntity();
    mx.isOffline(entity) ? await new Promise((resolve, reject) => getData().rollback({ mxobjs: objectsToRollback, callback: resolve, error: reject })) : await onlineData().executeObjectAction(instruction.operationId, "rollback", objectsToRollback);
  }
}
class ClearFromClientExecutor {
  constructor() {
    this.instructionType = "clearFromClient";
  }
  async execute(instruction, _context) {
    if (!mx.isOffline())
      return;
    const { entity } = instruction;
    await offlineData().clearFromClient(entity);
  }
}
class SynchronizeExecutor {
  constructor() {
    this.instructionType = "synchronize";
  }
  async execute(instruction, context) {
    if (mx.isOffline())
      switch (instruction.syncType) {
        case "all":
          await offlineData().runFullSynchronization();
          break;
        case "unsynchronized":
          const { dirtyObjects } = await offlineData().retrieveDirtyObjects(true), deletesToBeSynced = await offlineData().retrieveDeletes();
          (dirtyObjects.length > 0 || Object.keys(deletesToBeSynced).length > 0) && await offlineData().selectiveSync(dirtyObjects, deletesToBeSynced);
          break;
        case "specific":
          const { variableNames } = instruction, allObjects = variableNames.flatMap((name) => {
            const value = context.getScope().get(name);
            if (value instanceof MxObject || isMxObjectArray(value))
              return value;
            if (void 0 === value)
              return [];
            throw new AssertionError();
          });
          allObjects.length > 0 && await offlineData().selectiveSync(uniqueBy(allObjects, (obj) => obj.getGuid()));
      }
  }
}
class RangeFromListExecutor {
  constructor(evaluateExp) {
    this.evaluateExp = evaluateExp, this.instructionType = "rangeFromList";
  }
  async execute(instruction, context) {
    const input = context.getScope().get(instruction.inputVar);
    if (!Array.isArray(input))
      throw new AssertionError();
    const offsetValue = toNumber(await this.evaluateExp(instruction.offset, context.getScope(), "primitive")), limitValue = toNumber(await this.evaluateExp(instruction.limit, context.getScope(), "primitive")), offset = offsetValue <= 0 ? 0 : offsetValue, limit = limitValue <= 0 ? Number.MAX_SAFE_INTEGER : limitValue;
    context.getScope().set(instruction.outputVar, input.slice(offset, offset + limit));
  }
}
class ReturnExecutor {
  constructor(evaluateExp) {
    this.evaluateExp = evaluateExp, this.instructionType = "return";
  }
  async execute(instruction, context) {
    return { result: await this.evaluateExp(instruction.result, context.getScope(), instruction.resultKind) };
  }
}
class SetVariableExecutor {
  constructor(evaluateExp) {
    this.evaluateExp = evaluateExp, this.instructionType = "setVariable";
  }
  async execute(instruction, context) {
    context.getScope().set(instruction.outputVar, await this.evaluateExp(instruction.value, context.getScope(), instruction.outputKind));
  }
}
class SortListExecutor {
  constructor() {
    this.instructionType = "sortList";
  }
  async execute(instruction, context) {
    const input = context.getScope().get(instruction.inputVar);
    if (!isMxObjectArray(input))
      throw new AssertionError();
    let arrCopy = input.slice();
    const meta = getEntityMeta(instruction.entity);
    instruction.items.slice().reverse().forEach((item) => {
      const dataType = meta?.attributes[item.attribute]?.type ?? "String", [validObjs, emptyObjs] = partition((arrItem) => {
        const attr = arrItem.get2(item.attribute);
        return "" !== attr && null != attr;
      }, arrCopy);
      switch (dataType) {
        case "DateTime":
          validObjs.sort(applyOrdering(item.order, (a, b) => attributeToClientValue(a.get2(item.attribute)) - attributeToClientValue(b.get2(item.attribute))));
          break;
        case "String":
        case "Enum":
        case "HashString":
          validObjs.sort(applyOrdering(item.order, (a, b) => {
            const aAttr = a.get2(item.attribute).toLowerCase(), bAttr = b.get2(item.attribute).toLowerCase();
            return (aAttr > bAttr ? 1 : 0) - (bAttr > aAttr ? 1 : 0);
          }));
          break;
        case "AutoNumber":
        case "Long":
        case "Integer":
        case "Decimal":
          validObjs.sort(applyOrdering(item.order, (a, b) => {
            const aAttr = a.get2(item.attribute), bAttr = b.get2(item.attribute);
            return aAttr.cmp(bAttr);
          }));
          break;
        case "Boolean":
          validObjs.sort(applyOrdering(item.order, (a, b) => {
            const aAttr = a.get2(item.attribute);
            return aAttr === b.get2(item.attribute) ? 0 : aAttr ? 1 : -1;
          }));
          break;
        default:
          throw new Error("Unsupported data type");
      }
      arrCopy = validObjs.concat(emptyObjs);
    }), context.getScope().set(instruction.outputVar, arrCopy);
  }
}
function applyOrdering(ordering, compareFn) {
  return (a, b) => {
    const result = compareFn(a, b);
    return "desc" === ordering ? -1 * result : result;
  };
}
class SwitchExecutor {
  constructor(exprEvaluator) {
    this.exprEvaluator = exprEvaluator, this.instructionType = "switch";
  }
  async execute(instruction, context) {
    const value = await this.exprEvaluator(instruction.condition, context.getScope(), "primitive"), valueString = void 0 !== value ? value.toString() : "";
    if (!(valueString in instruction.targets))
      throw new AssertionError();
    return { goto: ensure(instruction.targets[valueString]) };
  }
}
class FlowScope {
  constructor() {
    this.subscriptions = /* @__PURE__ */ new Map(), this.map = {}, this.map.latestError = void 0;
  }
  set(name, value) {
    this.map[name] = value, value instanceof MxObject ? this.subscribeToObjects([value]) : isMxObjectArray(value) && this.subscribeToObjects(value);
  }
  get(name) {
    if (!(name in this.map))
      throw new AssertionError();
    const value = this.map[name];
    return value instanceof MxObject && value.isUnavailable() ? void 0 : isMxObjectArray(value) ? value.filter((v) => !v.isUnavailable()) : value;
  }
  all() {
    return Object.keys(this.map);
  }
  destroy() {
    this.subscriptions.forEach((s) => s.unsubscribe()), this.subscriptions.clear();
  }
  subscribeToObjects(objs) {
    for (const o of objs) {
      const guid = o.getGuid();
      this.subscriptions.has(guid) || this.subscriptions.set(guid, subscribe({ guid }));
    }
  }
}
class TryCatchExecutor {
  constructor(executeInstructions) {
    this.executeInstructions = executeInstructions, this.instructionType = "tryCatch";
  }
  async execute(instruction, context) {
    try {
      return void await this.executeInstructions(instruction.body, context);
    } catch (e) {
      return e instanceof Error ? context.getScope().set("latestError", e.message) : null != e ? context.getScope().set("latestError", String(e)) : context.getScope().set("latestError", void 0), { goto: instruction.catchTarget };
    }
  }
}
class CloseFormExecutor {
  constructor(evaluateExp) {
    this.evaluateExp = evaluateExp, this.instructionType = "closeForm";
  }
  async execute(instruction, context) {
    const numberOfPagesToClose = instruction.numberOfPagesToClose ? toNumber(await this.evaluateExp(instruction.numberOfPagesToClose, context.getScope(), "primitive")) : 1;
    if (numberOfPagesToClose < 1)
      throw new Error(`The number of pages to close evaluated to ${numberOfPagesToClose}. It must be at least 1.`);
    const { currentForm } = context;
    if (void 0 === currentForm)
      throw new DescribedError("Cannot close the current page. No open page found.");
    currentForm.closePage(numberOfPagesToClose).catch((e) => handleError(e));
  }
}
class OpenFormExecutor {
  constructor(evaluateExp) {
    this.evaluateExp = evaluateExp, this.instructionType = "openForm";
  }
  async execute(instruction, context) {
    const title = instruction.title ? await this.evaluateExp(instruction.title, context.getScope(), "primitive") ?? "" : void 0, formParameters = (await Promise.all(Object.entries(instruction.inputArgs ?? {}).map(([name, expr]) => this.evaluateExp(expr, context.getScope(), "object").then((value) => tuple(name, value?.getGuid()))))).reduce((prev, [name, guid]) => ({ ...prev, [name]: guid }), {}), numberOfPagesToClose = instruction.numberOfPagesToClose ? toNumber(await this.evaluateExp(instruction.numberOfPagesToClose, context.getScope(), "primitive")) : 0, ui = getUI();
    await ui.openForm2(instruction.path, formParameters, title, context.currentForm, instruction.params, numberOfPagesToClose);
  }
}
class ShowMessageExecutor {
  constructor(evaluateExp) {
    this.evaluateExp = evaluateExp, this.instructionType = "showMessage";
  }
  async execute(instruction, context) {
    const expressionResult = await this.evaluateExp(instruction.message, context.getScope(), "primitive"), message = void 0 === expressionResult ? "" : expressionResult;
    getUI().showMessage(instruction.messageType, message, instruction.blocking);
  }
}
class ShowValidationExecutor {
  constructor(evaluateExp) {
    this.evaluateExp = evaluateExp, this.instructionType = "showValidation";
  }
  async execute(instruction, context) {
    const variable = context.getScope().get(instruction.inputVar);
    if (void 0 === variable)
      throw new Error(`Cannot refresh $${instruction.inputVar} as it is empty`);
    if (!(variable instanceof MxObject))
      throw new AssertionError();
    const expressionResult = await this.evaluateExp(instruction.text, context.getScope(), "primitive"), validationText = void 0 === expressionResult ? "" : expressionResult, existingValidations = function(scope, guid) {
      const validationMap = scope[symbol] || (scope[symbol] = {});
      return validationMap[guid] || (validationMap[guid] = {});
    }(context.getScope(), variable.getGuid());
    existingValidations[instruction.member] = validationText;
    const ov = new ObjectValidation(variable.getGuid(), existingValidations);
    await getData().sendValidationUpdates([ov]);
  }
}
const symbol = Symbol("validations");
class WriteLogExecutor {
  constructor(evaluateExp) {
    this.evaluateExp = evaluateExp, this.instructionType = "writeLog";
  }
  async execute(instruction, context) {
    const message = await this.evaluateExp(instruction.message, context.getScope(), "primitive");
    LogManager.get().getLogger(LogNode.Nanoflow).log(instruction.level, message);
  }
}
class WhileLoopExecutor {
  constructor(executeInstructions, exprEvaluator) {
    this.executeInstructions = executeInstructions, this.exprEvaluator = exprEvaluator, this.instructionType = "whileLoop";
  }
  async execute(instruction, context) {
    for (; await this.exprEvaluator(instruction.condition, context.getScope(), "primitive") && !await this.executeInstructions(instruction.body, context); )
      ;
  }
}
class NanoflowDebugger {
  constructor(connection, getNanoflow2, logManager = LogManager.get()) {
    let breakpointsReady;
    this.connection = connection, this.getNanoflow = getNanoflow2, this.breakpoints = /* @__PURE__ */ new Map(), this.debuggedNanoflows = {}, this.logger = logManager.getLogger(LogNode.NanoflowDebugger), this.breakpointsReadyPromise = new Promise((resolve) => {
      breakpointsReady = resolve;
    }), connection.onInstruction("set_breakpoints", (instruction) => {
      this.breakpoints.clear();
      for (const { label, condition } of instruction.breakpoints)
        this.breakpoints.set(label, condition);
      breakpointsReady();
    }), connection.onInstruction("debugger_step", (instruction) => {
      ensure(this.debuggedNanoflows[instruction.executionId]).handleInstruction(instruction);
    }), connection.onInstruction("get_debugger_variable", ({ executionId, variableName, index }) => {
      const variable = ensure(this.debuggedNanoflows[executionId]).context.getScope().get(variableName);
      this.send({ type: "debugger_variable", data: this.serializeVariableContent(variable, index) });
    }), connection.onConnect(() => {
      Object.keys(this.debuggedNanoflows).forEach((executionId) => this.send({ type: "paused_nanoflow", data: this.createPausedNanoflow(ensure(this.debuggedNanoflows[executionId]).context) }));
    });
  }
  async waitForBreakpoints() {
    return this.breakpointsReadyPromise;
  }
  async handleInstruction({ context, instruction }) {
    if (await this.shouldBreak(instruction, context)) {
      const debuggerInstruction = await this.activateDebugger(instruction, context), debuggedNf = ensure(this.debuggedNanoflows[context.executionId]);
      switch (debuggerInstruction.mode) {
        case "continue":
          debuggedNf.maxStackDepthToPause = -1 / 0;
          break;
        case "step_into":
          debuggedNf.maxStackDepthToPause = 1 / 0;
          break;
        case "step_over":
          debuggedNf.maxStackDepthToPause = context.getStackSize();
          break;
        case "step_out":
          debuggedNf.maxStackDepthToPause = context.getStackSize() - 1;
      }
    }
  }
  handleNanoflowCompletion({ executionId }) {
    delete this.debuggedNanoflows[executionId];
  }
  async shouldBreak(instruction, context) {
    if (void 0 === instruction.label || "jump" === instruction.type)
      return false;
    if (this.breakpoints.has(instruction.label)) {
      const condition = this.breakpoints.get(instruction.label);
      if (!condition)
        return true;
      try {
        return true === await evaluateFlowExpression(condition, context.getScope(), "primitive");
      } catch (e) {
        return this.logger.error(`Failed to evaluate breakpoint expression: ${e instanceof Error ? e.message : e}`), false;
      }
    }
    const debuggedNanoflow = this.debuggedNanoflows[context.executionId];
    return void 0 !== debuggedNanoflow && context.getStackSize() <= debuggedNanoflow.maxStackDepthToPause;
  }
  async activateDebugger(instruction, context) {
    const nanoflow = this.getNanoflow(context.getCurrentNanoflowId());
    return this.debuggedNanoflows[context.executionId] = { context, maxStackDepthToPause: 1 / 0, nanoflow: nanoflow.name, objectId: instruction.label, handleInstruction: () => {
    } }, new Promise((resolve) => {
      ensure(this.debuggedNanoflows[context.executionId]).handleInstruction = resolve, this.send({ type: "paused_nanoflow", data: this.createPausedNanoflow(context) });
    });
  }
  createPausedNanoflow(context) {
    const { executionId } = context, { nanoflow, objectId } = ensure(this.debuggedNanoflows[executionId]);
    return { nanoflow, objectId, executionId, variables: this.getVariables(context.getScope()) };
  }
  getVariables(scope) {
    const variables = {};
    for (const name of scope.all().filter((n) => "latestError" !== n)) {
      const variable = scope.get(name);
      switch (typeof variable) {
        case "boolean":
          variables[name] = { type: "boolean", value: variable };
          break;
        case "string":
          variables[name] = { type: "string", value: variable };
          break;
        case "undefined":
          variables[name] = { type: "null" };
          break;
        case "object":
          variable instanceof Date ? variables[name] = { type: "date_time", ...formatDate(variable) } : variable instanceof Big ? variables[name] = { type: "decimal", value: variable.toString() } : Array.isArray(variable) ? variables[name] = { type: "list", size: variable.length } : variables[name] = this.serializeObject(variable, false);
          break;
        default:
          this.logger.error("Unknown variable type: " + typeof variable), variables[name] = { type: "unknown", value: variable };
      }
    }
    return variables;
  }
  serializeVariableContent(variable, index) {
    return variable instanceof MxObject ? this.serializeObject(variable, true) : Array.isArray(variable) && void 0 === index ? { objects: variable.map((obj) => this.serializeObject(obj, false)) } : Array.isArray(variable) && void 0 !== index && variable[index] instanceof MxObject ? this.serializeObject(variable[index], true) : { type: "null" };
  }
  serializeObject(variable, createMembers) {
    if (variable instanceof MxObject) {
      const guid = variable.getGuid(), obj = { type: "object", id: guid, entity: variable.getEntity(), state: getData().isNew(guid) ? "INSTANTIATED" : "NORMAL" };
      if (createMembers) {
        const members = {}, attrs = getAttributesMeta(variable.getEntity()).filter((attrMeta) => variable.has(attrMeta.name));
        for (const attr of attrs) {
          const value = variable.get2(attr.name);
          switch (attr.type) {
            case "AutoNumber":
              members[attr.name] = { type: "auto_number", value };
              break;
            case "Binary":
              members[attr.name] = { type: "binary" };
              break;
            case "Boolean":
              members[attr.name] = { type: "boolean", value };
              break;
            case "DateTime":
              {
                const member = { type: "date_time" };
                value && Object.assign(member, formatDate(value)), members[attr.name] = member;
              }
              break;
            case "Decimal":
              members[attr.name] = { type: "decimal", value };
              break;
            case "Enum":
              members[attr.name] = { type: "enum", value, enumeration_name: ensure(attr.enumeration) };
              break;
            case "HashString":
              members[attr.name] = { type: "hash_string", value };
              break;
            case "Integer":
              members[attr.name] = { type: "integer", value };
              break;
            case "Long":
              members[attr.name] = { type: "long", value };
              break;
            case "ObjectReference":
              {
                const type = ensure(attr.referenceEntity), member = { type: "reference" };
                value && (member.value = { type: String(type), object_id: value.toString() }), members[attr.name] = member;
              }
              break;
            case "ObjectReferenceSet":
              {
                const type = ensure(attr.referenceEntity), member = { type: "reference_set", value: [] };
                value && (member.value = value.map((object_id) => ({ type: String(type), object_id }))), members[attr.name] = member;
              }
              break;
            case "String":
              members[attr.name] = { type: "string", value };
              break;
            default:
              this.logger.error(`Unknown attribute type: ${attr.type}`), members[attr.name] = { type: "unknown", value: String(value) };
          }
        }
        return { ...obj, members };
      }
      return obj;
    }
    return { type: "null" };
  }
  send(message) {
    this.connection.send(JSON.stringify(message));
  }
}
function formatDate(date) {
  return { value: format(localizeDate(date), "yyyy-MM-dd HH:mm:ss.SSS"), session_time: format(date, "yyyy-MM-dd HH:mm:ss.SSS xxxx") };
}
class DescribedNanoflowError extends DescribedError {
  constructor(message, stack, nanoflowStack) {
    super(`${message}

Nanoflow stack:
${nanoflowStack}`), this.nanoflowStack = nanoflowStack, Object.setPrototypeOf(this, DescribedNanoflowError.prototype), this.description = message, this.stack = stack;
  }
}
class FlowContext {
  constructor(currentForm, nanoflowId = void 0, scope = void 0, executionId = newId("flow"), depth = 0, parentContext = void 0) {
    this.currentForm = currentForm, this.nanoflowId = nanoflowId, this.scope = scope, this.executionId = executionId, this.depth = depth, this.parentContext = parentContext;
  }
  getScope() {
    return this.scope;
  }
  getCurrentNanoflowId() {
    return this.nanoflowId ?? this.parentContext?.getCurrentNanoflowId();
  }
  getStackSize() {
    return this.depth;
  }
  getCurrentInstruction() {
    return this.currentInstruction;
  }
  setCurrentInstruction(instruction) {
    this.currentInstruction = instruction;
  }
  getLeafContext() {
    return this.childContext?.getLeafContext() ?? this;
  }
  getParentContext() {
    return this.parentContext;
  }
  async insideNewStack(operation, nanoflowId) {
    const scope = void 0 !== nanoflowId ? new FlowScope() : this.scope;
    this.childContext = new FlowContext(this.currentForm, nanoflowId ?? this.nanoflowId, scope, this.executionId, this.depth + 1, this);
    try {
      return await operation(this.childContext);
    } finally {
      void 0 !== nanoflowId && scope.destroy(), this.childContext = void 0;
    }
  }
}
class NanoflowError extends Error {
  constructor(innerError, nanoflowStack) {
    super(`${innerError instanceof Error ? innerError.message : String(innerError)}

Nanoflow stack:
${nanoflowStack}`), this.innerError = innerError, this.nanoflowStack = nanoflowStack, Object.setPrototypeOf(this, NanoflowError.prototype), innerError instanceof Error && (this.stack = innerError.stack);
  }
}
function isReturn(value) {
  return "object" == typeof value && "result" in value;
}
class NanoflowPerformanceTracker {
  constructor() {
    this.performanceTracker = isPerformanceTrackingEnabled() ? new WebPerformanceTracker() : new FakePerformanceTracker();
  }
  startTracking(nanoflowEngine2) {
    nanoflowEngine2.onNanoflowExecutionEvent("nanoflowStart", this.onNanoflowStart.bind(this)), nanoflowEngine2.onNanoflowExecutionEvent("nanoflowEnd", this.onNanoflowEnd.bind(this)), nanoflowEngine2.onNanoflowExecutionEvent("instructionStart", this.onInstructionStart.bind(this)), nanoflowEngine2.onNanoflowExecutionEvent("instructionEnd", this.onInstructionEnd.bind(this));
  }
  onNanoflowStart({ nanoflowId }) {
    const nanoflowName = NanoflowPerformanceTracker.getNanoflowName(nanoflowId);
    this.performanceTracker.begin(`Nanoflow: ${nanoflowName}`);
  }
  onNanoflowEnd({ nanoflowId }) {
    const nanoflowName = NanoflowPerformanceTracker.getNanoflowName(nanoflowId);
    this.performanceTracker.end(`Nanoflow: ${nanoflowName}`);
  }
  onInstructionStart({ instruction }) {
    const instructionDescription = getInstructionDescription(instruction);
    this.performanceTracker.begin(instructionDescription);
  }
  onInstructionEnd({ instruction }) {
    const instructionDescription = getInstructionDescription(instruction);
    this.performanceTracker.end(instructionDescription);
  }
  static getNanoflowName(nanoflowId) {
    if ("string" == typeof nanoflowId)
      return nanoflowId;
    if ("name" in nanoflowId)
      return nanoflowId.name;
    throw new AssertionError("Nanoflow could not be identified");
  }
}
function toMapEntry(flowExecutor) {
  return [flowExecutor.instructionType, flowExecutor];
}
const nanoflowEngine = new class {
  constructor(lazyExecutors, getNanoflowFromRegistry) {
    this.getNanoflowFromRegistry = getNanoflowFromRegistry, this.executionEventHandlers = { nanoflowStart: [], nanoflowEnd: [], instructionStart: [], instructionEnd: [] }, this.runningNanoflows = new Array(), this.logger = LogManager.get().getLogger(LogNode.Nanoflow);
    this.executors = lazyExecutors((instructions, context) => context.insideNewStack((newContext) => this.executeInstructions(instructions, newContext)), this.executeInstructions.bind(this), this.executeNanoflow.bind(this));
  }
  async execute(nanoflowId, args, currentForm) {
    const context = new FlowContext(currentForm, nanoflowId), nanoflowName = this.getNanoflowFromRegistry(nanoflowId).name, stopwatch = new Stopwatch();
    this.logger.debug(`[${context.executionId}] Starting execution of nanoflow ${nanoflowName}.`), this.runningNanoflows.push(context), await this.raiseEvent("nanoflowStart", { nanoflowId, executionId: context.executionId });
    try {
      return await wait(0), await this.executeNanoflow(nanoflowId, args, context);
    } finally {
      this.runningNanoflows.splice(this.runningNanoflows.indexOf(context), 1), this.logger.debug(`[${context.executionId}] Finished execution of nanoflow ${nanoflowName}. Execution took ${stopwatch.measure()} milliseconds.`), await this.raiseEvent("nanoflowEnd", { nanoflowId, executionId: context.executionId });
    }
  }
  onNanoflowExecutionEvent(type, handler) {
    const handlers = this.executionEventHandlers[type];
    return handlers.push(handler), { unsubscribe() {
      const idx = handlers.indexOf(handler);
      idx > -1 && handlers.splice(idx, 1);
    } };
  }
  generateCallStackOfExecutingNanoflows() {
    return this.runningNanoflows.map((context) => [this.getNanoflowFromRegistry(context.getCurrentNanoflowId()).name, this.generateCallStack(context)]);
  }
  generateCallStack(context) {
    const nfStack = new Array();
    let currentContext = context.getLeafContext(), indent = 0;
    for (; void 0 !== currentContext?.getCurrentInstruction(); )
      nfStack.push(`${indent > 0 ? new Array(indent).fill(" ").join("") : ""} "${getInstructionDescription(currentContext.getCurrentInstruction())}" in nanoflow "${this.getNanoflowFromRegistry(currentContext.getCurrentNanoflowId()).name}"`), currentContext = currentContext.getParentContext(), indent++;
    return nfStack.join("\n");
  }
  async raiseEvent(type, args) {
    const handlers = this.executionEventHandlers[type];
    handlers.length > 0 && await Promise.all(handlers.map((handler) => handler(args)));
  }
  getRunningNanoflows() {
    return [...this.runningNanoflows];
  }
  async executeNanoflow(nanoflowId, args, context) {
    return context.insideNewStack((newContext) => (args.forEach(({ name, value }) => newContext.getScope().set(name, value)), this.executeInstructions(this.getNanoflowFromRegistry(nanoflowId).instructions, newContext)), nanoflowId);
  }
  async executeInstructions(instructions, context) {
    let index = 0;
    for (; index < instructions.length; ) {
      const instruction = ensure(instructions[index]), executor = this.executors.get(instruction.type);
      if (void 0 === executor)
        throw new AssertionError();
      let executorResult;
      await this.raiseEvent("instructionStart", { context, instruction }), context.setCurrentInstruction(instruction);
      try {
        executorResult = await executor.execute(instruction, context);
      } catch (e) {
        throw e instanceof NanoflowError || e instanceof DescribedNanoflowError ? e : e instanceof DescribedError ? new DescribedNanoflowError(e.message, e.stack, this.generateCallStack(context)) : new NanoflowError(e, this.generateCallStack(context));
      } finally {
        await this.raiseEvent("instructionEnd", { context, instruction });
      }
      if ("object" == typeof (value = executorResult) && "goto" in value) {
        const goto = executorResult.goto;
        if (index = instructions.findIndex((i) => i.label === goto), -1 === index)
          throw new AssertionError();
      } else {
        if (isReturn(executorResult))
          return executorResult.result;
        index++;
      }
    }
    var value;
    throw new AssertionError();
  }
}((executeInstructionsInNewStack, executeInstructions, executeNanoflow) => new Map([toMapEntry(new JumpExecutor()), toMapEntry(new SwitchExecutor(evaluateFlowExpression)), toMapEntry(new InheritanceSwitchExecutor()), toMapEntry(new ListLoopExecutor(executeInstructionsInNewStack)), toMapEntry(new WhileLoopExecutor(executeInstructionsInNewStack, evaluateFlowExpression)), toMapEntry(new TryCatchExecutor(executeInstructions)), toMapEntry(new ReturnExecutor(evaluateFlowExpression)), toMapEntry(new CreateObjectExecutor()), toMapEntry(new ClearFromClientExecutor()), toMapEntry(new ChangeObjectExecutor(evaluateFlowExpression)), toMapEntry(new CommitObjectsExecutor()), toMapEntry(new DeleteObjectsExecutor()), toMapEntry(new RollbackObjectsExecutor()), toMapEntry(new SetVariableExecutor(evaluateFlowExpression)), toMapEntry(new CopyVariableExecutor()), toMapEntry(new OpenFormExecutor(evaluateFlowExpression)), toMapEntry(new CloseFormExecutor(evaluateFlowExpression)), toMapEntry(new ShowValidationExecutor(evaluateFlowExpression)), toMapEntry(new DatabaseRetrieveExecutor(evaluateFlowExpression)), toMapEntry(new AssociationRetrieveExecutor()), toMapEntry(new WriteLogExecutor(evaluateFlowExpression)), toMapEntry(new JavaScriptActionExecutor(evaluateFlowExpression, executeNanoflow)), toMapEntry(new SynchronizeExecutor()), toMapEntry(new FilterListExecutor(evaluateFlowExpression)), toMapEntry(new FilterListByExpressionExecutor(evaluateFlowExpression)), toMapEntry(new RangeFromListExecutor(evaluateFlowExpression)), toMapEntry(new SortListExecutor()), toMapEntry(new AggregateExecutor(evaluateFlowExpression)), toMapEntry(new ShowMessageExecutor(evaluateFlowExpression)), toMapEntry(new NanoflowCallExecutor(evaluateFlowExpression, executeNanoflow)), toMapEntry(new MicroflowCallExecutor(evaluateFlowExpression))]), getNanoflow);
if (isPerformanceTrackingEnabled()) {
  new NanoflowPerformanceTracker().startTracking(nanoflowEngine);
}
let nanoflowDebugger;
function initializeNanoflowDebugger(connection, logManager) {
  if (void 0 !== nanoflowDebugger)
    throw new AssertionError();
  nanoflowDebugger = new NanoflowDebugger(connection, getNanoflow, logManager), nanoflowEngine.onNanoflowExecutionEvent("instructionStart", nanoflowDebugger.handleInstruction.bind(nanoflowDebugger)), nanoflowEngine.onNanoflowExecutionEvent("nanoflowEnd", nanoflowDebugger.handleNanoflowCompletion.bind(nanoflowDebugger));
}
async function waitForNFDebuggerBreakpoints() {
  return Promise.race([ensure(nanoflowDebugger).waitForBreakpoints(), wait(500)]);
}

let namePrefix = "";
const getUserScopedNamePrefix = () => namePrefix, setUserScopedNamePrefix = (value) => {
  namePrefix = value;
}, toUserScopedName = (name) => namePrefix ? `${namePrefix}$${name}` : name;

var tablePrefix = /*#__PURE__*/Object.freeze({
	__proto__: null,
	getUserScopedNamePrefix: getUserScopedNamePrefix,
	setUserScopedNamePrefix: setUserScopedNamePrefix,
	toUserScopedName: toUserScopedName
});

const NUMBER_PRECISION = 20, METADATA_TABLE = "_guidToTable", TOMBSTONE_TABLE = "_tombstoneTable", GUID_COLUMN = "guid", TABLE_NAME_COLUMN = "tableName", READONLY_COLUMN = "readonlyAttrs", SYNC_ID_COLUMN = "syncId", METADATA_COLUMNS = ["guid", "tableName", "readonlyAttrs", "syncId"], DB_META_TABLE = "_db_meta", DB_NAME_COLUMN = "name", DB_VALUE_COLUMN = "value", DB_VERSION_KEY = "version", DB_COUNTER_KEY = "cnt", DB_OFFLINE_METADATA_KEY = "offline_metadata", LIKE_ANY_CHAR = "%", LIKE_SOME_CHAR = "_", CHANGED_DATE_COLUMN = "changedDate", HAS_CONTENTS_COLUMN = "HasContents";
function createGetDbMetaValue(key) {
  return [`SELECT ${DB_VALUE_COLUMN} FROM "${DB_META_TABLE}" WHERE "${DB_NAME_COLUMN}" = ?`, [key]];
}
function createUpdateDbMetaValue(key, value) {
  return [`UPDATE "${DB_META_TABLE}" SET "${DB_VALUE_COLUMN}" = ? WHERE ${DB_NAME_COLUMN} = ?`, [value, key]];
}
function createUpdateCounterValue(count) {
  return [`UPDATE "${DB_META_TABLE}" SET "${DB_VALUE_COLUMN}" = "${DB_VALUE_COLUMN}" + ${count} WHERE ${DB_NAME_COLUMN} = ?`, ["cnt"]];
}
function getRequestData(objectCache, guidsToSend) {
  const requestChanges = {};
  guidsToSend.filter((guid) => objectCache.hasChanges(guid)).forEach((guid) => {
    requestChanges[guid] = objectCache.getChanges(guid);
  });
  const requestJson = guidsToSend.filter((guid) => objectCache.has(guid)).map((guid) => objectCache.getObject(guid)).filter((mxobj) => !mxobj.isPersistable() || objectCache.isNew(mxobj.getGuid())).map((mxobj) => mxobj.jsonData);
  return [requestChanges, requestJson];
}
class LabeledGraph {
  constructor() {
    this.labels = [], this.labelMap = {}, this.graph = [];
  }
  addEdge(fromLabel, toLabel) {
    const fromIdx = this.getOrCreateLabelIndex(fromLabel), toIdx = this.getOrCreateLabelIndex(toLabel), destinationIndices = this.graph[fromIdx];
    destinationIndices.includes(toIdx) || destinationIndices.push(toIdx);
  }
  neighborsOf(label) {
    const idx = this.getOrCreateLabelIndex(label);
    return this.graph[idx].map((neighborIdx) => this.indexToLabel(neighborIdx));
  }
  reachableLabels(sourceLabels) {
    const sourceIndices = sourceLabels.map((label) => this.getOrCreateLabelIndex(label));
    return function(graph, start) {
      const visited = new Array(graph.length);
      !function visitEdges(edges) {
        for (const idx of edges) {
          if (idx < 0 || idx >= visited.length)
            throw new Error(`graph: index ${idx} out of bounds in graph of size ${graph.length}`);
          visited[idx] || (visited[idx] = true, visitEdges(graph[idx]));
        }
      }(start);
      const result = [];
      for (let i = 0; i < visited.length; ++i)
        visited[i] && result.push(i);
      return result;
    }(this.graph, sourceIndices).map((idx) => this.indexToLabel(idx));
  }
  indexToLabel(idx) {
    return this.labels[idx];
  }
  getOrCreateLabelIndex(label) {
    if (label in this.labelMap)
      return this.labelMap[label];
    this.labels.push(label), this.graph.push([]);
    const newIdx = this.labels.length - 1;
    return this.labelMap[label] = newIdx, newIdx;
  }
}
function findReachableGuidsToRetain(mxObjs, rootGuids) {
  return buildRetainmentGraph(mxObjs, rootGuids).reachableLabels(Array.from(rootGuids));
}
function findReachableGuidsForRequest(mxObjs, startGuids, associationsToFollow) {
  const objectMap = indexByKey((mxObj) => mxObj.getGuid())(mxObjs), associations = null != associationsToFollow ? function(mxObjs2, associationsToFollow2) {
    const associations2 = [];
    return mxObjs2.forEach((mxObj) => {
      associationsToFollow2.forEach((asf) => {
        if (!mxObj.has(asf.association))
          return;
        const associationOwner = computeSupermostEntityWithAttribute(mxObj.getEntity(), asf.association), selectorEntity = mxObj.getSelectorEntity(asf.association);
        asf.fromEntity === associationOwner && getAllReferences(mxObj, asf.association).forEach((refGuid) => associations2.push({ from: mxObj.getGuid(), to: refGuid })), asf.fromEntity === selectorEntity && getAllReferences(mxObj, asf.association).forEach((refGuid) => associations2.push({ from: refGuid, to: mxObj.getGuid() }));
      });
    }), associations2;
  }(mxObjs, associationsToFollow) : getAllAssociations(mxObjs);
  return createGraph(associations).reachableLabels(startGuids).filter((l) => objectMap[l]);
}
function findChangedReachableGuidsForRequest(objectCache, mxObjs, startGuids) {
  const objectMap = indexByKey((mxObj) => mxObj.getGuid())(mxObjs), associations = function(objectCache2, mxObjs2) {
    const associations2 = [], referenceAttributesEntityMap = getReferenceAttributesEntityMap(mxObjs2);
    return mxObjs2.forEach((mxObj) => {
      referenceAttributesEntityMap.get(mxObj.getEntity()).forEach((association) => {
        mxObj.has(association) && Object.prototype.hasOwnProperty.call(objectCache2.getChanges(mxObj.getGuid()), association) && getAllReferences(mxObj, association).forEach((refGuid) => {
          objectCache2.isNew(refGuid) && associations2.push({ from: mxObj.getGuid(), to: refGuid }), objectCache2.getObject(refGuid)?.has(association) && associations2.push({ to: mxObj.getGuid(), from: refGuid });
        });
      });
    }), associations2;
  }(objectCache, mxObjs);
  return createGraph(associations).reachableLabels(startGuids).filter((l) => objectMap[l]);
}
function findDeletableReachableGuidsForRequest(mxObjs, startGuids) {
  const objectMap = indexByKey((mxObj) => mxObj.getGuid())(mxObjs), associations = function(mxObjs2) {
    const associations2 = [], referenceAttributesEntityMap = getReferenceAttributesEntityMap(mxObjs2);
    return mxObjs2.forEach((mxObj) => {
      referenceAttributesEntityMap.get(mxObj.getEntity()).forEach((association) => {
        const deleteBehavior = mxObj.metaData.deleteBehavior;
        deleteBehavior?.[association]?.sendChildren && getAllReferences(mxObj, association).forEach((refGuid) => associations2.push({ from: mxObj.getGuid(), to: refGuid })), (mxObj.has(association) || deleteBehavior?.[association]?.sendParents) && getAllReferences(mxObj, association).forEach((refGuid) => associations2.push({ from: refGuid, to: mxObj.getGuid() }));
      });
    }), associations2;
  }(mxObjs);
  return createGraph(associations).reachableLabels(startGuids).filter((l) => objectMap[l]);
}
function buildRetainmentGraph(mxObjs, rootGuids) {
  mxObjs = mxObjs.filter((mxObj) => !mxObj.isPersistable() || mxObj.hasChanges() || mxObj.isNew() || rootGuids.has(mxObj.getGuid()));
  const objectMap = indexByKey((mxObj) => mxObj.getGuid())(mxObjs);
  return createGraph(getAllAssociations(mxObjs).filter(({ from, to }) => isRetained(from) && isRetained(to)));
  function isRetained(guid) {
    return rootGuids.has(guid) || guid in objectMap;
  }
}
function getAllAssociations(mxObjs) {
  const associations = [], referenceAttributesEntityMap = getReferenceAttributesEntityMap(mxObjs);
  return mxObjs.forEach((mxObj) => {
    referenceAttributesEntityMap.get(mxObj.getEntity()).forEach((association) => {
      mxObj.has(association) && getAllReferences(mxObj, association).forEach((refGuid) => associations.push({ from: refGuid, to: mxObj.getGuid() }, { from: mxObj.getGuid(), to: refGuid }));
    });
  }), associations;
}
function getReferenceAttributesEntityMap(mxObjs) {
  const referenceAttributesEntityMap = /* @__PURE__ */ new Map();
  for (const mxObj of mxObjs)
    referenceAttributesEntityMap.has(mxObj.getEntity()) || referenceAttributesEntityMap.set(mxObj.getEntity(), getAttributesMeta(mxObj.getEntity()).filter((attr) => ("ObjectReference" === attr.type || "ObjectReferenceSet" === attr.type) && attr.name !== SystemAttribute.Owner && attr.name !== SystemAttribute.ChangedBy).map((association) => association.name));
  return referenceAttributesEntityMap;
}
function getAllReferences(mxObj, attr) {
  return mxObj.getReferences(attr).concat(mxObj.getOriginalReferences(attr));
}
function createGraph(associations) {
  const labeledGraph = new LabeledGraph();
  return associations.forEach(({ from, to }) => labeledGraph.addEdge(from, to)), labeledGraph;
}
function getRequestDataForMicroflow(objectCache, operationId, mfGuids) {
  const microflowInfo = getMicroflowInfo(operationId), guidsToSend = findReachableGuidsForRequest(objectCache.getAllObjects(), mfGuids, microflowInfo?.followedAssociations);
  return mfGuids.filter((guid) => !guidsToSend.includes(guid)).forEach((guid) => guidsToSend.push(guid)), getRequestData(objectCache, guidsToSend);
}
const objectIdCache = /* @__PURE__ */ new Map();
function createMendixGuid(entity) {
  if (void 0 === entity.maxObjectId)
    throw new AssertionError(`Can't create a Mendix guid for "${entity.name}"`);
  const objectId = objectIdCache.get(entity.name) ?? new Big(entity.maxObjectId);
  return objectIdCache.set(entity.name, objectId.minus(1)), objectId.toString();
}
function dehydrateObjectIdCache() {
  const obj = {};
  return objectIdCache.forEach((val, entity) => obj[entity] = val.toString()), obj;
}
function hydrateObjectIdCache(dehydratedCache) {
  Object.entries(dehydratedCache).forEach(([entity, id]) => {
    objectIdCache.set(entity, new Big(id));
  });
}
function createChange(json) {
  const meta = ensure(getEntityMeta(json.objectType)), changeEntries = Object.entries(json.attributes).filter(([attrKey, attr]) => meta.attributes[attrKey]?.isSyncable && !attr.readonly).map(([attrKey, attr]) => ({ [attrKey]: { value: attr.value } }));
  return Object.assign({}, ...changeEntries);
}
const SYNC_DURATION_WARNING_THRESHOLD = 6e4;
function createOfflineGuid() {
  return "GUID:" + newId();
}
function isRuntimeGuid(internalGuid) {
  return !internalGuid.startsWith("GUID:");
}
const indexMxObjectJsonsByGuid = indexByKey((obj) => obj.guid), indexMxObjectsByGuid = indexByKey((obj) => obj.getGuid());
function createChangeFromIncompatibleObjectsJson(json) {
  const changeEntries = Object.keys(json.attributes).map((attr) => ({ [attr]: { value: json.attributes[attr]?.value } }));
  return Object.assign({}, ...changeEntries);
}
function isFileDocumentWithContentNonMetaCheck(objectJson) {
  const { attributes } = objectJson;
  return ["FileID", "HasContents", "Size"].every((attr) => attr in attributes) && attributes.HasContents?.value;
}
function getIncompatibleEntities(oldMetadata, newMetadata) {
  const oldMetadataEntityAttributes = extractEntityAttributesMap(oldMetadata), newMetadataEntityAttributes = extractEntityAttributesMap(newMetadata), incompatibleEntities = [];
  for (const [oldEntity, oldAttributeTypeMap] of oldMetadataEntityAttributes) {
    if (!newMetadataEntityAttributes.has(oldEntity)) {
      incompatibleEntities.push(oldEntity);
      continue;
    }
    const newAttrsTypesMap = newMetadataEntityAttributes.get(oldEntity);
    for (const [oldAttrName, oldAttrType] of oldAttributeTypeMap) {
      const newAttrType = newAttrsTypesMap.get(oldAttrName);
      if (newAttrType && newAttrType !== oldAttrType) {
        incompatibleEntities.push(oldEntity);
        break;
      }
    }
  }
  return new Set(incompatibleEntities);
  function extractEntityAttributesMap(metadata) {
    return new Map(metadata.map((meta) => [meta.objectType, new Map(Object.entries(meta.attributes).map(([attrName, { type }]) => [attrName, type]))]));
  }
}
function toSafeKey(key) {
  return key.replace(".", "$");
}
function fromSafeKey(key) {
  return key.replace("$", ".");
}
function attributeToSql(value) {
  if (void 0 === value)
    return null;
  if (value instanceof Big)
    return bigToSql(value);
  if (value instanceof Date)
    return Number(value);
  if ("boolean" == typeof value)
    return /* @__PURE__ */ function(x) {
      return x ? 1 : 0;
    }(value);
  if (Array.isArray(value))
    throw new AssertionError();
  return value;
}
function sqlToRuntime(value, type) {
  if (null === value)
    return null;
  switch (type) {
    case "DateTime":
      return value;
    case "Boolean":
      return Boolean(value);
    case "Decimal":
    case "Integer":
    case "Long":
      return function(x) {
        const sign = x.startsWith("-") ? "-" : "", meaningfulDigits = x.replace(/^-?0*/, "");
        return sign + ("" !== meaningfulDigits ? meaningfulDigits : "0");
      }(value);
    case "ObjectReferenceSet":
      return "" === value ? null : value.split(",");
    default:
      return String(value);
  }
}
function runtimeToSql(value, type) {
  switch (type) {
    case "AutoNumber":
    case "Binary":
    case "HashString":
    case "Enum":
    case "ObjectReference":
    case "ObjectReferenceSet":
    case "String":
      return null != value ? String(value) : null;
    case "DateTime":
      return null != value ? Number(value) : null;
    case "Boolean":
      return Number(value);
    case "Decimal":
    case "Integer":
    case "Long":
      return function(x) {
        if (null == x)
          return null;
        return bigToSql(new Big(x));
      }(value);
    default:
      throw new AssertionError();
  }
}
function bigToSql(x) {
  const nrOfZeroes = NUMBER_PRECISION - Math.max(0, x.e) - 1;
  return (x.s < 0 ? "-" : "") + new Array(nrOfZeroes + 1).join("0") + x.abs().toFixed();
}
class GuidMapping {
  constructor() {
    this.guidMap = {};
  }
  add(from, to) {
    this.guidMap[from] = to;
  }
  has(from) {
    return from in this.guidMap;
  }
  remove(key) {
    delete this.guidMap[key];
  }
  map(guidOrGuids) {
    return Array.isArray(guidOrGuids) ? guidOrGuids.map(this.mapGuid.bind(this)) : this.mapGuid(guidOrGuids);
  }
  mapChange(change, entityMeta) {
    const mappedChange = {};
    return Object.entries(change).forEach(([attr, entry]) => {
      if (void 0 !== entry.value) {
        const value = "ObjectReference" === entityMeta.attributes[attr]?.type && null != entry.value ? this.map(entry.value) : entry.value;
        mappedChange[attr] = { ...entry, value };
      } else
        mappedChange[attr] = { ...entry };
    }), mappedChange;
  }
  mapMxObjectJSON(obj) {
    const meta = getEntityMeta(obj.objectType), attributes = {};
    return Object.entries(obj.attributes).forEach(([attr, value]) => {
      isReferenceAttribute(meta, attr) ? attributes[attr] = { ...value, value: this.map(value.value) } : attributes[attr] = value;
    }), { ...obj, guid: this.map(obj.guid), attributes };
  }
  import(...mappings) {
    mappings.forEach((mapping) => Object.entries(mapping.guidMap).forEach(([key, value]) => this.add(key, value)));
  }
  entries() {
    return Object.entries(this.guidMap);
  }
  testClear() {
    Object.keys(this.guidMap).forEach((key) => delete this.guidMap[key]);
  }
  reverseCopyTo(guidMapping) {
    Object.keys(this.guidMap).forEach((from) => guidMapping.add(this.map(from), from));
  }
  mapGuid(guid) {
    return this.guidMap[guid] ?? guid;
  }
}
class OfflineToRuntimeGuidMapping extends GuidMapping {
  add(offlineGuid, runtimeGuid) {
    if (isRuntimeGuid(offlineGuid) || !isRuntimeGuid(runtimeGuid))
      throw new AssertionError();
    super.add(offlineGuid, runtimeGuid);
  }
  reverse() {
    const map = new RuntimeToOfflineGuidMapping();
    return super.reverseCopyTo(map), map;
  }
}
class RuntimeToOfflineGuidMapping extends GuidMapping {
  add(runtimeGuid, offlineGuid) {
    if (!isRuntimeGuid(runtimeGuid) || isRuntimeGuid(offlineGuid))
      throw new AssertionError();
    super.add(runtimeGuid, offlineGuid);
  }
  reverse() {
    const map = new OfflineToRuntimeGuidMapping();
    return super.reverseCopyTo(map), map;
  }
}
const syncedObjsRuntimeToOfflineMap = new RuntimeToOfflineGuidMapping();
function getRuntimeGuid(offlineGuid) {
  return syncedObjsRuntimeToOfflineMap.reverse().map(offlineGuid);
}
const PARAMETERS_CHUNK_SIZE = 999;
function chunkParameters(arr, amountPerItem = 1) {
  const actualChunkSize = Math.floor(PARAMETERS_CHUNK_SIZE / amountPerItem), result = [];
  for (let i = 0; i < arr.length; i += actualChunkSize)
    result.push(arr.slice(i, i + actualChunkSize));
  return result;
}
function toSqlFilter(filter, tableName) {
  switch (filter.type) {
    case "attribute":
      return { type: "Boolean" === filter.attributeType || "DateTime" === filter.attributeType ? "int" : "string", expr: `${tableName}.[${"id" !== filter.attribute ? toSafeKey(filter.attribute) : "guid"}]`, params: [] };
    case "value":
      const value = filter.isGuid ? getRuntimeGuid(filter.value) : attributeToSql(filter.value);
      return null === value ? { type: "null", expr: "NULL", params: [] } : { type: "number" == typeof value ? "int" : "string", expr: "?", params: [value] };
    case "function":
      const args = filter.parameters.map((p) => toSqlFilter(p, tableName));
      switch (filter.name) {
        case "true":
          return ONE;
        case "false":
          return ZERO;
        case "not": {
          const arg12 = toIntOrStringResult(ensure(args[0]));
          return { type: "int", expr: `(not ${arg12.expr})`, params: arg12.params };
        }
        case "or":
        case "and": {
          const fixedArgs = args.map(toIntOrStringResult);
          return { type: "int", expr: "(" + fixedArgs.map((a) => a.expr).join(` ${filter.name} `) + ")", params: combineParams(...fixedArgs) };
        }
        case "=":
        case "!=":
        case ">":
        case ">=":
        case "<":
        case "<=": {
          let [arg12, arg2] = args.some((a) => "int" === a.type) ? args.map(castAsInt) : args;
          const operation = "=" === filter.name ? "is" : "!=" === filter.name ? "is not" : filter.name;
          return arg12 = ensure(arg12), arg2 = ensure(arg2), { type: "int", expr: `(${arg12.expr} ${operation} ${arg2.expr})`, params: combineParams(arg12, arg2) };
        }
        case "contains":
        case "starts-with":
        case "ends-with": {
          const arg12 = ensure(args[0]), arg2 = ensure(args[1]);
          if ("null" === arg2.type)
            return ONE;
          if ("null" === arg12.type)
            return ZERO;
          const expected = `replace(replace(replace(${arg2.expr}, '${escapeChar = "~"}', '${escapeChar + escapeChar}'), '${LIKE_ANY_CHAR}', '${escapeChar + LIKE_ANY_CHAR}'), '${LIKE_SOME_CHAR}', '${escapeChar + LIKE_SOME_CHAR}')`, like = "starts-with" === filter.name ? `${expected} || '${LIKE_ANY_CHAR}'` : "ends-with" === filter.name ? `'${LIKE_ANY_CHAR}' || ${expected}` : `'${LIKE_ANY_CHAR}' || ${expected} || '${LIKE_ANY_CHAR}'`;
          return { type: "int", expr: `(${arg12.expr} like ${like} escape '~')`, params: arg12.params.concat(arg2.params) };
        }
        case "length":
        case "string-length":
          const arg1 = ensure(args[0]);
          return "null" === arg1.type ? ZERO : { type: "int", expr: `length(${arg1.expr})`, params: arg1.params };
        case "in":
          const attribute = ensure(args[0]), values = ensure(args[1]);
          if (!Array.isArray(values.params[0]))
            throw new AssertionError("'in' function expect array of values");
          return { type: "string", expr: `${attribute.expr} in (${new Array(values.params[0].length).fill("?").join(",")})`, params: values.params[0] };
        default:
          throw new AssertionError(`Operator ${filter.name} is not yet supported`);
      }
    case "association":
      const association = filter.associationPath.split("/")[0];
      return { type: "string", expr: `${tableName}.[${toSafeKey(association)}]`, params: [] };
  }
  var escapeChar;
}
const ONE = { type: "int", expr: "1", params: [] }, ZERO = { type: "int", expr: "0", params: [] };
function toIntOrStringResult(result) {
  return "null" === result.type ? { type: "int", expr: "0", params: [] } : result;
}
function castAsInt(result) {
  return "string" === result.type ? { type: "int", expr: `cast(${result.expr} as integer)`, params: result.params } : result;
}
function combineParams(...args) {
  return [].concat(...args.map((a) => a.params));
}
function createGetEntitiesSql(guids) {
  if (0 === guids.length)
    throw new AssertionError("No guids specified");
  return chunkParameters(guids).map((value) => {
    const guidPlaceholders = new Array(value.length).fill("?").join(", ");
    return [`SELECT "guid", "tableName" FROM "${toUserScopedName("_guidToTable")}" WHERE "guid" IN (${guidPlaceholders})`, value];
  });
}
function createGetDirtyObjectsMetadataSql(excludedEntities = /* @__PURE__ */ new Set()) {
  const excludeCondition = excludedEntities.size > 0 ? ` AND "tableName" NOT IN (${Array.from(excludedEntities).map((e) => `'${e}'`).join(", ")})` : "";
  return [`SELECT "guid", "tableName" FROM "${toUserScopedName("_guidToTable")}" WHERE "syncId" IS NOT NULL${excludeCondition}`, []];
}
function createGetSyncIdsSqlQueries(guids) {
  return chunkParameters(guids).map((value) => {
    const guidPlaceholders = new Array(value.length).fill("?").join(", ");
    return [`SELECT "guid", "syncId" FROM "${toUserScopedName("_guidToTable")}" WHERE "guid" IN (${guidPlaceholders})`, value];
  });
}
function createClearDirtyGuidsSqlQueries(guids) {
  if (0 === guids.length)
    throw new AssertionError("No guids specified");
  return chunkParameters(guids).map((value) => {
    const guidPlaceholders = new Array(value.length).fill("?").join(", ");
    return [`UPDATE "${toUserScopedName("_guidToTable")}" SET "syncId" = NULL WHERE "guid" IN (${guidPlaceholders})`, value];
  });
}
function createCheckTableExistSqlQuery(tableName) {
  return ["SELECT COUNT(name) as cnt FROM sqlite_master WHERE type='table' AND name=?", [tableName]];
}
function createDeleteEntitiesMetaSqlQueries(entities) {
  return chunkParameters(entities).map((value) => {
    const tablePlaceholders = new Array(value.length).fill("?").join(", ");
    return [`DELETE FROM "${toUserScopedName("_guidToTable")}" WHERE "tableName" IN (${tablePlaceholders})`, value];
  });
}
function getEntityAssociationsPairs(targetEntity, entities, includeReferenceSets = true) {
  const targetEntityWithSupers = /* @__PURE__ */ new Set([targetEntity, ...getEntityMeta(targetEntity)?.generalizations ?? []]);
  return Object.assign({}, ...entities.map((entity) => {
    const meta = getEntityMeta(entity), associationsReferencingObjectType = Object.values(meta?.attributes ?? {}).filter((attrMeta) => attrMeta.referenceEntity && targetEntityWithSupers.has(attrMeta.referenceEntity) && (includeReferenceSets || "ObjectReferenceSet" !== attrMeta.type)).map((attrMeta) => attrMeta.name);
    return associationsReferencingObjectType.length > 0 ? { [entity]: associationsReferencingObjectType } : {};
  }));
}
const clone = (objectToClone) => {
  if (null === objectToClone || "object" != typeof objectToClone)
    return objectToClone;
  const objectClone = Array.isArray(objectToClone) ? [] : {};
  return Object.keys(objectToClone).forEach((prop) => objectClone[prop] = clone(objectToClone[prop])), objectClone;
};
async function executeNoImpactInstructions(instructions) {
  const ui = getUI();
  for (const instruction of instructions ?? [])
    switch (instruction.type) {
      case "logout":
        mx.logout();
        break;
      case "show_login":
        ui.showLogin();
        break;
      case "download_file":
        const obj = await getByGuid(instruction.args.FileDocumentGuid);
        ui.downloadFile({ mxobject: ensure(obj), target: instruction.args.Target });
        break;
      case "text_message":
        ui.showMessage(instruction.args.MessageType, instruction.args.MessageContent, instruction.args.MessageBlock);
    }
}
function gatherUpdates(objectCache, json) {
  const changedAttrs = Object.entries(json.changes ?? {}).map(([guid, objChanges]) => Object.keys(objChanges).map((attr) => ({ guid, attr }))), resetAttrs = Object.entries(json.resets ?? {}).map(([guid, attributes]) => attributes.map((attr) => ({ guid, attr }))), attrsChangedByObjects = (json.objects ?? []).map((objectJson) => {
    const obj = objectCache.getObject(objectJson.guid);
    return null !== obj ? function(cachedObj, incomingJson) {
      const incomingObj = MxObject.fromJson(incomingJson);
      return getAttributesMeta(incomingJson.objectType).map((attrMeta) => attrMeta.name).filter((attr) => !function(lhsObj, rhsObj, attr2) {
        if (lhsObj.isReadonlyAttr(attr2) !== rhsObj.isReadonlyAttr(attr2))
          return false;
        if (lhsObj.isReference(attr2)) {
          if (attr2 === SystemAttribute.ChangedBy || attr2 === SystemAttribute.Owner)
            return true;
          return lhsObj.getOriginalReferences(attr2).sort((a, b) => a.localeCompare(b)).join(",") === rhsObj.getOriginalReferences(attr2).sort((a, b) => a.localeCompare(b)).join(",");
        }
        const lhsValue = lhsObj.getOriginalValue(attr2), rhsValue = rhsObj.getOriginalValue(attr2);
        return lhsValue === rhsValue || null != lhsValue && null != rhsValue && lhsValue.valueOf() === rhsValue.valueOf();
      }(cachedObj, incomingObj, attr));
    }(obj, objectJson).map((attr) => ({ guid: objectJson.guid, attr })) : [];
  }), refreshedGuids = unique(concat((json.instructions ?? []).map(getRefreshGuids)).concat(json.deletes ?? [])), attrUpdates = uniqueBy([changedAttrs, resetAttrs, attrsChangedByObjects].flat(2), (x) => `${x.guid}:${x.attr}`).map(({ guid, attr }) => ({ guid, attr })).filter(({ guid }) => !refreshedGuids.includes(guid) && objectCache.has(guid)), objUpdates = refreshedGuids.filter((guid) => objectCache.has(guid)).map((guid) => ({ guid })), entityUpdates = unique(concat((json.instructions ?? []).map((i) => "refresh_class" === i.type ? i.args.classnames : []))).map((entity) => ({ entity }));
  return concat([attrUpdates, objUpdates, entityUpdates]);
}
function getRefreshGuids(i) {
  return "refresh_object_list" === i.type ? i.args.ObjectIds : [];
}
async function handleRuntimeSuccess(objectCache, json, targetForm) {
  const updates = gatherUpdates(objectCache, json);
  await handleState(objectCache, json);
  const closeInstructions = (json.instructions ?? []).filter((i) => "close" === i.type), openInstructions = (json.instructions ?? []).filter((i) => "open_form" === i.type);
  !function(instructions, targetForm2, suspendClosePageUpdate) {
    if (0 === instructions.length || !targetForm2)
      return;
    const numberOfPagesToClose = instructions.reduce((totalPagesToClose, currentInstruction) => totalPagesToClose + currentInstruction.args.NumberOfPagesToClose, 0);
    if (numberOfPagesToClose < 1)
      throw new AssertionError(`The number of pages to close evaluated to ${numberOfPagesToClose}. It must be at least 1.`);
    targetForm2.setSuspend(true), targetForm2.closePage(numberOfPagesToClose, true, suspendClosePageUpdate).finally(() => {
      targetForm2.setSuspend(false);
    }).catch((error) => {
      handleError(error);
    });
  }(closeInstructions, targetForm, openInstructions.some((i) => "content" === i.args.FormTarget)), await publish(...updates), await async function(instructions, targetForm2) {
    const openFormPromises = [], lastOpenPageInstruction = [...instructions].reverse().find((i) => "content" === i.args.FormTarget);
    for (const instruction of instructions) {
      const location = instruction.args.FormTarget, pageUpdateSuspended = "content" === location && instruction !== lastOpenPageInstruction, ui = getUI();
      openFormPromises.push(ui.openForm2(instruction.args.FormPath, mapValues(instruction.args.FormParameters, (v) => v ?? void 0), instruction.args.FormTitle, targetForm2, { location, url: instruction.args.FormUrl, queryString: instruction.args.QueryString, width: instruction.args.FormWidth, height: instruction.args.FormHeight, resizable: instruction.args.FormResizable, pageUpdateSuspended, preferUnderlyingModalOverLastFocusedElement: true }));
    }
    await Promise.all(openFormPromises);
  }(openInstructions), await executeNoImpactInstructions(json.instructions), await handleValidations(json.datavalidation);
}
async function handleRuntimeError(objectCache, e, onValidation) {
  if (e instanceof ValidationError) {
    const json = e.original, updates = gatherUpdates(objectCache, json).filter((u) => !("attr" in u));
    await publish(...updates), await executeNoImpactInstructions(json.instructions), await handleValidations(json.datavalidation, onValidation);
  }
}
async function handleState(objectCache, { objects = [], changes = {}, newpersistable = [], commits = [], deletes = [], resets = {}, committedObjectsOmitted = false }) {
  objectCache.removeChanges(resets), objectCache.addChanges(changes);
  const creates = objects.filter((objJson) => {
    return jsonObj = objJson, !objectCache.has(jsonObj.guid);
    var jsonObj;
  }).filter((objJson) => {
    return jsonObj = objJson, Boolean(getEntityMeta(jsonObj.objectType)?.isPersistable) ? newpersistable.includes(objJson.guid) : !commits.includes(objJson.guid);
    var jsonObj;
  }).map((obj) => obj.guid);
  if (objectCache.onCreate(creates), objectCache.onDelete(deletes), objectCache.onCommit(commits), objectCache.setMxObjects(objects), committedObjectsOmitted) {
    const committedGuidsInStaleCache = commits.filter((guid) => objectCache.has(guid) && !objects.some((obj) => obj.guid === guid));
    if (committedGuidsInStaleCache.length > 0) {
      const json = await retrieveByIds(committedGuidsInStaleCache, {});
      await handleRuntimeSuccess(objectCache, json);
    }
  }
}
async function handleValidations(datavalidations, onValidation) {
  const validations = ObjectValidation.fromResponse(datavalidations ?? []);
  await getData().sendValidationUpdates(validations), validations.length > 0 && onValidation && onValidation(validations);
}
class SynchronizationError extends Error {
  constructor(message = "Could temporarily not synchronize data. Please try again later.") {
    super(message), Object.setPrototypeOf(this, SynchronizationError.prototype);
  }
}
class NotImplementedError extends Error {
  constructor(what = "") {
    super("Not implemented" + ("" !== what ? ": " + what : "")), Object.setPrototypeOf(this, NotImplementedError.prototype);
  }
}
class _DataBackend {
  getByGuid(guids, filter) {
    return Promise.reject(new NotImplementedError("getByGuid"));
  }
  getByPath(guid, path, entity, direction) {
    return Promise.reject(new NotImplementedError("getByPath"));
  }
  getByXPath(xpath, filter, wantCount) {
    return Promise.reject(new NotImplementedError("getByXPath"));
  }
  action(params, context, targetForm, async, onValidation) {
    return Promise.reject(new NotImplementedError("action"));
  }
  create(entity) {
    return Promise.reject(new NotImplementedError("create"));
  }
  commit(guids, context, targetForm, onValidation) {
    return Promise.reject(new NotImplementedError("commit"));
  }
  rollback(guids) {
    return Promise.reject(new NotImplementedError("rollback"));
  }
  remove(guids) {
    return Promise.reject(new NotImplementedError("remove"));
  }
  validate(guids) {
    return Promise.reject(new NotImplementedError("validate"));
  }
  saveDocument(guid, name, params, blob) {
    return Promise.reject(new NotImplementedError("saveDocument"));
  }
  getDocumentUrl(guid, changedDate, isThumb) {
    throw new NotImplementedError("getDocumentUrl");
  }
  getImageUrl(url) {
    return Promise.reject(new NotImplementedError("getImageUrl"));
  }
  cleanup() {
    return Promise.reject(new NotImplementedError("cleanup"));
  }
}

function callbackToPromiseFactory(callbackFunction, scope = null) {
  return function(...args) {
    return callbackToPromise(callbackFunction.bind(scope), ...args);
  };
}
function callbackToPromise(callbackFunction, ...args) {
  return new Promise((resolve, reject) => {
    const argsWithCallbacks = args.concat([resolve, reject]);
    callbackFunction(...argsWithCallbacks);
  });
}

function getStaticResourceUrlFromPath(path) {
  return path.startsWith("data:") ? path : mx.appUrl + path;
}
function getStaticResourceUrl(url) {
  if (url.startsWith("data:"))
    return url;
  /^\w+:\/\//.test(url) || (url = getStaticResourceUrlFromPath(url));
  const cacheBust = getSession().getConfig("cachebust");
  return url.startsWith(mx.appUrl) && !url.endsWith(cacheBust) && (url += (url.includes("?") ? "&" : "?") + cacheBust), url;
}
function getRemoteDynamicResourceUrl(guid, changedDate, isThumb, fileName) {
  return `${mx.remoteUrl}file?guid=${guid}` + (changedDate ? `&changedDate=${changedDate}` : "") + (isThumb ? "&thumb=true" : "") + (fileName ? `&name=${encodeURIComponent(fileName)}` : "");
}

const memoized = {};
async function memoizeConcurrent(key, computation) {
  const keyStr = JSON.stringify(key);
  return keyStr in memoized ? memoized[keyStr] : memoized[keyStr] = withFinally(computation(key), () => {
    delete memoized[keyStr];
  });
}
function createMemoizedCache(genFn) {
  const cache = /* @__PURE__ */ Object.create(null);
  return (key, ...args) => (key in cache || (cache[key] = genFn(key, ...args)), cache[key]);
}

var Access;
function accessible(value, access = Access.Write) {
  return { access, value };
}
function notAccessible() {
  return { access: Access.None };
}
function getSubscribedObjectState$(store, sourceWidget) {
  const [state$] = store.useSlot(sourceWidget, "object");
  return getSubscribedObject$(sourceWidget, state$, store);
}
function getSubscribedObject$(sourceWidget, state$, store) {
  return fromComputation$(`Object of ${sourceWidget}`, () => flatMapL(state$.dependOn() ?? loading(), (stateObj) => (dependOnSubscription({ guid: stateObj.getGuid(), tag: sourceWidget }, store), stateObj.isUnavailable() ? unavailable() : available(stateObj))));
}
function withObjectKeeping$(widgetId, store, value$, getObjects) {
  return fromComputation$(`Subscribe to objects of ${widgetId}`, () => {
    const value = value$.dependOn();
    return "available" === value.status && getObjects(value.value).filter(shouldSubscribeTo).forEach((fullObject) => dependOnSubscription({ tag: widgetId, guid: fullObject.getGuid() }, store)), value;
  });
}
function shouldSubscribeTo(mxObject) {
  const guid = mxObject.getGuid(), data = getData();
  return !mxObject.isPartial() || data.isNew(guid) || Object.keys(data.getChanges(guid)).length;
}
function getObjectByPath$(rootObject$, path, store, onlyFromCache = false) {
  const objectsByPath$ = getObjectsByPath$(rootObject$, path, store, onlyFromCache);
  return fromComputation$(`Get single object from retrieve by ${path}`, () => flatMapL(objectsByPath$.dependOn(), (objectsByPath) => "cacheMiss" !== objectsByPath ? 1 === objectsByPath.length ? available(objectsByPath[0]) : 0 === objectsByPath.length ? unavailable() : crash() : available("cacheMiss")));
}
function getObjectsByPath$(rootObject$, path, store, onlyFromCache = false) {
  const pathSteps = path.split("/");
  let objectsSoFar$ = fromComputation$(`Root object to fetch ${path} from`, () => mapL(rootObject$.dependOn(), (rootObject) => [rootObject]));
  for (; pathSteps.length > 0; ) {
    const [association, entity] = pathSteps.splice(0, 2), previousObjects$ = objectsSoFar$, fetchResult$ = fromRequest$(`Fetch ${association} of ${path}`, () => {
      const previousObjects = previousObjects$.dependOn();
      if ("available" !== previousObjects.status || "cacheMiss" === previousObjects.value)
        return previousObjects;
      const unavailableGuids = /* @__PURE__ */ new Set(), cachedObjects = /* @__PURE__ */ new Set();
      let schemaObjects = [];
      for (const previousObject of previousObjects.value) {
        if (previousObject.isPartial() || (dependOnSubscription({ guid: previousObject.getGuid() }, store), dependOnSubscription({ guid: previousObject.getGuid(), attr: association }, store)), !previousObject.has(association))
          return unavailable();
        const children = previousObject.getChildren(association);
        if (children.length)
          schemaObjects.push(...children);
        else
          for (const reference of previousObject.getReferences(association)) {
            const cachedObject = getData().getCachedObject(reference);
            cachedObject ? cachedObjects.add(cachedObject) : unavailableGuids.add(reference);
          }
      }
      const cachedGuids = new Set(Array.from(cachedObjects).map((o) => o.getGuid()));
      for (const schemaObjectGuid of schemaObjects.map((o) => o.getGuid())) {
        (unavailableGuids.has(schemaObjectGuid) || cachedGuids.has(schemaObjectGuid) || schemaObjects.filter((o) => o.getGuid() === schemaObjectGuid).length > 1) && (schemaObjects = schemaObjects.filter((o) => o.getGuid() !== schemaObjectGuid), cachedGuids.has(schemaObjectGuid) || unavailableGuids.add(schemaObjectGuid));
      }
      return 0 === unavailableGuids.size ? available(schemaObjects.concat(...cachedObjects)) : onlyFromCache ? available("cacheMiss") : getByGuids(Array.from(unavailableGuids)).then((mxobjs) => available(mxobjs.concat(...schemaObjects, ...cachedObjects)));
    });
    objectsSoFar$ = fromComputation$(`Cast fetch result of ${association} in ${path}`, () => {
      const fetchResult = fetchResult$.dependOn();
      return "available" !== fetchResult.status || "cacheMiss" === fetchResult.value ? fetchResult : (fetchResult.value.forEach((obj) => dependOnSubscription({ guid: obj.getGuid() }, store)), available(fetchResult.value.filter((obj) => !obj.isUnavailable() && obj.isA(entity))));
    });
  }
  return objectsSoFar$;
}
function getAccessibleAttribute(object, attribute, store) {
  return object.isPartial() || (dependOnSubscription({ guid: object.getGuid() }, store), dependOnSubscription({ guid: object.getGuid(), attr: attribute }, store)), object.has(attribute) ? accessible(object.get2(attribute), object.isReadonlyAttr(attribute) ? Access.Read : Access.Write) : notAccessible();
}
function getAttribute$(objects$, attribute, store) {
  return fromComputation$(`Value of ${attribute}`, () => mapL(objects$.dependOn(), (objects) => Array.isArray(objects) ? function(objects2, attribute2, store2) {
    const accs = objects2.map((object) => getAccessibleAttribute(object, attribute2, store2));
    return accs.every((a) => a.access === Access.None) ? notAccessible() : accessible(accs.filter((acc) => acc.access !== Access.None).map((acc) => acc.value), Access.Read);
  }(objects, attribute, store) : getAccessibleAttribute(objects, attribute, store)));
}
function withFormSuspension$(store, widgetId, fetchTrigger$, loadedCallback) {
  const [formSuspended$] = store.useSlot(pageScope, "formSuspended"), [firstLoadDone$] = store.useSlot(widgetId, "firstLoadDone");
  let lastUnsuppressedTrigger;
  return fromComputation$(`Load trigger when not suspended of data source of ${widgetId}`, () => {
    const formSuspended = formSuspended$.dependOn(), latestTrigger = fetchTrigger$.dependOn(), isFirstLoad = true !== readUntracked(firstLoadDone$);
    return formSuspended && loadedCallback?.(), formSuspended && !isFirstLoad && void 0 !== lastUnsuppressedTrigger || (lastUnsuppressedTrigger = latestTrigger), lastUnsuppressedTrigger;
  });
}
!function(Access2) {
  Access2[Access2.None = 0] = "None", Access2[Access2.Read = 1] = "Read", Access2[Access2.Write = 2] = "Write";
}(Access || (Access = {}));

const UNAVAILABLE = { status: "unavailable", value: void 0 }, LOADING = { status: "loading", value: void 0 };
function dynAvailable(value) {
  return { status: "available", value };
}
function dynUnavailable() {
  return UNAVAILABLE;
}
function fromLoadable(loadable) {
  switch (loadable.status) {
    case "available":
      return dynAvailable(loadable.value);
    case "unavailable":
      return dynUnavailable();
    case "loading":
      return void 0 === value ? LOADING : { status: "loading", value };
  }
  var value;
}
function asDynamicValue$(value$) {
  return asReloadable$(fromComputation$(`Dynamic ${lowerCaseFirst(value$.name)}`, () => fromLoadable(value$.dependOn())), (v) => ({ value: v.value }));
}
const DEBOUNCE_DELAY = 100;
function asReloadable$(value$, rememberFunc) {
  let lastReturnedValue, debounceHandle, lastAvailableValue = {};
  const [debounceElapsed$, elapseDebounce] = useDependency(`Reloadable monitor of ${lowerCaseFirst(value$.name)}`), previousValue$ = getPreviousValue$(value$);
  return fromComputation$(`Reloadable ${lowerCaseFirst(value$.name)}`, () => {
    debounceElapsed$.dependOn();
    const newValue = value$.dependOn(), triggeredByTimer = newValue === previousValue$.dependOn();
    switch (function(handle) {
      if (void 0 === handle || handle >= scheduledReloadables.length)
        return;
      scheduledReloadables[handle] = void 0;
    }(debounceHandle), newValue.status) {
      case "available":
        return lastAvailableValue = rememberFunc(newValue), lastReturnedValue = newValue;
      case "unavailable":
        return lastAvailableValue = {}, lastReturnedValue = newValue;
      case "loading":
        return lastReturnedValue ? (triggeredByTimer || (debounceHandle = function(action) {
          const handle = scheduledReloadables.length;
          scheduledReloadables.push(action), 1 === scheduledReloadables.length && setTimeout(() => runInAction(() => scheduledReloadables.splice(0).forEach((f) => f?.())), DEBOUNCE_DELAY);
          return handle;
        }(() => {
          lastReturnedValue = { ...newValue, ...lastAvailableValue }, elapseDebounce(), debounceHandle = void 0;
        })), lastReturnedValue) : lastReturnedValue = newValue;
    }
  });
}
const scheduledReloadables = [];

function getActionArguments$(argMap, store, widgetId, predefinedArguments, allowEmptyMultiSelect = true) {
  const params$ = mapValues(argMap, (arg) => {
    if ("expression" in arg)
      return toExpressionArgument$(store, arg, widgetId, attributeValueToActionArgument, predefinedArguments);
    {
      const { widget, source } = arg, sourceMap = predefinedArguments?.[widget] ?? {};
      return source in sourceMap ? fromConstant$(available(sourceMap[source])) : toActionArgument$(store, source, widget, allowEmptyMultiSelect);
    }
  });
  return fromComputation$("Load action parameters", () => mapValues(params$, (p$) => p$.dependOn()));
}
function toActionArgument$(store, source, sourceWidget, allowEmptyMultiSelect = true) {
  switch (source) {
    case "object":
      return function(store2, sourceWidget2) {
        const subscribedObject$ = getSubscribedObjectState$(store2, sourceWidget2);
        return fromComputation$(`Load object of ${sourceWidget2}`, () => mapL(subscribedObject$.dependOn(), (obj) => ({ object: obj })));
      }(store, sourceWidget);
    case "selection":
      return function(store2, sourceWidget2, allowEmptyMultiSelect2) {
        const [selection$] = store2.useSlot(sourceWidget2, "selection");
        return fromComputation$(`Load selection of ${sourceWidget2}`, () => {
          const selection = selection$.dependOn();
          return selection && (allowEmptyMultiSelect2 || selection.length > 0) ? Array.isArray(selection) ? available({ ids: selection }) : available({ id: selection }) : unavailable();
        });
      }(store, sourceWidget, allowEmptyMultiSelect);
    default:
      crash();
  }
}
function toExpressionArgument$(store, arg, widgetId, convertToArgument, predefinedArguments) {
  const description = `Value of ${toFriendlyId(widgetId)}`, dynamicValue$ = asDynamicValue$(getFormExpressionResult$(description, store, arg.expression, (variable) => {
    const widgetVariable = actionArgumentToWidgetVariable(function(widgetId2, arg2, predefinedArguments2) {
      const { widget, source } = arg2, sourceMap = predefinedArguments2?.[widget] ?? {};
      if (!(source in sourceMap) || widget !== widgetId2 && "object" !== source)
        return;
      return sourceMap[source];
    }(widgetId, variable, predefinedArguments));
    return widgetVariable ? fromConstant$(widgetVariable) : getVariableFromStore$(description, store, variable);
  }));
  return fromComputation$("Load expression argument", () => flatMapL(dynamicValue$.dependOn(), (value) => void 0 !== value ? available(convertToArgument(value, arg.kind)) : unavailable()));
}
function toRuntimeArguments(actionArguments) {
  const result = {};
  return Object.keys(actionArguments).forEach((name) => {
    const value = actionArguments[name];
    value && (result[name] = "objects" in value ? { guids: value.objects.map((mxobj) => mxobj.getGuid()) } : "object" in value ? { guid: value.object.getGuid() } : "id" in value ? { guid: value.id } : "ids" in value ? { guids: value.ids } : "primitive" in value ? { value: attributeValueToRuntimeValue(value.primitive) } : value);
  }), result;
}
async function toNanoflowArguments(actionArguments) {
  const objectGuidsToFetch = /* @__PURE__ */ new Set();
  Object.keys(actionArguments).forEach((name) => {
    const arg = actionArguments[name];
    if (void 0 === arg)
      return;
    ("object" in arg ? [arg.object] : "objects" in arg ? arg.objects : []).filter((o) => o.isPartial()).forEach((o) => objectGuidsToFetch.add(o.getGuid())), "id" in arg ? objectGuidsToFetch.add(arg.id) : "ids" in arg && arg.ids.forEach((guid) => objectGuidsToFetch.add(guid));
  });
  const fullObjects = toObjectByKey(await getByGuids(Array.from(objectGuidsToFetch)), (o) => o.getGuid());
  function mapToFullObject(o) {
    return "string" == typeof o ? fullObjects[o] : o.isPartial() ? fullObjects[o.getGuid()] : o;
  }
  function mapToFullObjects(objects) {
    return objects.map(mapToFullObject).filter((o) => o);
  }
  return Object.keys(actionArguments).map((name) => {
    const arg = actionArguments[name];
    return { name, value: arg && ("object" in arg ? mapToFullObject(arg.object) : "objects" in arg ? mapToFullObjects(arg.objects) : "id" in arg ? mapToFullObject(arg.id) : "ids" in arg ? mapToFullObjects(arg.ids) : "primitive" in arg ? arg.primitive : crash()) };
  });
}
function getGuidsFromRuntimeArguments(args) {
  const mfGuids = [];
  return Object.values(args).forEach((mfParam) => {
    "guid" in mfParam ? mfGuids.push(mfParam.guid) : "guids" in mfParam && mfGuids.push(...mfParam.guids);
  }), mfGuids;
}
function getNanoflowArguments$(argMap, store, widgetId, description, fetchOnlyWithAllParams = false) {
  const parametersValues$ = Object.entries(argMap).map((arg) => {
    const [name, nanoFlowArg] = arg;
    let argument$;
    if ("expression" in nanoFlowArg)
      argument$ = toExpressionArgument$(store, { ...nanoFlowArg }, widgetId, attributeValueToActionArgument);
    else {
      const { widget, source } = nanoFlowArg;
      argument$ = toActionArgument$(store, source, widget);
    }
    return { name, value$: fromRequest$(`Parameter ${name} of ${description}`, () => {
      const argument = argument$.dependOn();
      if ("available" !== argument.status)
        return argument;
      const value = argument.value;
      return void 0 !== value ? "object" in value ? available(value.object) : "objects" in value ? available(value.objects) : "id" in value ? getSelection(value.id) : "ids" in value ? getSelection(value.ids) : "primitive" in value ? available(value.primitive) : crash() : crash();
    }) };
  });
  async function getSelection(selection) {
    return Array.isArray(selection) ? async function(selection2) {
      return getByGuids(selection2).then((mxObjects) => {
        const objectsById = toObjectByKey(mxObjects, (o) => o.getGuid());
        return selection2.map((guid) => objectsById[guid]).filter((o) => o);
      });
    }(selection).then((mxObjects) => available(mxObjects)) : getByGuid(selection).then((mxObject) => mxObject ? available(mxObject) : unavailable());
  }
  return fromComputation$(`Parameters of ${description}`, () => {
    const values = parametersValues$.map(({ name, value$ }) => ({ name, value: value$.dependOn() }));
    return values.every(({ value }) => "loading" !== value.status) ? fetchOnlyWithAllParams && values.some(({ value }) => "available" !== value.status) ? unavailable() : available(values.map(({ name, value }) => ({ name, value: getOrElseL(value, void 0) }))) : loading();
  });
}
function getRuntimeArguments$(argMap, store, widgetId, fetchOnlyWithAllParams = false) {
  const description = `data source of ${widgetId}`, parametersValues$ = Object.entries(argMap).map(([name, param]) => ({ name, value$: "expression" in param ? toExpressionArgument$(store, param, widgetId, attributeValueToRuntimeArgument) : toRuntimeArgument$(name, param) }));
  return fromComputation$(`Parameters of ${description}`, () => {
    const values = parametersValues$.map(({ name, value$ }) => ({ name, value: value$.dependOn() }));
    return values.every(({ value }) => "loading" !== value.status) ? fetchOnlyWithAllParams && values.some(({ value }) => "available" !== value.status) ? unavailable() : available(Object.fromEntries(values.filter(({ value }) => "available" === value.status).map(({ name, value }) => tuple(name, getOrCrashL(value))))) : loading();
  });
  function toRuntimeArgument$(name, param) {
    const descr = `Value of ${name} parameter of ${description}`, argument$ = toActionArgument$(store, param.source, param.widget);
    return fromComputation$(descr, () => mapL(argument$.dependOn(), (arg) => void 0 !== arg ? "object" in arg ? { guid: arg.object.getGuid() } : "objects" in arg ? { guids: arg.objects.map((o) => o.getGuid()) } : "id" in arg ? { guid: arg.id } : "ids" in arg ? { guids: arg.ids } : "primitive" in arg ? { value: attributeValueToRuntimeValue(arg.primitive) } : crash() : crash()));
  }
}

var FormatterType;
!function(FormatterType2) {
  FormatterType2.Number = "number", FormatterType2.DateTime = "datetime";
}(FormatterType || (FormatterType = {}));

var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
var __accessCheck = (obj, member, msg) => {
  if (!member.has(obj))
    throw TypeError("Cannot " + msg);
};
var __privateGet = (obj, member, getter) => {
  __accessCheck(obj, member, "read from private field");
  return getter ? getter.call(obj) : member.get(obj);
};
var __privateAdd = (obj, member, value) => {
  if (member.has(obj))
    throw TypeError("Cannot add the same private member more than once");
  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var __privateSet = (obj, member, value, setter) => {
  __accessCheck(obj, member, "write to private field");
  setter ? setter.call(obj, value) : member.set(obj, value);
  return value;
};
var __privateMethod = (obj, member, method) => {
  __accessCheck(obj, member, "access private method");
  return method;
};
var _state, _releasers, _pending, _apply, apply_fn, _lock, lock_fn, _unlock, unlock_fn, _db, _dbReady, _txOptions, _tx, _txTimestamp, _runChain, _putChain, _run, run_fn, _objectStore, _index, _options, _mapIdToFile, _idb, _pendingPurges, _taskTimestamp, _pendingAsync, _growthHandler, _xWriteHelper, xWriteHelper_fn, _xSyncHelper, xSyncHelper_fn, _maybePurge, maybePurge_fn, _bound, bound_fn, _reblockIfNeeded, reblockIfNeeded_fn;
function getImplicitMicroflowParameters() {
  const session = getSession();
  return [session.getUserId(), session.getSessionObjectId()];
}
function getRequestDataForGuidsReachableFrom(objectCache, guids) {
  const session = getSession(), implicitInputGuids = [session.getUserId(), session.getSessionObjectId()], cachedObjects = objectCache.getAllObjects(), guidsToSend = findReachableGuidsForRequest(cachedObjects, guids.concat(implicitInputGuids));
  return getRequestData(objectCache, guidsToSend);
}
function getRequestDataForObjectAction(objectCache, guids, event) {
  const guidsToSend = /* @__PURE__ */ new Set(), cachedObjects = objectCache.getAllObjects(), [guidsNeedingReachability, otherGuids] = partition((guid) => {
    const mxobj = objectCache.getObject(guid);
    return mxobj?.metaData.needsReachableState[event] ?? false;
  }, guids);
  if (0 !== guidsNeedingReachability.length) {
    const session = getSession(), implicitInputGuids = [session.getUserId(), session.getSessionObjectId()];
    addToSet(guidsToSend, findReachableGuidsForRequest(cachedObjects, guidsNeedingReachability.concat(implicitInputGuids)));
  }
  const cachedNewObjects = cachedObjects.filter((mxobj) => objectCache.isNew(mxobj.getGuid())), newGuids = otherGuids.filter((guid) => objectCache.isNew(guid));
  switch (addToSet(guidsToSend, otherGuids), event) {
    case "commit":
      addToSet(guidsToSend, findReachableGuidsForRequest(cachedNewObjects, newGuids)), addToSet(guidsToSend, findChangedReachableGuidsForRequest(objectCache, cachedObjects, otherGuids));
      break;
    case "delete":
      addToSet(guidsToSend, findDeletableReachableGuidsForRequest(cachedObjects, otherGuids));
      break;
    case "rollback":
      addToSet(guidsToSend, otherGuids), addToSet(guidsToSend, findDeletableReachableGuidsForRequest(cachedObjects, newGuids));
  }
  return getRequestData(objectCache, Array.from(guidsToSend));
}
function addToSet(set, itemsToAdd) {
  itemsToAdd.forEach((item) => set.add(item));
}
function handleUncachedObjects(objectCache, mxObjs, json) {
  const { commits = [], deletes = [] } = json;
  mxObjs.forEach((mxObj) => {
    const guid = mxObj.getGuid();
    if (commits.includes(guid)) {
      const cachedMxObj = objectCache.getObject(guid);
      if (!cachedMxObj)
        throw new Error("inconsistent response: committed object is missing from response and cache");
      mxObj.resetFromJSON(cachedMxObj.jsonData);
    } else
      deletes.includes(guid) && mxObj.markAsUnavailable();
  });
}
function removeObjectKeepChanges(objectCache, guid) {
  getSubscribedGuids().includes(guid) || objectCache.removeObjectKeepChanges(guid);
}
function createUpdateSqlQuery(entityMeta, updates, whereAttributeName, whereAttributeValue) {
  if (0 === Object.keys(updates).length)
    throw new AssertionError("No updates specified.");
  const params = [], updateStrings = [];
  Object.entries(updates).forEach(([attribute, value]) => {
    updateStrings.push(`"${toSafeKey(attribute)}" = ?`), params.push(runtimeToSql(value, "guid" === attribute ? "String" : ensure(entityMeta.attributes[attribute]?.type)));
  });
  const tableName = toUserScopedName(toSafeKey(entityMeta.name)), whereExpr = `WHERE ${tableName}.[${toSafeKey(whereAttributeName)}] = ?`;
  return [`UPDATE ${tableName} SET ${updateStrings.join(", ")} ${whereExpr}`, [...params, attributeToSql(whereAttributeValue)]];
}
const styleDeclarationProto = Object.getPrototypeOf(document.body.style), originalSetProperty = styleDeclarationProto.setProperty;
var createRoot;
styleDeclarationProto.setProperty = function(name, value, priority) {
  name.startsWith("--mx-important-") && (name = name.replace("--mx-important-", ""), priority = "important"), originalSetProperty.call(this, name, value, priority ?? "");
};
var m = reactDomExports$1;
createRoot = m.createRoot, m.hydrateRoot;
const DemoUserSwitcher = ({ activeDemoUser, demoUsers, onSelectUser }) => {
  const [isVisible, setIsVisible] = reactExports.useState(false);
  return jsxRuntimeExports.jsxs("div", { className: "mx-demouserswitcher", style: { right: isVisible ? "0px" : "-360px", transition: "right 0.3s" }, children: [jsxRuntimeExports.jsx("div", { className: "mx-demouserswitcher-toggle", onClick: () => setIsVisible(!isVisible) }), jsxRuntimeExports.jsxs("div", { className: "mx-demouserswitcher-content", children: [jsxRuntimeExports.jsx("h2", { children: "Select user" }), jsxRuntimeExports.jsx("p", { children: "Select one of the demo users to view the application with the associated user roles." }), jsxRuntimeExports.jsx("ul", { children: demoUsers.map((user) => jsxRuntimeExports.jsx("li", { className: activeDemoUser === user.name ? "active" : "", onClick: () => onSelectUser(user), style: { cursor: "pointer" }, children: jsxRuntimeExports.jsxs("a", { children: [jsxRuntimeExports.jsx("h3", { children: user.name }), jsxRuntimeExports.jsx("p", { children: user.roles.join(", ") })] }) }, user.name)) })] })] });
};
class ErrorBoundary extends reactExports.Component {
  constructor() {
    super(...arguments), this.state = { hasError: false };
  }
  render() {
    return this.state.hasError ? jsxRuntimeExports.jsx("div", { children: "Something went wrong" }) : this.props.children;
  }
  static getDerivedStateFromError() {
    return { hasError: true };
  }
}
function serializeFilterToViewState(expr) {
  return void 0 !== expr ? function serialize(e) {
    return "literal" === e.type ? function(e2) {
      switch (e2.valueType) {
        case "DateTime":
          return serializedLiteral(e2.valueType, e2.value.getTime());
        case "Numeric":
          return serializedLiteral(e2.valueType, e2.value.toString());
        case "Reference":
        case "ReferenceSet":
          const dataSourceId = e2[dataSourceIdSymbol$1];
          return serializedLiteral(e2.valueType, e2.value, { dataSourceId });
        default:
          return serializedLiteral(e2.valueType, e2.value);
      }
    }(e) : mapValues(e, (v) => Array.isArray(v) ? v.map(serialize) : "object" == typeof v ? serialize(v) : v);
  }(expr) : void 0;
}
function deserializeFilterFromViewState(expr) {
  return void 0 !== expr ? function deserialize(e) {
    const result = "literal" === e.type ? function(e2) {
      switch (e2.valueType) {
        case "DateTime":
          return literal(new Date(e2.value));
        case "Numeric":
          return literal(new Big(e2.value));
        case "Reference":
        case "ReferenceSet":
          return freezeExpression({ type: "literal", value: e2.value, valueType: e2.valueType, [dataSourceIdSymbol$1]: e2.dataSourceId });
        default:
          return literal(e2.value);
      }
    }(e) : mapValues(e, (v) => Array.isArray(v) ? Object.freeze(v.map(deserialize)) : "object" == typeof v ? deserialize(v) : v);
    return freezeExpression(result);
  }(expr) : void 0;
}
function serializedLiteral(valueType, value, extra) {
  return { type: "literal", value, valueType, ...extra };
}
const slotsNotToPersist = ["form", "formSuspended", "object", "editableObject", "isInvalid", "validationRequest", "subtreeReadonly", "uniqueId", "firstLoadDone"], slotPatternsNotToPersist = [/^.*\/items$/];
function shouldPersistSlot(slot) {
  return !slotsNotToPersist.includes(slot) && !slotPatternsNotToPersist.some((p) => p.test(slot));
}
function applyViewState(viewState, storeBackend) {
  viewState.forEach(({ slot, widgetId, values }) => values.forEach(([namespace, value]) => storeBackend.set(widgetId, slot, namespace, function(slot2, value2) {
    return slot2.endsWith("/filter") ? deserializeFilterFromViewState(value2) : value2;
  }(slot, value))));
}
let closePopupHandler, popups = [], popupIndex = 0, messageIndex = 0, loginDialogIndex = 0;
function addId(id) {
  popups.push(id);
}
const logger$2$1 = LogManager.get().getLogger(), stack = [];
let index$1 = -1, isNavigatingBack = false, replaceHome = false, closePageUpdateSuspended = false;
const viewStates = {}, formParameterSubscriptions = [];
const getIndex = () => index$1, setIsNavigatingBack = (value) => isNavigatingBack = value, setReplaceHome = (value) => replaceHome = value, getReplaceHome = () => replaceHome, setClosePageUpdateSuspended = (value) => closePageUpdateSuspended = value;
function add(...ids) {
  stack.splice(index$1 + 1).forEach((removedItem) => {
    delete viewStates[removedItem];
  });
  for (const id of ids)
    index$1++, stack[index$1] = id;
  for (; Object.keys(viewStates).length > 50; ) {
    const item = stack.find((value) => viewStates[value]);
    if (void 0 === item) {
      logger$2$1.warn("viewStates cleanup has failed");
      break;
    }
    delete viewStates[item];
  }
}
let resolveCloseForm, closeFormPromise;
const getResolveCloseForm = () => resolveCloseForm;
async function closeForm(numberOfFormsToClose = 1, replaceHome2) {
  if (replaceHome2 && 1 === numberOfFormsToClose && 0 === getIndex())
    setReplaceHome(true);
  else {
    const numberOfPagesToMoveBack = Math.min(getIndex(), numberOfFormsToClose);
    numberOfPagesToMoveBack > 0 && (setIsNavigatingBack(true), index$1 -= numberOfPagesToMoveBack, window.history.go(-numberOfPagesToMoveBack), closeFormPromise = new Promise((resolve) => resolveCloseForm = resolve), await closeFormPromise);
  }
}
class FormBase {
  constructor(place) {
    this.place = place, this.listeners = {}, this.suspended = false, this.title = "", this.historyId = newId("form");
  }
  getTitle() {
    return this.title;
  }
  setSuspend(suspend) {
    this.suspended !== suspend && (this.suspended = suspend);
  }
  isSuspended() {
    return this.suspended;
  }
  publish(event, callback, error) {
    const list = (this.listeners[event] ?? []).slice();
    !function next() {
      list.length ? (next.data = callback?.data, list.pop()(next, error ?? handleError)) : void 0 !== callback && callback();
    }();
  }
  listen(event, handler) {
    const list = this.listeners[event] ?? [];
    return this.listeners[event] = list, list.push(handler), () => list.splice(list.indexOf(handler), 1);
  }
  unlisten(handler) {
    handler();
  }
  close(callback, error) {
    this.closePage(1, false).then(callback).catch((e) => {
      error && error(e);
    });
  }
  getHistoryId() {
    return this.historyId;
  }
}
class FormWithStore extends FormBase {
  constructor(args) {
    super("content"), this.storeBackend = args.storeBackend, this.historyId = args.historyId, this.name = args.name, this.title = args.title, this.pageContent = args.pageContent, this.formParameters = args.formParameters, this.setFormSuspended = (value) => this.storeBackend.set(pageScope, "formSuspended", rootPath, value), runInAction(() => {
      this.storeBackend.set(pageScope, "form", rootPath, [this, this.getHistoryId()]), Object.keys(this.formParameters).forEach((param) => {
        this.storeBackend.set(param, "firstLoadDone", rootPath, false);
      }), this.setFormSuspended(false);
    }), getByGuids(this.getParameterGuids()).then((objs) => runInAction(() => this.setFormParameters(objs)), (e) => handleError(e));
  }
  getStoreBackend() {
    return this.storeBackend;
  }
  getName() {
    return this.name;
  }
  getParameterGuids() {
    return Object.values(this.formParameters).filter((g) => g);
  }
  setSuspend(suspend) {
    super.setSuspend(suspend), runInAction(() => this.setFormSuspended(suspend));
  }
  getSubmitObjects() {
    const objects = readUntracked(this.storeBackend.getAllEntries$("editableObject")).map(({ value }) => value ? getOrElseL(value, void 0) : void 0).filter((s) => s);
    return unique(objects);
  }
  async triggerValidation() {
    this.storeBackend.set(pageScope, "validationRequest", rootPath, newId("validation_request")), await wait(0);
    if (readUntracked(this.storeBackend.getAllEntries$("isInvalid")).some(({ value }) => value))
      throw new ValidationError();
  }
  getPlaceholderContent(placeholderId) {
    return this.pageContent[placeholderId] ?? null;
  }
  setFormParameters(mxobjs) {
    Object.keys(this.formParameters).forEach((param) => {
      const guid = this.formParameters[param], mxobj = mxobjs.find((o) => o.getGuid() === guid), scope = param;
      this.storeBackend.set(scope, "object", rootPath, mxobj ? available(mxobj) : unavailable()), this.storeBackend.set(scope, "firstLoadDone", rootPath, true);
    });
  }
}
class WebForm extends FormWithStore {
  async closePage(numberOfPagesToClose, replaceHome2, suspendClosePageUpdate) {
    suspendClosePageUpdate && setClosePageUpdateSuspended(true), await closeForm(numberOfPagesToClose, replaceHome2);
  }
}
class PopupForm extends WebForm {
  async closePage(numberOfPagesToClose = 1, replaceHome2, suspendClosePageUpdate) {
    const pagesLeftToClose = function(activeId, totalNumberOfFormsToClose = 1) {
      if (void 0 === closePopupHandler)
        return totalNumberOfFormsToClose;
      const otherPopups = popups.filter((p) => p !== activeId), numberOfPopupsToClose = Math.min(totalNumberOfFormsToClose - 1, otherPopups.length), closedPopups = numberOfPopupsToClose > 0 ? otherPopups.slice(-numberOfPopupsToClose) : [];
      return popups = otherPopups.slice(0, otherPopups.length - numberOfPopupsToClose), closePopupHandler([activeId, ...closedPopups]), totalNumberOfFormsToClose - (numberOfPopupsToClose + 1);
    }(this.getHistoryId(), numberOfPagesToClose);
    pagesLeftToClose > 0 && await super.closePage(pagesLeftToClose, replaceHome2, suspendClosePageUpdate);
  }
}
function observeFirstLoadDone(storeBackend, callback) {
  const firstLoadDoneEntries$ = storeBackend.getAllEntries$("firstLoadDone");
  return reaction(() => firstLoadDoneEntries$.dependOn(), (firstLoadDoneEntries) => {
    firstLoadDoneEntries.every((o) => true === o.value) && setTimeout(callback, 0);
  }, { fireImmediately: true });
}
const MIN_MARGIN = 20, MIN_WIDTH = 300, MIN_HEIGHT = 200, style = { height: "100%", display: "flex", flexDirection: "column" }, ModalContent = ({ className, children, onSubmit }) => onSubmit ? jsxRuntimeExports.jsx("form", { className, style, onSubmit, children }) : jsxRuntimeExports.jsx("div", { className, style, children });
let items = [];
const ModalHeader = ({ titleId, title, active: active2, className, isDialog, showCloseButton, onDrag, onDrop, onClose, onFullscreenToggle }) => {
  const lastPosition = reactExports.useRef({ x: 0, y: 0 }), [dragging, setDragging] = reactExports.useState(false), [mousePressed, setMousePressed] = reactExports.useState(false), onMouseUp = reactExports.useCallback((event) => {
    dragging && (setDragging(false), onDrop()), setMousePressed(false), event.stopPropagation();
  }, [onDrop, dragging]), onMouseMove = reactExports.useCallback((event) => {
    if (dragging) {
      const top = event.clientY - lastPosition.current.y, left = event.clientX - lastPosition.current.x;
      onDrag(top, left, event.clientX), lastPosition.current = { x: event.clientX, y: event.clientY }, event.stopPropagation(), event.preventDefault();
    } else if (mousePressed) {
      const absoluteMovement = { x: Math.abs(event.clientX - lastPosition.current.x), y: Math.abs(event.clientY - lastPosition.current.y) };
      Math.sqrt(absoluteMovement.x ** 2 + absoluteMovement.y ** 2) > 5 && (setDragging(true), setMousePressed(false), lastPosition.current = { x: event.clientX, y: event.clientY });
    }
  }, [dragging, mousePressed, lastPosition, onDrag]);
  return reactExports.useEffect(() => {
    if (active2)
      return document.addEventListener("mouseup", onMouseUp), () => {
        document.removeEventListener("mouseup", onMouseUp);
      };
  }, [active2, onMouseUp]), reactExports.useEffect(() => {
    if (active2 && (mousePressed || dragging))
      return document.addEventListener("mousemove", onMouseMove), () => {
        document.removeEventListener("mousemove", onMouseMove);
      };
  }, [active2, mousePressed, onMouseMove, dragging]), jsxRuntimeExports.jsxs("div", { className, style: { userSelect: "none", flex: "0 0 auto" }, ...isDialog && { "data-focusindex": "-1" }, onMouseDown: (event) => {
    0 === event.button && (setMousePressed(true), lastPosition.current = { x: event.clientX, y: event.clientY });
  }, onDoubleClick: (event) => {
    onFullscreenToggle(), event.stopPropagation();
  }, children: [showCloseButton && jsxRuntimeExports.jsx("button", { type: "button", className: classNames("close", { "mx-dialog-close": isDialog }), title: translate("mxui.widget.Window", "close"), "aria-hidden": true, "aria-label": translate("mxui.widget.Window", "close"), onClick: onClose, children: "\xD7" }), jsxRuntimeExports.jsx("h4", { id: titleId, className: classNames({ "caption mx-dialog-caption": isDialog }), children: title })] });
};
var ResizeMode;
!function(ResizeMode2) {
  ResizeMode2[ResizeMode2.NORTH = 0] = "NORTH", ResizeMode2[ResizeMode2.EAST = 1] = "EAST", ResizeMode2[ResizeMode2.SOUTH = 2] = "SOUTH", ResizeMode2[ResizeMode2.WEST = 3] = "WEST", ResizeMode2[ResizeMode2.NORTHEAST = 4] = "NORTHEAST", ResizeMode2[ResizeMode2.NORTHWEST = 5] = "NORTHWEST", ResizeMode2[ResizeMode2.SOUTHEAST = 6] = "SOUTHEAST", ResizeMode2[ResizeMode2.SOUTHWEST = 7] = "SOUTHWEST";
}(ResizeMode || (ResizeMode = {}));
const resizeDirections = [{ mode: ResizeMode.NORTH, cssClass: "mx-resizer-n" }, { mode: ResizeMode.EAST, cssClass: "mx-resizer-e" }, { mode: ResizeMode.SOUTH, cssClass: "mx-resizer-s" }, { mode: ResizeMode.WEST, cssClass: "mx-resizer-w" }, { mode: ResizeMode.NORTHEAST, cssClass: "mx-resizer-ne" }, { mode: ResizeMode.SOUTHEAST, cssClass: "mx-resizer-se" }, { mode: ResizeMode.SOUTHWEST, cssClass: "mx-resizer-sw" }, { mode: ResizeMode.NORTHWEST, cssClass: "mx-resizer-nw" }];
function getValidMousePosition(positionX, positionY, deadZoneSize) {
  return (positionX < deadZoneSize || positionX > window.innerWidth - deadZoneSize) && (positionX = positionX < deadZoneSize ? deadZoneSize : window.innerWidth - deadZoneSize), (positionY < deadZoneSize || positionY > window.innerHeight - deadZoneSize) && (positionY = positionY < deadZoneSize ? deadZoneSize : window.innerHeight - deadZoneSize), { x: positionX, y: positionY };
}
function ModalResizer({ onResize, onResizeEnd }) {
  const [resizing, setResizing] = reactExports.useState(false), resizeMode = reactExports.useRef(), lastPosition = reactExports.useRef({ x: 0, y: 0 }), onMouseUp = (event) => {
    setResizing(false), event.stopPropagation(), onResizeEnd();
  }, onMouseMove = reactExports.useCallback((event) => {
    if (!resizing)
      return;
    let deltaWidth = 0, deltaHeight = 0, deltaTop = 0, deltaLeft = 0;
    const mousePosition = getValidMousePosition(event.clientX, event.clientY, MIN_MARGIN);
    resizeMode.current === ResizeMode.EAST || resizeMode.current === ResizeMode.NORTHEAST || resizeMode.current === ResizeMode.SOUTHEAST ? deltaWidth = mousePosition.x - lastPosition.current.x : resizeMode.current !== ResizeMode.WEST && resizeMode.current !== ResizeMode.NORTHWEST && resizeMode.current !== ResizeMode.SOUTHWEST || (deltaWidth = lastPosition.current.x - mousePosition.x, deltaLeft = -deltaWidth), resizeMode.current === ResizeMode.SOUTH || resizeMode.current === ResizeMode.SOUTHWEST || resizeMode.current === ResizeMode.SOUTHEAST ? deltaHeight = mousePosition.y - lastPosition.current.y : resizeMode.current !== ResizeMode.NORTH && resizeMode.current !== ResizeMode.NORTHWEST && resizeMode.current !== ResizeMode.NORTHEAST || (deltaHeight = lastPosition.current.y - mousePosition.y, deltaTop = -deltaHeight), lastPosition.current = { x: mousePosition.x, y: mousePosition.y }, 0 === deltaWidth && 0 === deltaHeight || onResize({ deltaWidth, deltaHeight, deltaTop, deltaLeft }), event.stopPropagation(), event.preventDefault();
  }, [resizing, onResize]);
  return reactExports.useEffect(() => {
    if (resizing)
      return document.addEventListener("mouseup", onMouseUp), document.addEventListener("mousemove", onMouseMove), () => {
        document.removeEventListener("mouseup", onMouseUp), document.removeEventListener("mousemove", onMouseMove);
      };
  }, [onMouseMove, resizing]), jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: resizeDirections.map((direction) => jsxRuntimeExports.jsx("div", { className: classNames("mx-resizer", direction.cssClass), onMouseDown: (event) => ((event2, mode) => {
    if (0 !== event2.button)
      return;
    resizeMode.current = mode;
    const mousePosition = getValidMousePosition(event2.clientX, event2.clientY, MIN_MARGIN);
    lastPosition.current = { x: mousePosition.x, y: mousePosition.y }, setResizing(true), event2.preventDefault(), event2.stopPropagation();
  })(event, direction.mode), style: { userSelect: "none" } }, direction.mode)) });
}
function getValidPosition(modal) {
  let { left, top } = modal;
  const { width, height } = modal;
  if (!width || !height)
    return { left, top };
  const exceedsLimitLeft = modal.left < MIN_MARGIN, exceedsLimitTop = modal.top < MIN_MARGIN, exceedsLimitRight = modal.left + width > window.innerWidth - MIN_MARGIN, exceedsLimitBottom = modal.top + height > window.innerHeight - MIN_MARGIN, exceedsMaxWidth = window.innerWidth - MIN_MARGIN < width, exceedsMaxHeight = window.innerHeight - MIN_MARGIN < height;
  return exceedsLimitLeft || exceedsMaxWidth ? left = MIN_MARGIN : exceedsLimitRight && (left = window.innerWidth - width - MIN_MARGIN), exceedsLimitTop || exceedsMaxHeight ? top = MIN_MARGIN : exceedsLimitBottom && (top = window.innerHeight - height - MIN_MARGIN), { top, left };
}
function getDefaultTop(height) {
  return Math.max(MIN_MARGIN, 0.7 * (window.innerHeight / 2 - height / 2));
}
function getDefaultLeft(width) {
  return Math.max(MIN_MARGIN, window.innerWidth / 2 - width / 2);
}
function getMaxHeight() {
  return window.innerHeight - 2 * MIN_MARGIN;
}
function getMaxWidth() {
  return window.innerWidth - 2 * MIN_MARGIN;
}
function adjustSizeToLimits(state, minWidth = MIN_WIDTH, minHeight = MIN_HEIGHT) {
  const newState = { ...state }, maxWidth = getMaxWidth(), maxHeight = getMaxHeight();
  newState.height && (newState.height > maxHeight ? newState.height = maxHeight : newState.height < minHeight && (newState.height = minHeight)), newState.width && (newState.width > maxWidth ? newState.width = maxWidth : newState.width < minWidth && (newState.width = minWidth));
  const position = newState.width && newState.height ? getValidPosition(newState) : { top: newState.top, left: newState.left };
  return { ...newState, ...position };
}
function getFullscreenState() {
  return { width: getMaxWidth(), height: getMaxHeight(), top: MIN_MARGIN, left: MIN_MARGIN };
}
let observer, showMessageHandler, hideMessageHandler, showProgressHandler, hideProgressHandler, hideAllProgressHandler, showLoginHandler;
function Modal({ widgetId, initWidth, initHeight, initOffset, resizable, onFocus, onDrop, title, onClose, zIndex, isActive, isModal, isDialog, showCloseButton, children, className, style: style2, footer, onSubmit, form, preferUnderlyingModalOverLastFocusedElement }) {
  const modalRef = reactExports.useRef(null), modalBodyRef = reactExports.useRef(null), lastManualModalState = reactExports.useRef(), [modalState, setModalState] = reactExports.useState({ width: initWidth, height: initHeight, top: 0, left: 0 }), lastModalWidth = reactExports.useRef(), [isFullscreen, setIsFullscreen] = reactExports.useState(false), [minWidth, setMinWidth] = reactExports.useState(MIN_WIDTH), [minHeight, setMinHeight] = reactExports.useState(MIN_HEIGHT);
  reactExports.useEffect(() => {
    function handleWindowResize() {
      if (observer.disconnect(), modalRef.current && lastManualModalState.current) {
        const { width, height } = modalRef.current.getBoundingClientRect();
        lastManualModalState.current.width && lastManualModalState.current.height || (lastManualModalState.current = { ...lastManualModalState.current, width, height });
        const newState = isFullscreen ? getFullscreenState() : adjustSizeToLimits(lastManualModalState.current, minWidth, minHeight);
        setModalState(newState);
      }
    }
    return window.addEventListener("resize", handleWindowResize), () => {
      window.removeEventListener("resize", handleWindowResize);
    };
  }, [isFullscreen, minWidth, minHeight]), reactExports.useEffect(() => (observer = new ResizeObserver(() => {
    window.requestAnimationFrame(() => {
      !function() {
        if (modalRef.current && lastManualModalState.current) {
          const maxHeight = getMaxHeight(), rect = modalRef.current.getBoundingClientRect();
          if (rect.height + rect.top - MIN_MARGIN > maxHeight) {
            let newState;
            rect.height < maxHeight ? newState = { ...lastManualModalState.current, top: maxHeight - rect.height + MIN_MARGIN + initOffset } : (observer.disconnect(), newState = { ...lastManualModalState.current, top: MIN_MARGIN, height: maxHeight }), lastManualModalState.current = newState, setModalState(newState);
          }
        }
      }();
    });
  }), modalRef.current && observer.observe(modalRef.current), () => {
    observer.disconnect();
  }), [initOffset]);
  const handleDrop = reactExports.useCallback(() => {
    if (modalRef.current) {
      const { width, height } = modalRef.current.getBoundingClientRect();
      lastManualModalState.current = { ...modalState, ...getValidPosition({ top: modalState.top, left: modalState.left, width, height }) }, setModalState(lastManualModalState.current);
    }
    onDrop && onDrop();
  }, [modalState, onDrop]), handleResize = reactExports.useCallback(({ deltaWidth, deltaHeight, deltaTop, deltaLeft }) => {
    if (resizable && modalRef.current) {
      observer.disconnect();
      const { offsetWidth, offsetHeight } = modalRef.current, newState = adjustSizeToLimits({ height: offsetHeight + deltaHeight, width: offsetWidth + deltaWidth, top: modalState.top + deltaTop, left: modalState.left + deltaLeft }, minWidth, minHeight);
      lastManualModalState.current = newState, setModalState(newState), setIsFullscreen(false);
    }
  }, [resizable, modalState, minWidth, minHeight]), setMinSize = reactExports.useCallback(() => {
    if (modalRef.current) {
      const { clientWidth, clientHeight } = modalRef.current, borders = function(node) {
        const { offsetHeight, offsetWidth, clientHeight: clientHeight2, clientWidth: clientWidth2 } = node;
        return { x: offsetWidth - clientWidth2, y: offsetHeight - clientHeight2 };
      }(modalRef.current), fullWidth = clientWidth + borders.x, fullHeight = clientHeight + borders.y, newMinWidth = fullWidth > MIN_WIDTH + borders.x ? MIN_WIDTH + borders.x : fullWidth, newMinHeight = fullHeight > MIN_HEIGHT + borders.y ? MIN_HEIGHT + borders.y : fullHeight;
      setMinWidth(newMinWidth), setMinHeight(newMinHeight);
    }
  }, []), handleFullScreenToggle = reactExports.useCallback(() => {
    isFullscreen ? lastManualModalState.current && (lastModalWidth.current = void 0, setModalState(adjustSizeToLimits(lastManualModalState.current))) : (lastManualModalState.current = modalState, lastModalWidth.current = modalRef.current?.getBoundingClientRect().width, setModalState(getFullscreenState())), setIsFullscreen(!isFullscreen);
  }, [isFullscreen, modalState]);
  reactExports.useEffect(() => {
    const handleEscPress = (e) => {
      "Escape" === e.key && modalRef.current?.contains(getFocus()) && !document.body.hasAttribute(DISABLE_INTERACTION_ATTRIBUTE) && (e.stopPropagation(), e.preventDefault(), onClose());
    };
    return document.addEventListener("keydown", handleEscPress), () => {
      document.removeEventListener("keydown", handleEscPress);
    };
  }, []);
  const captionId = `${widgetId}_caption`, contentId = `${widgetId}_content`, lastfocusedElement = reactExports.useRef(getFocus());
  return reactExports.useEffect(() => {
    function focusModal() {
      if (modalBodyRef.current && modalRef.current) {
        const elementToFocus = findFirst(modalBodyRef.current) ?? findFirst(modalRef.current) ?? modalRef.current;
        moveFocusTo(elementToFocus);
      }
    }
    let firstLoadDoneReactionDisposer;
    return function(modalId, modalContentId, previousFocusedItem, preferUnderlyingModalOverLastFocusedElement2) {
      items.unshift({ modalId, modalContentId, previousFocusedItem, preferUnderlyingModalOverLastFocusedElement: preferUnderlyingModalOverLastFocusedElement2 });
    }(widgetId, contentId, lastfocusedElement.current ?? void 0, preferUnderlyingModalOverLastFocusedElement ?? false), form ? firstLoadDoneReactionDisposer = observeFirstLoadDone(form.getStoreBackend(), focusModal) : focusModal(), () => {
      setFocus(function() {
        const poppedItem = items.shift(), peekedItem = items[0];
        if (poppedItem?.preferUnderlyingModalOverLastFocusedElement && void 0 !== peekedItem && poppedItem.previousFocusedItem === peekedItem.previousFocusedItem) {
          const modal = document.getElementById(peekedItem.modalId), modalContent = document.getElementById(peekedItem.modalContentId);
          if (modal && modalContent)
            return findFirst(modalContent) ?? findFirst(modal) ?? modal;
        }
        return poppedItem?.previousFocusedItem ?? document.body;
      }()), firstLoadDoneReactionDisposer && firstLoadDoneReactionDisposer();
    };
  }, []), reactExports.useEffect(() => {
    function handleFinishOpening() {
      if (!modalRef.current || lastManualModalState.current && 0 === initOffset)
        return;
      const rect = modalRef.current.getBoundingClientRect(), height = initHeight ?? rect.height, width = initWidth ?? rect.width;
      setMinSize(), lastManualModalState.current = { height: initHeight, width: initWidth, top: getDefaultTop(height) + initOffset, left: getDefaultLeft(width) + initOffset }, height > getMaxHeight() || width > getMaxWidth() ? lastManualModalState.current = adjustSizeToLimits({ ...lastManualModalState.current, height, width }) : (lastManualModalState.current.left > getMaxWidth() - width - MIN_MARGIN || lastManualModalState.current.top > getMaxHeight() - height - MIN_MARGIN) && (lastManualModalState.current = { ...getValidPosition({ ...lastManualModalState.current, height, width }), width: lastManualModalState.current.width, height: lastManualModalState.current.height }), setModalState(lastManualModalState.current);
    }
    let firstLoadDoneReactionDisposer;
    return form ? firstLoadDoneReactionDisposer = observeFirstLoadDone(form.getStoreBackend(), handleFinishOpening) : handleFinishOpening(), () => {
      firstLoadDoneReactionDisposer && firstLoadDoneReactionDisposer();
    };
  }, [initOffset]), jsxRuntimeExports.jsxs("div", { ref: modalRef, id: widgetId, className: classNames("modal-dialog", className, { "mx-window": !isDialog, "mx-dialog": isDialog, "mx-window-active": isActive && !isDialog }), style: { width: modalState.width, height: modalState.height, zIndex, top: 0 === modalState.top ? "100%" : modalState.top, left: 0 === modalState.left ? "100%" : modalState.left, ...style2 }, role: "dialog", "data-focus-capturing": isModal ? FOCUS_CAPTURING_MODAL : FOCUS_CAPTURING_NON_MODAL, "aria-modal": isModal, "aria-labelledby": captionId, "aria-describedby": contentId, tabIndex: -1, onMouseDown: onFocus, children: [jsxRuntimeExports.jsxs(ModalContent, { className: classNames("modal-content", { "mx-window-content": !isDialog, "mx-dialog-content": isDialog }), onSubmit, children: [jsxRuntimeExports.jsx(ModalHeader, { titleId: captionId, className: classNames("modal-header", { "mx-window-header": !isDialog, "mx-dialog-header": isDialog }), title, onDrag: (deltaTop, deltaLeft, mouseX) => {
    if (!isMobileDevice() && lastManualModalState.current) {
      let { top, left, width, height } = modalState;
      isFullscreen && lastModalWidth.current ? (width = lastModalWidth.current, height = lastManualModalState.current.height, top = MIN_MARGIN, left = mouseX - width / 2, mouseX <= width + MIN_MARGIN ? left = MIN_MARGIN : mouseX >= window.innerWidth - MIN_MARGIN - width && (left = window.innerWidth - MIN_MARGIN - width), setIsFullscreen(false), setModalState(adjustSizeToLimits({ width, height, top: top + deltaTop, left: left + deltaLeft }, minWidth, minHeight))) : setModalState({ width, height, top: top + deltaTop, left: left + deltaLeft });
    }
  }, onDrop: handleDrop, onClose, active: isActive, isDialog, showCloseButton, onFullscreenToggle: handleFullScreenToggle }), jsxRuntimeExports.jsx("div", { id: contentId, className: classNames("modal-body", { "mx-window-body": !isDialog, "mx-dialog-body": isDialog }), style: { flex: "1 1 auto" }, ref: modalBodyRef, children }), footer && jsxRuntimeExports.jsx("div", { className: classNames("modal-footer", { "mx-window-footer": !isDialog, "mx-dialog-footer": isDialog }), ...isDialog && { "data-focusindex": "0" }, children: footer })] }), resizable && jsxRuntimeExports.jsx(ModalResizer, { onResize: handleResize, onResizeEnd: setMinSize })] });
}
function LoginDialog({ widgetId, messageCode, zIndex, onFocus, onClose, onError }) {
  const [username, setUsername] = reactExports.useState(""), [password, setPassword] = reactExports.useState("");
  return jsxRuntimeExports.jsxs(Modal, { widgetId, className: "mx-login", title: translateLoginMessage(messageCode ? `http${messageCode}` : "loginHeader"), footer: jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [jsxRuntimeExports.jsx("button", { className: "btn btn-primary", type: "submit", children: translateLoginMessage("loginButton") }), jsxRuntimeExports.jsx("button", { className: "btn", type: "button", onClick: onClose, children: translateLoginMessage("cancel") }), 403 === messageCode && jsxRuntimeExports.jsx("button", { className: "btn go-to-homepage", type: "button", onClick: () => location.href = window.mx.homeUrl, children: translateLoginMessage("goHomeButton") })] }), isDialog: true, initWidth: 500, initOffset: 0, resizable: true, zIndex, isActive: true, isModal: false, showCloseButton: false, onFocus, onClose, onSubmit: (e) => {
    e.preventDefault(), window.mx.login(username, password, onClose, onError);
  }, children: [jsxRuntimeExports.jsx("input", { className: "form-control", name: "username", type: "text", autoCorrect: "off", autoCapitalize: "none", placeholder: translateLoginMessage("username"), value: username, onChange: (e) => setUsername(e.target.value) }), jsxRuntimeExports.jsx("input", { className: "form-control", name: "password", type: "password", autoCorrect: "off", autoCapitalize: "none", placeholder: translateLoginMessage("password"), value: password, onChange: (e) => setPassword(e.target.value) })] });
}
function ModalFooter({ okCaption, cancelCaption, onOk, onCancel, onClose }) {
  const buttonElements = [jsxRuntimeExports.jsx("button", { className: "btn btn-primary", onClick: () => {
    onClose && onClose(), onOk && onOk();
  }, children: okCaption }, "ok")];
  return cancelCaption && buttonElements.push(jsxRuntimeExports.jsx("button", { className: "btn", onClick: () => {
    onClose && onClose(), onCancel && onCancel();
  }, children: cancelCaption }, "cancel")), jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: buttonElements });
}
function ParagraphWithNewLines({ text }) {
  return jsxRuntimeExports.jsx("p", void 0 === text ? {} : { children: text.split("\n").map((p, i, itt) => jsxRuntimeExports.jsxs(reactExports.Fragment, { children: [p, i < itt.length - 1 && jsxRuntimeExports.jsx("br", {})] }, `${p} ${i}`)) });
}
function Progress({ zIndex, message, isModal, showDelay = 0 }) {
  const [isShowing, setIsShowing] = reactExports.useState(0 === showDelay), timeout = reactExports.useRef();
  return reactExports.useEffect(() => (clearTimeout(timeout.current), timeout.current = window.setTimeout(() => {
    setIsShowing(true);
  }, showDelay), () => window.clearTimeout(timeout.current)), [showDelay]), reactExports.useEffect(() => (isModal && document.body.setAttribute(DISABLE_INTERACTION_ATTRIBUTE, "true"), () => {
    isModal && document.body.removeAttribute(DISABLE_INTERACTION_ATTRIBUTE);
  }), [isModal]), isShowing ? jsxRuntimeExports.jsxs("div", { id: "mxui_widget_Progress_0", className: classNames("mx-progress", { "mx-progress-empty": !message }), style: { zIndex }, role: "alert", "aria-live": "assertive", "aria-busy": "true", children: [jsxRuntimeExports.jsx("div", { className: "mx-progress-message", children: message }), jsxRuntimeExports.jsx("div", { className: "mx-progress-indicator" })] }) : null;
}
const getShowMessageHandler = () => showMessageHandler, getHideMessageHandler = () => hideMessageHandler, getShowProgressHandler = () => ensure(showProgressHandler), getHideProgressHandler = () => ensure(hideProgressHandler), getHideAllProgressHandler = () => ensure(hideAllProgressHandler);
function Messages({ onUpdateOverlay, overlayIsVisible }) {
  const [stack2, setStack] = reactExports.useState([]), [dialogMessages, setDialogMessages] = reactExports.useState([]), [progressMessages, setProgressMessages] = reactExports.useState([]), [loginDialog, setLoginDialog] = reactExports.useState();
  showMessageHandler = (type, message, title, isModal, controls) => {
    const id = newId(), index2 = messageIndex++;
    return setDialogMessages((prevDialogMessages) => [...prevDialogMessages, { id, index: index2, type, content: message, title, isModal, controls }]), setStack((prevStack) => [...prevStack, id]), id;
  }, showProgressHandler = (message, isModal, showDelay) => {
    const id = Date.now();
    return setProgressMessages((prevProgressMessages) => [...prevProgressMessages, { id, content: message, isModal, showDelay }]), id;
  }, hideMessageHandler = (id) => {
    setDialogMessages((prevDialogMessages) => prevDialogMessages.filter((item) => item.id !== id)), setStack((prevStack) => prevStack.filter((item) => item !== id));
  }, hideProgressHandler = (id) => setProgressMessages((prevProgressMessages) => prevProgressMessages.filter((item) => item.id !== id)), hideAllProgressHandler = () => setProgressMessages([]), showLoginHandler = (messageCode) => setLoginDialog((prevLoginDialog) => {
    if (prevLoginDialog)
      return { ...prevLoginDialog, messageCode };
    {
      const index2 = loginDialogIndex++;
      return { messageCode, index: index2, id: newId() };
    }
  });
  const focusHandler = (id) => setStack((prevStack) => {
    const lastId = prevStack[prevStack.length - 1];
    if (!lastId)
      return prevStack;
    const newStack = [...prevStack];
    return newStack[newStack.indexOf(id)] = lastId, newStack[newStack.length - 1] = id, newStack;
  }), lastProgressMessage = progressMessages[progressMessages.length - 1], progressZIndex = 1e3 + 2 * (stack2.length + 1);
  return reactExports.useEffect(() => {
    const hasBlockingMessage = dialogMessages.some((item) => item.isModal), hasBlockingProgress = progressMessages.some((item) => item.isModal), hasModal = hasBlockingMessage || hasBlockingProgress, overlayZIndex = hasBlockingProgress ? progressZIndex - 1 : 1e3 + 2 * stack2.length - 1;
    onUpdateOverlay(hasModal, stack2.length > 0 || hasBlockingProgress ? overlayZIndex : 0);
  }, [progressZIndex, stack2.length, dialogMessages, progressMessages]), reactDomExports$1.createPortal(jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [dialogMessages.map(({ id, index: index2, type, content, title, controls, isModal }) => jsxRuntimeExports.jsx(Modal, { widgetId: `mxui_widget_DialogMessage_${index2}`, className: "confirmation" === type ? void 0 : `mx-dialog-${type}`, title, footer: jsxRuntimeExports.jsx(ModalFooter, { ...controls, onClose: () => {
    hideMessageHandler && hideMessageHandler(id);
  } }), isDialog: true, initWidth: 500, initOffset: 0, resizable: true, zIndex: 1e3 + 2 * (stack2.indexOf(id) + 1), isActive: stack2[stack2.length - 1] === id, isModal: isModal || overlayIsVisible, onFocus: () => focusHandler(id), onClose: () => {
    hideMessageHandler && hideMessageHandler(id), controls.onCancel && controls.onCancel();
  }, showCloseButton: true, children: jsxRuntimeExports.jsx(ParagraphWithNewLines, { text: content }) }, id)), loginDialog && jsxRuntimeExports.jsx(LoginDialog, { widgetId: `mxui_widget_LoginDialog_${loginDialog.index}`, messageCode: loginDialog.messageCode, zIndex: 1e3 + 2 * (stack2.indexOf(loginDialog.id) + 1), onFocus: () => focusHandler(loginDialog.id), onClose: () => setLoginDialog(void 0), onError: ({ status }) => {
    showLoginHandler(status);
  } }), lastProgressMessage && jsxRuntimeExports.jsx(Progress, { zIndex: progressZIndex, showDelay: lastProgressMessage.showDelay, message: lastProgressMessage.content, isModal: lastProgressMessage.isModal })] }), document.body);
}
const ErrorFallbackWeb = ({ errorMessage }) => jsxRuntimeExports.jsx("div", { style: { color: "red" }, children: errorMessage }), $Fragment$1 = asPluginWidget(Fragment), Z_INDEX_BASE = 100, STACK_OFFSET = 20;
function Popups({ popups: popups2, onUpdateOverlay }) {
  const [{ stack: stack2, offsets }, setPopupsState] = reactExports.useState({ stack: [], offsets: [] }), [actionRegistries] = reactExports.useState({}), activeId = stack2[stack2.length - 1];
  reactExports.useEffect(() => {
    setPopupsState((prevPopupsState) => {
      const newState = { ...prevPopupsState, stack: [...prevPopupsState.stack], offsets: [...prevPopupsState.offsets] }, deletedPopups = newState.stack.filter((old) => !popups2.some((p) => p.form.getHistoryId() === old));
      for (const popup of deletedPopups)
        newState.stack = newState.stack.filter((prevId) => prevId !== popup), newState.offsets = newState.offsets.map((offsetId) => offsetId === popup ? void 0 : offsetId), delete actionRegistries[popup];
      const addedPopups = popups2.map((p) => p.form.getHistoryId()).filter((p) => !newState.stack.includes(p));
      for (const popup of addedPopups) {
        const freeSlotIndex = newState.offsets.indexOf(void 0);
        freeSlotIndex > -1 ? newState.offsets[freeSlotIndex] = popup : newState.offsets.push(popup), newState.stack.push(popup);
      }
      return newState;
    });
  }, [popups2]);
  let hasModal = false;
  const popupElements = [];
  for (const { widgetId, cancelChangesOperationId, form, classes, style: style2, title, closeButton, width, height, resizable, modal, preferUnderlyingModalOverLastFocusedElement } of popups2) {
    const popupId = form.getHistoryId();
    modal && (hasModal = true);
    const currentOffsetIndex = offsets.indexOf(popupId), offset = -1 === currentOffsetIndex ? 0 : currentOffsetIndex * STACK_OFFSET, isActive = activeId === popupId, zIndex = Z_INDEX_BASE + 2 * (stack2.indexOf(popupId) + 1);
    actionRegistries[popupId] ?? (actionRegistries[popupId] = new ActionRegistry()), popupElements.push(jsxRuntimeExports.jsx(Modal, { widgetId, className: classes, style: style2, title, initWidth: width && width > 0 ? width : void 0, initHeight: height && height > 0 ? height : void 0, initOffset: hasModal ? 0 : offset, resizable: !isMobileDevice() && resizable, onClose: () => {
      const closeAction = closeButton && actionRegistries[popupId]?.getHandler(closeButton);
      closeAction ? closeAction() : cancelChanges({ operationId: cancelChangesOperationId, closePage: true }, { currentForm: form }).catch(handleError);
    }, zIndex, onFocus: () => setPopupsState((prevPopupsState) => activeId && !isActive ? { ...prevPopupsState, stack: prevPopupsState.stack.map((prevId) => prevId === popupId ? activeId : prevId === activeId ? popupId : prevId) } : prevPopupsState), onDrop: () => {
      setPopupsState((prevPopupsState) => {
        const offsetIndex = prevPopupsState.offsets.indexOf(popupId);
        if (offsetIndex > -1) {
          const newOffsets = [...prevPopupsState.offsets];
          return newOffsets[offsetIndex] = void 0, { ...prevPopupsState, offsets: newOffsets };
        }
        return prevPopupsState;
      });
    }, isActive, isModal: hasModal, showCloseButton: true, form, preferUnderlyingModalOverLastFocusedElement, children: jsxRuntimeExports.jsx(ActionContext.Provider, { value: actionRegistries[popupId], children: jsxRuntimeExports.jsx(RootStoreProvider, { backend: form.getStoreBackend(), children: jsxRuntimeExports.jsx(ErrorBoundaryFallbackContext.Provider, { value: ErrorFallbackWeb, children: jsxRuntimeExports.jsx($Fragment$1, { $widgetId: "root", content: PlaceholderProperty({ id: MAIN_PLACEHOLDER_NAME }) }) }) }) }) }, popupId));
  }
  return reactExports.useEffect(() => {
    const overlayZIndex = Z_INDEX_BASE + 2 * stack2.length - 1;
    onUpdateOverlay(hasModal, stack2.length > 0 ? overlayZIndex : 0);
  }, [hasModal, stack2.length]), reactDomExports$1.createPortal(jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: popupElements }), document.body);
}
const homeUrl = window.location.origin + window.location.pathname, baseUrl = homeUrl.slice(0, homeUrl.lastIndexOf("/") + 1), baseUrlPath = window.location.pathname.replace("/index.html", "");
function getPathFromHash() {
  const hash = window.location.hash.slice(1);
  return hash.startsWith("/") ? hash : null;
}
function reload() {
  redirect(homeUrl);
}
function redirect(location2) {
  /^(https?|file):\/\//.test(location2) || location2.startsWith("/") || (location2 = baseUrl + location2);
  const parsedLocation = queryString.parseUrl(location2), search = queryString.stringify({ ...parsedLocation.query, ...queryString.parse(window.location.search) }), href = parsedLocation.url + ("" !== search ? `?${search}` : "") + window.location.hash;
  window.location.href === href ? window.location.reload() : window.location.assign(href);
}
const $Fragment = asPluginWidget(Fragment);
function Page({ storeBackend, classes, style: style2 }) {
  const pageRef = reactExports.useRef(null);
  return reactExports.useEffect(() => {
    observeFirstLoadDone(storeBackend, () => {
      if (pageRef.current) {
        const elementToFocus = findFirst(pageRef.current);
        elementToFocus && moveFocusTo(elementToFocus);
      }
    });
  }, []), jsxRuntimeExports.jsx(RootStoreProvider, { backend: storeBackend, children: jsxRuntimeExports.jsx(ErrorBoundaryFallbackContext.Provider, { value: ErrorFallbackWeb, children: jsxRuntimeExports.jsx("div", { ref: pageRef, style: style2, className: classNames("mx-page", classes), "data-focusindex": "0", children: jsxRuntimeExports.jsx($Fragment, { $widgetId: "root", content: PlaceholderProperty({ id: MAIN_PLACEHOLDER_NAME }) }) }) }) });
}
let openFormHandler;
const openPageQueue = [];
async function updateHistory(historyState, url, queryString2) {
  const parameterNames = Object.keys(historyState.formParameters);
  function updateHistoryUrl(updatedUrl) {
    const query = mergeQueryStrings(location.search, queryString2 ?? "");
    let newUrl = updatedUrl;
    var position, id;
    updatedUrl && "" !== query ? newUrl = joinPath(baseUrlPath, updatedUrl) + "?" + query : updatedUrl ? newUrl = joinPath(baseUrlPath, updatedUrl) : "" !== query && (newUrl = location.pathname + "?" + query), getReplaceHome() ? (window.history.replaceState(historyState, "", newUrl), position = 0, id = historyState.id, stack[position] = id, setReplaceHome(false)) : 0 === stack.length ? (window.history.replaceState(historyState, "", newUrl), add(historyState.id)) : (window.history.pushState(historyState, "", newUrl), add(historyState.id));
  }
  url && parameterNames.length > 0 ? await async function() {
    if (void 0 === url)
      return;
    for (const parameter of parameterNames) {
      const regex = new RegExp(`\\{${parameter.replace("$", "")}/(\\w+)\\}`), attribute = regex.exec(url)?.[1];
      if (void 0 !== attribute)
        if ("Id" === attribute)
          url = url.replace(regex, historyState.formParameters[parameter] ?? "");
        else {
          if (void 0 === historyState.formParameters[parameter]) {
            url = url.replace(regex, "-");
            continue;
          }
          const mxObj = await getByGuid(historyState.formParameters[parameter]);
          if (void 0 === mxObj || !mxObj.has(attribute)) {
            url = url.replace(regex, "-");
            continue;
          }
          url = url.replace(regex, mxObj.get2(attribute)?.toString() ?? "");
        }
      else
        url = url.replace(`{${parameter.replace("$", "")}}`, historyState.formParameters[parameter] ?? "");
    }
    updateHistoryUrl(url);
  }() : updateHistoryUrl(url);
}
function updateDocumentTitle(applicationTitle, pageTitle) {
  window.document.title = pageTitle ? `${applicationTitle} - ${pageTitle}` : applicationTitle;
}
function ApplyViewState({ state, storeBackend }) {
  const viewState = state.viewState;
  return reactExports.useLayoutEffect(() => {
    viewState && applyViewState(viewState, storeBackend);
  }, [viewState]), null;
}
async function importPage(name) {
  getShowProgressHandler()(void 0, void 0, 500);
  const page = await import(`./pages/${name}.js`+ "?638563727310501691");
  return getHideAllProgressHandler()(), page;
}
function Router({ constants, applicationTitle, onUpdateOverlay }) {
  const storeBackend = reactExports.useRef(new StoreBackend()), [state, setState] = reactExports.useState(), [popups2, setPopups] = reactExports.useState([]), pageTitle = reactExports.useRef();
  reactExports.useEffect(() => updateDocumentTitle(applicationTitle, pageTitle.current), [applicationTitle]);
  const updatePage = reactExports.useCallback((newPage, historyState, viewState) => {
    const { pageName, formParameters, id: historyId } = historyState, { classes, style: style2 } = newPage, currentViewState = function(storeBackend2) {
      const recordsToPersist = storeBackend2.getUsedSlots().filter(shouldPersistSlot).flatMap((slot) => readUntracked(storeBackend2.getAllEntries$(slot)).map((entry) => ({ ...entry, slot }))).map((record) => {
        return { ...record, value: (slot = record.slot, value = record.value, slot.endsWith("/filter") ? serializeFilterToViewState(value) : value) };
        var slot, value;
      }).filter(({ value }) => void 0 !== value);
      return groupBy(recordsToPersist, ({ slot, widgetId }) => `${slot}|${widgetId}`).map(({ values }) => {
        const { slot, widgetId } = values[0];
        return { slot, widgetId, values: values.map(({ path, value }) => tuple(path, ensure(value))) };
      });
    }(storeBackend.current);
    state && function(viewState2, historyId2, formParameterGuids) {
      viewStates[historyId2] = viewState2, formParameterSubscriptions.push(formParameterGuids.map((guid) => subscribe({ guid, tag: "previous page in history" }))), formParameterSubscriptions.length > 5 && formParameterSubscriptions.shift()?.forEach((s) => s.unsubscribe());
    }(currentViewState, state.historyId, state.formParameterGuids);
    const newForm = new WebForm({ storeBackend: storeBackend.current, historyId, name: pageName, title: pageTitle.current ?? "", pageContent: newPage.content, formParameters }), newState = { historyId, formParameterGuids: newForm.getParameterGuids(), classes, style: style2 };
    if (viewState) {
      const widgetIdsToExclude = new Set(currentViewState.filter(({ widgetId }) => widgetId.startsWith(constants.LAYOUT_SCOPE_ID_PREFIX)).map(({ widgetId }) => widgetId));
      newState.viewState = viewState.filter(({ widgetId }) => !widgetIdsToExclude.has(widgetId));
    }
    return setState(newState), newForm;
  }, [state, constants.LAYOUT_SCOPE_ID_PREFIX]);
  return openFormHandler = async (pageName, formParameters, customTitle, currentForm, params, numberOfPagesToClose) => {
    await closeFormPromise, numberOfPagesToClose && currentForm && (setClosePageUpdateSuspended("content" === params.location), await currentForm.closePage(numberOfPagesToClose));
    const historyState = { id: newId("historyId"), pageName, formParameters, customTitle, params };
    switch (params.location) {
      case "popup":
      case "modal": {
        const newPage = await importPage(pageName);
        return function(popup, historyState2, title) {
          const { pageName: pageName2, formParameters: formParameters2 } = historyState2, newForm = new PopupForm({ storeBackend: new StoreBackend(), historyId: historyState2.id, name: pageName2, title, pageContent: popup.content, formParameters: formParameters2 });
          addId(historyState2.id);
          const { location: location2, width, height, resizable, preferUnderlyingModalOverLastFocusedElement } = historyState2.params;
          return setPopups((prevState) => [...prevState, { widgetId: "mxui_widget_Window_" + popupIndex++, form: newForm, classes: popup.classes, title, modal: "modal" === location2, style: popup.style, closeButton: popup.closeButton, cancelChangesOperationId: popup.cancelChangesOperationId, width, height, resizable: resizable ?? false, preferUnderlyingModalOverLastFocusedElement }]), newForm;
        }(newPage, historyState, customTitle ?? newPage.title);
      }
      case "content": {
        if (params.pageUpdateSuspended)
          return void openPageQueue.push(async () => {
            await updateHistory(historyState, params.url, params.queryString), pageTitle.current = customTitle, updateDocumentTitle(applicationTitle, pageTitle.current);
          });
        const newPage = await importPage(pageName);
        return openPageQueue.push(async () => {
          await updateHistory(historyState, newPage.url, params.queryString), pageTitle.current = customTitle ?? newPage.title, updateDocumentTitle(applicationTitle, pageTitle.current);
        }), await async function() {
          for (; openPageQueue.length > 0; ) {
            const callback = openPageQueue.shift();
            callback && await callback();
          }
        }(), updatePage(newPage, historyState, void 0);
      }
      default:
        return;
    }
  }, reactExports.useEffect(() => {
    function onPopState(ev) {
      const historyState = ev.state;
      historyState && (isNavigatingBack ? setIsNavigatingBack(false) : function(id) {
        const newIndex = stack.indexOf(id);
        newIndex > -1 && (index$1 = newIndex);
      }(historyState.id), (closePageUpdateSuspended ? Promise.resolve(void 0) : importPage(historyState.pageName)).then((newPage) => {
        var historyId;
        newPage && (pageTitle.current = historyState.customTitle ?? newPage.title, updateDocumentTitle(applicationTitle, pageTitle.current), updatePage(newPage, historyState, (historyId = historyState.id, viewStates[historyId])));
      }).finally(() => {
        setClosePageUpdateSuspended(false);
        const resolveCloseForm2 = getResolveCloseForm();
        resolveCloseForm2 && resolveCloseForm2();
      }).catch((e) => {
        throw e;
      }));
    }
    return window.addEventListener("popstate", onPopState), () => window.removeEventListener("popstate", onPopState);
  }, [updatePage, applicationTitle]), reactExports.useEffect(() => (closePopupHandler = function(ids) {
    setPopups((prevState) => prevState.filter((popup) => !ids.includes(popup.form.getHistoryId())));
  }, () => {
    closePopupHandler = void 0;
  }), []), void 0 === state ? null : jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [jsxRuntimeExports.jsx(ApplyViewState, { state, storeBackend: storeBackend.current }), jsxRuntimeExports.jsx(Page, { storeBackend: storeBackend.current, classes: state.classes, style: state.style }), jsxRuntimeExports.jsx(Popups, { popups: popups2, onUpdateOverlay })] });
}
function Overlay({ zIndex }) {
  return reactDomExports$1.createPortal(jsxRuntimeExports.jsx("div", { className: "mx-underlay", style: { zIndex } }), document.body);
}
let showReloadNotificationHandler;
const ReloadNotification = () => {
  const [isVisible, setIsVisible] = reactExports.useState(false);
  return reactExports.useEffect(() => {
    const hideNotification = () => {
      setTimeout(() => {
        setIsVisible(false);
      }, 400);
    };
    return isVisible ? (document.addEventListener("mousemove", hideNotification), document.addEventListener("touchmove", hideNotification)) : (document.removeEventListener("mousemove", hideNotification), document.removeEventListener("touchmove", hideNotification)), () => {
      document.removeEventListener("mousemove", hideNotification), document.removeEventListener("touchmove", hideNotification);
    };
  }, [isVisible]), showReloadNotificationHandler = () => {
    setIsVisible(true);
  }, isVisible ? jsxRuntimeExports.jsx("div", { className: "mx-reload-notification", children: "App has been reloaded" }) : null;
}, logger$1$1 = LogManager.get().getLogger();
let idCounter = 0;
class MxContext {
  constructor(kwArgs) {
    this.id = this.ident = ++idCounter, this.trackId = "", this.trackEntity = "", this.trackObject = null, this.localParams = {}, this.constraintby = [], this._entityToGuid = {}, this._mxidToObject = {}, kwArgs && (kwArgs.mxcontext && this.dupFrom(kwArgs.mxcontext), kwArgs.classname && kwArgs.mendixguid ? this.setContext(kwArgs.classname, kwArgs.mendixguid) : kwArgs.entity && kwArgs.guid && this.setContext(kwArgs.entity, kwArgs.guid));
  }
  hasTrackEntity() {
    return "" !== this.trackEntity;
  }
  hasTrackId() {
    return !!this.trackId;
  }
  hasTrackObject() {
    return !!this.trackObject;
  }
  getTrackEntity() {
    return this.trackEntity;
  }
  getTrackId() {
    return this.trackId;
  }
  getTrackObject() {
    return this.trackObject;
  }
  setTrackObject(obj) {
    obj && this.setContext(obj.getEntity(), obj.getGuid()), this.trackObject = obj;
  }
  getObject() {
    return this.trackObject;
  }
  setConstraints(constraints) {
    null != constraints && "" !== constraints && 0 !== constraints.length && (this.constraintby = "string" == typeof constraints ? constraints.split(",") : constraints);
  }
  getConstraints() {
    for (var t = [], i = 0; i < this.constraintby.length; i++)
      t.push(this.constraintby[i]);
    return t;
  }
  hasBacktrack() {
    return 0 !== this.constraintby.length;
  }
  getEntities() {
    return Object.keys(this._entityToGuid).filter((e) => void 0 !== e && "" !== this._entityToGuid[e]);
  }
  setContext(entity, guid) {
    if (1 === arguments.length && arguments[0] instanceof MxObject) {
      var mxobj = arguments[0];
      entity = mxobj.getEntity(), guid = mxobj.getGuid();
    }
    this.trackEntity = null == entity ? "" : entity, this.trackId = null == guid ? "" : guid, this.trackObject = null, this._entityToGuid[this.trackEntity] = this.trackId;
  }
  unsetContext(entity) {
    if ("string" != typeof entity)
      throw new Error("mendix/lib/MxContext.unsetContext: parameter entity is not of type String");
    delete this._entityToGuid[entity];
  }
  getContext(entity) {
    if ("string" != typeof entity)
      throw new Error("mendix/lib/MxContext.getContext: parameter entity is not of type String");
    if (entity in this._entityToGuid)
      return this._entityToGuid[entity];
    var meta = getEntityMeta(entity), result = null;
    return (meta?.specializations ?? []).some((subEntity) => subEntity in this._entityToGuid && (result = this._entityToGuid[subEntity], true)), result;
  }
  hasContext(entity) {
    if ("string" != typeof entity)
      throw new Error("mendix/lib/MxContext.hasContext: parameter entity is not of type String");
    return null != this.getContext(entity);
  }
  reset() {
    this._entityToGuid = {}, this._mxidToObject = {}, this.trackId = null, this.trackEntity = "", this.trackObject = null;
  }
  dupFrom(context) {
    this.reset(), this.mixin(context);
  }
  mixin(context) {
    if (context)
      context.getEntities().forEach((e) => this.setContext(e, context.getContext(e))), context.getWidgetIds().forEach((mxid) => this.setWidgetObject(mxid, context.getWidgetObject(mxid))), this.setParams(context.getParams()), this.setConstraints(context.getConstraints()), this.setContext(context.getTrackEntity(), context.getTrackId()), this.setTrackObject(context.getTrackObject());
    else {
      const entity = this.getTrackEntity();
      entity && this.unsetContext(entity), this.setContext(null, null);
    }
  }
  hasParam(key) {
    return key in this.localParams;
  }
  getParam(key) {
    return this.hasParam(key) ? this.localParams[key] : null;
  }
  getParams() {
    return this.localParams;
  }
  setParam(key, value) {
    if (null == key)
      throw new Error("mendix/lib/MxContext[" + this.ident + "].setParam key is null");
    this.localParams[key] = value;
  }
  setParams(obj) {
    if ("object" != typeof obj)
      throw new Error("mendix/lib/MxContext[" + this.ident + "].setParams requires an Object.");
    for (var i in obj)
      this.localParams[i] = obj[i];
  }
  unsetParam(key) {
    delete this.localParams[key];
  }
  resetParams() {
    this.localParams = {};
  }
  isEmpty() {
    for (var j in this._entityToGuid)
      return true;
    return false;
  }
  getGuids() {
    for (var contexts = this.getEntities(), trackId = this.getTrackId(), contextIds = trackId ? [trackId] : [], i = 0, l = contexts.length; i < l; i++) {
      var c = contexts[i];
      if (c !== SystemAttribute.Owner && c !== SystemAttribute.ChangedBy) {
        var guid = this.getContext(c);
        guid !== trackId && contextIds.push(guid);
      }
    }
    return contextIds;
  }
  getWidgetIds() {
    return Object.keys(this._mxidToObject);
  }
  getWidgetObject(widgetId) {
    return this._mxidToObject[widgetId];
  }
  setWidgetObject(widgetId, object, trackObject = true) {
    trackObject && this.setTrackObject(object), this._mxidToObject[widgetId] = object;
  }
  getWidgetObjectMap() {
    return { ...this._mxidToObject };
  }
  freeze() {
    this.setTrackObject = this.setConstraints = this.setContext = this.unsetContext = this.reset = this.dupFrom = this.setParam = this.setParams = this.unsetParam = this.setWidgetObject = this.resetParams = function() {
      return logger$1$1.error("mendix/lib/MxContext[" + this.ident + "].freeze: context is readonly"), false;
    };
  }
}
class NotAllowedInStrictModeError extends Error {
  constructor(operation) {
    super(`${operation} is disabled`), Object.setPrototypeOf(this, NotAllowedInStrictModeError.prototype);
  }
}
const restrictInStrictMode = (name) => {
  if (getSession().isStrictModeEnabled() && !mx.isOffline())
    throw new NotAllowedInStrictModeError(name);
}, isGetByGuid = (args) => "guid" in args && null !== args.guid || "guids" in args && void 0 !== args.guids, isGetByPath = (args) => "path" in args, isGetByEntity = (args) => "entity" in args, isGetByMicroflow = (args) => "microflow" in args, OLD_TO_NEW_NAME = { equals: "=", lessThan: "<", lessThanOrEquals: "<=", greaterThan: ">", greaterThanOrEquals: ">=", contains: "contains" };
function legacyConstraintsToQueryFilter(entity, constraints) {
  const queries = legacyConstraintsToQueryFilters(getEntityMeta(entity), constraints);
  return queries.length > 1 ? { type: "function", name: "and", parameters: queries } : queries[0];
}
function legacyConstraintsToQueryFilters(entityMeta, constraints) {
  return constraints.map((constraint) => {
    switch (constraint.operator) {
      case "and":
      case "or":
        return { type: "function", name: constraint.operator, parameters: legacyConstraintsToQueryFilters(entityMeta, constraint.constraints) };
      default:
        const attributeType = entityMeta?.attributes[constraint.attribute]?.type ?? "String", result = { type: "function", name: OLD_TO_NEW_NAME[constraint.operator], parameters: [{ type: "attribute", attribute: constraint.attribute, attributeType }, { type: "value", value: legacyConstraintValueToFilterValue(constraint.value, attributeType), isGuid: "ObjectReference" === attributeType }] };
        return constraint.negate ? { type: "function", name: "not", parameters: [result] } : result;
    }
  });
}
function legacyConstraintValueToFilterValue(value, attributeType) {
  if (null != value)
    switch (attributeType) {
      case "Boolean":
        return "true" === value;
      case "DateTime":
        return new Date(Number(value));
      case "Decimal":
      case "Integer":
      case "Long":
        return new Big(String(value));
      default:
        return String(value);
    }
}
class Data {
  constructor({ garbageCollectionInterval = 1e4, logCleanupStatistics = false }, objectCache, backend) {
    this.objectCache = objectCache, this.backend = backend, this.name = "mendix.sys.Data", this.logger = LogManager.get().getLogger(), this.validationSubscriptions = [], this.sendValidationUpdates = action(async (validations) => {
      const remainingValidations = [];
      validations.forEach((validation) => {
        const unhandledVal = validation.clone();
        this.validationSubscriptions.filter((s) => "guid" in s && s.guid === validation.getGuid()).forEach(({ callback }) => {
          const trackValidation = validation.clone();
          callback([trackValidation]);
          const leftAttrs = trackValidation.getAttributes().map((a) => a.name);
          unhandledVal.getAttributes().forEach(({ name: attr }) => {
            leftAttrs.includes(attr) || unhandledVal.removeAttribute(attr);
          });
        }), remainingValidations.push(unhandledVal);
      });
      const updatesToPublish = validations.flatMap((val) => val.getAttributes().map(({ name: attr, reason }) => ({ guid: val.getGuid(), attr, val: reason }))), { handled } = await publish(...updatesToPublish);
      handled.filter((msg) => "guid" in msg && "attr" in msg).forEach(({ guid, attr }) => {
        remainingValidations.find((val) => val.getGuid() === guid).removeAttribute(attr);
      });
      const lostValidations = remainingValidations.filter((val) => val.getAttributes().length);
      if (lostValidations.length) {
        const validationsText = ObjectValidation.describe(lostValidations);
        getUI().showMessage("error", validationsText, false);
      }
    }), this.garbageCollectionInterval = garbageCollectionInterval, this.logCleanupStatistics = logCleanupStatistics;
  }
  getBacktrack(guid, paths, callback, errorCallbackOrScope, scope) {
    let errorCallback;
    if ("function" != typeof errorCallbackOrScope ? (scope = errorCallbackOrScope, errorCallback = null) : errorCallback = errorCallbackOrScope, !paths || 0 === paths.length)
      return void callback.call(scope, "", true);
    let mxobj = null;
    const constraints = [];
    let pathIndex = 0, allMatched = true;
    const self = this, fetchConstraints = function() {
      const path = paths[pathIndex++];
      path ? self.runMapPath(mxobj, path, (constraint) => {
        constraint ? constraints.push(constraint) : allMatched = false, fetchConstraints();
      }, self.createErrorHandler(errorCallback, scope)) : callback.call(scope, constraints.join(""), allMatched);
    };
    guid ? self.get({ guid, callback(obj) {
      obj ? (mxobj = obj, fetchConstraints()) : callback.call(scope, "", false);
    }, error: self.createErrorHandler(errorCallback, scope) }) : callback.call(scope, "", false);
  }
  toString() {
    return this.name;
  }
  startup() {
    this.garbageCollectionInterval > 0 && (this.gcInterval = window.setInterval(this.collectGarbage.bind(this), this.garbageCollectionInterval));
  }
  subscribe(args, scope) {
    if (!("val" in args) || "attr" in args)
      return subscribe({ ...args, callback: () => {
        if (args.callback) {
          if ("entity" in args)
            return args.callback.apply(scope, [args.entity]);
          if ("attr" in args) {
            const object = this.objectCache.getObject(args.guid), val = null != object ? object.get(args.attr) : null;
            return args.callback.apply(scope, [args.guid, args.attr, val ?? ""]);
          }
          return "guid" in args ? args.callback.apply(scope, [args.guid]) : args.callback.apply(scope);
        }
      } });
    const subscription = { ...args, callback(...callbackArgs) {
      args.callback && args.callback.apply(scope, callbackArgs);
    } };
    return this.validationSubscriptions.push(subscription), { unsubscribe: () => {
      const index2 = this.validationSubscriptions.indexOf(subscription);
      -1 !== index2 && this.validationSubscriptions.splice(index2, 1);
    } };
  }
  unsubscribe(handle) {
    if (!("unsubscribe" in handle))
      throw new AssertionError("Trying to unsubscribe using an invalid subscription handle");
    handle.unsubscribe();
  }
  updateInCache(json) {
    return this.objectCache.removeAllChanges([json.guid]), this.objectCache.setMxObjects([json]), this.objectCache.getObject(json.guid);
  }
  removeChanges(guid) {
    this.objectCache.removeAllChanges([guid]);
  }
  action(args) {
    restrictInStrictMode("mx.data.action"), this.backend.action(args.params, args.context ?? new MxContext(), args.origin, !!args.async, args.onValidation).then(args.callback, this.createErrorHandler(args.error, null));
  }
  callNanoflow({ nanoflow, context, origin, callback, error }) {
    const self = this;
    (async function() {
      const nanoflowId = nanoflow.nanoflow, paramsSpec = nanoflow.paramsSpec, paramNameToGuids = Object.keys(paramsSpec).map((paramName) => ({ name: paramName, guid: context.getContext(paramsSpec[paramName]) })), allGuids = paramNameToGuids.filter((x) => Boolean(x.guid)).map((x) => x.guid), allObjects = await async function(guids) {
        return new Promise((resolve, reject) => {
          self.get({ guids, callback: (result) => resolve(result && Array.isArray(result) ? result : []), error: reject });
        });
      }(allGuids), args = paramNameToGuids.map(({ name: paramName, guid }) => ({ name: paramName, value: allObjects.find((o) => o.getGuid() === guid) }));
      try {
        return await nanoflowEngine.execute(nanoflowId, args, origin);
      } catch (e) {
        throw await handleRuntimeError(self.objectCache, e), e;
      }
    })().then(() => this.runCallback(callback, null), this.createErrorHandler(error, null));
  }
  get(args, scope = null) {
    ("xpath" in args || "microflow" in args || "path" in args) && restrictInStrictMode("mx.data.get");
    const callback = args.callback;
    if ("guid" in args && null == args.guid)
      return void this.runCallback(args.callback, scope, null);
    if (!(((args2) => "xpath" in args2)(args) || isGetByPath(args) || isGetByGuid(args) || isGetByEntity(args) || isGetByMicroflow(args)))
      throw new AssertionError("xpath, guid|guids and microflow arguments are undefined");
    if ("function" != typeof callback)
      throw new AssertionError("callback is not a function");
    if ("error" in args && "function" != typeof args.error)
      throw new AssertionError("error is not a function");
    "filter" in args && args.filter?.limit && (args.filter.amount = args.filter.limit, delete args.filter.limit);
    const filter = this.mixinParams({}, args.filter, "guid" in args && null !== args.guid ? { id: null } : { id: null, attributes: null, offset: null, sort: null, amount: null, distinct: null, references: null });
    filter.id && "guids" in args && !("guid" in args) && delete filter.id, filter.id && (delete filter.attributes, delete filter.distinct), args.filter = filter, isGetByMicroflow(args) ? this.getByMicroflow(args, scope) : isGetByPath(args) ? this.getByPath(args, scope) : isGetByGuid(args) ? this.getByGuid(args, scope) : isGetByEntity(args) ? this.getByEntity(args, scope) : this.getByXPath(args, scope);
  }
  getByMicroflow(args, scope) {
    const ids = Data.extractGuids(args);
    let params = { actionname: args.microflow, applyto: "none" };
    ids ? params = { actionname: args.microflow, applyto: "selection", guids: ids } : args.xpath && (params = { actionname: args.microflow, applyto: "set", xpath: args.xpath }, args.filter?.sort && (params.sort = args.filter.sort));
    const context = args.context ?? new MxContext();
    this.action({ params, context, callback: (...callbackArgs) => this.runCallback(args.callback, scope, ...callbackArgs), error: args.error });
  }
  getByPath(args, scope) {
    const ids = Data.extractGuids(args);
    if (1 !== ids?.length)
      throw new AssertionError("path can only be used with a single guid");
    this.backend.getByPath(ids[0], args.path, args.entity, args.direction ?? "reverse").then(({ mxobjs, count }) => {
      this.runCallback(args.callback, scope, mxobjs, { count });
    }, this.createErrorHandler(args.error, scope));
  }
  getByGuid(args, scope) {
    const id = "guid" in args ? args.guid : null, ids = Data.extractGuids(args);
    if (!ids || 0 === ids.length)
      return void (id ? this.runCallback(args.callback, scope, null, { count: 0 }) : this.runCallback(args.callback, scope, [], { count: 0 }));
    (ids.every((guid) => this.objectCache.has(guid)) ? Promise.resolve(this.getFromCache(ids, args.filter)) : this.backend.getByGuid(ids, args.filter)).then(({ mxobjs, count }) => {
      if (id) {
        const result = args.filter?.id ? mxobjs.find((mxobj) => mxobj.getGuid() === id) : mxobjs[0];
        this.runCallback(args.callback, scope, result ?? null, { count });
      } else
        this.runCallback(args.callback, scope, mxobjs, { count });
    }, args.error);
  }
  getByEntity(args, scope) {
    const entity = args.entity, filter = args.filter ?? {}, { amount, offset, sort } = filter;
    mx.isOffline(entity) ? offlineData().retrieveUncached(entity, void 0, { amount, offset, sort }).then(({ mxObjects, count }) => {
      this.runCallback(args.callback, scope, mxObjects, { count });
    }, args.error) : this.backend.getByXPath(`//${entity}`, { amount, offset, sort }, args.count).then(({ mxobjs, count, hasMoreItems }) => {
      this.runCallback(args.callback, scope, mxobjs, { count, hasMoreItems });
    }, args.error);
  }
  getByXPath(args, scope) {
    this.backend.getByXPath(args.xpath, args.filter, args.count).then(({ mxobjs, count, hasMoreItems, aggregates }) => {
      this.runCallback(args.callback, scope, mxobjs, { count, hasMoreItems, aggregates });
    }, args.error);
  }
  getOffline(entity, constraints, filter, callback, error) {
    const fixedFilter = { offset: filter.offset, sort: filter.sort, amount: filter.limit };
    offlineData().retrieveUncached(entity, legacyConstraintsToQueryFilter(entity, constraints), fixedFilter).then(({ mxObjects, count }) => {
      this.runCallback(callback, null, mxObjects, count);
    }).catch(this.createErrorHandler(error, null));
  }
  create(args, scope = null) {
    if (restrictInStrictMode("mx.data.create"), "function" != typeof args.callback)
      throw new AssertionError("callback is not a function");
    if (args.error && "function" != typeof args.error)
      throw new AssertionError("error is not a function");
    if ("string" != typeof args.entity)
      throw new AssertionError("entity is not a string");
    (mx.isOffline(args.entity) ? offlineData().create(args.entity) : this.backend.create(args.entity)).then(function(mxObj) {
      args.context && self.setObjectToContext(mxObj, args.context);
      self.runCallback(args.callback, scope, mxObj);
    }, this.createErrorHandler(args.error, scope));
    const self = this;
  }
  remove(args) {
    restrictInStrictMode("mx.data.remove");
    const guids = Data.extractGuids(args);
    if ("guids" in args && !Array.isArray(args.guids))
      throw new AssertionError("parameter guids set but not of type Array");
    if (args.error && "function" != typeof args.error)
      throw new AssertionError("parameter error set but not of type Function");
    if (args.callback && "function" != typeof args.callback)
      throw new AssertionError("parameter callback set but not of type Function");
    this.backend.remove(guids).then(() => this.runCallback(args.callback), this.createErrorHandler(args.error, null));
  }
  validate(mxobjs, callback, error) {
    if (0 === mxobjs.length)
      return void this.runCallback(callback);
    const errorHandler2 = this.createErrorHandler(error, null);
    this.backend.validate(mxobjs.map((mxObj) => mxObj.getGuid())).then(() => this.runCallback(callback, errorHandler2), errorHandler2);
  }
  commit(args, scope) {
    restrictInStrictMode("mx.data.commit");
    const successHandler = () => this.runCallback(args.callback, scope), errorHandler2 = this.createErrorHandler(args.error, scope), mxobjs = this.normalizeArguments(args);
    if (0 === mxobjs.length)
      return void successHandler();
    const guids = mxobjs.map((mxobj) => mxobj.getGuid());
    this.backend.commit(guids, args.context ?? new MxContext(), args.store, args.onValidation).then(function(json) {
      handleUncachedObjects(self.objectCache, mxobjs, json);
      const entityUpdates = unique(mxobjs.filter((mxObj) => self.objectCache.has(mxObj.getGuid()))).map((mxObj) => ({ entity: mxObj.getEntity() })), objectUpdates = unique(mxobjs.map((mxObj) => mxObj.getGuid())).map((guid) => ({ guid })), updates = entityUpdates.concat(objectUpdates);
      publish(...updates).then(successHandler, errorHandler2);
    }, errorHandler2);
    const self = this;
  }
  rollback(args, scope) {
    restrictInStrictMode("mx.data.rollback");
    const errorHandler2 = this.createErrorHandler(args.error, scope), callingMxObjs = this.normalizeArguments(args);
    if (0 === callingMxObjs.length)
      return void this.runCallback(args.callback, scope);
    const entityUpdates = unique(callingMxObjs.map((mxObj) => mxObj.getEntity())).map((entity) => ({ entity })), guids = callingMxObjs.map((mxobj) => mxobj.getGuid());
    this.backend.rollback(guids).then(function(json) {
      handleUncachedObjects(self.objectCache, callingMxObjs, json);
      const objectUpdates = unique(callingMxObjs.filter((mxObj) => self.objectCache.has(mxObj.getGuid()))).map((mxObj) => ({ guid: mxObj.getGuid() })), updates = entityUpdates.concat(objectUpdates);
      publish(...updates).then(() => self.runCallback(args.callback, scope), errorHandler2);
    }, errorHandler2);
    const self = this;
  }
  async synchronizeOffline({ fullReset, incompatibleEntities } = { fullReset: false }) {
    mx.isOffline() && await offlineData().runFullSynchronization(fullReset, incompatibleEntities);
  }
  saveDocument(guid, fileName, params, blob, callback, error) {
    const errorHandler2 = this.createErrorHandler(error, null);
    this.backend.saveDocument(guid, fileName, params, blob).then(function() {
      publish({ guid }).then(callback, errorHandler2);
    }, errorHandler2);
  }
  setObjectToContext(mxObj, context) {
    if ("object" != typeof mxObj)
      throw new AssertionError("parameter mxObj is not of type Object");
    if ("object" != typeof context)
      throw new AssertionError("parameter context is not of type Object");
    const eAttrs = mxObj.getAttributes();
    for (const eAttr of eAttrs)
      if (mxObj.isReference(eAttr)) {
        const entity = mxObj.getSelectorEntity(eAttr);
        if (!entity)
          throw new AssertionError("selectorEntity did not return an entity");
        if (isSystemAttribute(eAttr))
          continue;
        context.hasContext(entity) && mxObj.addReference(eAttr, context.getContext(entity));
        const subtypees = getEntityMeta(entity)?.specializations ?? [];
        for (const item of subtypees)
          context.hasContext(item) && mxObj.addReference(eAttr, context.getContext(item));
      }
  }
  getObjectFromContext(context, callback) {
    const trackObj = context.getObject(), trackId = context.getTrackId();
    trackObj ? callback(trackObj) : trackId ? this.get({ guid: trackId, callback(obj) {
      obj || handleError("Error while fetching object with guid " + trackId), callback(obj);
    }, error(e) {
      handleError(e), callback(null);
    } }, this) : callback(null);
  }
  isNew(guid) {
    return this.objectCache.isNew(guid);
  }
  makeChange(guid, attr, rawValue) {
    this.objectCache.makeChange(guid, attr, rawValue);
  }
  getChanges(guid) {
    return this.objectCache.getChanges(guid);
  }
  getCachedObject(guid) {
    return this.objectCache.getObject(guid);
  }
  dehydrateCache() {
    return { objectCache: this.objectCache.dehydrate(), objectIdCache: dehydrateObjectIdCache() };
  }
  hydrateCache(state) {
    this.objectCache.hydrate(state.objectCache), hydrateObjectIdCache(state.objectIdCache);
  }
  getDocumentUrl(guid, changedDate, isThumb, fileName) {
    return this.backend.getDocumentUrl(guid, changedDate, isThumb, fileName);
  }
  getImageUrl(url, callback, error) {
    this.backend.getImageUrl(url).then(callback, error);
  }
  clear(callback) {
    this.objectCache.clear(), this.backend.cleanup().then(callback, handleError);
  }
  uninitialize() {
    window.clearInterval(this.gcInterval);
  }
  collectGarbage() {
    const cachedObjects = this.objectCache.getAllObjects(), cachedGuidSet = new Set(cachedObjects.map((mxobj) => mxobj.getGuid())), session = getSession(), userId = session.getUserId(), sessionId = session.getSessionObjectId(), rootGuids = new Set(getSubscribedGuids().concat(this.validationSubscriptions.map((vs) => vs.guid)).concat([userId, sessionId])), guidsToRetain = new Set(findReachableGuidsToRetain(cachedObjects, rootGuids)), collectableGuids = [...difference(cachedGuidSet, guidsToRetain)];
    if (this.logCleanupStatistics) {
      const objectsStr = groupBy(collectableGuids, (guid) => this.objectCache.getObject(guid).getEntity()).map(({ key, values }) => `${key}: ${values.join(", ")}`).join("\n");
      this.logger.debug(`Garbage collecting ${collectableGuids.length} of ${cachedGuidSet.size}
${objectsStr}`);
    }
    this.objectCache.removeObjects(collectableGuids);
  }
  getObjectsStatistics() {
    return this.objectCache.getAllGuids().map((guid) => {
      const obj = this.objectCache.getObject(guid);
      return { guid, object: obj, changes: clone(this.objectCache.getChanges(guid)), uncommitted: this.objectCache.isNew(guid), subscriptions: getTags(guid).concat(this.validationSubscriptions.filter((v) => "guid" in v && v.guid === guid).map((v) => v.tag)) };
    });
  }
  createErrorHandler(errorCallback, scope) {
    return (error) => this.runErrorHandler(errorCallback, scope, error);
  }
  runErrorHandler(errorCallback, scope, error) {
    errorCallback ? errorCallback.call(scope, error) : handleError(error);
  }
  runCallback(callback, scope, ...args) {
    try {
      callback && callback.apply(scope, args);
    } catch (e) {
      handleError(e);
    }
  }
  normalizeArguments(args) {
    if ("object" != typeof args)
      throw new AssertionError("args is not an object");
    if ("function" != typeof args.callback)
      throw new AssertionError("callback is not a function");
    if (args.mxobj && !(args.mxobj instanceof MxObject))
      throw new AssertionError("mxobj is not a MxObject");
    if (args.mxobjs && !Array.isArray(args.mxobjs))
      throw new AssertionError("mxobjs is not an Array");
    if (!args.mxobj && !args.mxobjs || args.mxobj && args.mxobjs)
      throw new AssertionError("one of mxobj or mxobjs should be passed");
    return args.mxobj ? [args.mxobj] : args.mxobjs;
  }
  mixinParams(target, source, map) {
    if (!source)
      return target;
    for (const i in map)
      i in source && null != source[i] && (target[i] = source[i]);
    return target;
  }
  getFromCache(guids, filter = {}) {
    let objs = guids.map((guid) => this.objectCache.getObject(guid)).filter((mxobj) => null != mxobj);
    filter.sort && filter.sort.forEach((sort) => {
      const attr = sort[0], dir = sort[1];
      objs = objs.sort((a, b3) => {
        const aValue = a.get(attr), bValue = b3.get(attr);
        return aValue < bValue ? "asc" === dir ? -1 : 1 : aValue > bValue ? "asc" === dir ? 1 : -1 : 0;
      });
    });
    const offset = filter.offset;
    if (offset) {
      const limit = filter.amount;
      objs = limit ? objs.slice(offset, offset + limit) : objs.slice(offset);
    }
    return { mxobjs: objs, count: objs.length };
  }
  runMapPath(mxobj, path, callback, error) {
    const split = path.split("/"), self = this, fetchDeepRefs = function(objs) {
      let entity = split.shift(), ref = split.shift();
      if (null == objs || 0 === objs.length)
        return void callback(null);
      const carr = [];
      for (const item of objs)
        null != item && carr.push("id='" + item.getGuid() + "'");
      if (!carr.length)
        return void callback(null);
      const constraints = `[${ref}/${entity}[${carr.join(" or ")}]]`;
      1 === split.length ? callback(constraints) : (entity = split.shift(), ref = split.shift(), callback(`[${ref}/${entity}${constraints}]`));
    };
    !function() {
      const entity = split.shift(), ref = split.shift();
      if (1 === split.length) {
        const constraint = `[${ref}='${mxobj.getGuid()}']`;
        return void callback(constraint);
      }
      const meta = getEntityMeta(entity);
      null != meta ? mxobj.isA(entity) ? isReferenceAttribute(meta, ref) ? "" !== mxobj.get(ref) ? self.get({ guids: mxobj.getReferences(ref), callback: fetchDeepRefs, error }) : callback(null) : self.runErrorHandler(error, null, new Error(`Reference ${ref} not found in entity ${entity}`)) : self.runErrorHandler(error, null, new AssertionError(`Entity ${mxobj.getEntity()} is not a ${entity} or one of its subclasses`)) : self.runErrorHandler(error, null, new Error(`Entity ${entity} does not exist`));
    }();
  }
  static extractGuids(args) {
    return !("guids" in args) && "guid" in args && args.guid ? [args.guid] : "guids" in args ? "" === args.guids ? [] : args.guids : void 0;
  }
}
class DBModelSyncInstructionBase {
  supported() {
    return false;
  }
  async runTransaction(_) {
    throw new AssertionError("Unsupported instruction has no transaction");
  }
  getDescription() {
    throw new AssertionError("Unsupported instruction has no description");
  }
  async postMigrate() {
    return Promise.resolve();
  }
}
class DBModelSyncRenameEntity extends DBModelSyncInstructionBase {
}
class DBModelSyncCreateEntity extends DBModelSyncInstructionBase {
}
class DBModelSyncRenameAttributes extends DBModelSyncInstructionBase {
}
class DBModelSyncChangeAttributesTypes extends DBModelSyncInstructionBase {
}
class DBModelSyncAddAttributes extends DBModelSyncInstructionBase {
}
class DBModelSyncDropEntity extends DBModelSyncInstructionBase {
  constructor(entity, fileType) {
    super(), this.entity = entity, this.fileType = fileType, this.filesToDelete = [];
  }
  supported() {
    return true;
  }
  getDescription() {
    return `Drop table '${this.entity}'.`;
  }
  async runTransaction(tx) {
    if ("none" !== this.fileType) {
      (await tx.retrieveGuidsAndChangeDatesForFileObjects(this.entity)).forEach(({ guid, changedDate }) => {
        const fileInfo = { guid, changedDate, isThumb: false };
        this.filesToDelete.push(fileInfo), "image" === this.fileType && this.filesToDelete.push({ ...fileInfo, isThumb: true });
      });
    }
    await tx.dropEntityTables([this.entity]);
  }
  async postMigrate() {
    offlineData().deleteFiles(this.filesToDelete);
  }
}
class DBModelSyncDropAttributes extends DBModelSyncInstructionBase {
  constructor(entity, droppedAttributes) {
    super(), this.entity = entity, this.droppedAttributes = droppedAttributes;
  }
  supported() {
    return true;
  }
  getDescription() {
    return `Drop columns (${this.droppedAttributes.join(", ")}) from '${this.entity}'.`;
  }
  async runTransaction(tx) {
    await tx.changeEntityTable(this.entity, [], this.droppedAttributes);
  }
}
class DBModelSyncIndexBase extends DBModelSyncInstructionBase {
  constructor(action2, entity, index2) {
    super(), this.action = action2, this.entity = entity, this.index = index2;
  }
  supported() {
    return true;
  }
  getDescription() {
    return `${this.action} index (${this.index.attributes.map((a) => `${a.name}_${a.direction}`)}) from '${this.entity}'`;
  }
}
class DBModelSyncAddIndex extends DBModelSyncIndexBase {
  constructor(entity, index2) {
    super("Add", entity, index2);
  }
  async runTransaction(tx) {
    await tx.createIndex(this.entity, this.index);
  }
}
class DBModelSyncDropIndex extends DBModelSyncIndexBase {
  constructor(entity, index2) {
    super("Drop", entity, index2);
  }
  async runTransaction(tx) {
    await tx.dropIndex(this.entity, this.index);
  }
}
function getDBModelSyncInstructions(oldMetadata, newMetadata) {
  const indexByModelId = indexByKey((item) => ensure(item.modelId)), oldMetadataIndexedByModelId = indexByModelId(oldMetadata), newMetadataIndexedByModelId = indexByModelId(newMetadata), { droppedMetadata, addedMetadata, comparableMetadata } = function(oldMetadata2, newMetadata2) {
    const oldAndNewUniqueEntityModelIds = /* @__PURE__ */ new Set([...Object.keys(oldMetadata2), ...Object.keys(newMetadata2)]);
    return Array.from(oldAndNewUniqueEntityModelIds).reduce((res, modelId) => (oldMetadata2[modelId] && newMetadata2[modelId] ? res.comparableMetadata.set(modelId, { oldMetadata: oldMetadata2[modelId], newMetadata: newMetadata2[modelId] }) : oldMetadata2[modelId] && !newMetadata2[modelId] ? res.droppedMetadata.push(oldMetadata2[modelId]) : !oldMetadata2[modelId] && newMetadata2[modelId] && res.addedMetadata.push(newMetadata2[modelId]), res), { comparableMetadata: /* @__PURE__ */ new Map(), droppedMetadata: [], addedMetadata: [] });
  }(oldMetadataIndexedByModelId, newMetadataIndexedByModelId), result = [], addedEntities = addedMetadata.map((meta) => meta.objectType);
  0 !== droppedMetadata.length && result.push(...droppedMetadata.map((meta) => new DBModelSyncDropEntity(meta.objectType, getEntityFileType(meta)))), 0 !== addedEntities.length && result.push(...addedEntities.map((_e) => new DBModelSyncCreateEntity()));
  const entitiesChangesResult = function(entityOldNewMetadataMap) {
    const result2 = [];
    for (const [, { oldMetadata: oldMetadata2, newMetadata: newMetadata2 }] of entityOldNewMetadataMap)
      oldMetadata2.objectType !== newMetadata2.objectType && result2.push(new DBModelSyncRenameEntity()), result2.push(...compareAttributeChanges(oldMetadata2.objectType, oldMetadata2.attributes, newMetadata2.attributes)), result2.push(...compareIndexChanges(oldMetadata2.objectType, oldMetadata2.indices, newMetadata2.indices));
    return result2;
  }(comparableMetadata);
  return result.push(...entitiesChangesResult), result;
}
function getEntityFileType(entityMeta) {
  return isFileDocumentType(entityMeta) ? function(entityMeta2) {
    return isFileDocumentType(entityMeta2) && ("System.Image" === entityMeta2.objectType || entityMeta2.properties.superclasses.includes("System.Image"));
  }(entityMeta) ? "image" : "file" : "none";
}
function compareAttributeChanges(oldEntityName, oldAttributesMetadata, newAttributesMetadata) {
  const indexByModelId = indexByKey(([, attrMeta]) => ensure(attrMeta.modelId)), oldAttributesMetadataIndexedByModelId = indexByModelId(Object.entries(oldAttributesMetadata)), newAttributesMetadataIndexedByModelId = indexByModelId(Object.entries(newAttributesMetadata)), oldAndNewUniqueAttributeModelIds = /* @__PURE__ */ new Set([...Object.keys(oldAttributesMetadataIndexedByModelId), ...Object.keys(newAttributesMetadataIndexedByModelId)]), result = [], { droppedAttributes, renamedAttributes, typeChangeAttributes, addedAttributes } = Array.from(oldAndNewUniqueAttributeModelIds).reduce((changes, modelId) => (oldAttributesMetadataIndexedByModelId[modelId] && newAttributesMetadataIndexedByModelId[modelId] ? (oldAttributesMetadataIndexedByModelId[modelId][0] !== newAttributesMetadataIndexedByModelId[modelId][0] && changes.renamedAttributes.push([oldAttributesMetadataIndexedByModelId[modelId][0], newAttributesMetadataIndexedByModelId[modelId][0]]), oldAttributesMetadataIndexedByModelId[modelId][1].type !== newAttributesMetadataIndexedByModelId[modelId][1].type && changes.typeChangeAttributes.push([oldAttributesMetadataIndexedByModelId[modelId][0], oldAttributesMetadataIndexedByModelId[modelId][1].type, newAttributesMetadataIndexedByModelId[modelId][1].type])) : oldAttributesMetadataIndexedByModelId[modelId] && !newAttributesMetadataIndexedByModelId[modelId] ? changes.droppedAttributes.push(oldAttributesMetadataIndexedByModelId[modelId][0]) : !oldAttributesMetadataIndexedByModelId[modelId] && newAttributesMetadataIndexedByModelId[modelId] && changes.addedAttributes.push([newAttributesMetadataIndexedByModelId[modelId][0], newAttributesMetadataIndexedByModelId[modelId][1].type]), changes), { droppedAttributes: [], addedAttributes: [], renamedAttributes: [], typeChangeAttributes: [] });
  return 0 !== droppedAttributes.length && result.push(new DBModelSyncDropAttributes(oldEntityName, droppedAttributes)), 0 !== renamedAttributes.length && result.push(new DBModelSyncRenameAttributes()), 0 !== typeChangeAttributes.length && result.push(new DBModelSyncChangeAttributesTypes()), 0 !== addedAttributes.length && result.push(new DBModelSyncAddAttributes()), result;
}
function compareIndexChanges(objectType, oldIndices, newIndices) {
  const indexByDescription = indexByKey((index2) => index2.attributes.map((a) => `${a.name}_${a.direction}`).join("-")), oldIndicesByDescription = indexByDescription(oldIndices), newIndicesByDescription = indexByDescription(newIndices), removedDescriptions = Object.keys(oldIndicesByDescription).filter((desc) => !newIndicesByDescription[desc]), addedDescriptions = Object.keys(newIndicesByDescription).filter((desc) => !oldIndicesByDescription[desc]);
  return [...removedDescriptions.map((desc) => oldIndicesByDescription[desc]).map((index2) => new DBModelSyncDropIndex(objectType, index2)), ...addedDescriptions.map((desc) => newIndicesByDescription[desc]).map((index2) => new DBModelSyncAddIndex(objectType, index2))];
}
function isFileDocumentType(entityMeta) {
  return "System.FileDocument" === entityMeta.objectType || entityMeta.properties.superclasses.includes("System.FileDocument");
}
function shouldTriggerFullSyncOrDatabaseUpdate(oldOfflineSessionMetadata, newOfflineSessionMetadata) {
  const newSyncConfig = newOfflineSessionMetadata.sync_config;
  if (!newSyncConfig)
    return { shouldSync: false };
  if (!oldOfflineSessionMetadata)
    return { shouldSync: true };
  if (oldOfflineSessionMetadata.bundleVersion === newOfflineSessionMetadata.bundleVersion)
    return { shouldSync: false };
  const oldSyncConfig = oldOfflineSessionMetadata.sync_config, oldOfflineEntities = new Set(ensure(oldSyncConfig?.schema)), oldOfflineMetadata = oldOfflineSessionMetadata.metadata.filter(({ objectType }) => oldOfflineEntities.has(objectType)), newOfflineEntities = new Set(ensure(newSyncConfig.schema)), newOfflineMetadata = newOfflineSessionMetadata.metadata.filter(({ objectType }) => newOfflineEntities.has(objectType));
  if (![...oldOfflineMetadata, ...newOfflineMetadata].every((entityMeta) => void 0 !== entityMeta.modelId && Object.values(entityMeta.attributes).every((attrMeta) => void 0 !== attrMeta.modelId))) {
    const isEqual = comparer.structural;
    return isEqual(oldSyncConfig, newSyncConfig) ? { shouldSync: !newSyncConfig.schema.map((entity) => ({ oldAttrs: oldOfflineSessionMetadata.metadata.find((e) => e.objectType === entity).attributes, newAttrs: newOfflineSessionMetadata.metadata.find((e) => e.objectType === entity).attributes })).every(({ oldAttrs, newAttrs }) => isEqual(oldAttrs, newAttrs)) } : { shouldSync: true };
  }
  const entitiesWithChangedSyncModeToOnline = function(oldOfflineMetadata2, oldSyncConfig2, newOfflineMetadata2, newSyncConfig2) {
    if (!oldSyncConfig2.online)
      return [];
    const newEntitiesWithOnlineSyncMode = new Set(ensure(newSyncConfig2.online)), newEntitiesModelIdsWithOnlineSyncMode = newOfflineMetadata2.reduce((res, { objectType, modelId }) => (newEntitiesWithOnlineSyncMode.has(objectType) && res.add(ensure(modelId)), res), /* @__PURE__ */ new Set()), oldEntitiesWithOnlineSyncMode = new Set(oldSyncConfig2.online), [oldEntitiesModelIdsMap, oldEntitiesModelIdsWithOnlineSyncModeMap] = oldOfflineMetadata2.reduce(([resOldEntitiesModelIds, resOldEntitiesModelIdsWithOnlineSyncMode], { objectType, modelId }) => (resOldEntitiesModelIds.set(ensure(modelId), objectType), oldEntitiesWithOnlineSyncMode.has(objectType) && resOldEntitiesModelIdsWithOnlineSyncMode.set(ensure(modelId), objectType), [resOldEntitiesModelIds, resOldEntitiesModelIdsWithOnlineSyncMode]), [/* @__PURE__ */ new Map(), /* @__PURE__ */ new Map()]), result = [];
    for (const newModelId of newEntitiesModelIdsWithOnlineSyncMode)
      oldEntitiesModelIdsMap.has(newModelId) && (oldEntitiesModelIdsWithOnlineSyncModeMap.has(newModelId) || result.push(ensure(oldEntitiesModelIdsMap.get(newModelId))));
    return result;
  }(oldOfflineMetadata, ensure(oldSyncConfig), newOfflineMetadata, ensure(newSyncConfig)), oldMetadataIndexedByObjectType = indexByKey((item) => ensure(item.objectType))(oldOfflineMetadata);
  if (entitiesWithChangedSyncModeToOnline.length > 0)
    return { shouldSync: true, cleanupInstructions: entitiesWithChangedSyncModeToOnline.map((e) => new DBModelSyncDropEntity(e, getEntityFileType(ensure(oldMetadataIndexedByObjectType[e])))) };
  const dbModelSyncInstructions = getDBModelSyncInstructions(oldOfflineMetadata, newOfflineMetadata);
  return 0 === dbModelSyncInstructions.length ? { shouldSync: false } : dbModelSyncInstructions.every((instruction) => instruction.supported()) ? { shouldSync: false, dbModelSyncInstructions } : { shouldSync: true };
}
async function handleOfflineStartup(dbModelCheckResult, cachedOfflineMetadata, dbOfflineMetadata, startupLogger) {
  if (dbModelCheckResult.shouldSync)
    await startupFullSynchronization(), dbModelCheckResult.cleanupInstructions && await offlineData().executeDBModelSyncInstructions(dbModelCheckResult.cleanupInstructions, cachedOfflineMetadata);
  else if (dbModelCheckResult.dbModelSyncInstructions) {
    const isPlural = dbModelCheckResult.dbModelSyncInstructions.length > 1;
    startupLogger.info(`Found ${dbModelCheckResult.dbModelSyncInstructions.length} instruction${isPlural ? "s" : ""} to update the local database to match the new domain model.`);
    try {
      const stopwatch = new Stopwatch();
      startupLogger.info("Updating the local database to match the new domain model."), await offlineData().executeDBModelSyncInstructions(dbModelCheckResult.dbModelSyncInstructions, cachedOfflineMetadata);
      const dbMigrateDuration = stopwatch.measure();
      startupLogger.info(`Updating the local database to match the new domain model completed in ${dbMigrateDuration} milliseconds.`);
    } catch (e) {
      startupLogger.warn("An error occurred while updating the local database schema. Falling back to a full startup synchronization.", e), await startupFullSynchronization();
    }
  }
  async function startupFullSynchronization() {
    const stopwatch = new Stopwatch(), incompatibleEntities = getIncompatibleEntities(dbOfflineMetadata, cachedOfflineMetadata);
    await offlineData().runFullSynchronization(true, incompatibleEntities);
    const syncDuration = stopwatch.measure();
    startupLogger.log(syncDuration.ms > SYNC_DURATION_WARNING_THRESHOLD ? "warning" : "info", `Startup synchronization completed in ${syncDuration} milliseconds.`);
  }
}
class OnlineDataBackend extends _DataBackend {
  constructor(config, objectCache) {
    super(), this._getImageUri = config && config.getImgUriFn ? callbackToPromiseFactory(config.getImgUriFn) : getDefaultImgUri, this._objectCache = objectCache;
  }
  async getByGuid(guids, filter = {}) {
    const json = await memoizeConcurrent({ guids, filter }, () => retrieveByIds(guids, filter));
    let mxobjs;
    if (await handleRuntimeSuccess(this._objectCache, json), json.resultGuids)
      mxobjs = json.resultGuids.map((guid) => this._objectCache.getObject(guid));
    else {
      const jsonObjs = json.mxobjects || [];
      jsonObjs.map((jsonObj) => jsonObj.guid).forEach((guid) => removeObjectKeepChanges(this._objectCache, guid)), mxobjs = jsonObjs.map(MxObject.fromJson);
    }
    return { mxobjs, count: mxobjs.length };
  }
  async getByPath(guid, path, entity, direction) {
    const [changes, objects] = getRequestDataForGuidsReachableFrom(this._objectCache, [guid]), json = await memoizeConcurrent({ guid, path, entity }, () => retrieveByPath(guid, path, entity, direction, changes, objects));
    await handleRuntimeSuccess(this._objectCache, json);
    const guids = json.resultGuids || [];
    return { mxobjs: guids.map((g) => this._objectCache.getObject(g)), count: guids.length };
  }
  async getByXPath(xpath, filter, wantCount) {
    const json = await memoizeConcurrent({ xpath, filter, wantCount }, () => retrieveByXPath(xpath, filter, wantCount));
    await handleRuntimeSuccess(this._objectCache, json);
    const count = json.count || 0, aggregates = json.aggregates || [], hasMoreItems = json.hasMoreItems;
    let mxobjs;
    if (Array.isArray(json.resultGuids))
      mxobjs = json.resultGuids.map((guid) => this._objectCache.getObject(guid));
    else {
      const jsonObjs = json.mxobjects || [];
      jsonObjs.map((jsonObj) => jsonObj.guid).forEach((guid) => removeObjectKeepChanges(this._objectCache, guid)), mxobjs = jsonObjs.map(MxObject.fromJson);
    }
    return { mxobjs, count, hasMoreItems, aggregates: aggregates.map(function(agg) {
      return null == agg ? "" : new Big(agg);
    }) };
  }
  async action(params, context, targetForm, async2, onValidation) {
    const mfName = params && params.actionname ? params.actionname : null, microflowInfo = getMicroflowInfo(mfName);
    let contextGuids = params && params.guids ? params.guids : [];
    null != context && (contextGuids = contextGuids.concat(null != microflowInfo ? microflowInfo.parameters.map((entity) => context.getContext(entity)).filter((entity) => null != entity) : context.getGuids()));
    const [changes, objects] = getRequestDataForMicroflow(this._objectCache, void 0, contextGuids.concat(getImplicitMicroflowParameters()));
    let json;
    try {
      json = async2 ? await executeAsync((asyncId) => executeAction$1(params, context, changes, objects, asyncId)) : await executeAction$1(params, context, changes, objects);
    } catch (e) {
      throw await handleRuntimeError(this._objectCache, e, onValidation), e;
    }
    return await handleRuntimeSuccess(this._objectCache, json, targetForm), json.actionResult && Array.isArray(json.actionResult.resultGuids) ? json.actionResult.resultGuids.map((guid) => this._objectCache.getObject(guid)) : json.actionResult;
  }
  async create(entity) {
    const [changes, objects] = getEntityMeta(entity)?.needsReachableState.create ? getRequestDataForGuidsReachableFrom(this._objectCache, []) : getRequestData(this._objectCache, []);
    let json;
    try {
      json = await instantiate(entity, changes, objects);
    } catch (e) {
      throw await handleRuntimeError(this._objectCache, e), e;
    }
    return await handleRuntimeSuccess(this._objectCache, json), this._objectCache.getObject(json.actionResult);
  }
  async commit(guids, context, targetForm, onValidation) {
    const [changes, objects] = getRequestDataForObjectAction(this._objectCache, guids, "commit");
    let json;
    try {
      json = await commit(guids, context, changes, objects);
    } catch (e) {
      throw await handleRuntimeError(this._objectCache, e, onValidation), e;
    }
    return await handleRuntimeSuccess(this._objectCache, json, targetForm), json;
  }
  async rollback(guids) {
    const [changes, objects] = getRequestDataForObjectAction(this._objectCache, guids, "rollback");
    let json;
    try {
      json = await rollback(guids, changes, objects);
    } catch (e) {
      throw await handleRuntimeError(this._objectCache, e), e;
    }
    return await handleRuntimeSuccess(this._objectCache, json), json;
  }
  async remove(guids) {
    const [changes, objects] = getRequestDataForObjectAction(this._objectCache, guids, "delete");
    let json;
    try {
      json = await _delete(guids, changes, objects);
    } catch (e) {
      throw await handleRuntimeError(this._objectCache, e), e;
    }
    return await handleRuntimeSuccess(this._objectCache, json), json;
  }
  async validate(guids) {
    const [changes, objects] = getRequestData(this._objectCache, guids);
    try {
      return await validate$1(changes, objects);
    } catch (e) {
      throw await handleRuntimeError(this._objectCache, e), e;
    }
  }
  async saveDocument(guid, name, params, blob) {
    const [changes, objects] = getRequestDataForObjectAction(this._objectCache, [guid], "commit");
    let json;
    try {
      json = await upload(guid, name, params, blob, changes, objects);
    } catch (e) {
      throw await handleRuntimeError(this._objectCache, e), e;
    }
    return await handleRuntimeSuccess(this._objectCache, json), json;
  }
  getDocumentUrl(guid, changedDate, isThumb, fileName) {
    return getRemoteDynamicResourceUrl(guid, changedDate, isThumb, fileName);
  }
  getImageUrl(url) {
    return this._getImageUri(url);
  }
  cleanup() {
    return Promise.resolve();
  }
}
function getDefaultImgUri(url) {
  return Promise.resolve(url);
}
function MxObjectCache() {
  this._objectCache = {}, this._newGuids = {}, this._changes = {};
}
function convertLoggerArgument(arg) {
  if ("string" == typeof arg)
    return arg;
  if (arg instanceof Error) {
    const message = `${arg.message} ${arg.stack}`;
    return `${2 === (message.match(/Nanoflow stack:/g) ?? []).length ? message.replace(/^Nanoflow stack:\n(.*\n)*$/m, "") : message}`;
  }
  if (arg?.outerHTML)
    return arg.outerHTML;
  try {
    return JSON.stringify(arg);
  } catch (e) {
    return "[Unserializable data. See browser console for the details]";
  }
}
MxObjectCache.prototype.getAllObjects = function() {
  return Object.values(this._objectCache);
}, MxObjectCache.prototype.dehydrate = function() {
  return clone({ data: this.getAllObjects().map((o) => o.toJSON()), newGuids: this._newGuids, changes: this._changes });
}, MxObjectCache.prototype.hydrate = function({ data, newGuids, changes }) {
  this._objectCache = {}, data.map((rawObj) => MxObject.fromJson(rawObj)).forEach((mxobj) => {
    this._objectCache[mxobj.getGuid()] = mxobj;
  }), this._newGuids = clone(newGuids), this._changes = clone(changes);
}, MxObjectCache.prototype.getObject = function(guid) {
  return this._objectCache[guid] || null;
}, MxObjectCache.prototype.removeObjectKeepChanges = function(guid) {
  delete this._objectCache[guid], delete this._newGuids[guid];
}, MxObjectCache.prototype.setMxObjects = function(rawObjs) {
  rawObjs.forEach(function(rawObj) {
    var guid = rawObj.guid, cacheObj = this._objectCache[guid];
    cacheObj ? cacheObj.resetFromJSON(rawObj) : this._objectCache[guid] = MxObject.fromJson(rawObj);
  }, this);
}, MxObjectCache.prototype.has = function(guid) {
  return !!this.getObject(guid);
}, MxObjectCache.prototype.isNew = function(guid) {
  return this.has(guid) && Boolean(this._newGuids[guid]);
}, MxObjectCache.prototype.clear = function() {
  this._objectCache = {}, this._newGuids = {}, this._changes = {};
}, MxObjectCache.prototype.hasChanges = function(guid) {
  return guid in this._changes;
}, MxObjectCache.prototype.getChanges = function(guid) {
  return this._changes[guid] || {};
}, MxObjectCache.prototype.makeChange = function(guid, attr, value) {
  this._changes[guid] = this._changes[guid] || {}, this._changes[guid][attr] = { value };
}, MxObjectCache.prototype.removeAllChanges = function(guids) {
  guids.forEach(function(guid) {
    delete this._changes[guid];
  }, this);
}, MxObjectCache.prototype.removeChanges = function(resets) {
  Object.keys(resets).forEach((guid) => {
    const changes = this._changes[guid];
    changes && (resets[guid].forEach((attr) => delete changes[attr]), 0 === Object.keys(changes).length && delete this._changes[guid]);
  });
}, MxObjectCache.prototype.onCreate = function(guids) {
  guids.forEach((guid) => {
    this._newGuids[guid] = true;
  });
}, MxObjectCache.prototype.onCommit = function(guids) {
  guids.forEach((guid) => delete this._newGuids[guid]);
}, MxObjectCache.prototype.onDelete = function(guids) {
  for (const guid of guids)
    guid in this._objectCache && this._objectCache[guid].markAsUnavailable();
  this.removeObjects(guids);
}, MxObjectCache.prototype.addChanges = function(changes) {
  for (const guid in changes) {
    const objChanges = changes[guid];
    null == this._changes[guid] && (this._changes[guid] = {});
    const existingObjChanges = this._changes[guid];
    for (const attr in objChanges)
      objChanges[attr].hasOwnProperty("value") ? existingObjChanges[attr] = objChanges[attr] : existingObjChanges[attr].hash = objChanges[attr].hash;
  }
}, MxObjectCache.prototype.removeObjects = function(guids) {
  guids.forEach((guid) => {
    delete this._objectCache[guid], delete this._newGuids[guid], delete this._changes[guid];
  });
}, MxObjectCache.prototype.getAllGuids = function() {
  return unique(Object.keys(this._objectCache).concat(Object.keys(this._changes)));
};
class RuntimeSocketConnection {
  constructor(url) {
    this.url = url, this.connectHandlers = [], this.instructionHandlers = [], window.setInterval(() => {
      this.send(JSON.stringify({ type: "ping" }));
    }, 1e4);
  }
  isConnected() {
    return void 0 !== this.socket && this.socket.readyState === WebSocket.OPEN;
  }
  onConnect(handler) {
    this.isConnected() ? handler() : this.connectHandlers.push(handler);
  }
  onInstruction(type, handler) {
    this.instructionHandlers.push({ type, handler });
  }
  sendLog(level, node, message) {
    if (this.isConnected()) {
      const maxSendLength = 6e4;
      for (let offset = 0; offset < message.length; offset += maxSendLength) {
        const messagePart = message.substr(offset, maxSendLength);
        this.send(JSON.stringify({ type: "log", node, data: `${level}:${messagePart}` }));
      }
    }
  }
  send(data) {
    this.isConnected() && ensure(this.socket).send(data);
  }
  connect() {
    try {
      this.socket = new WebSocket(this.url), this.socket.onopen = () => {
        this.connectHandlers.forEach((handler) => handler()), this.connectHandlers.splice(0);
      }, this.socket.onmessage = ({ data }) => {
        const instruction = JSON.parse(data);
        this.instructionHandlers.slice().filter(({ type }) => type === instruction.type).forEach(({ handler }) => handler(instruction));
      }, this.socket.onclose = () => this.reconnect();
    } catch (e) {
      this.reconnect();
    }
  }
  reconnect() {
    this.socket = void 0, setTimeout(() => this.connect(), 1e3);
  }
}
class DevTools {
  constructor(remoteUrl, logManager = LogManager.get()) {
    this.reloadHandlers = [], this.updateStylingHandlers = [], this.deploymentId = void 0, this.connection = new RuntimeSocketConnection(remoteUrl.replace(/^http/, "ws") + "mxdevtools/"), this.connection.onInstruction("set_deployment_id", (instruction) => {
      void 0 !== this.deploymentId && instruction.deploymentId !== this.deploymentId && this.reloadHandlers.forEach((handler) => handler(false)), this.deploymentId = instruction.deploymentId;
    }), this.connection.onInstruction("reload", () => {
      this.reloadHandlers.forEach((handler) => handler(true));
    }), this.connection.onInstruction("update_styling", () => {
      this.updateStylingHandlers.forEach((handler) => handler());
    }), logManager.addHandler((level, node, ...args) => {
      this.log(level, node, ...args);
    }), initializeNanoflowDebugger(this.connection, logManager);
  }
  async connect() {
    this.connection.connect(), await waitForNFDebuggerBreakpoints();
  }
  addOnReload(handler) {
    this.reloadHandlers.push(handler);
  }
  addOnUpdateStyling(handler) {
    this.updateStylingHandlers.push(handler);
  }
  log(level, node, ...args) {
    const messages = args.map(convertLoggerArgument), sanitizedNode = "Client" === node ? node : `Client_${node}`;
    this.connection.onConnect(() => this.connection.sendLog(level, sanitizedNode, messages.join("\n")));
  }
}
class LoggableFileBackend {
  constructor(fileBackend, logManager) {
    this.fileBackend = fileBackend, this.logger = logManager.getLogger(LogNode.FileSystem);
  }
  async downloadFile(url, filePath) {
    this.logger.trace(`Download file from "${url}" to "${filePath}"`);
    const stopwatch = new Stopwatch();
    await this.fileBackend.downloadFile(url, filePath), this.logger.trace(`Download file from ${url} completed after ${stopwatch.measure()} milliseconds`);
  }
  async listDir(dirPath) {
    return this.fileBackend.listDir(dirPath);
  }
  async moveFile(filePath, newPath) {
    return this.logger.trace(`Move file from "${filePath}" to "${newPath}"`), this.fileBackend.moveFile(filePath, newPath);
  }
  async moveDir(dirPath, newPath) {
    return this.logger.trace(`Move dir from "${dirPath}" to "${newPath}"`), this.fileBackend.moveDir(dirPath, newPath);
  }
  async readFile(filePath) {
    return this.logger.trace(`Read file from "${filePath}"`), this.fileBackend.readFile(filePath);
  }
  async removeDir(dirPath) {
    return this.logger.trace(`Remove dir from "${dirPath}"`), this.fileBackend.removeDir(dirPath);
  }
  async removeFile(filePath) {
    return this.logger.trace(`Remove file from "${filePath}"`), this.fileBackend.removeFile(filePath);
  }
  async storeFile(contentBlob, filePath) {
    return this.logger.trace(`Store blob to file "${filePath}"`), this.fileBackend.storeFile(contentBlob, filePath);
  }
  toAbsolutePath(filePath) {
    return this.fileBackend.toAbsolutePath(filePath);
  }
}
class OnlineData {
  constructor(objectCache) {
    this.objectCache = objectCache;
  }
  async retrieveByXPath(operationId, args, xpathConstraint, options, wantCount) {
    const json = await memoizeConcurrent({ operationId, args, xpathConstraint, options, wantCount }, () => retrieve(operationId, args, { ...options, wantCount, extraXpath: xpathConstraint }, {}, []));
    await handleRuntimeSuccess(this.objectCache, json);
    return { ...this.processResult(json), count: json.count, hasMoreItems: json.hasMoreItems };
  }
  async retrieveByPath(guid, operationId) {
    const [changes, objects] = getRequestDataForGuidsReachableFrom(this.objectCache, [guid]), json = await memoizeConcurrent({ guid, operationId }, () => retrieve(operationId, { CurrentObject: { guid } }, {}, changes, objects));
    return await handleRuntimeSuccess(this.objectCache, json), this.processResult(json);
  }
  async retrieveByPathUsingOperationIdOrCache(guid, path, direction, entity, operationId) {
    let cachedObjects = [];
    const entityMeta = getEntityMeta(entity), retrieveLocally = void 0 !== entityMeta && function(entityMeta2, path2) {
      const numberOfSteps = path2.split("/").length;
      return !entityMeta2.isPersistable && !entityMeta2.needsReachableState.retrieve && 1 === numberOfSteps;
    }(entityMeta, path);
    if (!operationId && !retrieveLocally)
      throw new Error(`Error trying to retrieve an object of type ${entity}`);
    return operationId && !retrieveLocally || ({ cachedObjects } = getCachedObjectsByPath(guid, direction, path, this.objectCache)), operationId && 0 === cachedObjects.length ? this.retrieveByPath(guid, operationId) : { mxObjects: cachedObjects, count: cachedObjects.length };
  }
  async retrieveByMicroflow(operationId, args, targetForm) {
    let json;
    try {
      const [changes, objects] = getRequestDataForMicroflow(this.objectCache, operationId, getGuidsFromRuntimeArguments(args).concat(getImplicitMicroflowParameters()));
      json = await retrieve(operationId, args, {}, changes, objects);
    } catch (e) {
      throw await handleRuntimeError(this.objectCache, e), e;
    }
    return await handleRuntimeSuccess(this.objectCache, json, targetForm), { ...this.processResult(json), hasMoreItems: json.hasMoreItems };
  }
  processResult(result) {
    return result.partialObjects.length ? { mxObjects: result.partialObjects.map((obj) => MxObject.fromJson(obj, true).snapshot()), extra: [] } : { mxObjects: result.resultGuids.map((guid) => ensure(this.objectCache.getObject(guid))), extra: result.extraGuids.map((guid) => ensure(this.objectCache.getObject(guid))) };
  }
  async executeMicroflow(operationId, args, targetForm, validationGuids = [], runAsync = false) {
    let json;
    try {
      const sendAllState = Object.values(args).some((mfParam) => "xpath" in mfParam), [changes, objects] = sendAllState ? function(objectCache) {
        const allGuidsInCache = objectCache.getAllObjects().map((obj) => obj.getGuid()), session = getSession();
        return [session.getUserId(), session.getSessionObjectId()].filter((guid) => !allGuidsInCache.includes(guid)).forEach((guid) => allGuidsInCache.push(guid)), getRequestData(objectCache, allGuidsInCache);
      }(this.objectCache) : getRequestDataForMicroflow(this.objectCache, operationId, getGuidsFromRuntimeArguments(args).concat(getImplicitMicroflowParameters()));
      json = runAsync ? await executeAsync((asyncId) => runtimeOperation(operationId, args, changes, objects, validationGuids, asyncId)) : await runtimeOperation(operationId, args, changes, objects, validationGuids);
    } catch (e) {
      throw await handleRuntimeError(this.objectCache, e), e;
    }
    await handleRuntimeSuccess(this.objectCache, json, targetForm);
    const result = json.actionResult;
    if (null == result)
      return;
    const { value, type } = result;
    return runtimeValueToExpressionVariable(value, type, (guid) => ensure(this.objectCache.getObject(guid)));
  }
  async executeExternalAction(operationId, actionObject, objectsToCommit) {
    const actionObjectGuid = actionObject.getGuid(), guidsToCommit = unique(objectsToCommit.map((mxobj) => mxobj.getGuid())), [changes, objects] = function(objectCache, actionObjectGuid2, guidsToCommit2) {
      const [changesForGuidsReachableFromContextObject, objectsForGuidsReachableFromContextObject] = getRequestDataForGuidsReachableFrom(objectCache, [actionObjectGuid2]), [changesForCommit, objectsForCommit] = getRequestDataForObjectAction(objectCache, guidsToCommit2, "commit"), changes2 = { ...changesForGuidsReachableFromContextObject, ...changesForCommit }, objects2 = [...objectsForGuidsReachableFromContextObject];
      for (const objectForCommit of objectsForCommit)
        objects2.find((o) => o.guid === objectForCommit.guid) || objects2.push(objectForCommit);
      return [changes2, objects2];
    }(this.objectCache, actionObjectGuid, guidsToCommit);
    let json;
    try {
      const args = { Object: { guid: actionObjectGuid } };
      guidsToCommit.length > 0 && (args.Objects = { guids: guidsToCommit }), json = await runtimeOperation(operationId, args, changes, objects);
    } catch (e) {
      throw await handleRuntimeError(this.objectCache, e), e;
    }
    await handleRuntimeSuccess(this.objectCache, json), handleUncachedObjects(this.objectCache, objectsToCommit, json);
    const { commits = [] } = json, committedObjects = unique(objectsToCommit.filter((objectToCommit) => commits.includes(objectToCommit.getGuid()))), entityUpdates = committedObjects.map((mxobj) => ({ entity: mxobj.getEntity() })), objectUpdates = committedObjects.map((mxobj) => ({ guid: mxobj.getGuid() }));
    await publish(...entityUpdates, ...objectUpdates);
  }
  async createObject(entity, operationId) {
    const entityMeta = getEntityMeta(entity);
    if (void 0 !== entityMeta && (!operationId || function(entityMeta2) {
      return !entityMeta2.isPersistable && !entityMeta2.needsReachableState.create && Object.values(entityMeta2.attributes).every((attr) => !attr.isAlwaysReadOnly && !isSystemAttribute(attr.name));
    }(entityMeta))) {
      const guid = createMendixGuid(entityMeta);
      return this.objectCache.onCreate([guid]), this.objectCache.setMxObjects([createMxObjectJSON(guid, entityMeta)]), this.objectCache.getObject(guid);
    }
    if (void 0 !== operationId)
      return this.executeCreateObjectAction(operationId, entity);
    throw new Error(`Error trying to create an object of type ${entity}`);
  }
  async executeCreateObjectAction(operationId, entity) {
    const [changes, objects] = getEntityMeta(entity)?.needsReachableState.create ? getRequestDataForGuidsReachableFrom(this.objectCache, []) : getRequestData(this.objectCache, []);
    let json;
    try {
      json = await runtimeOperation(operationId, {}, changes, objects);
    } catch (e) {
      throw await handleRuntimeError(this.objectCache, e), e;
    }
    await handleRuntimeSuccess(this.objectCache, json);
    const guid = ensure(json.actionResult).value;
    return ensure(this.objectCache.getObject(guid));
  }
  async executeObjectAction(operationId, event, mxobjs) {
    if (0 === mxobjs.length)
      return;
    const guids = unique(mxobjs.map((mxobj) => mxobj.getGuid())), [changes, objects] = getRequestDataForObjectAction(this.objectCache, guids, event), guidMapping = indexByKey((mxobj) => mxobj.getGuid())(mxobjs), guidEntityMapping = guids.reduce((previousValue, guid) => (previousValue[guid] = guidMapping[guid].getEntity(), previousValue), {});
    let json;
    try {
      json = await runtimeOperation(operationId, { Objects: { guids } }, changes, objects);
    } catch (e) {
      throw await handleRuntimeError(this.objectCache, e), e;
    }
    await handleRuntimeSuccess(this.objectCache, json), handleUncachedObjects(this.objectCache, mxobjs, json);
    const { commits = [], deletes = [], resets = {} } = json, resetGuids = Object.keys(resets), affectedGuids = "rollback" === event ? [...guids] : [...commits, ...deletes, ...resetGuids].filter((guid) => guids.includes(guid)), objectGuidsToUpdate = "rollback" === event ? [...guids] : [...commits, ...resetGuids], entityUpdates = unique(affectedGuids.map((guid) => guidEntityMapping[guid])).filter((entity) => void 0 !== entity).map((entity) => ({ entity })), objectUpdates = unique(objectGuidsToUpdate).filter((guid) => guids.includes(guid)).map((guid) => ({ guid }));
    await publish(...entityUpdates, ...objectUpdates);
  }
  async generateExport(params) {
    const exportGuids = params?.guids ?? [], [changes, objects] = getRequestDataForGuidsReachableFrom(this.objectCache, exportGuids);
    let json;
    try {
      json = await executeAsync((asyncId) => _export(params, changes, objects, asyncId));
    } catch (e) {
      throw await handleRuntimeError(this.objectCache, e), e;
    }
    await handleRuntimeSuccess(this.objectCache, json);
  }
}
function isBrowserWithOfflineSupport() {
  return isBrowserWithServiceWorkerSupport() && window.isSecureContext;
}
function isBrowserWithServiceWorkerSupport() {
  return !("cordova" in window) && "serviceWorker" in navigator;
}
/*! js-cookie v3.0.5 | MIT */
function assign(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];
    for (var key in source)
      target[key] = source[key];
  }
  return target;
}
var api = function init(converter, defaultAttributes) {
  function set(name, value, attributes) {
    if ("undefined" != typeof document) {
      "number" == typeof (attributes = assign({}, defaultAttributes, attributes)).expires && (attributes.expires = new Date(Date.now() + 864e5 * attributes.expires)), attributes.expires && (attributes.expires = attributes.expires.toUTCString()), name = encodeURIComponent(name).replace(/%(2[346B]|5E|60|7C)/g, decodeURIComponent).replace(/[()]/g, escape);
      var stringifiedAttributes = "";
      for (var attributeName in attributes)
        attributes[attributeName] && (stringifiedAttributes += "; " + attributeName, true !== attributes[attributeName] && (stringifiedAttributes += "=" + attributes[attributeName].split(";")[0]));
      return document.cookie = name + "=" + converter.write(value, name) + stringifiedAttributes;
    }
  }
  return Object.create({ set, get: function(name) {
    if ("undefined" != typeof document && (!arguments.length || name)) {
      for (var cookies = document.cookie ? document.cookie.split("; ") : [], jar = {}, i = 0; i < cookies.length; i++) {
        var parts = cookies[i].split("="), value = parts.slice(1).join("=");
        try {
          var found = decodeURIComponent(parts[0]);
          if (jar[found] = converter.read(value, found), name === found)
            break;
        } catch (e) {
        }
      }
      return name ? jar[name] : jar;
    }
  }, remove: function(name, attributes) {
    set(name, "", assign({}, attributes, { expires: -1 }));
  }, withAttributes: function(attributes) {
    return init(this.converter, assign({}, this.attributes, attributes));
  }, withConverter: function(converter2) {
    return init(assign({}, this.converter, converter2), this.attributes);
  } }, { attributes: { value: Object.freeze(defaultAttributes) }, converter: { value: Object.freeze(converter) } });
}({ read: function(value) {
  return '"' === value[0] && (value = value.slice(1, -1)), value.replace(/(%[\dA-F]{2})+/gi, decodeURIComponent);
}, write: function(value) {
  return encodeURIComponent(value).replace(/%(2[346BF]|3[AC-F]|40|5[BDE]|60|7[BCD])/g, decodeURIComponent);
} }, { path: "/" });
class Session {
  constructor(sessionStore, startupLogger, authLogger, bundleVersion, mxVersion, onUnauthorized) {
    this.sessionStore = sessionStore, this.startupLogger = startupLogger, this.authLogger = authLogger, this.bundleVersion = bundleVersion, this.mxVersion = mxVersion, this.onUnauthorized = onUnauthorized, this.unregisterRetryGetSessionDataMiddleware = registerMiddleware(/* @__PURE__ */ function(retries, action2) {
      return (request, next) => {
        let attempts = retries;
        const logger2 = LogManager.get().getLogger(LogNode.Network);
        return next(request).catch(async function retry(e) {
          const shouldRetry = e instanceof ConnectionError && attempts-- > 0;
          if (shouldRetry) {
            const method = request.init.method?.toUpperCase();
            logger2.trace(`Retrying ${method} ${request.url}. Attempts left: ${attempts}`);
          }
          const currentAction = isJson(request.body) ? request.body.action : void 0;
          return shouldRetry && currentAction === action2 ? next(request).catch(retry) : Promise.reject(e);
        });
      };
    }(2, "get_session_data"));
  }
  isValid() {
    return void 0 !== this.sessionData;
  }
  getConfig(path) {
    if (void 0 === this.sessionData)
      throw new Error("Session is not available");
    if (!path)
      return clone(this.sessionData);
    const steps = path.split(".");
    let result = this.sessionData;
    for (let i = 0; i < steps.length && result; i++)
      result = result[ensure(steps[i])];
    return clone(result);
  }
  getUserObject() {
    return this.userObject || (this.userObject = MxObject.fromJson(this.getConfig("user"))), this.userObject;
  }
  isGuest() {
    return this.getConfig("user.attributes.IsAnonymous.value");
  }
  isOffline() {
    return !!this.getConfig("sync_config");
  }
  getOfflineConfig() {
    return this.getConfig("sync_config") ?? void 0;
  }
  getOfflineMetadata() {
    const offlineEntities = new Set(ensure(this.getOfflineConfig()).schema);
    return ensure(this.getConfig("metadata")).filter(({ objectType }) => offlineEntities.has(objectType));
  }
  getSessionObjectId() {
    return this.getConfig("sessionObjectId");
  }
  isStrictModeEnabled() {
    return this.getConfig("isStrictModeEnabled");
  }
  getUserId() {
    return this.getUserObject().getGuid();
  }
  getUserRoleNames() {
    return this.getConfig("roles");
  }
  hasSomeRole(roles) {
    if (void 0 === roles)
      return true;
    const userRoleNames = this.getUserRoleNames();
    return roles.some((role) => userRoleNames.includes(role));
  }
  getConstants() {
    return this.getConfig("constants");
  }
  async login({ username, password, useAuthToken = "default" }) {
    const stopwatch = new Stopwatch();
    this.authLogger.debug("Logging in user."), await login$1(username, password, useAuthToken.toString()), await this.clearCachedSessionData(), this.authLogger.debug(`Login completed in ${stopwatch.measure()} milliseconds`);
  }
  destroySession(callback) {
    callback();
  }
  async clearCachedSessionData() {
    await this.sessionStore.remove();
  }
  async logout() {
    const stopwatch = new Stopwatch();
    this.authLogger.debug("Starting logout.");
    try {
      await logout();
    } catch (e) {
      if (!(e instanceof ConnectionError))
        throw e;
      api.set("OfflineLogout", "1", { expires: 365 });
    } finally {
      await this.clearCachedSessionData(), this.authLogger.debug(`Logged out the user in ${stopwatch.measure()} milliseconds`);
    }
  }
  async startup(params, runningInDevelopmentHost = false) {
    this.sessionParams = params;
    const sessionData = await this.loadSessionData(runningInDevelopmentHost, function({ profile, offline }) {
      if (offline)
        return true;
      switch (profile) {
        case "ResponsiveOffline":
        case "NativePhone":
        case "TabletOffline":
        case "PhoneOffline":
          return true;
        default:
          return false;
      }
    }({ profile: params.profile, offline: params.offline }));
    var getCsrfToken;
    return this.sessionData = sessionData, addEnumerations(sessionData.enumerations), registerMiddleware(/* @__PURE__ */ function(recover) {
      const ignoredActions = ["get_session_data", "login", "logout"];
      let recoverPromise, sessionCounter = 0;
      return async (request, next) => {
        const currentSessionNumber = sessionCounter;
        try {
          return await next(request);
        } catch (e) {
          const action2 = isJson(request.body) ? request.body.action : void 0;
          if (!(e instanceof UnauthorizedError) || void 0 !== action2 && ignoredActions.includes(action2))
            throw e;
          if (currentSessionNumber !== sessionCounter)
            return await next(request);
          if (recoverPromise)
            return await recoverPromise, await next(request);
          recoverPromise = recover();
          try {
            await recoverPromise;
          } finally {
            recoverPromise = void 0;
          }
          return ++sessionCounter, await next(request);
        }
      };
    }(this.restoreSessionOnUnauthorized.bind(this))), sessionData.keepalive && setInterval(() => {
      keepalive().catch(() => {
      });
    }, sessionData.keepalive), registerMiddleware((getCsrfToken = () => ensure(this.sessionData).csrftoken, (request, next) => {
      const requestWithToken = { url: request.url, init: { ...request.init, headers: new Headers(request.init.headers) }, body: request.body };
      return requestWithToken.init.headers.append("X-Csrf-Token", getCsrfToken()), next(requestWithToken);
    })), sessionData;
  }
  async loadCachedSessionData() {
    const cachedSessionDataStr = await this.sessionStore.get();
    return void 0 !== cachedSessionDataStr ? JSON.parse(cachedSessionDataStr) : void 0;
  }
  async saveSessionData() {
    await this.sessionStore.set(JSON.stringify(ensure(this.sessionData)));
  }
  async getCachedProfile() {
    const cachedSessionDataStr = await this.sessionStore.get(), cachedSessionData = void 0 !== cachedSessionDataStr ? JSON.parse(cachedSessionDataStr) : void 0;
    if (cachedSessionData)
      return cachedSessionData.uiconfig.profile.kind;
  }
  async loadSessionData(runningInDevelopmentHost, isSessionCacheSupported) {
    const cachedSessionData = isSessionCacheSupported ? await this.loadCachedSessionData() : void 0;
    if (cachedSessionData) {
      const { isDevModeEnabled, bundleVersion, mxVersion } = cachedSessionData;
      this.startupLogger.debug(`Found a cached session data created by the bundle ${bundleVersion} in Mendix ${mxVersion}. The cached session is ${isDevModeEnabled ? "" : "not "}in development mode.`);
    }
    const isCachedSessionDataValid = cachedSessionData && this.bundleVersion && cachedSessionData.bundleVersion === this.bundleVersion;
    cachedSessionData && this.startupLogger.debug(`The cached session data is ${isCachedSessionDataValid ? "" : "not "}valid.`);
    const shouldReloadSessionData = runningInDevelopmentHost && cachedSessionData?.isDevModeEnabled && false !== navigator.onLine;
    if (isCachedSessionDataValid && !shouldReloadSessionData)
      return this.startupLogger.debug("The app will use the cached session data."), cachedSessionData;
    this.startupLogger.debug("The app will not use the cached session data.");
    try {
      const stopwatch = new Stopwatch();
      this.startupLogger.trace("Getting a new session from runtime.");
      const newSessionData = { ...await this.getSessionData(), bundleVersion: this.bundleVersion, mxVersion: this.mxVersion }, duration = stopwatch.measure();
      return this.startupLogger.log(duration.ms > 5e3 ? "warning" : "debug", `Created a new session in ${duration} milliseconds`), newSessionData;
    } catch (e) {
      if (e instanceof ServerError && 401 === e.status)
        this.startupLogger.error("Could not create a session because the server responded with 401 (Unauthorized). This may happen if the authentication token is no longer valid. The app will clear the stored session and token and restart."), await this.clearCachedSessionData();
      else {
        const logLevel = e instanceof ConnectionError || isCachedSessionDataValid ? "debug" : "error";
        if (this.startupLogger.log(logLevel, "An error occurred while creating a new session." + (isCachedSessionDataValid ? " The app will start using the cached session data." : ""), e), isCachedSessionDataValid)
          return cachedSessionData;
      }
      throw e;
    } finally {
      this.unregisterRetryGetSessionDataMiddleware();
    }
  }
  async getSessionData() {
    const params = ensure(this.sessionParams);
    return getSessionData(params);
  }
  async restoreSessionOnUnauthorized() {
    try {
      const { csrftoken, user } = await this.getSessionData();
      this.isGuest() || user.guid === this.sessionData?.user.guid ? (ensure(this.sessionData).csrftoken = csrftoken, await this.sessionStore.set(JSON.stringify(this.sessionData))) : await this.failOnUnauthorized(new UnauthorizedError(419));
    } catch (e) {
      if (!(e instanceof UnauthorizedError))
        throw e;
      await this.failOnUnauthorized(e);
    }
  }
  async failOnUnauthorized(error) {
    await this.clearCachedSessionData();
    const statusCode = 401 === error.status ? 419 : error.status;
    return this.authLogger.info(`The client is not authorized. Request failed with status code ${statusCode}. Removing token and session.`), await this.onUnauthorized(), never();
  }
}
function getProfileFromUrl(search) {
  const raw = queryString.parse(search).profile?.toString() ?? "";
  return ["NativePhone", "Responsive", "ResponsiveOffline", "Tablet", "Phone", "PhoneOffline", "TabletOffline", ""].includes(raw) ? raw : "Responsive";
}
function translatedError(e) {
  return e instanceof DescribedNanoflowError ? { type: "error", content: e.description } : e instanceof NanoflowError ? translatedError(e.innerError) : e instanceof DescribedError || e instanceof DescribedServerError ? { type: "error", content: e.message } : e instanceof ConnectionError ? { type: "error", content: translate("mxui.sys.UI", "connection_error") } : e instanceof SynchronizationError ? { type: "info", content: translate("mxui.sys.UI", "sync_error") } : e instanceof ServerError ? { type: "error", content: 402 === e.status ? translate("mendix.signin", "http402") : translate("mxui.sys.UI", "internal_error") } : { type: "error", content: translate("mxui.sys.UI", "internal_error") };
}
let lastMessageId;
function errorHandler(e) {
  e instanceof Error && LogManager.get().getLogger().error(e.message, e.stack);
  const showMessageHandler2 = getShowMessageHandler(), hideMessageHandler2 = getHideMessageHandler();
  if (showMessageHandler2 && hideMessageHandler2) {
    hideMessageHandler2(lastMessageId);
    const { type, content } = translatedError(e);
    lastMessageId = showMessageHandler2(type, content, translate("mxui.widget.DialogMessage", type), true, { okCaption: translate("mxui.widget.DialogMessage", "ok") });
  }
}
const SQLITE_OK = 0, SQLITE_MISUSE = 21, SQLITE_RANGE = 25, SQLITE_NOTICE = 27, SQLITE_ROW = 100, SQLITE_DONE = 101, SQLITE_OPEN_READWRITE = 2, SQLITE_OPEN_CREATE = 4, SQLITE_OPEN_URI = 64, SQLITE_INTEGER = 1, SQLITE_FLOAT = 2, SQLITE_TEXT = 3, SQLITE_BLOB = 4, SQLITE_NULL = 5, MAX_INT64 = 0x7fffffffffffffffn, MIN_INT64 = -0x8000000000000000n;
class SQLiteError extends Error {
  constructor(message, code) {
    super(message), this.code = code;
  }
}
const async = true;
function decl(s) {
  const result = [], m2 = s.match(/([ns@]*):([nsv@])/);
  switch (m2[2]) {
    case "n":
      result.push("number");
      break;
    case "s":
      result.push("string");
      break;
    case "v":
      result.push(null);
  }
  const args = [];
  for (let c of m2[1])
    switch (c) {
      case "n":
        args.push("number");
        break;
      case "s":
        args.push("string");
    }
  return result.push(args), result;
}
class Base {
  constructor() {
    __publicField(this, "mxPathName", 64);
  }
  xClose(fileId) {
    return 10;
  }
  xRead(fileId, pData, iOffset) {
    return 10;
  }
  xWrite(fileId, pData, iOffset) {
    return 10;
  }
  xTruncate(fileId, iSize) {
    return 10;
  }
  xSync(fileId, flags) {
    return SQLITE_OK;
  }
  xFileSize(fileId, pSize64) {
    return 10;
  }
  xLock(fileId, flags) {
    return SQLITE_OK;
  }
  xUnlock(fileId, flags) {
    return SQLITE_OK;
  }
  xCheckReservedLock(fileId, pResOut) {
    return pResOut.setInt32(0, 0, true), SQLITE_OK;
  }
  xFileControl(fileId, op, pArg) {
    return 12;
  }
  xSectorSize(fileId) {
    return 512;
  }
  xDeviceCharacteristics(fileId) {
    return 0;
  }
  xOpen(name, fileId, flags, pOutFlags) {
    return 14;
  }
  xDelete(name, syncDir) {
    return 10;
  }
  xAccess(name, flags, pResOut) {
    return 10;
  }
  handleAsync(f) {
    return f();
  }
}
class WebLocksBase {
  constructor() {
    __privateAdd(this, _apply);
    __privateAdd(this, _lock);
    __privateAdd(this, _unlock);
    __privateAdd(this, _state, 0);
    __publicField(this, "timeoutMillis", 0);
    __privateAdd(this, _releasers, /* @__PURE__ */ new Map());
    __privateAdd(this, _pending, Promise.resolve(0));
  }
  get state() {
    return __privateGet(this, _state);
  }
  async lock(flags) {
    return __privateMethod(this, _apply, apply_fn).call(this, __privateMethod(this, _lock, lock_fn), flags);
  }
  async unlock(flags) {
    return __privateMethod(this, _apply, apply_fn).call(this, __privateMethod(this, _unlock, unlock_fn), flags);
  }
  async isSomewhereReserved() {
    throw new Error("unimplemented");
  }
  async _NONEtoSHARED() {
  }
  async _SHAREDtoEXCLUSIVE() {
    await this._SHAREDtoRESERVED(), await this._RESERVEDtoEXCLUSIVE();
  }
  async _SHAREDtoRESERVED() {
  }
  async _RESERVEDtoEXCLUSIVE() {
  }
  async _EXCLUSIVEtoRESERVED() {
  }
  async _EXCLUSIVEtoSHARED() {
    await this._EXCLUSIVEtoRESERVED(), await this._RESERVEDtoSHARED();
  }
  async _EXCLUSIVEtoNONE() {
    await this._EXCLUSIVEtoRESERVED(), await this._RESERVEDtoSHARED(), await this._SHAREDtoNONE();
  }
  async _RESERVEDtoSHARED() {
  }
  async _RESERVEDtoNONE() {
    await this._RESERVEDtoSHARED(), await this._SHAREDtoNONE();
  }
  async _SHAREDtoNONE() {
  }
  _acquireWebLock(lockName, options) {
    return new Promise(async (resolve, reject) => {
      try {
        await navigator.locks.request(lockName, options, (lock) => {
          if (resolve(lock), lock)
            return new Promise((release) => __privateGet(this, _releasers).set(lockName, release));
        });
      } catch (e) {
        reject(e);
      }
    });
  }
  _releaseWebLock(lockName) {
    __privateGet(this, _releasers).get(lockName)?.(), __privateGet(this, _releasers).delete(lockName);
  }
  async _pollWebLock(lockName) {
    const query = await navigator.locks.query();
    return query.held.find(({ name }) => name === lockName)?.mode;
  }
  _getTimeoutSignal() {
    if (this.timeoutMillis) {
      const abortController = new AbortController();
      return setTimeout(() => abortController.abort(), this.timeoutMillis), abortController.signal;
    }
  }
}
_state = new WeakMap();
_releasers = new WeakMap();
_pending = new WeakMap();
_apply = new WeakSet();
apply_fn = async function(method, flags) {
  const targetState = 7 & flags;
  try {
    const call = () => method.call(this, targetState);
    return await __privateSet(this, _pending, __privateGet(this, _pending).then(call, call)), __privateSet(this, _state, targetState), SQLITE_OK;
  } catch (e) {
    return "AbortError" === e.name ? 5 : (console.error(e), 3850);
  }
};
_lock = new WeakSet();
lock_fn = async function(targetState) {
  if (targetState === __privateGet(this, _state))
    return SQLITE_OK;
  switch (__privateGet(this, _state)) {
    case 0:
      if (1 === targetState)
        return this._NONEtoSHARED();
      throw new Error(`unexpected transition ${__privateGet(this, _state)} -> ${targetState}`);
    case 1:
      switch (targetState) {
        case 2:
          return this._SHAREDtoRESERVED();
        case 4:
          return this._SHAREDtoEXCLUSIVE();
        default:
          throw new Error(`unexpected transition ${__privateGet(this, _state)} -> ${targetState}`);
      }
    case 2:
      if (4 === targetState)
        return this._RESERVEDtoEXCLUSIVE();
      throw new Error(`unexpected transition ${__privateGet(this, _state)} -> ${targetState}`);
    default:
      throw new Error(`unexpected transition ${__privateGet(this, _state)} -> ${targetState}`);
  }
};
_unlock = new WeakSet();
unlock_fn = async function(targetState) {
  if (targetState === __privateGet(this, _state))
    return SQLITE_OK;
  switch (__privateGet(this, _state)) {
    case 4:
      switch (targetState) {
        case 1:
          return this._EXCLUSIVEtoSHARED();
        case 0:
          return this._EXCLUSIVEtoNONE();
        default:
          throw new Error(`unexpected transition ${__privateGet(this, _state)} -> ${targetState}`);
      }
    case 2:
      switch (targetState) {
        case 1:
          return this._RESERVEDtoSHARED();
        case 0:
          return this._RESERVEDtoNONE();
        default:
          throw new Error(`unexpected transition ${__privateGet(this, _state)} -> ${targetState}`);
      }
    case 1:
      if (0 === targetState)
        return this._SHAREDtoNONE();
      throw new Error(`unexpected transition ${__privateGet(this, _state)} -> ${targetState}`);
    default:
      throw new Error(`unexpected transition ${__privateGet(this, _state)} -> ${targetState}`);
  }
};
class WebLocksExclusive extends WebLocksBase {
  constructor(name) {
    super(), this._lockName = name + "-outer", this._reservedName = name + "-reserved";
  }
  async isSomewhereReserved() {
    return "exclusive" === await this._pollWebLock(this._reservedName);
  }
  async _NONEtoSHARED() {
    await this._acquireWebLock(this._lockName, { mode: "exclusive", signal: this._getTimeoutSignal() });
  }
  async _SHAREDtoRESERVED() {
    await this._acquireWebLock(this._reservedName, { mode: "exclusive", signal: this._getTimeoutSignal() });
  }
  async _RESERVEDtoSHARED() {
    this._releaseWebLock(this._reservedName);
  }
  async _SHAREDtoNONE() {
    this._releaseWebLock(this._lockName);
  }
}
let nextTxId = 0;
const mapTxToId = /* @__PURE__ */ new WeakMap();
class IDBContext {
  constructor(idbDatabase, txOptions = { durability: "default" }) {
    __privateAdd(this, _run);
    __privateAdd(this, _db, void 0);
    __privateAdd(this, _dbReady, void 0);
    __privateAdd(this, _txOptions, void 0);
    __privateAdd(this, _tx, null);
    __privateAdd(this, _txTimestamp, 0);
    __privateAdd(this, _runChain, Promise.resolve());
    __privateAdd(this, _putChain, Promise.resolve());
    __privateSet(this, _dbReady, Promise.resolve(idbDatabase).then((db) => __privateSet(this, _db, db))), __privateSet(this, _txOptions, txOptions);
  }
  async close() {
    const db = __privateGet(this, _db) ?? await __privateGet(this, _dbReady);
    await __privateGet(this, _runChain), await this.sync(), db.close();
  }
  async run(mode, f) {
    const result = __privateGet(this, _runChain).then(() => __privateMethod(this, _run, run_fn).call(this, mode, f));
    return __privateSet(this, _runChain, result.catch(() => {
    })), result;
  }
  async sync() {
    await __privateGet(this, _runChain), await __privateGet(this, _putChain), __privateSet(this, _putChain, Promise.resolve());
  }
}
_db = new WeakMap();
_dbReady = new WeakMap();
_txOptions = new WeakMap();
_tx = new WeakMap();
_txTimestamp = new WeakMap();
_runChain = new WeakMap();
_putChain = new WeakMap();
_run = new WeakSet();
run_fn = async function(mode, f) {
  const db = __privateGet(this, _db) ?? await __privateGet(this, _dbReady);
  if ("readwrite" === mode && "readonly" === __privateGet(this, _tx)?.mode)
    __privateSet(this, _tx, null);
  else if (performance.now() - __privateGet(this, _txTimestamp) > 5e3) {
    try {
      __privateGet(this, _tx)?.commit();
    } catch (e) {
      if ("InvalidStateError" !== e.name)
        throw e;
    }
    await new Promise((resolve) => setTimeout(resolve)), __privateSet(this, _tx, null);
  }
  for (let i = 0; i < 2; ++i) {
    if (!__privateGet(this, _tx)) {
      __privateSet(this, _tx, db.transaction(db.objectStoreNames, mode, __privateGet(this, _txOptions)));
      const timestamp = __privateSet(this, _txTimestamp, performance.now());
      __privateSet(this, _putChain, __privateGet(this, _putChain).then(() => new Promise((resolve, reject) => {
        __privateGet(this, _tx).addEventListener("complete", (event) => {
          resolve(), __privateGet(this, _tx) === event.target && __privateSet(this, _tx, null), mapTxToId.get(event.target);
        }), __privateGet(this, _tx).addEventListener("abort", (event) => {
          console.warn("tx abort", (performance.now() - timestamp) / 1e3);
          const e = event.target.error;
          reject(e), __privateGet(this, _tx) === event.target && __privateSet(this, _tx, null), mapTxToId.get(event.target);
        });
      }))), mapTxToId.set(__privateGet(this, _tx), nextTxId++);
    }
    try {
      const stores = Object.fromEntries(Array.from(db.objectStoreNames, (name) => [name, new ObjectStore(__privateGet(this, _tx).objectStore(name))]));
      return await f(stores);
    } catch (e) {
      if (__privateSet(this, _tx, null), i)
        throw e;
    }
  }
};
function wrapRequest(request) {
  return new Promise((resolve, reject) => {
    request.addEventListener("success", () => resolve(request.result)), request.addEventListener("error", () => reject(request.error));
  });
}
class ObjectStore {
  constructor(objectStore) {
    __privateAdd(this, _objectStore, void 0);
    __privateSet(this, _objectStore, objectStore);
  }
  get(query) {
    __privateGet(this, _objectStore).name;
    return wrapRequest(__privateGet(this, _objectStore).get(query));
  }
  getAll(query, count) {
    __privateGet(this, _objectStore).name;
    return wrapRequest(__privateGet(this, _objectStore).getAll(query, count));
  }
  getKey(query) {
    __privateGet(this, _objectStore).name;
    return wrapRequest(__privateGet(this, _objectStore).getKey(query));
  }
  getAllKeys(query, count) {
    __privateGet(this, _objectStore).name;
    return wrapRequest(__privateGet(this, _objectStore).getAllKeys(query, count));
  }
  put(value, key) {
    __privateGet(this, _objectStore).name;
    return wrapRequest(__privateGet(this, _objectStore).put(value, key));
  }
  delete(query) {
    __privateGet(this, _objectStore).name;
    return wrapRequest(__privateGet(this, _objectStore).delete(query));
  }
  clear() {
    __privateGet(this, _objectStore).name;
    return wrapRequest(__privateGet(this, _objectStore).clear());
  }
  index(name) {
    return new Index(__privateGet(this, _objectStore).index(name));
  }
}
_objectStore = new WeakMap();
class Index {
  constructor(index2) {
    __privateAdd(this, _index, void 0);
    __privateSet(this, _index, index2);
  }
  getAllKeys(query, count) {
    __privateGet(this, _index).objectStore.name, __privateGet(this, _index).name;
    return wrapRequest(__privateGet(this, _index).getAllKeys(query, count));
  }
}
_index = new WeakMap();
const DEFAULT_OPTIONS = { durability: "default", purge: "deferred", purgeAtLeast: 16 };
class IDBBatchAtomicVFS extends Base {
  constructor(idbDatabaseName = "wa-sqlite", options = DEFAULT_OPTIONS) {
    super();
    __privateAdd(this, _xWriteHelper);
    __privateAdd(this, _xSyncHelper);
    __privateAdd(this, _maybePurge);
    __privateAdd(this, _bound);
    __privateAdd(this, _reblockIfNeeded);
    __privateAdd(this, _options, void 0);
    __privateAdd(this, _mapIdToFile, /* @__PURE__ */ new Map());
    __privateAdd(this, _idb, void 0);
    __privateAdd(this, _pendingPurges, /* @__PURE__ */ new Set());
    __privateAdd(this, _taskTimestamp, performance.now());
    __privateAdd(this, _pendingAsync, /* @__PURE__ */ new Set());
    __privateAdd(this, _growthHandler, null);
    this.name = idbDatabaseName, __privateSet(this, _options, Object.assign({}, DEFAULT_OPTIONS, options)), __privateSet(this, _idb, new IDBContext(function(idbDatabaseName2) {
      return new Promise((resolve, reject) => {
        const request = globalThis.indexedDB.open(idbDatabaseName2, 5);
        request.addEventListener("upgradeneeded", function() {
          request.result.createObjectStore("blocks", { keyPath: ["path", "offset", "version"] }).createIndex("version", ["path", "version"]);
        }), request.addEventListener("success", () => {
          resolve(request.result);
        }), request.addEventListener("error", () => {
          reject(request.error);
        });
      });
    }(idbDatabaseName), { durability: __privateGet(this, _options).durability }));
  }
  async close() {
    for (const fileId of __privateGet(this, _mapIdToFile).keys())
      await this.xClose(fileId);
    await __privateGet(this, _idb)?.close(), __privateSet(this, _idb, null);
  }
  xOpen(name, fileId, flags, pOutFlags) {
    var _a;
    const result = this.handleAsync(async () => {
      null === name && (name = `null_${fileId}`), fileId.toString(16), flags.toString(16);
      try {
        const url = new URL(name, "http://localhost/"), file = { path: url.pathname, flags, block0: null, isMetadataChanged: true, locks: new WebLocksExclusive(url.pathname) };
        return __privateGet(this, _mapIdToFile).set(fileId, file), await __privateGet(this, _idb).run("readwrite", async ({ blocks }) => {
          if (file.block0 = await blocks.get(__privateMethod(this, _bound, bound_fn).call(this, file, 0)), !file.block0) {
            if (!(flags & SQLITE_OPEN_CREATE))
              throw new Error(`file not found: ${file.path}`);
            file.block0 = { path: file.path, offset: 0, version: 0, data: new Uint8Array(0), fileSize: 0 }, blocks.put(file.block0);
          }
        }), !pOutFlags.buffer.detached && pOutFlags.buffer.byteLength || (pOutFlags = new DataView(new ArrayBuffer(4)), __privateSet(this, _growthHandler, (pOutFlagsNew) => {
          pOutFlagsNew.setInt32(0, pOutFlags.getInt32(0, true), true);
        })), pOutFlags.setInt32(0, 1 & flags, true), SQLITE_OK;
      } catch (e) {
        return console.error(e), 14;
      }
    });
    return (_a = __privateGet(this, _growthHandler)) == null ? void 0 : _a.call(this, pOutFlags), __privateSet(this, _growthHandler, null), result;
  }
  xClose(fileId) {
    return this.handleAsync(async () => {
      try {
        const file = __privateGet(this, _mapIdToFile).get(fileId);
        return file && (file.path, __privateGet(this, _mapIdToFile).delete(fileId), 8 & file.flags && __privateGet(this, _idb).run("readwrite", ({ blocks }) => {
          blocks.delete(IDBKeyRange.bound([file.path], [file.path, []]));
        })), SQLITE_OK;
      } catch (e) {
        return console.error(e), 10;
      }
    });
  }
  xRead(fileId, pData, iOffset) {
    var _a;
    const byteLength = pData.byteLength, result = this.handleAsync(async () => {
      const file = __privateGet(this, _mapIdToFile).get(fileId);
      file.path, pData.byteLength;
      try {
        return await __privateGet(this, _idb).run("readonly", async ({ blocks }) => {
          !pData.buffer.detached && pData.buffer.byteLength || (pData = new Uint8Array(byteLength), __privateSet(this, _growthHandler, (pDataNew) => pDataNew.set(pData)));
          let pDataOffset = 0;
          for (; pDataOffset < pData.byteLength; ) {
            const fileOffset = iOffset + pDataOffset, block = fileOffset < file.block0.data.byteLength ? file.block0 : await blocks.get(__privateMethod(this, _bound, bound_fn).call(this, file, -fileOffset));
            if (!block || block.data.byteLength - block.offset <= fileOffset)
              return pData.fill(0, pDataOffset), 522;
            const buffer = pData.subarray(pDataOffset), blockOffset = fileOffset + block.offset, nBytesToCopy = Math.min(Math.max(block.data.byteLength - blockOffset, 0), buffer.byteLength);
            buffer.set(block.data.subarray(blockOffset, blockOffset + nBytesToCopy)), pDataOffset += nBytesToCopy;
          }
          return SQLITE_OK;
        });
      } catch (e) {
        return console.error(e), 10;
      }
    });
    return (_a = __privateGet(this, _growthHandler)) == null ? void 0 : _a.call(this, pData), __privateSet(this, _growthHandler, null), result;
  }
  xWrite(fileId, pData, iOffset) {
    const rewound = __privateGet(this, _pendingAsync).has(fileId);
    if (rewound || performance.now() - __privateGet(this, _taskTimestamp) > 3e3) {
      const result = this.handleAsync(async () => {
        this.handleAsync !== super.handleAsync && __privateGet(this, _pendingAsync).add(fileId), await new Promise((resolve) => setTimeout(resolve));
        const result2 = __privateMethod(this, _xWriteHelper, xWriteHelper_fn).call(this, fileId, pData.slice(), iOffset);
        return __privateSet(this, _taskTimestamp, performance.now()), result2;
      });
      return rewound && __privateGet(this, _pendingAsync).delete(fileId), result;
    }
    return __privateMethod(this, _xWriteHelper, xWriteHelper_fn).call(this, fileId, pData, iOffset);
  }
  xTruncate(fileId, iSize) {
    const file = __privateGet(this, _mapIdToFile).get(fileId);
    file.path;
    try {
      Object.assign(file.block0, { fileSize: iSize, data: file.block0.data.slice(0, iSize) });
      const block0 = Object.assign({}, file.block0);
      return __privateGet(this, _idb).run("readwrite", ({ blocks }) => {
        blocks.delete(__privateMethod(this, _bound, bound_fn).call(this, file, -1 / 0, -iSize)), blocks.put(block0);
      }), SQLITE_OK;
    } catch (e) {
      return console.error(e), 10;
    }
  }
  xSync(fileId, flags) {
    const rewound = __privateGet(this, _pendingAsync).has(fileId);
    if (rewound || "relaxed" !== __privateGet(this, _options).durability || performance.now() - __privateGet(this, _taskTimestamp) > 3e3) {
      const result = this.handleAsync(async () => {
        this.handleAsync !== super.handleAsync && __privateGet(this, _pendingAsync).add(fileId);
        const result2 = await __privateMethod(this, _xSyncHelper, xSyncHelper_fn).call(this, fileId, flags);
        return __privateSet(this, _taskTimestamp, performance.now()), result2;
      });
      return rewound && __privateGet(this, _pendingAsync).delete(fileId), result;
    }
    return __privateGet(this, _mapIdToFile).get(fileId).path, SQLITE_OK;
  }
  xFileSize(fileId, pSize64) {
    const file = __privateGet(this, _mapIdToFile).get(fileId);
    return file.path, pSize64.setBigInt64(0, BigInt(file.block0.fileSize), true), SQLITE_OK;
  }
  xLock(fileId, flags) {
    return this.handleAsync(async () => {
      const file = __privateGet(this, _mapIdToFile).get(fileId);
      file.path;
      try {
        const result = await file.locks.lock(flags);
        return result === SQLITE_OK && 1 === file.locks.state && (file.block0 = await __privateGet(this, _idb).run("readonly", ({ blocks }) => blocks.get(__privateMethod(this, _bound, bound_fn).call(this, file, 0)))), result;
      } catch (e) {
        return console.error(e), 10;
      }
    });
  }
  xUnlock(fileId, flags) {
    return this.handleAsync(async () => {
      const file = __privateGet(this, _mapIdToFile).get(fileId);
      file.path;
      try {
        return file.locks.unlock(flags);
      } catch (e) {
        return console.error(e), 10;
      }
    });
  }
  xCheckReservedLock(fileId, pResOut) {
    var _a;
    const result = this.handleAsync(async () => {
      const file = __privateGet(this, _mapIdToFile).get(fileId);
      file.path;
      const isReserved = await file.locks.isSomewhereReserved();
      return !pResOut.buffer.detached && pResOut.buffer.byteLength || (pResOut = new DataView(new ArrayBuffer(4)), __privateSet(this, _growthHandler, (pResOutNew) => {
        pResOutNew.setInt32(0, pResOut.getInt32(0, true), true);
      })), pResOut.setInt32(0, isReserved ? 1 : 0, true), SQLITE_OK;
    });
    return (_a = __privateGet(this, _growthHandler)) == null ? void 0 : _a.call(this, pResOut), __privateSet(this, _growthHandler, null), result;
  }
  xSectorSize(fileId) {
    return 512;
  }
  xDeviceCharacteristics(fileId) {
    return 19968;
  }
  xFileControl(fileId, op, pArg) {
    const file = __privateGet(this, _mapIdToFile).get(fileId);
    switch (file.path, op) {
      case 11:
        return file.overwrite = true, SQLITE_OK;
      case 21:
        if (file.overwrite)
          try {
            return this.handleAsync(async () => (await __privateMethod(this, _reblockIfNeeded, reblockIfNeeded_fn).call(this, file), SQLITE_OK));
          } catch (e) {
            return console.error(e), 10;
          }
        if (file.isMetadataChanged)
          try {
            __privateGet(this, _idb).run("readwrite", async ({ blocks }) => {
              await blocks.put(file.block0);
            }), file.isMetadataChanged = false;
          } catch (e) {
            return console.error(e), 10;
          }
        return SQLITE_OK;
      case 22:
        return file.overwrite = false, SQLITE_OK;
      case 31:
        return this.handleAsync(async () => {
          try {
            return file.block0.version--, file.changedPages = /* @__PURE__ */ new Set(), __privateGet(this, _idb).run("readwrite", async ({ blocks }) => {
              const keys = await blocks.index("version").getAllKeys(IDBKeyRange.bound([file.path], [file.path, file.block0.version]));
              for (const key of keys)
                blocks.delete(key);
            }), SQLITE_OK;
          } catch (e) {
            return console.error(e), 10;
          }
        });
      case 32:
        try {
          const block0 = Object.assign({}, file.block0);
          block0.data = block0.data.slice();
          const changedPages = file.changedPages;
          return file.changedPages = null, file.isMetadataChanged = false, __privateGet(this, _idb).run("readwrite", async ({ blocks }) => {
            blocks.put(block0);
            const purgeBlock = await blocks.get([file.path, "purge", 0]) ?? { path: file.path, offset: "purge", version: 0, data: /* @__PURE__ */ new Map(), count: 0 };
            purgeBlock.count += changedPages.size;
            for (const pageIndex of changedPages)
              purgeBlock.data.set(pageIndex, block0.version);
            blocks.put(purgeBlock), __privateMethod(this, _maybePurge, maybePurge_fn).call(this, file.path, purgeBlock.count);
          }), SQLITE_OK;
        } catch (e) {
          return console.error(e), 10;
        }
      case 33:
        return this.handleAsync(async () => {
          try {
            return file.changedPages = null, file.isMetadataChanged = false, file.block0 = await __privateGet(this, _idb).run("readonly", ({ blocks }) => blocks.get([file.path, 0, file.block0.version + 1])), SQLITE_OK;
          } catch (e) {
            return console.error(e), 10;
          }
        });
      default:
        return 12;
    }
  }
  xAccess(name, flags, pResOut) {
    var _a;
    const result = this.handleAsync(async () => {
      try {
        const path = new URL(name, "file://localhost/").pathname, key = await __privateGet(this, _idb).run("readonly", ({ blocks }) => blocks.getKey(__privateMethod(this, _bound, bound_fn).call(this, { path }, 0)));
        return !pResOut.buffer.detached && pResOut.buffer.byteLength || (pResOut = new DataView(new ArrayBuffer(4)), __privateSet(this, _growthHandler, (pResOutNew) => {
          pResOutNew.setInt32(0, pResOut.getInt32(0, true), true);
        })), pResOut.setInt32(0, key ? 1 : 0, true), SQLITE_OK;
      } catch (e) {
        return console.error(e), 10;
      }
    });
    return (_a = __privateGet(this, _growthHandler)) == null ? void 0 : _a.call(this, pResOut), __privateSet(this, _growthHandler, null), result;
  }
  xDelete(name, syncDir) {
    return this.handleAsync(async () => {
      const path = new URL(name, "file://localhost/").pathname;
      try {
        return __privateGet(this, _idb).run("readwrite", ({ blocks }) => blocks.delete(IDBKeyRange.bound([path], [path, []]))), syncDir && await __privateGet(this, _idb).sync(), SQLITE_OK;
      } catch (e) {
        return console.error(e), 10;
      }
    });
  }
  async purge(path) {
    Date.now();
    await __privateGet(this, _idb).run("readwrite", async ({ blocks }) => {
      const purgeBlock = await blocks.get([path, "purge", 0]);
      if (purgeBlock) {
        for (const [pageOffset, version] of purgeBlock.data)
          blocks.delete(IDBKeyRange.bound([path, pageOffset, version], [path, pageOffset, 1 / 0], true, false));
        await blocks.delete([path, "purge", 0]);
      }
      purgeBlock?.data.size, Date.now();
    });
  }
}
_options = new WeakMap();
_mapIdToFile = new WeakMap();
_idb = new WeakMap();
_pendingPurges = new WeakMap();
_taskTimestamp = new WeakMap();
_pendingAsync = new WeakMap();
_growthHandler = new WeakMap();
_xWriteHelper = new WeakSet();
xWriteHelper_fn = function(fileId, pData, iOffset) {
  const file = __privateGet(this, _mapIdToFile).get(fileId);
  file.path, pData.byteLength;
  try {
    const prevFileSize = file.block0.fileSize;
    file.block0.fileSize < iOffset + pData.byteLength && (file.block0.fileSize = iOffset + pData.byteLength, file.isMetadataChanged = true);
    const block = 0 === iOffset ? file.block0 : { path: file.path, offset: -iOffset, version: file.block0.version, data: null };
    return block.data = pData.slice(), file.changedPages ? (prevFileSize === file.block0.fileSize && file.changedPages.add(-iOffset), 0 !== iOffset && __privateGet(this, _idb).run("readwrite", ({ blocks }) => blocks.put(block))) : __privateGet(this, _idb).run("readwrite", ({ blocks }) => blocks.put(block)), file.isMetadataChanged = 0 !== iOffset && file.isMetadataChanged, SQLITE_OK;
  } catch (e) {
    return console.error(e), 10;
  }
};
_xSyncHelper = new WeakSet();
xSyncHelper_fn = async function(fileId, flags) {
  const file = __privateGet(this, _mapIdToFile).get(fileId);
  file.path;
  try {
    file.isMetadataChanged && (__privateGet(this, _idb).run("readwrite", async ({ blocks }) => {
      await blocks.put(file.block0);
    }), file.isMetadataChanged = false), await __privateGet(this, _idb).sync();
  } catch (e) {
    return console.error(e), 10;
  }
  return SQLITE_OK;
};
_maybePurge = new WeakSet();
maybePurge_fn = function(path, nPages) {
  "manual" === __privateGet(this, _options).purge || __privateGet(this, _pendingPurges).has(path) || nPages < __privateGet(this, _options).purgeAtLeast || (globalThis.requestIdleCallback ? globalThis.requestIdleCallback(() => {
    this.purge(path), __privateGet(this, _pendingPurges).delete(path);
  }) : setTimeout(() => {
    this.purge(path), __privateGet(this, _pendingPurges).delete(path);
  }), __privateGet(this, _pendingPurges).add(path));
};
_bound = new WeakSet();
bound_fn = function(file, begin, end = 0) {
  const version = !begin || -begin < file.block0.data.length ? -1 / 0 : file.block0.version;
  return IDBKeyRange.bound([file.path, begin, version], [file.path, end, 1 / 0]);
};
_reblockIfNeeded = new WeakSet();
reblockIfNeeded_fn = async function(file) {
  const oldPageSize = file.block0.data.length;
  if (oldPageSize < 18)
    return;
  const view = new DataView(file.block0.data.buffer, file.block0.data.byteOffset);
  let newPageSize = view.getUint16(16);
  if (1 === newPageSize && (newPageSize = 65536), newPageSize === oldPageSize)
    return;
  const maxPageSize = Math.max(oldPageSize, newPageSize), nOldPages = maxPageSize / oldPageSize, nNewPages = maxPageSize / newPageSize, fileSize = view.getUint32(28) * newPageSize, version = file.block0.version;
  await __privateGet(this, _idb).run("readwrite", async ({ blocks }) => {
    const keys = await blocks.index("version").getAllKeys(IDBKeyRange.bound([file.path, version + 1], [file.path, 1 / 0]));
    for (const key of keys)
      blocks.delete(key);
    blocks.delete([file.path, "purge", 0]);
    for (let iOffset = 0; iOffset < fileSize; iOffset += maxPageSize) {
      const oldPages = await blocks.getAll(IDBKeyRange.lowerBound([file.path, -(iOffset + maxPageSize), 1 / 0]), nOldPages);
      for (const oldPage of oldPages)
        blocks.delete([oldPage.path, oldPage.offset, oldPage.version]);
      if (1 === nNewPages) {
        const buffer = new Uint8Array(newPageSize);
        for (const oldPage of oldPages)
          buffer.set(oldPage.data, -(iOffset + oldPage.offset));
        const newPage = { path: file.path, offset: -iOffset, version, data: buffer };
        0 === newPage.offset && (newPage.fileSize = fileSize, file.block0 = newPage), blocks.put(newPage);
      } else {
        const oldPage = oldPages[0];
        for (let i = 0; i < nNewPages; ++i) {
          const offset = -(iOffset + i * newPageSize);
          if (-offset >= fileSize)
            break;
          const newPage = { path: oldPage.path, offset, version, data: oldPage.data.subarray(i * newPageSize, (i + 1) * newPageSize) };
          0 === newPage.offset && (newPage.fileSize = fileSize, file.block0 = newPage), blocks.put(newPage);
        }
      }
    }
  });
};
const DEFAULT_WASQLITE_OPTIONS = { wasmMemorySize: 32833536, cacheSize: -16e3 };
async function createWASQLiteDB(fileName, options) {
  const wasqliteOptions = { ...DEFAULT_WASQLITE_OPTIONS, ...options }, libraryOptions = "object" == typeof process && void 0 !== wasqliteOptions.wasmLocation ? { locateFile: (path) => `${wasqliteOptions.wasmLocation}${path}` } : {}, wasmModule = await async function(baseUrl2, options2) {
    const { default: SQLiteESMFactory } = await import(`${baseUrl2}mxclientsystem/wa-sqlite/wa-sqlite-async.mjs`+ "?638563727310501691");
    if ("object" == typeof process) {
      const originalImportScript = globalThis.importScripts;
      globalThis.importScripts = function() {
      };
      const wasmModule2 = await SQLiteESMFactory(options2);
      return globalThis.importScripts = originalImportScript, wasmModule2;
    }
    return SQLiteESMFactory(options2);
  }(options.baseUrl, libraryOptions);
  wasmModule._free(wasmModule._malloc(wasqliteOptions.wasmMemorySize));
  const sqlite3 = function(Module) {
    const sqlite32 = {}, sqliteFreeAddress = Module._getSqliteFree(), tmp = Module._malloc(8), tmpPtr = [tmp, tmp + 4];
    function createUTF8(s) {
      if ("string" != typeof s)
        return 0;
      const n = Module.lengthBytesUTF8(s), zts = Module._sqlite3_malloc(n + 1);
      return Module.stringToUTF8(s, zts, n + 1), zts;
    }
    function cvt32x2ToBigInt(lo32, hi32) {
      return BigInt(hi32) << 32n | 0xffffffffn & BigInt(lo32);
    }
    const cvt32x2AsSafe = function() {
      const hiMax = BigInt(Number.MAX_SAFE_INTEGER) >> 32n, hiMin = BigInt(Number.MIN_SAFE_INTEGER) >> 32n;
      return function(lo32, hi32) {
        return hi32 > hiMax || hi32 < hiMin ? cvt32x2ToBigInt(lo32, hi32) : 4294967296 * hi32 + (2147483647 & lo32) - (2147483648 & lo32);
      };
    }(), databases = /* @__PURE__ */ new Set();
    function verifyDatabase(db2) {
      if (!databases.has(db2))
        throw new SQLiteError("not a database", SQLITE_MISUSE);
    }
    const mapStmtToDB = /* @__PURE__ */ new Map();
    function verifyStatement(stmt) {
      if (!mapStmtToDB.has(stmt))
        throw new SQLiteError("not a statement", SQLITE_MISUSE);
    }
    sqlite32.bind_collection = function(stmt, bindings) {
      verifyStatement(stmt);
      const isArray = Array.isArray(bindings), nBindings = sqlite32.bind_parameter_count(stmt);
      for (let i = 1; i <= nBindings; ++i) {
        const value = bindings[isArray ? i - 1 : sqlite32.bind_parameter_name(stmt, i)];
        void 0 !== value && sqlite32.bind(stmt, i, value);
      }
      return SQLITE_OK;
    }, sqlite32.bind = function(stmt, i, value) {
      switch (verifyStatement(stmt), typeof value) {
        case "number":
          return value === (0 | value) ? sqlite32.bind_int(stmt, i, value) : sqlite32.bind_double(stmt, i, value);
        case "string":
          return sqlite32.bind_text(stmt, i, value);
        default:
          return value instanceof Uint8Array || Array.isArray(value) ? sqlite32.bind_blob(stmt, i, value) : null === value ? sqlite32.bind_null(stmt, i) : "bigint" == typeof value ? sqlite32.bind_int64(stmt, i, value) : void 0 === value ? SQLITE_NOTICE : (console.warn("unknown binding converted to null", value), sqlite32.bind_null(stmt, i));
      }
    }, sqlite32.bind_blob = function() {
      const fname = "sqlite3_bind_blob", f = Module.cwrap(fname, ...decl("nnnnn:n"));
      return function(stmt, i, value) {
        verifyStatement(stmt);
        const byteLength = value.byteLength ?? value.length, ptr = Module._sqlite3_malloc(byteLength);
        Module.HEAPU8.subarray(ptr).set(value);
        const result = f(stmt, i, ptr, byteLength, sqliteFreeAddress);
        return check(fname, result, mapStmtToDB.get(stmt));
      };
    }(), sqlite32.bind_parameter_count = function() {
      const f = Module.cwrap("sqlite3_bind_parameter_count", ...decl("n:n"));
      return function(stmt) {
        return verifyStatement(stmt), f(stmt);
      };
    }(), sqlite32.bind_double = function() {
      const fname = "sqlite3_bind_double", f = Module.cwrap(fname, ...decl("nnn:n"));
      return function(stmt, i, value) {
        verifyStatement(stmt);
        const result = f(stmt, i, value);
        return check(fname, result, mapStmtToDB.get(stmt));
      };
    }(), sqlite32.bind_int = function() {
      const fname = "sqlite3_bind_int", f = Module.cwrap(fname, ...decl("nnn:n"));
      return function(stmt, i, value) {
        if (verifyStatement(stmt), value > 2147483647 || value < -2147483648)
          return SQLITE_RANGE;
        const result = f(stmt, i, value);
        return check(fname, result, mapStmtToDB.get(stmt));
      };
    }(), sqlite32.bind_int64 = function() {
      const fname = "sqlite3_bind_int64", f = Module.cwrap(fname, ...decl("nnnn:n"));
      return function(stmt, i, value) {
        if (verifyStatement(stmt), value > MAX_INT64 || value < MIN_INT64)
          return SQLITE_RANGE;
        const hi32 = value >> 32n, result = f(stmt, i, Number(0xffffffffn & value), Number(hi32));
        return check(fname, result, mapStmtToDB.get(stmt));
      };
    }(), sqlite32.bind_null = function() {
      const fname = "sqlite3_bind_null", f = Module.cwrap(fname, ...decl("nn:n"));
      return function(stmt, i) {
        verifyStatement(stmt);
        const result = f(stmt, i);
        return check(fname, result, mapStmtToDB.get(stmt));
      };
    }(), sqlite32.bind_parameter_name = function() {
      const f = Module.cwrap("sqlite3_bind_parameter_name", ...decl("n:s"));
      return function(stmt, i) {
        return verifyStatement(stmt), f(stmt, i);
      };
    }(), sqlite32.bind_text = function() {
      const fname = "sqlite3_bind_text", f = Module.cwrap(fname, ...decl("nnnnn:n"));
      return function(stmt, i, value) {
        verifyStatement(stmt);
        const ptr = createUTF8(value), result = f(stmt, i, ptr, -1, sqliteFreeAddress);
        return check(fname, result, mapStmtToDB.get(stmt));
      };
    }(), sqlite32.changes = function() {
      const f = Module.cwrap("sqlite3_changes", ...decl("n:n"));
      return function(db2) {
        return verifyDatabase(db2), f(db2);
      };
    }(), sqlite32.close = function() {
      const f = Module.cwrap("sqlite3_close", ...decl("n:n"), { async });
      return async function(db2) {
        verifyDatabase(db2);
        const result = await f(db2);
        return databases.delete(db2), check("sqlite3_close", result, db2);
      };
    }(), sqlite32.column = function(stmt, iCol) {
      verifyStatement(stmt);
      const type = sqlite32.column_type(stmt, iCol);
      switch (type) {
        case SQLITE_BLOB:
          return sqlite32.column_blob(stmt, iCol);
        case SQLITE_FLOAT:
          return sqlite32.column_double(stmt, iCol);
        case SQLITE_INTEGER:
          const lo32 = sqlite32.column_int(stmt, iCol), hi32 = Module.getTempRet0();
          return cvt32x2AsSafe(lo32, hi32);
        case SQLITE_NULL:
          return null;
        case SQLITE_TEXT:
          return sqlite32.column_text(stmt, iCol);
        default:
          throw new SQLiteError("unknown type", type);
      }
    }, sqlite32.column_blob = function() {
      const f = Module.cwrap("sqlite3_column_blob", ...decl("nn:n"));
      return function(stmt, iCol) {
        verifyStatement(stmt);
        const nBytes = sqlite32.column_bytes(stmt, iCol), address = f(stmt, iCol);
        return Module.HEAPU8.subarray(address, address + nBytes);
      };
    }(), sqlite32.column_bytes = function() {
      const f = Module.cwrap("sqlite3_column_bytes", ...decl("nn:n"));
      return function(stmt, iCol) {
        return verifyStatement(stmt), f(stmt, iCol);
      };
    }(), sqlite32.column_count = function() {
      const f = Module.cwrap("sqlite3_column_count", ...decl("n:n"));
      return function(stmt) {
        return verifyStatement(stmt), f(stmt);
      };
    }(), sqlite32.column_double = function() {
      const f = Module.cwrap("sqlite3_column_double", ...decl("nn:n"));
      return function(stmt, iCol) {
        return verifyStatement(stmt), f(stmt, iCol);
      };
    }(), sqlite32.column_int = function() {
      const f = Module.cwrap("sqlite3_column_int64", ...decl("nn:n"));
      return function(stmt, iCol) {
        return verifyStatement(stmt), f(stmt, iCol);
      };
    }(), sqlite32.column_int64 = function() {
      const f = Module.cwrap("sqlite3_column_int64", ...decl("nn:n"));
      return function(stmt, iCol) {
        return verifyStatement(stmt), cvt32x2ToBigInt(f(stmt, iCol), Module.getTempRet0());
      };
    }(), sqlite32.column_name = function() {
      const f = Module.cwrap("sqlite3_column_name", ...decl("nn:s"));
      return function(stmt, iCol) {
        return verifyStatement(stmt), f(stmt, iCol);
      };
    }(), sqlite32.column_names = function(stmt) {
      const columns = [], nColumns = sqlite32.column_count(stmt);
      for (let i = 0; i < nColumns; ++i)
        columns.push(sqlite32.column_name(stmt, i));
      return columns;
    }, sqlite32.column_text = function() {
      const f = Module.cwrap("sqlite3_column_text", ...decl("nn:s"));
      return function(stmt, iCol) {
        return verifyStatement(stmt), f(stmt, iCol);
      };
    }(), sqlite32.column_type = function() {
      const f = Module.cwrap("sqlite3_column_type", ...decl("nn:n"));
      return function(stmt, iCol) {
        return verifyStatement(stmt), f(stmt, iCol);
      };
    }(), sqlite32.create_function = function(db2, zFunctionName, nArg, eTextRep, pApp, xFunc, xStep, xFinal) {
      if (verifyDatabase(db2), xFunc && !xStep && !xFinal)
        return check("sqlite3_create_function", Module.createFunction(db2, zFunctionName, nArg, eTextRep, pApp, xFunc), db2);
      if (!xFunc && xStep && xFinal)
        return check("sqlite3_create_function", Module.createAggregate(db2, zFunctionName, nArg, eTextRep, pApp, xStep, xFinal), db2);
      throw new SQLiteError("invalid function combination", SQLITE_MISUSE);
    }, sqlite32.create_module = function(db2, zName, module, appData) {
      return verifyDatabase(db2), check("sqlite3_create_module", Module.createModule(db2, zName, module, appData), db2);
    }, sqlite32.data_count = function() {
      const f = Module.cwrap("sqlite3_data_count", ...decl("n:n"));
      return function(stmt) {
        return verifyStatement(stmt), f(stmt);
      };
    }(), sqlite32.declare_vtab = function() {
      const f = Module.cwrap("sqlite3_declare_vtab", ...decl("ns:n"));
      return function(pVTab, zSQL) {
        return check("sqlite3_declare_vtab", f(pVTab, zSQL));
      };
    }(), sqlite32.exec = async function(db2, sql, callback) {
      for await (const stmt of sqlite32.statements(db2, sql)) {
        let columns;
        for (; await sqlite32.step(stmt) === SQLITE_ROW; )
          if (callback) {
            columns = columns ?? sqlite32.column_names(stmt);
            const row = sqlite32.row(stmt);
            await callback(row, columns);
          }
      }
      return SQLITE_OK;
    }, sqlite32.finalize = function() {
      const f = Module.cwrap("sqlite3_finalize", ...decl("n:n"), { async });
      return async function(stmt) {
        if (!mapStmtToDB.has(stmt))
          return SQLITE_MISUSE;
        const result = await f(stmt);
        return mapStmtToDB.get(stmt), mapStmtToDB.delete(stmt), result;
      };
    }(), sqlite32.get_autocommit = function() {
      const f = Module.cwrap("sqlite3_get_autocommit", ...decl("n:n"));
      return function(db2) {
        return f(db2);
      };
    }(), sqlite32.libversion = function() {
      const f = Module.cwrap("sqlite3_libversion", ...decl(":s"));
      return function() {
        return f();
      };
    }(), sqlite32.libversion_number = function() {
      const f = Module.cwrap("sqlite3_libversion_number", ...decl(":n"));
      return function() {
        return f();
      };
    }(), sqlite32.limit = function() {
      const f = Module.cwrap("sqlite3_limit", ...decl("nnn:n"));
      return function(db2, id, newVal) {
        return f(db2, id, newVal);
      };
    }(), sqlite32.open_v2 = function() {
      const f = Module.cwrap("sqlite3_open_v2", ...decl("snnn:n"), { async });
      return async function(zFilename, flags, zVfs) {
        flags = flags || SQLITE_OPEN_CREATE | SQLITE_OPEN_READWRITE, zVfs = createUTF8(zVfs);
        const result = await f(zFilename, tmpPtr[0], flags, zVfs), db2 = Module.getValue(tmpPtr[0], "*");
        return databases.add(db2), Module._sqlite3_free(zVfs), Module.ccall("RegisterExtensionFunctions", "void", ["number"], [db2]), check("sqlite3_open_v2", result), db2;
      };
    }(), sqlite32.prepare_v2 = function() {
      const fname = "sqlite3_prepare_v2", f = Module.cwrap(fname, ...decl("nnnnn:n"), { async });
      return async function(db2, sql) {
        const result = await f(db2, sql, -1, tmpPtr[0], tmpPtr[1]);
        check(fname, result, db2);
        const stmt = Module.getValue(tmpPtr[0], "*");
        return stmt ? (mapStmtToDB.set(stmt, db2), { stmt, sql: Module.getValue(tmpPtr[1], "*") }) : null;
      };
    }(), sqlite32.progress_handler = function(db2, nProgressOps, handler, userData) {
      verifyDatabase(db2), Module.progressHandler(db2, nProgressOps, handler, userData);
    }, sqlite32.reset = function() {
      const f = Module.cwrap("sqlite3_reset", ...decl("n:n"), { async });
      return async function(stmt) {
        return verifyStatement(stmt), check("sqlite3_reset", await f(stmt), mapStmtToDB.get(stmt));
      };
    }(), sqlite32.result = function(context, value) {
      switch (typeof value) {
        case "number":
          value === (0 | value) ? sqlite32.result_int(context, value) : sqlite32.result_double(context, value);
          break;
        case "string":
          sqlite32.result_text(context, value);
          break;
        default:
          if (value instanceof Uint8Array || Array.isArray(value))
            sqlite32.result_blob(context, value);
          else if (null === value)
            sqlite32.result_null(context);
          else {
            if ("bigint" == typeof value)
              return sqlite32.result_int64(context, value);
            console.warn("unknown result converted to null", value), sqlite32.result_null(context);
          }
      }
    }, sqlite32.result_blob = function() {
      const f = Module.cwrap("sqlite3_result_blob", ...decl("nnnn:n"));
      return function(context, value) {
        const byteLength = value.byteLength ?? value.length, ptr = Module._sqlite3_malloc(byteLength);
        Module.HEAPU8.subarray(ptr).set(value), f(context, ptr, byteLength, sqliteFreeAddress);
      };
    }(), sqlite32.result_double = function() {
      const f = Module.cwrap("sqlite3_result_double", ...decl("nn:n"));
      return function(context, value) {
        f(context, value);
      };
    }(), sqlite32.result_int = function() {
      const f = Module.cwrap("sqlite3_result_int", ...decl("nn:n"));
      return function(context, value) {
        f(context, value);
      };
    }(), sqlite32.result_int64 = function() {
      const f = Module.cwrap("sqlite3_result_int64", ...decl("nnn:n"));
      return function(context, value) {
        if (value > MAX_INT64 || value < MIN_INT64)
          return SQLITE_RANGE;
        const hi32 = value >> 32n;
        f(context, Number(0xffffffffn & value), Number(hi32));
      };
    }(), sqlite32.result_null = function() {
      const f = Module.cwrap("sqlite3_result_null", ...decl("n:n"));
      return function(context) {
        f(context);
      };
    }(), sqlite32.result_text = function() {
      const f = Module.cwrap("sqlite3_result_text", ...decl("nnnn:n"));
      return function(context, value) {
        const ptr = createUTF8(value);
        f(context, ptr, -1, sqliteFreeAddress);
      };
    }(), sqlite32.row = function(stmt) {
      const row = [], nColumns = sqlite32.data_count(stmt);
      for (let i = 0; i < nColumns; ++i) {
        const value = sqlite32.column(stmt, i);
        row.push(value?.buffer === Module.HEAPU8.buffer ? value.slice() : value);
      }
      return row;
    }, sqlite32.set_authorizer = function(db2, authFunction, userData) {
      return verifyDatabase(db2), check("sqlite3_set_authorizer", Module.setAuthorizer(db2, authFunction, userData), db2);
    }, sqlite32.sql = function() {
      const f = Module.cwrap("sqlite3_sql", ...decl("n:s"));
      return function(stmt) {
        return verifyStatement(stmt), f(stmt);
      };
    }(), sqlite32.statements = function(db2, sql) {
      return async function* () {
        const str = sqlite32.str_new(db2, sql);
        let prepared = { stmt: null, sql: sqlite32.str_value(str) };
        try {
          for (; prepared = await sqlite32.prepare_v2(db2, prepared.sql); )
            yield prepared.stmt, sqlite32.finalize(prepared.stmt), prepared.stmt = null;
        } finally {
          prepared?.stmt && sqlite32.finalize(prepared.stmt), sqlite32.str_finish(str);
        }
      }();
    }, sqlite32.step = function() {
      const f = Module.cwrap("sqlite3_step", ...decl("n:n"), { async });
      return async function(stmt) {
        return verifyStatement(stmt), check("sqlite3_step", await f(stmt), mapStmtToDB.get(stmt), [SQLITE_ROW, SQLITE_DONE]);
      };
    }();
    let stringId = 0;
    const strings = /* @__PURE__ */ new Map();
    function check(fname, result, db2 = null, allowed = [SQLITE_OK]) {
      if (allowed.includes(result))
        return result;
      const message = db2 ? Module.ccall("sqlite3_errmsg", "string", ["number"], [db2]) : fname;
      throw new SQLiteError(message, result);
    }
    return sqlite32.str_new = function(db2, s = "") {
      const sBytes = Module.lengthBytesUTF8(s), str = 4294967295 & stringId++, data = { offset: Module._sqlite3_malloc(sBytes + 1), bytes: sBytes };
      return strings.set(str, data), Module.stringToUTF8(s, data.offset, data.bytes + 1), str;
    }, sqlite32.str_appendall = function(str, s) {
      if (!strings.has(str))
        throw new SQLiteError("not a string", SQLITE_MISUSE);
      const data = strings.get(str), sBytes = Module.lengthBytesUTF8(s), newBytes = data.bytes + sBytes, newOffset = Module._sqlite3_malloc(newBytes + 1);
      Module.HEAPU8.subarray(newOffset, newOffset + newBytes + 1).set(Module.HEAPU8.subarray(data.offset, data.offset + data.bytes)), Module.stringToUTF8(s, newOffset + data.bytes, sBytes + 1), Module._sqlite3_free(data.offset), data.offset = newOffset, data.bytes = newBytes, strings.set(str, data);
    }, sqlite32.str_finish = function(str) {
      if (!strings.has(str))
        throw new SQLiteError("not a string", SQLITE_MISUSE);
      const data = strings.get(str);
      strings.delete(str), Module._sqlite3_free(data.offset);
    }, sqlite32.str_value = function(str) {
      if (!strings.has(str))
        throw new SQLiteError("not a string", SQLITE_MISUSE);
      return strings.get(str).offset;
    }, sqlite32.user_data = function(context) {
      return Module.getFunctionUserData(context);
    }, sqlite32.value = function(pValue) {
      const type = sqlite32.value_type(pValue);
      switch (type) {
        case SQLITE_BLOB:
          return sqlite32.value_blob(pValue);
        case SQLITE_FLOAT:
          return sqlite32.value_double(pValue);
        case SQLITE_INTEGER:
          const lo32 = sqlite32.value_int(pValue), hi32 = Module.getTempRet0();
          return cvt32x2AsSafe(lo32, hi32);
        case SQLITE_NULL:
          return null;
        case SQLITE_TEXT:
          return sqlite32.value_text(pValue);
        default:
          throw new SQLiteError("unknown type", type);
      }
    }, sqlite32.value_blob = function() {
      const f = Module.cwrap("sqlite3_value_blob", ...decl("n:n"));
      return function(pValue) {
        const nBytes = sqlite32.value_bytes(pValue), address = f(pValue);
        return Module.HEAPU8.subarray(address, address + nBytes);
      };
    }(), sqlite32.value_bytes = function() {
      const f = Module.cwrap("sqlite3_value_bytes", ...decl("n:n"));
      return function(pValue) {
        return f(pValue);
      };
    }(), sqlite32.value_double = function() {
      const f = Module.cwrap("sqlite3_value_double", ...decl("n:n"));
      return function(pValue) {
        return f(pValue);
      };
    }(), sqlite32.value_int = function() {
      const f = Module.cwrap("sqlite3_value_int64", ...decl("n:n"));
      return function(pValue) {
        return f(pValue);
      };
    }(), sqlite32.value_int64 = function() {
      const f = Module.cwrap("sqlite3_value_int64", ...decl("n:n"));
      return function(pValue) {
        return cvt32x2ToBigInt(f(pValue), Module.getTempRet0());
      };
    }(), sqlite32.value_text = function() {
      const f = Module.cwrap("sqlite3_value_text", ...decl("n:s"));
      return function(pValue) {
        return f(pValue);
      };
    }(), sqlite32.value_type = function() {
      const f = Module.cwrap("sqlite3_value_type", ...decl("n:n"));
      return function(pValue) {
        return f(pValue);
      };
    }(), sqlite32.vfs_register = function(vfs, makeDefault) {
      return check("sqlite3_vfs_register", Module.registerVFS(vfs, makeDefault));
    }, sqlite32;
  }(wasmModule);
  sqlite3.vfs_register(new IDBBatchAtomicVFS("idb-batch-atomic", { durability: "strict" }));
  const db = await sqlite3.open_v2(fileName, SQLITE_OPEN_CREATE | SQLITE_OPEN_READWRITE | SQLITE_OPEN_URI, "idb-batch-atomic"), pragmas = [`PRAGMA cache_size=${wasqliteOptions.cacheSize}`, ...wasqliteOptions.additionalPragmas ?? []];
  for await (const pragma of pragmas)
    await sqlite3.exec(db, pragma);
  return new LowLevelWASQLiteDBAdapter(sqlite3, db);
}
class LowLevelWASQLiteDBAdapter {
  constructor(api2, db) {
    this.api = api2, this.db = db, this.queue = {}, this.stmtCache = new MRUCache(1e3, (value) => this.finalizeStatements(value));
  }
  async inTransaction(fn) {
    return this.serialize("transaction", () => this.doTransactional(() => fn(this)));
  }
  async doTransactional(fn) {
    await this.execInternal("BEGIN");
    try {
      const res = await fn();
      return await this.execInternal("COMMIT"), res;
    } catch (error) {
      throw await this.execInternal("ROLLBACK"), error;
    }
  }
  async selectObjects(sql, params) {
    return this.execInternal(sql, params);
  }
  async selectValue(sql, params) {
    const result = await this.execInternal(sql, params);
    if (result.length > 0) {
      const firstRow = ensure(result[0]), keys = Object.keys(firstRow);
      return keys.length > 0 ? firstRow[ensure(keys[0])] : void 0;
    }
  }
  async exec(sql, params) {
    return await this.execInternal(sql, params), this.api.changes(this.db);
  }
  async execInternal(sql, params) {
    return this.serialize("exec", async () => {
      const rows = [];
      for await (const { stmt, cols } of this.prepareStatements(sql)) {
        if (params) {
          await this.api.reset(stmt);
          for (let i = 0; i < params.length; i++) {
            const p = params[i];
            this.api.bind(stmt, i + 1, "boolean" == typeof p ? p ? 1 : 0 : p);
          }
        }
        for (; await this.api.step(stmt) === SQLITE_ROW; ) {
          const obj = {};
          for (let i = 0; i < cols.length; i++)
            obj[ensure(cols[i])] = this.api.column(stmt, i);
          rows.push(obj);
        }
      }
      return rows;
    });
  }
  prepareStatements(sql) {
    return _this = this, async function* () {
      const cachedStmts = _this.stmtCache.get(sql);
      if (void 0 !== cachedStmts)
        for await (const stmt of cachedStmts)
          yield stmt;
      else {
        const statements = [];
        let stmt = 0;
        const str = _this.api.str_new(_this.db, sql);
        try {
          let prepared = { stmt: 0, sql: _this.api.str_value(str) };
          for (; prepared = await _this.api.prepare_v2(_this.db, prepared.sql); ) {
            stmt = prepared.stmt;
            const statement = { stmt, cols: _this.api.column_names(stmt) };
            statements.push(statement), yield statement, stmt = 0;
          }
          await _this.stmtCache.put(sql, statements);
        } finally {
          _this.api.str_finish(str), stmt > 0 && (await _this.api.finalize(stmt), await _this.finalizeStatements(statements));
        }
      }
    }();
    var _this;
  }
  async finalizeStatements(statements) {
    await Promise.all(statements.map(async ({ stmt }) => this.api.finalize(stmt)));
  }
  async serialize(name, fn) {
    const result = (this.queue[name] ?? Promise.resolve()).then(() => fn());
    return this.queue[name] = result.catch(() => {
    }), result;
  }
}
class MRUCache {
  constructor(maxSize, cleanUpFn) {
    this.maxSize = maxSize, this.cleanUpFn = cleanUpFn, this.counter = 0, this.size = 0, this.map = {};
  }
  get(key) {
    const entry = this.map[key];
    return void 0 !== entry && (entry.lastUsed = this.counter++), entry?.value;
  }
  async put(key, value) {
    if (this.size === this.maxSize) {
      const [k, entry] = Object.entries(this.map).reduce(([ok, ov], [ck, cv]) => ov.lastUsed < cv.lastUsed ? [ok, ov] : [ck, cv]);
      await this.cleanUpFn?.(entry.value), delete this.map[k], this.size--;
    }
    this.size++, this.map[key] = { value, lastUsed: this.counter++ };
  }
}
function createCreateSqlQueries(entities) {
  return [...createGuidToTableSql(), ...entities.flatMap((entity) => [createEntityTableSql(entity), ...createEntityIndices(entity)])];
}
function createDbMetaSqlQueries(version) {
  const createTableSql = generateTableSql(DB_META_TABLE, [{ name: DB_NAME_COLUMN, type: "text" }, { name: DB_VALUE_COLUMN, type: "text" }], DB_NAME_COLUMN), metaData = { [DB_VERSION_KEY]: version.toString(), [DB_COUNTER_KEY]: "0", [toUserScopedName(DB_OFFLINE_METADATA_KEY)]: "[]" };
  return [createTableSql, ...Object.entries(metaData).map(([name, value]) => [`INSERT OR IGNORE INTO "${DB_META_TABLE}" (name, value) VALUES (?,?)`, [name, value]])];
}
function createTombstoneTableSqlQuery() {
  const tombstoneColumnsDescription = [{ name: GUID_COLUMN, type: "text" }, { name: SYNC_ID_COLUMN, type: "text" }];
  return generateTableSql(toUserScopedName(TOMBSTONE_TABLE), tombstoneColumnsDescription, GUID_COLUMN);
}
function createEntityTableSql(entity) {
  const columnDescriptions = getAttributesMeta(entity).map((attr) => ({ name: toSafeKey(attr.name), type: attributeToSqlType(attr.type) })).concat({ name: GUID_COLUMN, type: "text" });
  return generateTableSql(toUserScopedName(toSafeKey(entity)), columnDescriptions, GUID_COLUMN);
}
function createEntityIndices(entity) {
  const associations = getAttributesMeta(entity).filter((a) => "ObjectReference" === a.type), tableName = toUserScopedName(toSafeKey(entity)), associationIndices = associations.map(({ name }) => [createIndexQuery(`idx_${tableName}_${toSafeKey(name)}`, tableName, { name }), []]), attributeIndices = getEntityMeta(entity)?.indices.map((index2) => createIndexSql(entity, index2)) ?? [];
  return [...associationIndices, ...attributeIndices];
}
function createIndexQuery(name, table, ...columns) {
  return `CREATE INDEX IF NOT EXISTS [${name}] ON [${table}](${columns.map((c) => `[${toSafeKey(c.name)}]` + (void 0 === c.direction ? "" : ` ${c.direction}`)).join(", ")})`;
}
function createIndexSql(entity, index2) {
  const tableName = toUserScopedName(toSafeKey(entity));
  return [createIndexQuery(`idx_${tableName}_${index2.attributes.map((a) => `${toSafeKey(a.name)}_${a.direction}`).join("_")}`, tableName, ...index2.attributes), []];
}
function createGuidToTableSql() {
  const columnDescriptions = [{ name: GUID_COLUMN, type: "text" }, { name: TABLE_NAME_COLUMN, type: "text" }, { name: SYNC_ID_COLUMN, type: "text" }, { name: READONLY_COLUMN, type: "text" }], tableName = toUserScopedName(METADATA_TABLE), tableNameWithoutSyncIdIndexSql = [createIndexQuery(`idx_${tableName}_tableName_withSyncId`, tableName, { name: TABLE_NAME_COLUMN }) + ` WHERE [${SYNC_ID_COLUMN}] IS NOT NULL`, []];
  return [generateTableSql(tableName, columnDescriptions, GUID_COLUMN), tableNameWithoutSyncIdIndexSql];
}
function generateTableSql(name, columnDescriptions, primaryKey) {
  if (columnDescriptions.length > 990)
    throw new Error(`Unable to create table '${name}' with more than 990 columns.`);
  return [[`CREATE TABLE IF NOT EXISTS "${name}" (`, columnDescriptions.map((columnDescription) => [`"${columnDescription.name}"`, columnDescription.type, "text" === columnDescription.type ? "COLLATE NOCASE" : "", columnDescription.name === primaryKey ? "PRIMARY KEY" : ""].join(" ").trim()).join(", "), ")"].join(""), []];
}
function attributeToSqlType(attributeType) {
  switch (attributeType) {
    case "Decimal":
    case "Enum":
    case "HashString":
    case "Integer":
    case "Long":
    case "ObjectReference":
    case "String":
    case "EnumSet":
    case "ObjectReferenceSet":
      return "text";
    case "AutoNumber":
    case "Boolean":
    case "DateTime":
      return "integer";
    case "Binary":
      return "blob";
  }
}
function createCleanSqlQueries(tableName) {
  return [`DELETE FROM "${toUserScopedName(tableName)}"`, []];
}
function createDropTableSqlQuery(tableName) {
  return [`DROP TABLE IF EXISTS "${toUserScopedName(tableName)}"`, []];
}
function createEntitySql(objects) {
  const objectsPerEntity = objects.reduce((map, object) => (map[object.objectType] = (map[object.objectType] ?? []).concat(object), map), {});
  return Object.entries(objectsPerEntity).flatMap(([entityName, entityObjects]) => {
    const meta = getEntityMeta(entityName), attributes = Object.values(meta?.attributes ?? {}), columns = [`"${GUID_COLUMN}"`, ...attributes.map((a) => `"${toSafeKey(a.name)}"`)], columnPlaceholders = new Array(columns.length).fill("?").join(", ");
    return chunkParameters(entityObjects, columns.length).flatMap((objectsChunk) => {
      const placeholders = new Array(objectsChunk.length).fill(`(${columnPlaceholders})`).join(", ");
      return [[`INSERT OR REPLACE INTO "${toUserScopedName(toSafeKey(entityName))}" (${columns.join(", ")}) VALUES ${placeholders}`, objectsChunk.flatMap((object) => [object.guid, ...attributes.map((a) => runtimeToSql(object.attributes[a.name]?.value ?? null, a.type))])]];
    });
  });
}
function createMetaSql(objects) {
  return chunkParameters(objects, 4).flatMap((objectsChunk) => {
    const placeholders = new Array(objectsChunk.length).fill("(?, ?, ?, ?)").join(", ");
    return [[`INSERT OR REPLACE INTO "${toUserScopedName(METADATA_TABLE)}" ("${GUID_COLUMN}", "${TABLE_NAME_COLUMN}", "${SYNC_ID_COLUMN}", "${READONLY_COLUMN}") VALUES ${placeholders}`, objectsChunk.flatMap((object) => {
      const readonlyAttrs = Object.entries(object.attributes).filter(([, attribute]) => attribute.readonly).map(([attrName]) => attrName);
      return [object.guid, object.objectType, object.syncId ?? null, JSON.stringify(readonlyAttrs)];
    })]];
  });
}
function createSelectObjectsByGuidsQueries(entity, guids) {
  if (0 === guids.length)
    throw new AssertionError("No guids specified");
  return chunkParameters(guids).map((chunkedGuids) => {
    const placeholders = new Array(chunkedGuids.length).fill("?").join(", "), safeEntityName = toSafeKey(entity), tableName = toUserScopedName(safeEntityName), metaDataTable = toUserScopedName(METADATA_TABLE);
    return [[`SELECT ${safeEntityName}.*,`, METADATA_COLUMNS.map((col) => `${METADATA_TABLE}.[${col}] AS "${METADATA_TABLE}.${col}"`).join(", "), `FROM "${tableName}" AS ${safeEntityName}`, `JOIN ${metaDataTable} AS ${METADATA_TABLE} USING (${GUID_COLUMN})`, `WHERE ${METADATA_TABLE}.${GUID_COLUMN} IN (${placeholders})`].join(" "), chunkedGuids];
  });
}
class SelectQueryBuilder {
  constructor(entity) {
    this.attrs = [], this.tableNameAlias = toSafeKey(entity), this.tableName = toUserScopedName(this.tableNameAlias), this.fromClause = `FROM ${this.tableName} AS ${this.tableNameAlias}`;
  }
  filtered(filter) {
    const { type, expr, params } = toSqlFilter(filter, this.tableNameAlias);
    return "null" !== type && (this.whereClause = `WHERE ${expr}`, this.bindParameters = params), this;
  }
  sorted(sort) {
    const sortStr = sort.map(([attr, order]) => `${this.tableNameAlias}.[${toSafeKey(attr)}] ${order}`).join(", ");
    return this.orderClause = sortStr ? `ORDER BY ${sortStr}` : "", this;
  }
  paged(offset, amount) {
    return this.limitClause = `LIMIT ${void 0 !== amount && amount > 0 ? amount : -1} OFFSET ${offset ?? 0}`, this;
  }
  attributes(attributes) {
    return this.attrs = attributes, this;
  }
  buildSelectWithMeta() {
    const metadataTable = toUserScopedName(METADATA_TABLE);
    return [["SELECT", this.attrs.map((col) => `${this.tableNameAlias}.[${toSafeKey(col)}] AS "${toSafeKey(col)}"`).concat(METADATA_COLUMNS.map((col) => `${METADATA_TABLE}.[${col}] AS "${METADATA_TABLE}.${col}"`)).join(", "), this.fromClause, `JOIN ${metadataTable} AS ${METADATA_TABLE} USING (${GUID_COLUMN})`, this.whereClause, this.orderClause, this.limitClause].filter((s) => s).join(" "), this.bindParameters ?? []];
  }
  buildCount() {
    return [['SELECT COUNT("guid") AS count', this.fromClause, this.whereClause].filter((s) => s).join(" "), this.bindParameters ?? []];
  }
}
function rowToJson(row, entityMeta) {
  const objectType = void 0 !== entityMeta ? entityMeta.name : row[`${METADATA_TABLE}.${TABLE_NAME_COLUMN}`], result = { guid: row[`${METADATA_TABLE}.${GUID_COLUMN}`], attributes: {}, objectType }, readonlyAttributes = JSON.parse(row[`${METADATA_TABLE}.${READONLY_COLUMN}`]) || [];
  return Object.keys(row).filter((attrKey) => !attrKey.startsWith(METADATA_TABLE) && attrKey !== GUID_COLUMN).forEach((attrKey) => {
    const attr = fromSafeKey(attrKey), attrType = entityMeta?.attributes[attr]?.type ?? "String";
    result.attributes[attr] = { value: sqlToRuntime(row[attrKey], attrType), ...readonlyAttributes.includes(attr) ? { readonly: true } : {} };
  }), result;
}
class SQLiteDB {
  constructor(database) {
    this.database = database, this.lastUniqueId = 0, this.queryListeners = [];
  }
  registerQueryListener(listener) {
    this.queryListeners.push(listener);
  }
  async usingReadTransaction(fn) {
    return this.database.inTransaction(async (tx) => fn(new SQLiteDBQueriesAndCommands(this, tx)));
  }
  async usingWriteTransaction(fn) {
    return this.database.inTransaction(async (tx) => fn(new SQLiteDBQueriesAndCommands(this, tx)));
  }
  async delete(entities) {
    return this.usingWriteTransaction((tx) => tx.delete(entities));
  }
  async runMigrations(migrations) {
    const dbVersion = await this.usingReadTransaction((tx) => tx.getDatabaseVersion()), startingMigrationIndex = migrations.findIndex(({ version }) => version === dbVersion), applicableMigrations = -1 === startingMigrationIndex ? migrations : migrations.slice(startingMigrationIndex + 1);
    for (const migration of applicableMigrations) {
      await migration.apply(this.database);
      const updateVersionQuery = createUpdateDbMetaValue(DB_VERSION_KEY, migration.version.toString());
      await this.database.inTransaction(async (tx) => this.exec(tx, updateVersionQuery));
    }
  }
  async wrap(queryDescription, doQuery) {
    const handlers = this.queryListeners.map((wrapper) => wrapper(queryDescription));
    try {
      const result = await doQuery();
      return handlers.forEach(([onComplete, _]) => onComplete(result)), result;
    } catch (error) {
      return handlers.forEach(([_, onError]) => onError(error)), Promise.reject(error);
    }
  }
  async execute(sql, fn) {
    const [query, params] = sql;
    return this.wrap(`${query}
Params: ${JSON.stringify(params)}`, () => fn(query, params));
  }
  async selectObjects(tx, sql) {
    if (sql.length > 0) {
      if (2 !== sql.length || "string" != typeof sql[0]) {
        const sortedSqls = sql.sort(([sqlA], [sqlB]) => sqlA.localeCompare(sqlB));
        return (await Promise.all(sortedSqls.map((query) => this.selectObjects(tx, query)))).flat();
      }
      return this.execute(sql, (query, params) => tx.selectObjects(query, emptyParamsAsUndefined(params)));
    }
    return [];
  }
  async selectValue(tx, sql) {
    return this.execute(sql, (query, params) => tx.selectValue(query, emptyParamsAsUndefined(params)));
  }
  async exec(tx, sql) {
    if (sql.length > 0) {
      if (2 !== sql.length || "string" != typeof sql[0]) {
        return (await Promise.all(sql.map((q) => doExec(this, q)))).reduce((total, amount) => total + amount, 0);
      }
      return doExec(this, sql);
    }
    return 0;
    async function doExec(self, sqlQuery) {
      return self.execute(sqlQuery, async (query, params) => tx.exec(query, emptyParamsAsUndefined(params)));
    }
  }
  getLowLevelAPI() {
    return this.database;
  }
  async increaseAndGetUniqueId(amount, allocate) {
    const idsUsedInBatch = this.lastUniqueId % SQLiteDB.ID_BATCH_SIZE, idsLeftInBatch = SQLiteDB.ID_BATCH_SIZE - idsUsedInBatch;
    if (0 === this.lastUniqueId || idsLeftInBatch < amount) {
      const amountOfBatches = Math.ceil(Math.abs(amount - idsLeftInBatch) / SQLiteDB.ID_BATCH_SIZE), newLastId = await allocate(amountOfBatches * SQLiteDB.ID_BATCH_SIZE);
      0 === this.lastUniqueId && (this.lastUniqueId = newLastId - amountOfBatches * SQLiteDB.ID_BATCH_SIZE);
    }
    return this.lastUniqueId += amount, this.lastUniqueId;
  }
}
function emptyParamsAsUndefined(params) {
  return 0 === params.length ? void 0 : params;
}
SQLiteDB.ID_BATCH_SIZE = 1e3;
class SQLiteDBQueries {
  constructor(database, api2) {
    this.api = api2, this.database = database;
  }
  async selectObjects(sql) {
    return this.database.selectObjects(this.api, sql);
  }
  async selectValue(sql) {
    return this.database.selectValue(this.api, sql);
  }
  async retrieveAllTombstones() {
    return await this.selectObjects([`SELECT "${GUID_COLUMN}", "${SYNC_ID_COLUMN}" FROM "${toUserScopedName(TOMBSTONE_TABLE)}"`, []]);
  }
  async retrieveDirtyObjects(excludedEntities) {
    const sql = createGetDirtyObjectsMetadataSql(excludedEntities), dirtyGuidsMap = (await this.selectObjects(sql)).reduce((currentMap, row) => {
      const tableName = row[TABLE_NAME_COLUMN];
      return currentMap[tableName] = (currentMap[tableName] ?? []).concat(row[GUID_COLUMN]), currentMap;
    }, {}), queries = Object.entries(dirtyGuidsMap).flatMap(([entityTableName, entityGuids]) => createSelectObjectsByGuidsQueries(entityTableName, entityGuids));
    return (await this.selectObjects(queries)).map((row) => {
      const entityTableName = row[`${METADATA_TABLE}.${TABLE_NAME_COLUMN}`];
      return { syncId: row[`${METADATA_TABLE}.${SYNC_ID_COLUMN}`], ...rowToJson(row, getEntityMeta(entityTableName)) };
    });
  }
  async retrieveEntityMetadatas() {
    const offlineMetadataQuery = createGetDbMetaValue(toUserScopedName(DB_OFFLINE_METADATA_KEY)), result = await this.selectObjects(offlineMetadataQuery);
    return JSON.parse(ensure(result[0])[DB_VALUE_COLUMN]);
  }
  async retrieveMxObjectsFromSql(sql, entity, includeSyncId) {
    return (await this.selectObjects(sql)).map((row) => {
      const entityTableName = row[`${METADATA_TABLE}.${TABLE_NAME_COLUMN}`], syncId = row[`${METADATA_TABLE}.${SYNC_ID_COLUMN}`], object = rowToJson(row, ensure(getEntityMeta(entity ?? entityTableName)));
      return includeSyncId ? { syncId, ...object } : object;
    });
  }
  async retrieveMxObjects(entity, filter, options, includeSyncId = false) {
    const sql = buildRetrieveMxObjectsQuery(entity, filter, options).buildSelectWithMeta();
    return this.retrieveMxObjectsFromSql(sql, entity, includeSyncId);
  }
  async retrieveMxObjectMetasByGuids(guids) {
    const sql = createGetEntitiesSql(guids);
    return (await this.selectObjects(sql)).map((row) => ({ guid: row[GUID_COLUMN], objectType: row[TABLE_NAME_COLUMN] }));
  }
  async buildEntityGuidsMap(guids) {
    if (0 === guids.length)
      return {};
    const objectMetas = await this.retrieveMxObjectMetasByGuids(guids);
    return 0 === objectMetas.length ? Promise.resolve({}) : objectMetas.reduce((currentMap, row) => {
      const tableName = row.objectType;
      return currentMap[tableName] = (currentMap[tableName] ?? []).concat(row.guid), currentMap;
    }, {});
  }
  async retrieveMxObjectByGuids(guids) {
    const entityToGuidMap = await this.buildEntityGuidsMap(guids), queries = Object.entries(entityToGuidMap).flatMap(([entityTableName, entityGuids]) => createSelectObjectsByGuidsQueries(entityTableName, entityGuids));
    return this.retrieveMxObjectsFromSql(queries);
  }
  async retrieveMxObjectsByReferrals(entity, attribute, guid) {
    const sql = buildRetrieveMxObjectsQuery(entity, { type: "function", name: "=", parameters: [{ type: "attribute", attribute, attributeType: getEntityMeta(entity)?.attributes[attribute]?.type ?? "String" }, { type: "value", value: guid, isGuid: true }] }).buildSelectWithMeta();
    return this.retrieveMxObjectsFromSql(sql, entity);
  }
  async retrieveMxObjectsCount(entity, filter) {
    const sql = buildRetrieveMxObjectsQuery(entity, filter).buildCount();
    return this.selectValue(sql);
  }
  async retrieveSyncIds(guids) {
    const sql = createGetSyncIdsSqlQueries(guids);
    return (await this.selectObjects(sql)).map((row) => [row[GUID_COLUMN], row[SYNC_ID_COLUMN]]);
  }
  async retrieveGuidsAndChangeDatesForFileObjects(entity) {
    const sql = function(entity2) {
      const userScopedSafeTableName = toSafeKey(toUserScopedName(entity2));
      return [`SELECT ${[GUID_COLUMN, CHANGED_DATE_COLUMN].join(", ")} FROM "${userScopedSafeTableName}" WHERE ${HAS_CONTENTS_COLUMN} = 1`, []];
    }(entity);
    return (await this.selectObjects(sql)).map((row) => ({ guid: row[GUID_COLUMN], changedDate: row[CHANGED_DATE_COLUMN] }));
  }
  async getDatabaseVersion() {
    const dbVersionQuery = createGetDbMetaValue(DB_VERSION_KEY);
    return parseInt(await this.selectValue(dbVersionQuery), 10);
  }
  async checkTableExists(tableName) {
    const sql = createCheckTableExistSqlQuery(tableName === DB_META_TABLE ? DB_META_TABLE : toUserScopedName(tableName));
    return 1 === await this.selectValue(sql);
  }
}
class SQLiteDBQueriesAndCommands extends SQLiteDBQueries {
  constructor(database, tx) {
    super(database, tx), this.tx = tx;
  }
  async exec(sql) {
    return this.database.exec(this.tx, sql);
  }
  async ensureSchema(entities, latestVersion) {
    const queries = [...createCreateSqlQueries(entities), ...createDbMetaSqlQueries(latestVersion), createTombstoneTableSqlQuery()];
    await this.exec(queries);
  }
  async changeEntityTable(entity, attributesToAdd, attributesToRemove) {
    const baseQuery = `ALTER TABLE ${toUserScopedName(toSafeKey(entity))}`, queries = [...attributesToAdd.map(([attr, meta]) => {
      const sqlType = attributeToSqlType(meta.type);
      return `ADD "${toSafeKey(attr)}" ${sqlType} ${"text" === sqlType ? "COLLATE NOCASE" : ""}`;
    }), ...attributesToRemove.map((attr) => `DROP "${toSafeKey(attr)}"`)].map((instruction) => [`${baseQuery} ${instruction}`, []]);
    await this.exec(queries);
  }
  async createIndex(entity, index2) {
    const query = createIndexSql(entity, index2);
    await this.exec(query);
  }
  async dropIndex(entity, index2) {
    const query = function(entity2, index3) {
      return [`DROP INDEX IF EXISTS [idx_${toUserScopedName(toSafeKey(entity2))}_${index3.attributes.map((a) => `${toSafeKey(a.name)}_${a.direction}`).join("_")}]`, []];
    }(entity, index2);
    await this.exec(query);
  }
  async delete(entities) {
    const queries = [...entities.map((entity) => createDropTableSqlQuery(toSafeKey(entity))), createDropTableSqlQuery(METADATA_TABLE), createDropTableSqlQuery(TOMBSTONE_TABLE)];
    await this.exec(queries);
  }
  async clearDirtyFlags(guids) {
    const queries = createClearDirtyGuidsSqlQueries(guids);
    return this.exec(queries);
  }
  async dropEntityTables(entities) {
    const queries = [...entities.map((entity) => createDropTableSqlQuery(toSafeKey(entity))), ...createDeleteEntitiesMetaSqlQueries(entities)];
    await this.exec(queries);
  }
  async deleteEntitiesByEntity(entity) {
    const queries = [createCleanSqlQueries(toSafeKey(entity)), ...createDeleteEntitiesMetaSqlQueries([entity])];
    return this.exec(queries);
  }
  async deleteEntitiesByGuid(guids) {
    const entityToGuidMap = await this.buildEntityGuidsMap(guids), queries = Object.entries(entityToGuidMap).flatMap(([entityTableName, entityGuids]) => function(entity, guids2) {
      if (0 === guids2.length)
        throw new AssertionError("No guids specified");
      return chunkParameters(guids2).flatMap((value) => {
        const placeholders = new Array(value.length).fill("?").join(", ");
        return [[`DELETE FROM "${toUserScopedName(toSafeKey(entity))}" WHERE ${GUID_COLUMN} IN (${placeholders})`, value], [`DELETE FROM "${toUserScopedName(METADATA_TABLE)}" WHERE ${TABLE_NAME_COLUMN} = '${entity}' AND ${GUID_COLUMN} IN (${placeholders})`, value]];
      });
    }(entityTableName, entityGuids));
    return this.exec(queries);
  }
  async deleteTombstones(guids) {
    const queries = function(guids2) {
      if (0 === guids2.length)
        throw new AssertionError("No guids specified");
      return chunkParameters(guids2).flatMap((value) => {
        const placeholders = new Array(value.length).fill("?").join(", ");
        return [[`DELETE FROM "${toUserScopedName(TOMBSTONE_TABLE)}" WHERE "${GUID_COLUMN}" IN (${placeholders})`, value]];
      });
    }(guids);
    await this.exec(queries);
  }
  async insertTombstones(items2) {
    const queries = function(items3) {
      return chunkParameters(items3, 2).flatMap((itemChunk) => {
        const placeholders = new Array(itemChunk.length).fill("(?, ?)").join(", ");
        return [[`INSERT OR REPLACE INTO "${toUserScopedName(TOMBSTONE_TABLE)}" ("${GUID_COLUMN}", "${SYNC_ID_COLUMN}") VALUES ${placeholders}`, itemChunk.flatMap((item) => [item.guid, item.syncId])]];
      });
    }(items2);
    await this.exec(queries);
  }
  async truncateTombstones() {
    const sql = createCleanSqlQueries(TOMBSTONE_TABLE);
    await this.exec(sql);
  }
  async increaseAndGetUniqueId(amount) {
    return this.database.increaseAndGetUniqueId(amount, async (batch) => {
      const updateCounterQuery = createUpdateCounterValue(batch), readCounterQuery = createGetDbMetaValue(DB_COUNTER_KEY);
      return await this.exec(updateCounterQuery), parseInt(await this.selectValue(readCounterQuery), 10);
    });
  }
  async insertMxObjects(items2) {
    return this.insertMxObjectsWithSyncId(items2.map((obj) => ({ ...obj, syncId: null })));
  }
  async insertMxObjectsWithSyncId(items2) {
    const queries = [...createEntitySql(objects = items2), ...createMetaSql(objects)];
    var objects;
    return this.exec(queries);
  }
  async reset() {
    const sql = createDropTableSqlQuery(METADATA_TABLE);
    await this.exec(sql);
  }
  async updateEntityData(entity, guid, attribute, newValue) {
    const updates = { [attribute]: newValue }, sql = createUpdateSqlQuery(ensure(getEntityMeta(entity)), updates, GUID_COLUMN, guid);
    return this.exec(sql);
  }
  async updateEntityDataReferringTo(entity, refersTo, attribute, newValue) {
    const queries = function(entityAttrPairs, oldValue, newValue2) {
      return Object.entries(entityAttrPairs).flatMap(([entityName, attrs]) => attrs.map((attr) => {
        const updates = { [attr]: newValue2 };
        return createUpdateSqlQuery(ensure(getEntityMeta(entityName)), updates, attr, oldValue);
      }));
    }({ [entity]: [attribute] }, refersTo, newValue);
    return this.exec(queries);
  }
  async updateEntityGuids(guids, guidMapping, entities) {
    const metaTableName = toUserScopedName(METADATA_TABLE), updateEntityGuidAmounts = await Promise.all(guids.filter((guid) => guidMapping.has(guid)).flatMap((guid) => [this.updateEntityData(ensure(guidMapping.getEntity(guid)), guid, "guid", guidMapping.getGuid(guid)), this.exec([`UPDATE ${metaTableName} SET ${GUID_COLUMN} = ? WHERE [${GUID_COLUMN}] = ?`, [guidMapping.getGuid(guid), guid]])])), entityAssociationsPairsCache = createMemoizedCache((entity) => getEntityAssociationsPairs(entity, entities)), updateReferringEntityAmounts = await Promise.all(guidMapping.entries().flatMap(([oldGuid, newGuid, entity]) => {
      const entityAssociationsPairs = entityAssociationsPairsCache(entity) ?? {};
      return Object.entries(entityAssociationsPairs).flatMap(([entityName, attrs]) => Promise.all(attrs.map((attr) => this.updateEntityDataReferringTo(entityName, oldGuid, attr, newGuid))));
    }));
    return updateEntityGuidAmounts.concat(updateReferringEntityAmounts.flat()).reduce((sum, current) => sum + current, 0);
  }
  async updateEntityMetadatas(values) {
    const sql = createUpdateDbMetaValue(toUserScopedName(DB_OFFLINE_METADATA_KEY), JSON.stringify(values));
    return this.exec(sql);
  }
}
function buildRetrieveMxObjectsQuery(entity, filter, options) {
  const providedOptions = options ?? {}, sqlBuilder = new SelectQueryBuilder(entity), attributes = providedOptions.attributes ?? getAttributesMeta(entity).map((m2) => m2.name);
  return sqlBuilder.attributes(attributes), void 0 !== filter && sqlBuilder.filtered(filter), void 0 === providedOptions.offset && void 0 === providedOptions.amount || sqlBuilder.paged(providedOptions.offset, providedOptions.amount), void 0 !== providedOptions.sort && sqlBuilder.sorted(providedOptions.sort), sqlBuilder;
}
class ReloadHandler {
  constructor(ui, session, onReload) {
    this.ui = ui, this.session = session, this.onReload = onReload;
  }
  reloadApp(withState = false) {
    this.setPageState(withState), this.onReload();
  }
  async tryRestorePage() {
    const showNotification = ensure(showReloadNotificationHandler);
    try {
      const { cache, page, lang } = this.getPageState();
      return !!(cache && page && lang) && (mx.data.hydrateCache(cache), await this.ui.openForm2(page.name, mapValues(page.formParameters, (g) => g ?? void 0), this.getLocaleCode() === lang ? page.title : void 0, void 0, { location: "content" }), showNotification(), true);
    } catch (error) {
      return this.showReloadError(), showNotification(), false;
    }
  }
  getLocaleCode() {
    return this.session.getConfig("locale.code");
  }
  setPageState(withState) {
    const { formParameters, customTitle, pageName } = window.history.state, state = withState ? { page: { name: pageName, formParameters: mapValues(formParameters, (g) => g ?? null), title: customTitle }, cache: mx.data.dehydrateCache(), lang: this.getLocaleCode() } : {};
    window.sessionStorage.setItem("mx.reload.modern", JSON.stringify(state));
  }
  getPageState() {
    const stateStr = window.sessionStorage.getItem("mx.reload.modern");
    return window.sessionStorage.removeItem("mx.reload.modern"), stateStr ? JSON.parse(stateStr) : {};
  }
  showReloadError() {
    const showMessageHandler2 = getShowMessageHandler();
    showMessageHandler2 && showMessageHandler2("confirmation", "An error has occurred that might have been caused by fast reload. Refresh the page to fix it.", translate("mxui.widget.DialogMessage", "error"), true, { okCaption: "Refresh page", onOk: this.onReload });
  }
}
class WebUI {
  constructor(rootElement, onError, logManager) {
    this.rootElement = rootElement, this.onError = onError, this.navigationLogger = logManager.getLogger(LogNode.Navigation);
  }
  async openForm2(pageId, formParameters, customTitle, currentForm, params, numberOfPagesToClose) {
    const subscriptions = Object.entries(formParameters).filter(([, guid]) => guid).map(([name, guid]) => subscribe({ guid, tag: `currently loading page (${name})` }));
    try {
      return this.navigationLogger.debug(`Open a page with id: ${pageId} ${numberOfPagesToClose ? ` Number of pages to close: ${numberOfPagesToClose}` : ""}`), await ensure(openFormHandler)(pageId.replace(/\\|\//g, ".").replace(".page.xml", ""), formParameters, customTitle, currentForm, params, numberOfPagesToClose);
    } finally {
      subscriptions.forEach((s) => s.unsubscribe());
    }
  }
  async getPageParameters(_) {
    throw new AssertionError("getPageParameters should never be called in the React client");
  }
  reload(_callback) {
    throw new NotImplementedError("Method not implemented.");
  }
  async back() {
    await closeForm(1);
  }
  confirmation(args) {
    const { content, proceed, cancel, handler, onCancel } = args;
    this.navigationLogger.debug("Show confirmation dialog"), ensure(getShowMessageHandler())("confirmation", content, translate("mxui.widget.ConfirmationDialog", "caption"), true, { okCaption: proceed ?? translate("mxui.widget.DialogMessage", "ok"), cancelCaption: cancel ?? translate("mxui.widget.DialogMessage", "cancel"), onOk: handler, onCancel });
  }
  async showLogin(messageCode) {
    if (402 === messageCode)
      return void this.exception(translateLoginMessage("http402"));
    const session = getSession();
    if (session.isValid()) {
      const loginPageSettings = session.getConfig("uiconfig.profile.loginPageSettings");
      if (loginPageSettings?.page)
        return void await this.openForm2(loginPageSettings.page, {}, loginPageSettings.title, void 0, { location: loginPageSettings.location });
    }
    const origin = api.get("originURI");
    if (origin) {
      const options = "https:" === window.location.protocol ? { sameSite: "None", secure: true } : {};
      if (api.remove("originURI", options), messageCode) {
        const parsedUrl = queryString.parseUrl(origin);
        redirect(parsedUrl.url + "?" + queryString.stringify({ ...parsedUrl.query, messageCode }));
      } else
        redirect(origin);
    } else
      ensure(showLoginHandler)(messageCode);
  }
  downloadFile(args) {
    const obj = args.mxobject, isRemoteFileEntity = obj.metaData.isRemoteFileEntity;
    if (!obj.get2("HasContents") && !isRemoteFileEntity)
      return;
    const url = mx.data.getDocumentUrl(obj.getGuid(), isRemoteFileEntity ? "" : attributeToClientValue(obj.get2("changedDate")), false, isRemoteFileEntity ? void 0 : encodeURIComponent(attributeToClientValue(obj.get2("Name"))));
    if ("window" === args.target || function() {
      const isChromeFrame = navigator.userAgent.includes("Chrome") && void 0 !== window.externalHost, isMobileBrowser = isMobileDevice();
      return isChromeFrame || isMobileBrowser;
    }()) {
      const fileUrl = url + "&target=window";
      /^((?!chrome|android).)*safari/i.test(navigator.userAgent) || window.navigator.standalone ? ensure(getShowMessageHandler())("confirmation", translate("mxui.widget.DialogMessage", "file_download_message"), translate("mxui.widget.DialogMessage", "file_download"), true, { okCaption: translate("mxui.widget.FileInput", "download"), cancelCaption: translate("mxui.widget.DialogMessage", "cancel"), onOk: () => openFileInWindow(fileUrl) }) : openFileInWindow(fileUrl);
    } else
      !function(url2, onError) {
        let iframe = document.querySelector("[data-file-downloader]");
        iframe || (iframe = document.createElement("iframe"), iframe.style.top = "-10px", iframe.style.height = "1px", iframe.style.position = "absolute", iframe.style.visibility = "hidden", iframe.setAttribute("data-file-downloader", "true"), document.body.appendChild(iframe)), iframe.onload = () => {
          const doc = ensure(iframe.contentDocument ?? iframe.contentWindow?.document), err = getFileError(doc);
          err && onError(err);
        }, ensure(iframe.contentWindow).location = url2;
      }(url + "&target=internal", (err) => {
        args.error ? args.error(err) : this.onError(err);
      });
    function openFileInWindow(fileUrl) {
      window.open(fileUrl, "mendix_file");
    }
  }
  showProgress(message, isModal) {
    return getShowProgressHandler()(message, isModal);
  }
  hideProgress(progressId) {
    getHideProgressHandler()(progressId);
  }
  error(msg, modal) {
    this.showMessage("error", msg, modal);
  }
  warning(msg, modal) {
    this.showMessage("warning", msg, modal);
  }
  showMessage(type, message, isModal) {
    ensure(getShowMessageHandler())(type, message, translate("mxui.widget.DialogMessage", type), isModal, { okCaption: translate("mxui.widget.DialogMessage", "ok") });
  }
  toggleSidebar() {
    throw new NotImplementedError("Method not implemented.");
  }
  includePluggableWidgetsCSS() {
    const head = ensure(document.querySelector("head")), firstCssLinkTag = head.querySelector("link[href*='.css']"), widgetsCss = document.createElement("link");
    widgetsCss.rel = "stylesheet", widgetsCss.href = getStaticResourceUrl("dist/widgets.css"), firstCssLinkTag ? head.insertBefore(widgetsCss, firstCssLinkTag) : head.appendChild(widgetsCss);
  }
  setupLocale() {
    document.documentElement.lang = getLocale().languageTag;
  }
  setDirection(dir) {
    document.body.dir = dir;
  }
  setupProfile(config) {
    const profileName = config.profile.name.toLowerCase();
    this.rootElement.classList.add(`profile-${profileName}`);
  }
  setupRoles(roles) {
    roles.forEach((role) => this.rootElement.classList.add(`role-${role.toLowerCase()}`));
  }
  setupFocusCapturing() {
    this.rootElement.setAttribute(FOCUS_CAPTURING_ATTRIBUTE, FOCUS_CAPTURING_NON_MODAL);
  }
  exception(msg) {
    this.showMessage("error", msg, true);
  }
  info(msg, modal) {
    this.showMessage("info", msg, modal);
  }
}
const logger$c = LogManager.get().getLogger();
function toPrettyStatistics(reachableObjectsStatistics, stat, referencedBy) {
  const result = {};
  !objectIsEmpty(stat.changes) && stat.object.isPersistable() && (result.changes = stat.changes), stat.subscriptions.length > 0 && (result.subscribedWidgets = Array.from(new Set(stat.subscriptions))), referencedBy.length > 0 && (result.referencedBy = referencedBy.map((r) => function(reachableObjectsStatistics2, guid) {
    const referredStat = reachableObjectsStatistics2.find((stat2) => stat2.object.getGuid() === guid);
    if (referredStat)
      return [prettyId(referredStat) + " (" + prettyEntity(referredStat) + ")", toPrettyStatistics(reachableObjectsStatistics2, referredStat, [])];
    const session2 = getSession();
    if (guid === session2.getUserId())
      return ["$currentUser (System.User)", {}];
    return ["$currentSession (System.Session)", {}];
  }(reachableObjectsStatistics, r)).reduce((acc, [id, res]) => (acc[id] = res, acc), {}));
  const session = getSession(), isCurrentUser = stat.object.getGuid() === session.getUserId(), toBeGarbageCollected = !result.subscribedWidgets && !result.referencedBy;
  return isCurrentUser && toBeGarbageCollected && (result.note = "Current user is always in cache"), !toBeGarbageCollected || isCurrentUser ? result : "";
}
function prettyEntity(stat) {
  return stat.object.getEntity() + (stat.object.isPersistable() ? "" : " [NPE]");
}
function prettyId(stat) {
  const status = [];
  return stat.uncommitted && status.push("new"), Object.keys(stat.changes).length > 0 && status.push("changed"), stat.guid + (status.length > 0 ? ` (${status.join(", ")})` : "");
}
window.addEventListener("keydown", (e) => {
  const key = e.key || String.fromCharCode(e.keyCode);
  e.ctrlKey && e.altKey && ("g" === key.toLowerCase() || "KeyG" === e.code) && logger$c.info(`State details per entity (${(/* @__PURE__ */ new Date()).toLocaleTimeString()}):`, function() {
    const reachableObjectsStatistics = getData().getObjectsStatistics().filter((stat) => null != stat.object), reachabilityGraph = function(statistics) {
      const session = getSession(), userId = session.getUserId(), sessionId = session.getSessionObjectId(), mxObjs = statistics.map((stat) => stat.object), startGuids = statistics.filter((stat) => !objectIsEmpty(stat.changes) && stat.object.isPersistable() || stat.subscriptions.length > 0).map((stat) => stat.object.getGuid());
      return buildRetainmentGraph(mxObjs, new Set(startGuids.concat([userId, sessionId])));
    }(reachableObjectsStatistics), result = {};
    return reachableObjectsStatistics.forEach((stat) => {
      const entity = prettyEntity(stat), id = prettyId(stat);
      result[entity] || (result[entity] = {}), result[entity][id] = toPrettyStatistics(reachableObjectsStatistics, stat, reachabilityGraph.neighborsOf(stat.object.getGuid())) || "Going to be garbage collected \u2020";
    }), result;
  }());
});
const DOCUMENT_DIR$1 = "documents", THUMBNAIL_DIR$1 = "thumbnails", DEFAULT_FILES_DIRECTORY$1 = "files", loadCache = [];
let active = false;
const sessionConfig = { bundleVersion: "cacheBust", sessionStore: { get: async () => window.localStorage.session, async set(value) {
  window.localStorage.session = value;
}, async remove() {
  delete window.localStorage.session;
} } };
async function startupClient({ systemTexts, languages, registerServiceWorker: registerServiceWorkerSetting }, rootNode, logManager) {
  setSystemTexts(systemTexts), setErrorHandler(errorHandler), registerConsoleLogsListener(), logUnhandledErrors();
  const cache = new MxObjectCache(), session = new Session(sessionConfig.sessionStore, logManager.getLogger(LogNode.Startup), logManager.getLogger(LogNode.Auth), sessionConfig.bundleVersion, "10.12.0.38909", reload);
  setSession(session);
  const appUrl = baseUrl, ui = new WebUI(rootNode, (error) => errorHandler(error), logManager);
  setUI(ui);
  const reloadHandler = new ReloadHandler(ui, session, reload);
  let sessionData;
  window.mx = { isOffline: () => session.isOffline(), logger: logManager.getLogger(), remoteUrl: baseUrl, session, version: "10.12.0.38909", appUrl, homeUrl, login: (username, password, onSuccessCallback, onErrorCallback) => login(session, username, password, "default", onSuccessCallback, onErrorCallback), login2: (username, password, useAuthToken, onSuccessCallback, onErrorCallback) => login(session, username, password, useAuthToken, onSuccessCallback, onErrorCallback), logout: () => session.logout().then(() => getData().clear(reload)), reload, reloadWithState: () => reloadHandler.reloadApp(true), ui, addOnLoad(callback) {
    active ? callback() : loadCache.push(callback);
  } };
  try {
    sessionData = await session.startup({ offline: isBrowserWithOfflineSupport(), referrer: (getPathFromHash() ?? "") + location.search, profile: getProfileFromUrl(location.search), timezoneoffset: (/* @__PURE__ */ new Date()).getTimezoneOffset(), timezoneId: Intl.DateTimeFormat().resolvedOptions().timeZone, preferredLanguages: navigator.languages, longLiveTheCookie: navigator?.standalone });
  } catch (e) {
    return void function(error, ui2) {
      if (error instanceof ServerError && error.status && 409 === error.status)
        ui2.exception(error.message);
      else if (error instanceof ConnectionError)
        ui2.exception(translatedError(error).content);
      else {
        const loginMessageCode = error instanceof ServerError && error.status && [402, 404, 403, 500, 503].includes(error.status) ? error.status : 0;
        ui2.showLogin(loginMessageCode);
      }
    }(e, ui);
  }
  if (session.getConfig("isDevModeEnabled")) {
    const devTools = new DevTools(baseUrl, logManager);
    devTools.addOnReload(() => async function() {
      const cacheKeys = (await caches.keys()).filter((k) => k.startsWith("mendix-precache"));
      for (const cacheKey of cacheKeys)
        await caches.delete(cacheKey);
    }()), devTools.addOnReload((hotReload) => reloadHandler.reloadApp(hotReload)), devTools.addOnUpdateStyling(() => function() {
      const styleNodes = document.head.querySelectorAll('link[rel="stylesheet"][href^="theme.compiled.css?"]');
      if (0 === styleNodes.length)
        return;
      const removeOldStyles = () => styleNodes.forEach((styleNode) => document.head.removeChild(styleNode)), newStyleNode = document.createElement("link");
      newStyleNode.rel = "stylesheet", newStyleNode.href = `theme.compiled.css?${Date.now()}`, newStyleNode.addEventListener("load", () => {
        requestAnimationFrame(removeOldStyles);
      }), document.head.appendChild(newStyleNode);
    }()), await devTools.connect();
  }
  const onlineDataBackend = new OnlineDataBackend(void 0, cache), onlineData = new OnlineData(cache);
  let offlineData2, data = new Data({ garbageCollectionInterval: 1e4, logCleanupStatistics: false }, cache, onlineDataBackend);
  if (session.isOffline()) {
    if (!isBrowserWithOfflineSupport())
      throw new Error("Offline functionality is not available because the app is not opened in a Secure Context (using https).");
    const { dataBackend, offlineData: createdOfflineData } = await async function(logManager2, session2, cache2) {
      const { buildOfflineDataBackend } = await Promise.resolve().then(function () { return buildOfflineDataBackend$1; }), { FileBackend } = await Promise.resolve().then(function () { return FileBackend$1; }), database = await async function() {
        const windowAsAny = window, database2 = new SQLiteDB(await createWASQLiteDB("mendixapp.db", { baseUrl, ...windowAsAny.wasqliteOptions ?? {} }));
        return windowAsAny.exposeDb && (windowAsAny.__internal_db_dontUse__ = database2), database2;
      }();
      !function(database2, logManager3) {
        const dbLogger = logManager3.getLogger(LogNode.Database);
        database2.registerQueryListener((queryDescription) => {
          const stopwatch = new Stopwatch();
          return [(results) => {
            const resultArray = Array.isArray(results) ? results : [results];
            dbLogger.debounced.trace(`SQL request was completed in ${stopwatch.measure()} milliseconds. Rows count: ${resultArray.length}. Query: "${queryDescription}`);
          }, (error) => {
            dbLogger.warn(`SQL request was failed in ${stopwatch.measure()} milliseconds. Error: ${error.message}. Query: "${queryDescription}`);
          }];
        });
      }(database, logManager2);
      const { setUserScopedNamePrefix } = await Promise.resolve().then(function () { return tablePrefix; });
      logManager2.getLogger(LogNode.Auth).debug("Using scoped database and file system."), setUserScopedNamePrefix(`mx${getUserIdentifier(session2)}`);
      const relativeFilesDirectory = getSessionRelativeFilesDirectory(session2);
      await async function(fileBackend, session3, logger2) {
        if (window.localStorage.getItem(USES_SCOPED_DIRECTORIES_KEY))
          return void logger2.debug("The client uses user scoped files directories.");
        const legacyDocumentsDir = `${DEFAULT_FILES_DIRECTORY$1}/${DOCUMENT_DIR$1}`, legacyThumbnailsDir = `${DEFAULT_FILES_DIRECTORY$1}/${THUMBNAIL_DIR$1}`;
        if (await fileBackend.listDir(legacyDocumentsDir).length)
          return void window.localStorage.setItem(USES_SCOPED_DIRECTORIES_KEY, "true");
        logger2.debug("Migration to user scoped files directories started.");
        const documentsDir = `${getSessionRelativeFilesDirectory(session3)}/${DOCUMENT_DIR$1}`, thumbnailsDir = `${getSessionRelativeFilesDirectory(session3)}/${THUMBNAIL_DIR$1}`, stopwatch = new Stopwatch();
        try {
          await fileBackend.moveDir(legacyDocumentsDir, documentsDir), await fileBackend.moveDir(legacyThumbnailsDir, thumbnailsDir), logger2.debug(`Migration to user scoped files directories completed in ${stopwatch.measure()} milliseconds`);
        } catch (e) {
          throw logger2.error("Migration to user scoped files directories failed!", e), e;
        }
        window.localStorage.setItem(USES_SCOPED_DIRECTORIES_KEY, "true");
      }(new LoggableFileBackend(new FileBackend({}, relativeFilesDirectory), logManager2), session2, logManager2.getLogger(LogNode.Auth));
      const getDocumentUrlFn = (fileName, _, isThumb) => `filesystem:${baseUrl}temporary/${relativeFilesDirectory ? `${relativeFilesDirectory}/` : ""}${isThumb ? THUMBNAIL_DIR$1 : DOCUMENT_DIR$1}/${fileName}?${Date.now()}`;
      return buildOfflineDataBackend(cache2, database, ensure(session2.getOfflineConfig()), new LoggableFileBackend(new FileBackend({}, relativeFilesDirectory), logManager2), logManager2, getDocumentUrlFn, window.openDatabase?.("MendixDatabase", "1", "Mendix Database", 10485760));
    }(logManager, session, cache);
    offlineData2 = createdOfflineData, data = new Data({ garbageCollectionInterval: 1e4, logCleanupStatistics: false }, cache, dataBackend);
  }
  setData(data), window.mx.data = data, data.startup(), initializeCore(session.getConfig(), languages, session.getConfig("microflows"), onlineData, offlineData2);
  await reloadHandler.tryRestorePage() || await handleRuntimeSuccess(cache, session.getConfig());
  const uiconfig = session.getConfig("uiconfig");
  ui.setupLocale(), ui.setupProfile(uiconfig), ui.setupRoles(session.getUserRoleNames()), ui.setDirection(uiconfig.direction), ui.setupFocusCapturing();
  if (session.getConfig("uiconfig.pluginWidgets").length > 0 && ui.includePluggableWidgetsCSS(), initialize(), session.isOffline()) {
    const progressId = ui.showProgress(void 0, true);
    try {
      const dbModelCheckResult = shouldTriggerFullSyncOrDatabaseUpdate(await session.loadCachedSessionData(), sessionData);
      logManager.getLogger("Startup").debug(` The app will ${dbModelCheckResult.shouldSync ? "" : "not "}perform a startup sync.`);
      const cachedOfflineMetadata = session.getOfflineMetadata(), dbOfflineMetadata = await ensure(offlineData2).retrieveOfflineMetadata();
      await handleOfflineStartup(dbModelCheckResult, cachedOfflineMetadata, dbOfflineMetadata, logManager.getLogger("Startup"));
    } finally {
      ui.hideProgress(progressId);
    }
    await session.saveSessionData();
  }
  for (!function(registerServiceWorkerSetting2, session2) {
    registerServiceWorkerSetting2 && isBrowserWithServiceWorkerSupport() && null != session2.getConfig("uiconfig.profile.progressiveWebApp") && (!function({ offline, precaching, profileKind, languageCode, isReactClient }) {
      const url = new URL(mx.appUrl);
      url.pathname += "service-worker.js", offline && url.searchParams.set("offline", "true"), precaching && url.searchParams.set("precaching", "true"), isReactClient && url.searchParams.set("isReactClient", "true"), url.searchParams.set("profileKind", encodeURIComponent(profileKind)), url.searchParams.set("languageCode", encodeURIComponent(languageCode)), navigator.serviceWorker.register(url.toString()).catch((e) => handleError(e));
    }({ offline: session2.isOffline(), precaching: session2.getConfig("uiconfig.profile.progressiveWebApp.precaching"), profileKind: session2.getConfig("uiconfig.profile.kind"), languageCode: session2.getConfig("locale.code"), isReactClient: true }), false === session2.getConfig("uiconfig.profile.progressiveWebApp.installPrompt") && window.addEventListener("beforeinstallprompt", (event) => {
      event.preventDefault();
    }));
  }(registerServiceWorkerSetting, session), getData().update = function(args) {
    publish(args).then(args.callback).catch((e) => window.mx.onError(e));
  }, Object.defineProperty(getUI(), "modulePath", { get() {
    throw new Error("'modulePath' is not supported in modern client");
  } }), getUI().getTemplate = function() {
    throw new Error("'getTemplate' is not supported in modern client");
  }, active = true; loadCache.length > 0; )
    loadCache.shift()?.();
  return session;
}
function getUserIdentifier(session) {
  return session.isGuest() ? "anonymous" : session.getUserId();
}
function getSessionRelativeFilesDirectory(session) {
  return `${DEFAULT_FILES_DIRECTORY$1}/app/${getUserIdentifier(session)}`;
}
const USES_SCOPED_DIRECTORIES_KEY = "usesScopedDirectories";
function login(session, username, password, useAuthToken, onSuccessCallback, onErrorCallback) {
  session.login({ username, password, useAuthToken }).then(() => {
    onSuccessCallback?.();
    const urlParams = new URLSearchParams(location.search);
    if (urlParams.has("c")) {
      const url = new URL(location.href);
      return url.pathname = decodeURIComponent(urlParams.get("c")), urlParams.delete("c"), url.search = urlParams.toString(), void (location.href = url.toString());
    }
    reload();
  }).catch((e) => onErrorCallback?.(e));
}
const App = ({ applicationConfig, rootNode }) => {
  const [session, setSession2] = reactExports.useState(void 0), [popupsOverlay, setPopUpsOverlay] = reactExports.useState({ hasModal: false, zIndex: 0 }), [messagesOverlay, setMessagesOverlay] = reactExports.useState({ hasModal: false, zIndex: 0 }), logManager = LogManager.get();
  reactExports.useEffect(() => {
    logManager.setLogFilter(defaultLogFilter);
    const progressHandlerId = getShowProgressHandler()(void 0, void 0, 500);
    (async () => {
      const newSession = await startupClient(applicationConfig, rootNode, logManager);
      newSession && setSession2(newSession);
    })().catch(handleError).finally(() => {
      progressHandlerId && getHideProgressHandler()(progressHandlerId);
    });
  }, [applicationConfig, logManager, rootNode]);
  const applicationTitle = session?.getConfig("uiconfig.profile.title") ?? "Mendix", demoUsers = session?.getConfig("demoUsers"), activeDemoUser = session?.getUserObject().get2("Name"), overlayIsVisible = popupsOverlay.hasModal || messagesOverlay.hasModal;
  return jsxRuntimeExports.jsxs(ErrorBoundary, { children: [overlayIsVisible && jsxRuntimeExports.jsx(Overlay, { zIndex: Math.max(popupsOverlay.zIndex, messagesOverlay.zIndex) }), jsxRuntimeExports.jsx(Router, { constants: applicationConfig.constants, applicationTitle, onUpdateOverlay: (hasModal, zIndex) => setPopUpsOverlay({ hasModal, zIndex }) }), jsxRuntimeExports.jsx(Messages, { onUpdateOverlay: (hasModal, zIndex) => setMessagesOverlay({ hasModal, zIndex }), overlayIsVisible }), jsxRuntimeExports.jsx(ReloadNotification, {}), demoUsers && jsxRuntimeExports.jsx(DemoUserSwitcher, { activeDemoUser, demoUsers, onSelectUser: async (user) => {
    await session?.logout(), await session?.login({ username: user.name, password: user.password }), reload();
  } })] });
}, startApp = async (applicationConfig) => {
  !function(url = baseUrl) {
    const baseElement = document.createElement("base");
    baseElement.href = url, document.getElementsByTagName("head")[0]?.appendChild(baseElement);
  }();
  const rootNode = ensure(document.getElementById("root"));
  createRoot(rootNode).render(jsxRuntimeExports.jsx(App, { applicationConfig, rootNode }));
};
configure({ reactionScheduler: reactDomExports$1.unstable_batchedUpdates });

function PageFragment({ renderKey: key, children }) {
  const [previousKey, setKey] = reactExports.useState(key);
  return reactExports.useEffect(() => setKey(key), [key]), key !== previousKey ? null : jsxRuntimeExports.jsx(reactExports.Fragment, { children });
}

async function synchronize() {
  const ui = getUI(), progressId = ui.showProgress(void 0, true);
  try {
    await getData().synchronizeOffline();
  } finally {
    ui.hideProgress(progressId);
  }
}
async function getUnsavedObjects(currentForm) {
  return await methodToPromise(currentForm, "publish", "submit"), await methodToPromise(currentForm, "publish", "commit"), currentForm.getSubmitObjects();
}
async function openPage(modelerConfig, clientConfig, actionArguments) {
  const [pageParameters, parameters] = function(actionArguments2) {
    const pageParameters2 = {}, otherArguments = {};
    return Object.keys(actionArguments2).forEach((k) => {
      k.startsWith(PARAMETER_ARGUMENT_PREFIX) ? pageParameters2["$" + k.substring(PARAMETER_ARGUMENT_PREFIX.length)] = actionArguments2[k] : otherArguments[k] = actionArguments2[k];
    }), [pageParameters2, otherArguments];
  }(actionArguments);
  let pageArguments = [{}];
  for (const [name, value] of Object.entries(pageParameters))
    if (value) {
      if ("object" in value)
        pageArguments.forEach((p) => p[name] = value.object);
      else if ("objects" in value) {
        if (1 !== pageArguments.length)
          throw new AssertionError("Multiple parameters with multiple objects are not supported");
        const args = pageArguments[0];
        pageArguments = value.objects.map((o) => ({ ...args, [name]: o }));
      } else if ("id" in value) {
        const object = await getByGuid(value.id);
        pageArguments.forEach((p) => p[name] = object);
      } else if ("ids" in value)
        throw new AssertionError("Parameters with multi-selection are not supported");
    } else
      pageArguments.forEach((p) => p[name] = void 0);
  clientConfig.abortOnClientValidations && await clientConfig.currentForm.triggerValidation(), clientConfig.abortOnServerValidations && await methodToPromise(getData(), "validate", clientConfig.currentForm.getSubmitObjects());
  const formsOpened = await Promise.all(pageArguments.map(async function(args) {
    let specializedSettings;
    if (modelerConfig.specializations) {
      const object = args[modelerConfig.specializations.argument];
      specializedSettings = object ? modelerConfig.specializations.pageSettings[object.getEntity()] : void 0;
    }
    const settings = specializedSettings ?? modelerConfig, title = settings.title ? await evaluateActionExpression(settings.title, parameters) ?? "" : void 0, numberOfPagesToClose = modelerConfig.numberOfPagesToClose ? toNumber(await evaluateActionExpression(modelerConfig.numberOfPagesToClose, parameters)) : void 0, formParameters = settings.params ? mapValues(settings.params, (p) => args[p]?.getGuid()) : mapValues(args, (o) => o?.getGuid());
    return getUI().openForm2(settings.name, formParameters, title, clientConfig.currentForm, { ...settings, formParams: clientConfig.formParams }, numberOfPagesToClose);
  }));
  return pageArguments.length > 1 ? formsOpened : formsOpened[0];
}
const PARAMETER_ARGUMENT_PREFIX = "param$";
const logger$b = LogManager.get().getLogger();
async function openLink(config, parameter) {
  const url = "addressAttribute" in config ? await methodToPromise(ensure(parameter), "fetch", config.addressAttribute) : config.address, validUrl = function(schema, url2) {
    if (null == url2)
      return void logger$b.error("Attempted to open missing link URL");
    switch (schema) {
      case "email":
        return `mailto:${escape(url2)}`;
      case "call":
        return `tel:${escape(url2)}`;
      case "text":
        return `sms:${escape(url2)}`;
      default:
        const normalizedUrl = url2.trim().toLowerCase();
        return normalizedUrl.startsWith("javascript:") || normalizedUrl.startsWith("vbscript:") || normalizedUrl.startsWith("data:") ? void logger$b.error("Attempted to open invalid link URL", url2) : url2;
    }
  }(config.schema, url);
  void 0 !== validUrl && ("web" === config.schema ? window.open(validUrl, "_blank", "noopener") : window.open(validUrl, "_self"));
}
function executeAction(action, clientConfig, actionArguments, callback, errorHandler) {
  const session = getSession();
  function getObject(args) {
    return "$object" in args && args.$object ? "object" in args.$object ? args.$object.object : crash() : void 0;
  }
  function handleError$1(e) {
    errorHandler ? errorHandler(e) : e instanceof ValidationError || handleError(e);
  }
  session.hasSomeRole(action.config.allowedRoles) ? async function() {
    switch (action.type) {
      case "callMicroflow":
        return async function(modelerConfig, clientConfig2, actionArguments2) {
          const ui = getUI(), confirmation = modelerConfig.confirmation;
          if (confirmation && !await new Promise((resolve) => ui.confirmation({ cancel: confirmation.cancel, proceed: confirmation.proceed, content: confirmation.question, handler: () => resolve(true), onCancel: () => resolve(false) })))
            return;
          if (clientConfig2.beforeExecuteAction && clientConfig2.beforeExecuteAction(), clientConfig2.abortOnClientValidations)
            switch (modelerConfig.validate) {
              case "node":
                if (!clientConfig2.widgetIsValid)
                  throw new ValidationError();
                break;
              case "view":
                await clientConfig2.currentForm.triggerValidation();
            }
          const progressId = modelerConfig.progress ? ui.showProgress(modelerConfig.progress.message, modelerConfig.progress.modal) : void 0;
          try {
            await methodToPromise(clientConfig2.currentForm, "publish", "submit");
            const validationGuids = clientConfig2.abortOnServerValidations ? clientConfig2.currentForm.getSubmitObjects().map((mxobj) => mxobj.getGuid()) : [];
            await onlineData().executeMicroflow(modelerConfig.operationId, toRuntimeArguments(actionArguments2), clientConfig2.currentForm, validationGuids, Boolean(modelerConfig.async));
          } finally {
            void 0 !== progressId && ui.hideProgress(progressId);
          }
        }(action.config, clientConfig, actionArguments);
      case "callNanoflow":
        return async function(modelerConfig, clientConfig2, actionArguments2) {
          clientConfig2.beforeExecuteAction && clientConfig2.beforeExecuteAction(), clientConfig2.abortOnClientValidations && await clientConfig2.currentForm.triggerValidation(), await methodToPromise(clientConfig2.currentForm, "publish", "submit"), await nanoflowEngine.execute(modelerConfig.nanoflow, await toNanoflowArguments(actionArguments2), clientConfig2.currentForm);
        }(action.config, clientConfig, actionArguments);
      case "cancelChanges":
        return cancelChanges(action.config, clientConfig);
      case "closePage":
        return async function(modelerConfig, { currentForm }, parameters) {
          const numberOfPagesToClose = modelerConfig.numberOfPagesToClose ? toNumber(await evaluateActionExpression(modelerConfig.numberOfPagesToClose, parameters)) : 1;
          if (numberOfPagesToClose < 1)
            throw new AssertionError(`The number of pages to close evaluated to ${numberOfPagesToClose}. It must be at least 1.`);
          return currentForm.closePage(numberOfPagesToClose);
        }(action.config, clientConfig, actionArguments);
      case "doNothing":
        return;
      case "openLink":
        return openLink(action.config, getObject(actionArguments));
      case "openPage":
        return openPage(action.config, clientConfig, actionArguments).then(() => {
        });
      case "saveChanges":
        return async function(config, { currentForm }) {
          await currentForm.triggerValidation(), currentForm.setSuspend(true);
          try {
            const objectsToCommit = await getUnsavedObjects(currentForm);
            mx.isOffline() ? await new Promise((resolve, reject) => {
              getData().commit({ mxobjs: objectsToCommit, callback: resolve, error: reject });
            }) : await onlineData().executeObjectAction(config.operationId, "commit", objectsToCommit);
            try {
              config.syncAutomatically && await synchronize();
            } finally {
              config.closePage && await methodToPromise(currentForm, "close");
            }
          } finally {
            currentForm.setSuspend(false);
          }
        }(action.config, clientConfig);
      case "signOut":
        return async function() {
          getSession().isGuest() || (getUI().showProgress(void 0, true), mx.logout());
        }();
      case "synchronize":
        return synchronize();
      case "deleteObject":
        return async function(config, { currentForm }, parameter) {
          let objects;
          if (parameter)
            if ("object" in parameter)
              objects = [parameter.object];
            else if ("objects" in parameter)
              objects = parameter.objects;
            else if ("id" in parameter)
              objects = await getByGuids([parameter.id]);
            else {
              if (!("ids" in parameter))
                throw new AssertionError();
              objects = await getByGuids(parameter.ids);
            }
          else
            objects = [];
          const confirmation = translate(objects.length > 1 ? "mxui.widget.DataGrid" : "mxui.sys.UI", "confirm_delete", objects.length.toString()), ui = getUI();
          if (await new Promise((resolve) => ui.confirmation({ content: confirmation, handler: () => {
            resolve(true);
          }, onCancel: () => {
            resolve(false);
          } }))) {
            currentForm.setSuspend(true);
            try {
              mx.isOffline() ? await offlineData().delete(objects) : config.operationId && await onlineData().executeObjectAction(config.operationId, "delete", objects), config.closePage && await methodToPromise(currentForm, "close");
            } finally {
              currentForm.setSuspend(false);
            }
          }
        }(action.config, clientConfig, actionArguments.$object);
      case "createObject":
        return async function(modelerConfig, clientConfig2, { $object, ...parameters }) {
          const parameter = $object ? "object" in $object ? $object.object : crash() : void 0;
          if ("association" in modelerConfig && void 0 === parameter)
            throw new AssertionError();
          const ui = getUI(), pid = ui.showProgress("", false);
          try {
            let mxObject;
            mxObject = mx.isOffline(modelerConfig.entity) ? await offlineData().create(modelerConfig.entity) : await onlineData().createObject(modelerConfig.entity, modelerConfig.operationId), modelerConfig.association && mxObject.addReference(modelerConfig.association, parameter.getGuid()), await openPage({ ...modelerConfig.pageSettings, numberOfPagesToClose: modelerConfig.numberOfPagesToClose }, clientConfig2, { [modelerConfig.objectParameter]: { object: mxObject }, ...parameters });
          } finally {
            ui.hideProgress(pid);
          }
        }(action.config, clientConfig, actionArguments);
      case "callExternalAction":
        return async function(config, { currentForm }, actionObject) {
          config.commit && await currentForm.triggerValidation(), config.closePage && currentForm.setSuspend(true);
          try {
            const confirmation = config.confirmation;
            if (confirmation && !await new Promise((resolve) => getUI().confirmation({ cancel: confirmation.cancel, proceed: confirmation.proceed, content: confirmation.question, handler: () => resolve(true), onCancel: () => resolve(false) })))
              return;
            const objectsToCommit = config.commit ? await getUnsavedObjects(currentForm) : [];
            await onlineData().executeExternalAction(config.operationId, actionObject, objectsToCommit), config.closePage && await methodToPromise(currentForm, "close");
          } finally {
            currentForm.setSuspend(false);
          }
        }(action.config, clientConfig, ensure(getObject(actionArguments)));
      default:
        throw new AssertionError();
    }
  }().then(callback, handleError$1) : session.isGuest() ? getUI().showLogin() : handleError$1(new DescribedError("Unable to execute action because you do not have sufficient permissions."));
}

const logger$a = LogManager.get().getLogger(), ActionProperty = asProperty((config, store, widgetId) => computeAction(config, store, widgetId));
function computeAction(config, store, widgetId, predefinedArguments) {
  const [actionsInProgress$, setActionsInProgress] = useValue(`Actions in progress for ${widgetId}`, 0), isExecuting$ = fromComputation$(`Action is executing for ${widgetId}`, () => actionsInProgress$.dependOn() > 0), [isInvalid$] = store.useSlot(widgetId, "isInvalid"), [currentForm$] = store.useSlot(pageScope, "form"), session = getSession(), hasAnyAllowedRole = session.hasSomeRole(config.action.config.allowedRoles), requiresNamedUser = config.action.config.namedUser ?? false, isAuthorized = hasAnyAllowedRole && !(requiresNamedUser && session.isGuest()), showsLoginDialog = session.isGuest() && !hasAnyAllowedRole, actionParameters$ = getActionArguments$(config.action.argMap, store, widgetId, predefinedArguments, "deleteObject" !== config.action.type), canExecute$ = fromComputation$(`Action for ${widgetId} can execute`, () => (isAuthorized || showsLoginDialog) && Object.values(actionParameters$.dependOn()).every((p) => "available" === p.status)), disabledDuringExecution = config.action.disabledDuringExecution;
  return fromComputation$(`Action value for ${widgetId}`, () => {
    const canExecute = canExecute$.dependOn(), isExecuting = isExecuting$.dependOn();
    return { isAuthorized, canExecute, isExecuting, disabledDuringExecution, execute: action(execute) };
  });
  function execute() {
    if (!readUntracked(canExecute$) || disabledDuringExecution && readUntracked(isExecuting$))
      return void logger$a.debug(`Widget is attempting to execute a ${config.action.type} action which is not executable.`);
    const parameters = mapValues(readUntracked(actionParameters$), getOrCrashL), isInvalid = readUntracked(isInvalid$), currentForm = ensure(readUntracked(currentForm$))[0];
    setActionsInProgress(readUntracked(actionsInProgress$) + 1), executeAction(config.action, { abortOnClientValidations: !config.skipClientValidation, abortOnServerValidations: config.abortOnServerValidation ?? false, widgetIsValid: !isInvalid, currentForm }, parameters, action(() => {
      setActionsInProgress(readUntracked(actionsInProgress$) - 1);
    }), action((e) => {
      setActionsInProgress(readUntracked(actionsInProgress$) - 1), e instanceof DescribedError ? handleError(e) : e instanceof ValidationError || handleError(new Error(`An error occurred while executing an action of ${toFriendlyId(widgetId)}: ${e.message}`));
    }));
  }
}

function fromObjectProperty$({ scope, dataSourceId, editable }, store, widgetId, parameters$, fetchData) {
  const shouldLoad$ = getParentIsReady$(scope, store, widgetId);
  let fetchId = -1;
  const rawFetchTrigger$ = fromComputation$(`Load trigger of data source of ${widgetId}`, () => shouldLoad$.dependOn() ? mapL(parameters$.dependOn(), (parameters) => ({ parameters, id: ++fetchId })) : loading()), fetchTrigger$ = withFormSuspension$(store, widgetId, rawFetchTrigger$), fetchResult$ = fromRequest$(`Load data of data source of ${widgetId}`, () => {
    const trigger = fetchTrigger$.dependOn();
    return "available" !== trigger.status ? trigger : fetchData(trigger.value.parameters);
  }), object$ = withObjectSharing$(getSubscribedObject$(widgetId, fetchResult$, store), store, widgetId, editable);
  return asDynamicValue$(fromComputation$(`Returned data of data source of ${widgetId}`, () => mapL(object$.dependOn(), (obj) => toObjectItem(obj, dataSourceId))));
}
function getParentIsReady$(scope, store, widgetId) {
  if (scope) {
    const [parentFirstLoadDone$] = store.useSlot(scope, "firstLoadDone");
    return fromComputation$(`Is parent ${scope} of ${widgetId} ready?`, () => Boolean(parentFirstLoadDone$.dependOn()));
  }
  return fromConstant$(true);
}
function withObjectSharing$(value$, store, widgetId, editable) {
  const [firstLoadDone$, setFirstLoadDone] = store.useSlot(widgetId, "firstLoadDone"), [, setEditableObject] = store.useSlot(widgetId, "editableObject"), [object$, setObject] = store.useSlot(widgetId, "object"), setObjectSlots = (value) => {
    editable && setEditableObject(value), setObject(value);
  };
  return withSideEffect$(`Share object of ${widgetId}`, value$, (value) => {
    if (readUntracked(firstLoadDone$) || setFirstLoadDone("loading" !== value.status), "loading" === value.status) {
      const oldState = readUntracked(object$);
      void 0 !== oldState && "unavailable" !== oldState.status || setObjectSlots(loading());
    } else
      setObjectSlots(value);
  });
}
function withFirstLoadDoneSharing$$1(value$, store, widgetId) {
  const [firstLoadDone$, setFirstLoadDone] = store.useSlot(widgetId, "firstLoadDone");
  return withSideEffect$(`Share first load done of ${widgetId}`, value$, (value) => {
    readUntracked(firstLoadDone$) || setFirstLoadDone("loading" !== value.status);
  });
}

const logger$9 = LogManager.get().getLogger(), AssociationObjectProperty = asProperty((config, store, widgetId) => {
  const rootObject$ = getSubscribedObjectState$(store, ensure(config.scope)), friendlyId = toFriendlyId(widgetId);
  return !config.path || mx.isOffline() ? fromObjectProperty$(config, store, widgetId, config.path ? getObjectByPath$(rootObject$, config.path, store) : rootObject$, (p) => (logUsingObject(p), available(p))) : fromObjectProperty$(config, store, widgetId, getObjectByPath$(rootObject$, config.path, store, true), (parameters) => {
    if (parameters instanceof MxObject)
      return logUsingObject(parameters), available(parameters);
    const contextGuid = getOrCrashL(readUntracked(rootObject$)).getGuid();
    return function(contextGuid2) {
      logger$9.debug(`Fetching object with context object '${contextGuid2}' and operationId '${config.operationId}' for widget ${friendlyId}`);
    }(contextGuid), onlineData().retrieveByPath(contextGuid, ensure(config.operationId)).then(({ mxObjects, extra }) => {
      const mxObject = mxObjects.length ? mxObjects[0] : void 0;
      return function(mxObject2, extra2) {
        const guid = mxObject2?.getGuid();
        logger$9.debug(guid ? `Received object '${guid}' and ${extra2.length} objects over schema for widget ${friendlyId}` : `Received no object for widget ${friendlyId}`, "extra ids:", extra2.map((o) => o.getGuid()));
      }(mxObject, extra), mxObject ? available(mxObject) : unavailable();
    });
  });
  function logUsingObject(mxObject) {
    logger$9.debug(`Using object '${mxObject.getGuid()}' for widget ${friendlyId}`);
  }
});

class DefaultDateTimeFormatter {
  constructor(config) {
    this.config = config, this.type = FormatterType.DateTime;
  }
  format(value) {
    return !value || isNaN(value.getTime()) ? "" : formatDate$1(value, this.config);
  }
  parse(value, fallbackDate) {
    if ("" === value)
      return { valid: true, value: void 0 };
    const result = parseDate(value, this.config, fallbackDate);
    return void 0 === result ? { valid: false } : { valid: true, value: result };
  }
  getFormatPlaceholder() {
    return getDateFormatPlaceholder(this.config);
  }
  withConfig(config) {
    return new DefaultDateTimeFormatter(config);
  }
}

class DefaultEnumFormatter {
  constructor(enumeration) {
    this.enumeration = enumeration;
  }
  format(value) {
    return value ? translateEnumeration(this.enumeration, value) : "";
  }
  parse(_value) {
    throw new Error("Enumeration values cannot be parsed");
  }
}
class DefaultNumberFormatter {
  constructor(config) {
    this.config = config, this.type = FormatterType.Number;
  }
  format(value) {
    return value ? formatNumber(value, this.config.groupDigits, this.config.decimalPrecision) : "";
  }
  parse(inputValue) {
    if ("" === inputValue)
      return { valid: true, value: void 0 };
    const result = parseNumber(inputValue, this.config.decimalPrecision);
    return void 0 === result ? { valid: false } : { valid: true, value: result };
  }
  withConfig(config) {
    return new DefaultNumberFormatter(config);
  }
}
function createFormatter(entity, attribute, config) {
  const attributeType = getAttributeType$1(entity, attribute);
  return void 0 === attributeType ? /* @__PURE__ */ function() {
    const formatter = { format: (value) => void 0 === value ? "" : String(value), parse: (inputValue) => ({ valid: true, value: inputValue }), withConfig: () => formatter, getFormatPlaceholder: () => {
    } };
    return formatter;
  }() : "Enum" === attributeType ? new DefaultEnumFormatter(getAttributeEnumerationType(entity, attribute)) : createNonEnumFormatter(attributeType, config);
}
function createNonEnumFormatter(attributeType, config) {
  switch (attributeType) {
    case "DateTime":
      return new DefaultDateTimeFormatter(config.dateFormat ?? { type: "date" });
    case "Integer":
    case "Long":
    case "Decimal":
      return new DefaultNumberFormatter(config.numberFormat ?? { groupDigits: false });
    default:
      return /* @__PURE__ */ function(attributeType2) {
        const formatter = { format: (value) => formatValue(value, attributeType2), parse: (inputValue) => {
          const value = function(value2, type) {
            switch (type) {
              case "Decimal":
              case "Integer":
              case "Long":
                return parseNumber(value2);
              case "DateTime":
                return parseDate(value2);
              case "Boolean":
                return value2 === translate("mxui.common", "true");
              default:
                return value2;
            }
          }(inputValue, attributeType2);
          return void 0 !== value ? { valid: true, value } : { valid: false };
        }, withConfig: () => formatter, getFormatPlaceholder: () => {
        } };
        return formatter;
      }(attributeType);
  }
}

function useParsingValidationMessage(store, config) {
  const args = useValidationArguments(store, config.validation);
  return (value, object, customValidator) => {
    const attributeType = object.getAttributeType(config.attribute);
    return "unparsed" === value.state ? function(value2, attribute, type) {
      switch (type) {
        case "Enum":
        case "Boolean":
        case "ObjectReference":
        case "ObjectReferenceSet":
          return translate("mendix.lib.Validations", "invalid_attribute", value2, attribute);
        case "DateTime":
          return translate("mendix.lib.Validations", "invalid_date");
        case "Integer":
        case "Long":
        case "Decimal":
          return translate("mendix.lib.Validations", "invalid_number");
        default:
          throw new Error(`Attribute type ${type} is not supported.`);
      }
    }(value.value, config.attribute, attributeType) : validateValue(value.value, value.value, attributeType, customValidator, config, args);
  };
}
function useValidationMessage(store, config, transform) {
  const args = useValidationArguments(store, config.validation);
  return (value, object, customValidator) => {
    const attributeType = object.getAttributeType(config.attribute);
    return validateValue(value, transform(value), attributeType, customValidator, config, args);
  };
}
function useValidationArguments(store, validationConfig) {
  return validationConfig ? mapValues(validationConfig.expression.args, (arg) => {
    const [arg$] = store.useSlot(arg.widget, arg.source);
    return () => {
      const argValue = readUntracked(arg$);
      return argValue && "object" == typeof argValue && "status" in argValue ? getOrElseL(argValue, void 0) : argValue;
    };
  }) : {};
}
function validateValue(value, attributeValue, attributeType, customValidator, config, args) {
  return function(value2, type) {
    const clientValue = attributeToClientValue(value2), validationResult = validate(clientValue, type);
    if (validationResult === validation.OK)
      return;
    return translate("mendix.lib.Validations", ensure(validationCodeMap[validationResult]));
  }(attributeValue, attributeType) ?? (customValidator ? customValidator(value) : void 0) ?? (config.validation ? function(value2, type, args2, validationConfig) {
    const isValid = evaluateFormExpression(validationConfig.expression, { ...args2, value: () => {
      switch (type) {
        case "ObjectReference":
        default:
          return value2;
        case "ObjectReferenceSet":
          return crash();
      }
    } });
    if (!isValid)
      return validationConfig.message || translate("mendix.lib.Validations", "required_field");
    return;
  }(attributeValue, attributeType, args, config.validation) : void 0);
}
const validationCodeMap = { [validation.NOT_INTEGER]: "invalid_number", [validation.RANGE_INTEGER]: "range_integer", [validation.RANGE_LONG]: "range_long", [validation.RANGE_DECIMAL]: "range_decimal" };
function getValidation$(submittedValue$, getValidValue, getValidationMessage, getCustomValidator, config, store, widgetId, description) {
  const [invalidValue$, setInvalidValue] = useValue(`Invalid value of ${description}`, void 0), previousSubmittedValue$ = getPreviousValue$(submittedValue$), serverValidation$ = fromComputation$(`Server validation of ${description}`, () => {
    const submittedValue = submittedValue$.dependOn();
    return "available" !== submittedValue.status ? [void 0] : dependOnSubscription({ guid: submittedValue.value.object.getGuid(), attr: config.attribute, val: true, tag: `Validation of ${description}` }, store);
  }), previousServerValidation$ = getPreviousValue$(serverValidation$), [validationRequest$] = store.useSlot(pageScope, "validationRequest"), previousValidationRequest$ = getPreviousValue$(validationRequest$), [localValidation$, setLocalValidation] = useValue(`Local value validation of ${description}`, void 0), [, setIsInvalid] = store.useSlot(widgetId, "isInvalid"), validation$ = withSideEffect$(`Published validation of ${description}`, fromComputation$(`Validation of ${description}`, () => {
    const submittedValue = submittedValue$.dependOn(), previousSubmittedValue = previousSubmittedValue$.dependOn(), serverValidation = serverValidation$.dependOn(), previousServerValidation = previousServerValidation$.dependOn(), validationRequest = validationRequest$.dependOn(), previousValidationRequest = previousValidationRequest$.dependOn(), localValidation = localValidation$.dependOn();
    if (submittedValue === previousSubmittedValue)
      return serverValidation !== previousServerValidation ? serverValidation[0] : validationRequest !== previousValidationRequest ? function() {
        const value = readUntracked(submittedValue$);
        if ("available" !== value.status)
          return;
        const currentValue = readUntracked(invalidValue$) ?? getValidValue(value.value);
        try {
          return getValidationMessage(currentValue, value.value.object, getCustomValidator());
        } catch (e) {
          return void function(widgetId2, e2) {
            handleError(new Error(`An error occurred while validating current value in ${toFriendlyId(widgetId2)}: ${e2 instanceof Error ? e2.message : e2}`));
          }(widgetId, e);
        }
      }() : localValidation;
  }), (validationResult) => setIsInvalid(void 0 !== validationResult));
  return { validation$, invalidValue$, setValidation: function(localValidation, invalidValue) {
    setLocalValidation(localValidation), setInvalidValue(invalidValue);
  } };
}
const logger$8 = LogManager.get().getLogger(), AttributeProperty = asProperty((config, store, widgetId, propertyPath) => {
  const description = `${widgetId}/${propertyPath}`, defaultFormatter = createFormatter(config.entity, config.attribute, config.formatting ?? {}), universe = createUniverse(config.entity, config.attribute), [formatter$, setFormatter] = useValue(`Formatter for ${description}`, defaultFormatter);
  let customValidator;
  const submittedValue$ = getSubmittedValue$(config, store, widgetId, propertyPath, description), previousSubmittedValue$ = getPreviousValue$(submittedValue$), getValidationMessage = useParsingValidationMessage(store, config), { validation$, invalidValue$, setValidation } = getValidation$(submittedValue$, (value) => ({ state: "parsed", value: value.attribute }), getValidationMessage, () => customValidator, config, store, widgetId, description), onChangeArguments$ = getActionArguments$(config.onChange.argMap, store, widgetId), [form$] = store.useSlot(pageScope, "form"), value$ = fromComputation$(`Editable value of ${description}`, () => {
    const submittedValue = submittedValue$.dependOn();
    previousSubmittedValue$.dependOn() !== submittedValue && runActionInComputed(() => {
      setValidation(void 0, void 0);
    });
    const validation2 = validation$.dependOn(), invalidValue = invalidValue$.dependOn(), formatter = formatter$.dependOn(), value = "available" !== submittedValue.status || void 0 !== invalidValue && "unparsed" === invalidValue.state ? void 0 : void 0 !== invalidValue ? invalidValue.value : submittedValue.value.attribute, displayValue = "available" !== submittedValue.status ? "" : void 0 !== invalidValue && "unparsed" === invalidValue.state ? invalidValue.value : formatter.format(void 0 !== invalidValue ? invalidValue.value : submittedValue.value.attribute);
    return { status: submittedValue.status, value, displayValue, readOnly: "available" !== submittedValue.status || submittedValue.value.readOnly, validation: validation2, formatter, universe, isList: false, setValidator: (newCustomValidator) => {
      customValidator = newCustomValidator;
    }, setValue: action((newValue) => "available" !== submittedValue.status ? noDataAvailableError(config, widgetId) : submittedValue.value.readOnly ? noWriteAccessError(config, widgetId) : setValue({ state: "parsed", value: newValue }, submittedValue.value)), setTextValue: action((newValue) => "available" !== submittedValue.status ? noDataAvailableError(config, widgetId) : submittedValue.value.readOnly ? noWriteAccessError(config, widgetId) : setValue({ state: "unparsed", value: newValue }, submittedValue.value)), setFormatter: action((f) => setFormatter(f ?? defaultFormatter)) };
  });
  return asReloadable$(value$, (v) => ({ value: v.value, displayValue: v.displayValue }));
  function setValue(newValue, newSubmittedValue) {
    if ("unparsed" === newValue.state) {
      const currentValue = newSubmittedValue.attribute, formatterInstance = readUntracked(formatter$), parseResult = formatterInstance.type === FormatterType.DateTime && currentValue instanceof Date ? formatterInstance.parse(newValue.value, currentValue) : formatterInstance.parse(newValue.value);
      newValue = parseResult.valid ? { state: "parsed", value: parseResult.value } : newValue;
    } else
      assertIsAttributeValue(newValue.value, config.entity, config.attribute);
    try {
      const object = newSubmittedValue.object, newValidation = getValidationMessage(newValue, object, customValidator);
      if (void 0 !== newValidation)
        setValidation(newValidation, newValue);
      else {
        const oldValue = object.get2(config.attribute);
        comparer.structural(oldValue, newValue.value) ? setValidation(void 0, void 0) : (object.set2(config.attribute, newValue.value), raiseOnChange(onChangeArguments$, form$, config.onChange, widgetId));
      }
    } catch (e) {
      !function(widgetId2, e2) {
        handleError(new Error(`An error occurred while validating new value set by ${toFriendlyId(widgetId2)}: ${e2 instanceof Error ? e2.message : e2}`));
      }(widgetId, e);
    }
  }
});
function raiseOnChange(onChangeArguments$, form$, onChange, widgetId) {
  const parameters = readUntracked(onChangeArguments$), currentForm = ensure(readUntracked(form$))[0];
  setTimeout(() => {
    executeAction(onChange, { abortOnClientValidations: true, abortOnServerValidations: false, widgetIsValid: true, currentForm }, mapValues(parameters, (v) => getOrElseL(v, void 0)), void 0, (e) => function(widgetId2, e2) {
      e2 instanceof ValidationError || handleError(new Error(`An error occurred while executing On change at ${toFriendlyId(widgetId2)}: ${e2.message}`));
    }(widgetId, e));
  }, 0);
}
function getSubmittedValue$(config, store, widgetId, propertyPath, description) {
  const [subtreeReadonly$] = store.useSlot(pageScope, "subtreeReadonly"), isEditable$ = config.isEditable ? getFormExpressionResultFromStore$(`Conditional editability of ${toFriendlyId(widgetId)}`, config.isEditable, store) : fromConstant$(available(true)), rootObject$ = getSubscribedObjectState$(store, config.scope), object$ = config.path ? getObjectByPath$(rootObject$, config.path, store) : rootObject$, attribute$ = getAttribute$(object$, config.attribute, store), submittedValue$ = fromComputation$(`Submitted value of ${description}`, () => {
    const readOnlyState = subtreeReadonly$.dependOn() ?? false, mxObject = object$.dependOn();
    return flatMapL(attribute$.dependOn(), (attribute) => attribute.access === Access.None ? (function(config2, widgetId2) {
      logger$8.debug(`No access to attribute "${config2.attribute}" of entity "${config2.entity}" in widget ${toFriendlyId(widgetId2)}.`);
    }(config, widgetId), unavailable()) : mapL(isEditable$.dependOn(), (isEditable) => ({ object: getOrCrashL(mxObject), attribute: attribute.value, readOnly: attribute.access === Access.Read || readOnlyState || !isEditable })));
  }), [, setEditedObject] = store.useSlot(`${widgetId}.${propertyPath}`, "editableObject");
  return withSideEffect$(`Published editable object of ${description}`, submittedValue$, (submittedValue) => setEditedObject(flatMapL(submittedValue, (sv) => sv.readOnly ? unavailable() : available(sv.object))));
}
function createUniverse(entity, attribute) {
  switch (getAttributeType$1(entity, attribute)) {
    case "Enum":
      return getEnumerationOptions(getAttributeEnumerationType(entity, attribute));
    case "Boolean":
      return [true, false];
    default:
      return;
  }
}
function noDataAvailableError(config, widgetId) {
  logger$8.debug(`Widget ${toFriendlyId(widgetId)} is attempting to change the value of attribute "${config.attribute}" of entity "${config.entity}" which is not available.`);
}
function noWriteAccessError(config, widgetId) {
  logger$8.debug(`Widget ${toFriendlyId(widgetId)} is attempting to change the value of attribute "${config.attribute}" of entity "${config.entity}" which is not writable.`);
}

const DerivedUniqueIdProperty = asProperty((config, store) => {
  const [uniqueId$, setUniqueId] = store.useSlot(config.widgetId, "uniqueId");
  return fromComputation$(`Derived unique id for ${config.widgetId}`, () => {
    const existingId = readUntracked(uniqueId$);
    if (existingId)
      return existingId;
    const value = newId(config.widgetId);
    return runActionInComputed(() => setUniqueId(value)), value;
  });
});

const ExpressionProperty = asProperty((config, store, widgetId) => {
  const [form$] = store.useSlot(pageScope, "form"), pageTitle$ = fromComputation$(`Form page title of ${widgetId}`, () => ensure(form$.dependOn())[0].getTitle());
  return asDynamicValue$(getFormExpressionResultFromStore$(`Value of ${toFriendlyId(widgetId)}`, config.expression, store, { pageTitle: pageTitle$ }));
});

const TextProperty = (config) => asResult(dynAvailable(config.value));

const ValidationProperty = asProperty(({ inputWidgetId }, store, widgetId) => {
  const [isInvalid$] = store.useSlot(inputWidgetId, "isInvalid");
  return fromComputation$(`Validity of ${inputWidgetId} (used by ${widgetId})`, () => dynAvailable(Boolean(isInvalid$.dependOn())));
});

function Icon({ icon, altText }) {
  if (!icon)
    return null;
  switch (icon.type) {
    case "image":
      return jsxRuntimeExports.jsx("img", { src: icon.iconUrl, alt: altText ?? "" });
    case "glyph":
      return jsxRuntimeExports.jsx("span", { className: `glyphicon ${icon.iconClass}`, ...altText ? { "aria-label": altText } : { "aria-hidden": true } });
    case "icon":
      return jsxRuntimeExports.jsx("span", { className: icon.iconClass, ...altText ? { "aria-label": altText } : { "aria-hidden": true } });
  }
}

class ActionButton extends reactExports.Component {
  constructor() {
    super(...arguments), this.state = this.deriveState(this.props, { disabled: true, showDisabled: false }), this.onClickHandler = this.onClick.bind(this), this.onKeyDownHandler = this.onKeyDown.bind(this);
  }
  UNSAFE_componentWillReceiveProps(nextProps) {
    this.setState((curState) => this.deriveState(nextProps, curState));
  }
  componentDidMount() {
    this.actionButtonRef?.addEventListener("click", this.onClickHandler), this.context?.registerHandler(this.props.buttonId, () => {
      this.props.action && !this.state.disabled && this.props.action.execute();
    });
  }
  componentWillUnmount() {
    this.actionButtonRef?.removeEventListener("click", this.onClickHandler), window.clearTimeout(this.disableTimeout), this.context?.unregisterHandler(this.props.buttonId);
  }
  onClick(e) {
    this.suppressEvent(e), "button" === this.props.renderType && this.actionButtonRef.focus(), this.executeAction();
  }
  executeAction() {
    this.props.action && !this.state.disabled && this.props.action.execute();
  }
  onKeyDown(e) {
    "Enter" !== e.key && " " !== e.key || (this.suppressEvent(e), this.executeAction());
  }
  suppressEvent(e) {
    e.preventDefault(), this.props.action && e.stopPropagation();
  }
  render() {
    return "button" === this.props.renderType ? this.renderButton() : this.renderLink();
  }
  renderButton() {
    const ariaDisabled = this.state.showDisabled ? { "aria-disabled": true } : {};
    return jsxRuntimeExports.jsxs("button", { type: "button", className: classNames("btn", "mx-button", this.props.class, this.props.buttonClass), style: this.props.style, title: this.props.tooltip.value, "aria-label": this.getAriaLabel(), tabIndex: this.props.tabIndex, disabled: !!this.props.action && !this.props.action.canExecute, "data-button-id": this.props.buttonId, "data-disabled": this.state.disabled, ref: (e) => this.actionButtonRef = e ?? void 0, ...ariaDisabled, children: [this.renderIcon(), " ", this.props.caption.value] });
  }
  renderLink() {
    const ariaDisabled = this.state.showDisabled ? { "aria-disabled": true } : {};
    return jsxRuntimeExports.jsxs("a", { className: classNames("mx-link", this.props.class), style: this.props.style, href: "#", role: this.props.role, title: this.props.tooltip.value, "aria-label": this.getAriaLabel(), tabIndex: !this.props.action || this.props.action.canExecute ? this.props.tabIndex : -1, onKeyDown: this.onKeyDownHandler, "data-button-id": this.props.buttonId, "data-disabled": this.state.disabled, ref: (e) => this.actionButtonRef = e ?? void 0, ...ariaDisabled, children: [this.renderIcon(), " ", this.props.caption.value] });
  }
  getAriaLabel() {
    if (!this.props.caption.value && this.props.tooltip.value)
      return this.props.tooltip.value;
  }
  renderIcon() {
    return this.props.icon && jsxRuntimeExports.jsx(Icon, { icon: this.props.icon.value });
  }
  deriveState(props, state) {
    const actionValue = props.action;
    return actionValue && !actionValue.canExecute ? { disabled: true, showDisabled: true } : actionValue?.isExecuting && actionValue.disabledDuringExecution ? (void 0 === this.disableTimeout && (this.disableTimeout = window.setTimeout(() => {
      this.setState({ showDisabled: true }), this.disableTimeout = void 0;
    }, 1e3)), { disabled: true, showDisabled: state.showDisabled }) : (window.clearTimeout(this.disableTimeout), this.disableTimeout = void 0, { disabled: false, showDisabled: false });
  }
}
ActionButton.contextType = ActionContext;

const ConditionalVisibilityWrapper = (props) => props.visible.value ? props.contents : null;

var getRect = function(_ref) {
  var top = _ref.top, right = _ref.right, bottom = _ref.bottom, left = _ref.left;
  return { top, right, bottom, left, width: right - left, height: bottom - top, x: left, y: top, center: { x: (right + left) / 2, y: (bottom + top) / 2 } };
}, shrink = function(target, shrinkBy) {
  return { top: target.top + shrinkBy.top, left: target.left + shrinkBy.left, bottom: target.bottom - shrinkBy.bottom, right: target.right - shrinkBy.right };
}, noSpacing = { top: 0, right: 0, bottom: 0, left: 0 }, parse = function(raw) {
  var value = raw.slice(0, -2);
  if ("px" !== raw.slice(-2))
    return 0;
  var result = Number(value);
  return isNaN(result) && function(condition, message) {
    throw new Error("Invariant failed");
  }(), result;
}, calculateBox = function(borderBox, styles) {
  return function(_ref2) {
    var target, expandBy, borderBox2 = _ref2.borderBox, _ref2$margin = _ref2.margin, margin = void 0 === _ref2$margin ? noSpacing : _ref2$margin, _ref2$border = _ref2.border, border = void 0 === _ref2$border ? noSpacing : _ref2$border, _ref2$padding = _ref2.padding, padding = void 0 === _ref2$padding ? noSpacing : _ref2$padding, marginBox = getRect((expandBy = margin, { top: (target = borderBox2).top - expandBy.top, left: target.left - expandBy.left, bottom: target.bottom + expandBy.bottom, right: target.right + expandBy.right })), paddingBox = getRect(shrink(borderBox2, border)), contentBox = getRect(shrink(paddingBox, padding));
    return { marginBox, borderBox: getRect(borderBox2), paddingBox, contentBox, margin, border, padding };
  }({ borderBox, margin: { top: parse(styles.marginTop), right: parse(styles.marginRight), bottom: parse(styles.marginBottom), left: parse(styles.marginLeft) }, padding: { top: parse(styles.paddingTop), right: parse(styles.paddingRight), bottom: parse(styles.paddingBottom), left: parse(styles.paddingLeft) }, border: { top: parse(styles.borderTopWidth), right: parse(styles.borderRightWidth), bottom: parse(styles.borderBottomWidth), left: parse(styles.borderLeftWidth) } });
}, getBox = function(el) {
  var borderBox = el.getBoundingClientRect(), styles = window.getComputedStyle(el);
  return calculateBox(borderBox, styles);
};
function useLegacyResize(nodeRef, adjustHeight, additionalResizeObservers = []) {
  useEnsureConstantValues(nodeRef, adjustHeight);
  const observersRef = reactExports.useRef([]);
  function startObservingResize(resizeObservers, fireImmediately) {
    const resizeContainer = function(containerNode) {
      for (; containerNode?.classList.contains("mx-placeholder") || containerNode?.getAttribute("data-widget-wrapper"); )
        containerNode = containerNode.parentElement;
      if (!containerNode)
        return;
      return 1 === resizableContainers.filter((k) => containerNode.classList.contains(k)).length ? containerNode : void 0;
    }(nodeRef.current?.parentElement ?? null);
    if (!resizeContainer)
      return;
    const dimensionSource = resizeContainer.classList.contains("mx-tabcontainer-pane") ? ensure(resizeContainer.parentElement) : resizeContainer, onResize = () => {
      nodeRef.current && adjustHeight(function(containerNode, dimensionSource2) {
        return "auto" !== dimensionSource2.style.height && 1 === getChildrenCount(containerNode);
      }(resizeContainer, dimensionSource) ? dimensionSource : void 0);
    };
    dimensionSource !== resizeContainer ? (createObserver(observersRef, dimensionSource, { attributes: true, attributeFilter: ["style"] }, onResize), createObserver(observersRef, resizeContainer, { childList: true }, onResize)) : createObserver(observersRef, resizeContainer, { attributes: true, attributeFilter: ["style"], childList: true }, onResize), resizeObservers.forEach(({ node, options }) => {
      node.current && createObserver(observersRef, node.current, options, onResize);
    }), fireImmediately && onResize();
  }
  reactExports.useEffect(() => () => observersRef.current.forEach((o) => o.disconnect()), []), reactExports.useEffect(() => {
    const widgetNode = (domNode = ensure(nodeRef.current), domNode.parentElement?.getAttribute("data-widget-wrapper") ? domNode.parentElement : domNode);
    var domNode;
    const incubatorParent = function(widgetNode2) {
      return widgetNode2?.parentElement?.classList.contains("mx-placeholder") && widgetNode2.parentElement.parentElement?.classList.contains("mx-incubator") ? widgetNode2.parentElement.parentElement : void 0;
    }(widgetNode);
    if (incubatorParent) {
      const hatchingObserver = createObserver(observersRef, incubatorParent, { childList: true }, (entries) => {
        entries.forEach((entry) => {
          Array.from(entry.removedNodes).includes(widgetNode.parentElement) && (hatchingObserver.disconnect(), startObservingResize(additionalResizeObservers, true));
        });
      });
    } else
      startObservingResize(additionalResizeObservers, false);
  }, []);
}
function getChildrenCount(containerNode) {
  return Array.from(containerNode.children).reduce((acc, currentChild) => acc + (currentChild.classList.contains("mx-placeholder") ? getChildrenCount(currentChild) : 1), 0);
}
const resizableContainers = ["mx-window-body", "mx-page", "mx-dataview-content", "mx-scrollcontainer-wrapper", "mx-tabcontainer-pane"];
function createObserver(observersRef, target, options, callback) {
  const observer = new MutationObserver(callback);
  return observer.observe(target, options), observersRef.current.push(observer), observer;
}

const DataView$1 = (props) => {
  const dvNode = reactExports.useRef(null), controlsNode = reactExports.useRef(null), contentNode = reactExports.useRef(null);
  return useLegacyResize(dvNode, reactExports.useCallback(function(container) {
    const content = ensure(contentNode.current);
    if (!container)
      return content.style.height = "auto", void (content.style.overflow = "");
    const parentBox = getBox(container), dataView = getBox(dvNode.current), remainder = parentBox.contentBox.height - (dataView.marginBox.height - dataView.contentBox.height) - (props.footer ? getBox(controlsNode.current).marginBox.height : 0);
    content.style.height = `${remainder}px`, content.style.overflow = "auto";
  }, [dvNode, controlsNode, contentNode]), [{ node: controlsNode, options: { childList: true, subtree: true, characterData: true } }]), jsxRuntimeExports.jsxs("div", { className: classNames("mx-dataview", props.class), style: props.style, "data-focusindex": props.tabIndex, ref: dvNode, children: [jsxRuntimeExports.jsx("div", { className: "mx-dataview-content", ref: contentNode, children: props.body }), props.emptyMessage.value && "unavailable" === props.object.status && jsxRuntimeExports.jsx("div", { className: "mx-dataview-message", children: jsxRuntimeExports.jsx("div", { children: jsxRuntimeExports.jsx("p", { children: props.emptyMessage.value }) }) }), props.footer && jsxRuntimeExports.jsx("div", { className: "mx-dataview-controls", style: props.hideFooter ? { display: "none" } : {}, ref: controlsNode, children: props.footer })] });
};

const hasCaption = (props) => void 0 !== props.caption, FormGroup = (props) => jsxRuntimeExports.jsxs("div", { className: classNames(props.class, "form-group", { "has-error": props.hasError.value, "no-columns": "vertical" === props.orientation }), style: props.style, children: [hasCaption(props) && jsxRuntimeExports.jsx("label", { className: classNames("control-label", { [`col-sm-${props.width}`]: "horizontal" === props.orientation }), htmlFor: props.labelFor, id: props.labelFor && props.labelFor + "-label", children: props.caption.value }), "horizontal" === props.orientation ? jsxRuntimeExports.jsx("div", { className: classNames("col-sm-" + (12 - props.width), { [`col-sm-offset-${props.width}`]: !hasCaption(props) }), children: props.control }) : props.control] });

function debounce(func, timeout) {
  let timeoutId;
  return (...args) => {
    clearTimeout(timeoutId), timeoutId = window.setTimeout(function() {
      timeoutId = void 0, func(...args);
    }, timeout);
  };
}

const Alert = (props) => props.validation ? jsxRuntimeExports.jsx("div", { id: props.id, className: "alert alert-danger mx-validation-message", role: "alert", children: props.validation }) : null;

const getValidationAriaProps = (validation, id) => validation ? { "aria-invalid": true, "aria-describedby": `${id}-error` } : void 0, getAriaLabelProps = (value) => value ? { "aria-label": value } : {};

var e, module$1, exports, reactTextMask = { exports: {} }, ReactTextMask = getDefaultExportFromCjs$1(reactTextMask.exports = (e = t, function(e2) {
  function t(n) {
    if (r[n])
      return r[n].exports;
    var o = r[n] = { exports: {}, id: n, loaded: false };
    return e2[n].call(o.exports, o, o.exports, t), o.loaded = true, o.exports;
  }
  var r = {};
  return t.m = e2, t.c = r, t.p = "", t(0);
}([function(e2, t, r) {
  function n(e3) {
    return e3 && e3.__esModule ? e3 : { default: e3 };
  }
  function o(e3, t2) {
    var r2 = {};
    for (var n2 in e3)
      t2.indexOf(n2) >= 0 || Object.prototype.hasOwnProperty.call(e3, n2) && (r2[n2] = e3[n2]);
    return r2;
  }
  function i(e3, t2) {
    if (!(e3 instanceof t2))
      throw new TypeError("Cannot call a class as a function");
  }
  function a(e3, t2) {
    if (!e3)
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return !t2 || "object" != typeof t2 && "function" != typeof t2 ? e3 : t2;
  }
  function u(e3, t2) {
    if ("function" != typeof t2 && null !== t2)
      throw new TypeError("Super expression must either be null or a function, not " + typeof t2);
    e3.prototype = Object.create(t2 && t2.prototype, { constructor: { value: e3, enumerable: false, writable: true, configurable: true } }), t2 && (Object.setPrototypeOf ? Object.setPrototypeOf(e3, t2) : e3.__proto__ = t2);
  }
  Object.defineProperty(t, "__esModule", { value: true }), t.conformToMask = void 0;
  var s = Object.assign || function(e3) {
    for (var t2 = 1; t2 < arguments.length; t2++) {
      var r2 = arguments[t2];
      for (var n2 in r2)
        Object.prototype.hasOwnProperty.call(r2, n2) && (e3[n2] = r2[n2]);
    }
    return e3;
  }, l = /* @__PURE__ */ function() {
    function e3(e4, t2) {
      for (var r2 = 0; r2 < t2.length; r2++) {
        var n2 = t2[r2];
        n2.enumerable = n2.enumerable || false, n2.configurable = true, "value" in n2 && (n2.writable = true), Object.defineProperty(e4, n2.key, n2);
      }
    }
    return function(t2, r2, n2) {
      return r2 && e3(t2.prototype, r2), n2 && e3(t2, n2), t2;
    };
  }(), f = r(3);
  Object.defineProperty(t, "conformToMask", { enumerable: true, get: function() {
    return n(f).default;
  } });
  var p = n(r(11)), h = n(r(9)), y = n(r(5)), m = r(2), b = function(e3) {
    function t2() {
      var e4;
      i(this, t2);
      for (var r2 = arguments.length, n2 = Array(r2), o2 = 0; o2 < r2; o2++)
        n2[o2] = arguments[o2];
      var u2 = a(this, (e4 = t2.__proto__ || Object.getPrototypeOf(t2)).call.apply(e4, [this].concat(n2)));
      return u2.setRef = u2.setRef.bind(u2), u2.onBlur = u2.onBlur.bind(u2), u2.onChange = u2.onChange.bind(u2), u2;
    }
    return u(t2, e3), l(t2, [{ key: "setRef", value: function(e4) {
      this.inputElement = e4;
    } }, { key: "initTextMask", value: function() {
      var e4 = this.props, t3 = this.props.value;
      this.textMaskInputElement = (0, y.default)(s({ inputElement: this.inputElement }, e4)), this.textMaskInputElement.update(t3);
    } }, { key: "componentDidMount", value: function() {
      this.initTextMask();
    } }, { key: "componentDidUpdate", value: function(e4) {
      var t3 = this.props, r2 = t3.value, n2 = t3.pipe, o2 = t3.mask, s2 = { guide: t3.guide, placeholderChar: t3.placeholderChar, showMask: t3.showMask }, l2 = "function" == typeof n2 && "function" == typeof e4.pipe ? n2.toString() !== e4.pipe.toString() : (0, m.isNil)(n2) && !(0, m.isNil)(e4.pipe) || !(0, m.isNil)(n2) && (0, m.isNil)(e4.pipe), f2 = o2.toString() !== e4.mask.toString(), c = Object.keys(s2).some(function(t4) {
        return s2[t4] !== e4[t4];
      }) || f2 || l2;
      (r2 !== this.inputElement.value || c) && this.initTextMask();
    } }, { key: "render", value: function() {
      var t3 = this.props, e4 = t3.render, r2 = o(t3, ["render"]);
      return delete r2.mask, delete r2.guide, delete r2.pipe, delete r2.placeholderChar, delete r2.keepCharPositions, delete r2.value, delete r2.onBlur, delete r2.onChange, delete r2.showMask, e4(this.setRef, s({ onBlur: this.onBlur, onChange: this.onChange, defaultValue: this.props.value }, r2));
    } }, { key: "onChange", value: function(e4) {
      this.textMaskInputElement.update(), "function" == typeof this.props.onChange && this.props.onChange(e4);
    } }, { key: "onBlur", value: function(e4) {
      "function" == typeof this.props.onBlur && this.props.onBlur(e4);
    } }]), t2;
  }(p.default.PureComponent);
  t.default = b, b.propTypes = { mask: h.default.oneOfType([h.default.array, h.default.func, h.default.bool, h.default.shape({ mask: h.default.oneOfType([h.default.array, h.default.func]), pipe: h.default.func })]).isRequired, guide: h.default.bool, value: h.default.oneOfType([h.default.string, h.default.number]), pipe: h.default.func, placeholderChar: h.default.string, keepCharPositions: h.default.bool, showMask: h.default.bool }, b.defaultProps = { render: function(e3, t2) {
    return p.default.createElement("input", s({ ref: e3 }, t2));
  } };
}, function(e2, t) {
  Object.defineProperty(t, "__esModule", { value: true }), t.placeholderChar = "_", t.strFunction = "function";
}, function(e2, t, r) {
  function n() {
    var e3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : f, t2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : l.placeholderChar;
    if (!o(e3))
      throw new Error("Text-mask:convertMaskToPlaceholder; The mask property must be an array.");
    if (-1 !== e3.indexOf(t2))
      throw new Error("Placeholder character must not be used as part of the mask. Please specify a character that is not present in your mask as your placeholder character.\n\nThe placeholder character that was received is: " + JSON.stringify(t2) + "\n\nThe mask that was received is: " + JSON.stringify(e3));
    return e3.map(function(e4) {
      return e4 instanceof RegExp ? t2 : e4;
    }).join("");
  }
  function o(e3) {
    return Array.isArray && Array.isArray(e3) || e3 instanceof Array;
  }
  function i(e3) {
    return "string" == typeof e3 || e3 instanceof String;
  }
  function a(e3) {
    return "number" == typeof e3 && void 0 === e3.length && !isNaN(e3);
  }
  function u(e3) {
    return null == e3;
  }
  function s(e3) {
    for (var t2 = [], r2 = void 0; -1 !== (r2 = e3.indexOf(c)); )
      t2.push(r2), e3.splice(r2, 1);
    return { maskWithoutCaretTraps: e3, indexes: t2 };
  }
  Object.defineProperty(t, "__esModule", { value: true }), t.convertMaskToPlaceholder = n, t.isArray = o, t.isString = i, t.isNumber = a, t.isNil = u, t.processCaretTraps = s;
  var l = r(1), f = [], c = "[]";
}, function(e2, t, r) {
  function n() {
    var e3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : s, t2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : u, r2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
    if (!(0, i.isArray)(t2)) {
      if ((void 0 === t2 ? "undefined" : o(t2)) !== a.strFunction)
        throw new Error("Text-mask:conformToMask; The mask property must be an array.");
      t2 = t2(e3, r2), t2 = (0, i.processCaretTraps)(t2).maskWithoutCaretTraps;
    }
    var n2 = r2.guide, l = void 0 === n2 || n2, f = r2.previousConformedValue, c = void 0 === f ? s : f, p = r2.placeholderChar, d = void 0 === p ? a.placeholderChar : p, h = r2.placeholder, v = void 0 === h ? (0, i.convertMaskToPlaceholder)(t2, d) : h, y = r2.currentCaretPosition, m = r2.keepCharPositions, b = false === l && void 0 !== c, g = e3.length, k = c.length, C = v.length, O = t2.length, T = g - k, P = T > 0, x = y + (P ? -T : 0), w = x + Math.abs(T);
    if (true === m && !P) {
      for (var S = s, _ = x; _ < w; _++)
        v[_] === d && (S += d);
      e3 = e3.slice(0, x) + S + e3.slice(x, g);
    }
    for (var M = e3.split(s).map(function(e4, t3) {
      return { char: e4, isNew: t3 >= x && t3 < w };
    }), j = g - 1; j >= 0; j--) {
      var E = M[j].char;
      E !== d && E === v[j >= x && k === O ? j - T : j] && M.splice(j, 1);
    }
    var V = s, N = false;
    e:
      for (var A = 0; A < C; A++) {
        var B = v[A];
        if (B === d) {
          if (M.length > 0)
            for (; M.length > 0; ) {
              var I = M.shift(), F = I.char, q = I.isNew;
              if (F === d && true !== b) {
                V += d;
                continue e;
              }
              if (t2[A].test(F)) {
                if (true === m && false !== q && c !== s && false !== l && P) {
                  for (var D = M.length, L = null, W = 0; W < D; W++) {
                    var J = M[W];
                    if (J.char !== d && false === J.isNew)
                      break;
                    if (J.char === d) {
                      L = W;
                      break;
                    }
                  }
                  null !== L ? (V += F, M.splice(L, 1)) : A--;
                } else
                  V += F;
                continue e;
              }
              N = true;
            }
          false === b && (V += v.substr(A, C));
          break;
        }
        V += B;
      }
    if (b && false === P) {
      for (var U = null, H = 0; H < V.length; H++)
        v[H] === d && (U = H);
      V = null !== U ? V.substr(0, U + 1) : s;
    }
    return { conformedValue: V, meta: { someCharsRejected: N } };
  }
  Object.defineProperty(t, "__esModule", { value: true });
  var o = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e3) {
    return typeof e3;
  } : function(e3) {
    return e3 && "function" == typeof Symbol && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : typeof e3;
  };
  t.default = n;
  var i = r(2), a = r(1), u = [], s = "";
}, function(e2, t) {
  function r(e3) {
    var t2 = e3.previousConformedValue, r2 = void 0 === t2 ? o : t2, i = e3.previousPlaceholder, a = void 0 === i ? o : i, u = e3.currentCaretPosition, s = void 0 === u ? 0 : u, l = e3.conformedValue, f = e3.rawValue, c = e3.placeholderChar, p = e3.placeholder, d = e3.indexesOfPipedChars, h = void 0 === d ? n : d, v = e3.caretTrapIndexes, y = void 0 === v ? n : v;
    if (0 === s || !f.length)
      return 0;
    var m = f.length, b = r2.length, g = p.length, k = l.length, C = m - b, O = C > 0;
    if (C > 1 && !O && 0 !== b)
      return s;
    var w = 0, S = void 0, _ = void 0;
    if (!O || r2 !== l && l !== p) {
      var M = l.toLowerCase(), R = f.toLowerCase().substr(0, s).split(o).filter(function(e4) {
        return -1 !== M.indexOf(e4);
      });
      _ = R[R.length - 1];
      var V = a.substr(0, R.length).split(o).filter(function(e4) {
        return e4 !== c;
      }).length, N = p.substr(0, R.length).split(o).filter(function(e4) {
        return e4 !== c;
      }).length, A = N !== V, B = void 0 !== a[R.length - 1] && void 0 !== p[R.length - 2] && a[R.length - 1] !== c && a[R.length - 1] !== p[R.length - 1] && a[R.length - 1] === p[R.length - 2];
      !O && (A || B) && V > 0 && p.indexOf(_) > -1 && void 0 !== f[s] && (S = true, _ = f[s]);
      for (var I = h.map(function(e4) {
        return M[e4];
      }), F = I.filter(function(e4) {
        return e4 === _;
      }).length, q = R.filter(function(e4) {
        return e4 === _;
      }).length, D = p.substr(0, p.indexOf(c)).split(o).filter(function(e4, t3) {
        return e4 === _ && f[t3] !== e4;
      }).length, L = D + q + F + (S ? 1 : 0), W = 0, J = 0; J < k && (w = J + 1, M[J] === _ && W++, !(W >= L)); J++)
        ;
    } else
      w = s - C;
    if (O) {
      for (var H = w, Y = w; Y <= g; Y++)
        if (p[Y] === c && (H = Y), p[Y] === c || -1 !== y.indexOf(Y) || Y === g)
          return H;
    } else if (S) {
      for (var z = w - 1; z >= 0; z--)
        if (l[z] === _ || -1 !== y.indexOf(z) || 0 === z)
          return z;
    } else
      for (var G = w; G >= 0; G--)
        if (p[G - 1] === c || -1 !== y.indexOf(G) || 0 === G)
          return G;
  }
  Object.defineProperty(t, "__esModule", { value: true }), t.default = r;
  var n = [], o = "";
}, function(e2, t, r) {
  function n(e3) {
    return e3 && e3.__esModule ? e3 : { default: e3 };
  }
  function o(e3) {
    var t2 = { previousConformedValue: void 0, previousPlaceholder: void 0 };
    return { state: t2, update: function(r2) {
      var n2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : e3, o2 = n2.inputElement, l = n2.mask, c = n2.guide, y2 = n2.pipe, b2 = n2.placeholderChar, g2 = void 0 === b2 ? h.placeholderChar : b2, k = n2.keepCharPositions, C = void 0 !== k && k, O = n2.showMask, T = void 0 !== O && O;
      if (void 0 === r2 && (r2 = o2.value), r2 !== t2.previousConformedValue) {
        (void 0 === l ? "undefined" : s(l)) === m && void 0 !== l.pipe && void 0 !== l.mask && (y2 = l.pipe, l = l.mask);
        var P = void 0, x = void 0;
        if (l instanceof Array && (P = (0, d.convertMaskToPlaceholder)(l, g2)), false !== l) {
          var w = a(r2), S = o2.selectionEnd, _ = t2.previousConformedValue, M = t2.previousPlaceholder, j = void 0;
          if ((void 0 === l ? "undefined" : s(l)) === h.strFunction) {
            if (false === (x = l(w, { currentCaretPosition: S, previousConformedValue: _, placeholderChar: g2 })))
              return;
            var E = (0, d.processCaretTraps)(x);
            x = E.maskWithoutCaretTraps, j = E.indexes, P = (0, d.convertMaskToPlaceholder)(x, g2);
          } else
            x = l;
          var N = { previousConformedValue: _, guide: c, placeholderChar: g2, pipe: y2, placeholder: P, currentCaretPosition: S, keepCharPositions: C }, B = (0, p.default)(w, x, N).conformedValue, I = (void 0 === y2 ? "undefined" : s(y2)) === h.strFunction, F = {};
          I && (false === (F = y2(B, u({ rawValue: w }, N))) ? F = { value: _, rejected: true } : (0, d.isString)(F) && (F = { value: F }));
          var q = I ? F.value : B, D = (0, f.default)({ previousConformedValue: _, previousPlaceholder: M, conformedValue: q, placeholder: P, rawValue: w, currentCaretPosition: S, placeholderChar: g2, indexesOfPipedChars: F.indexesOfPipedChars, caretTrapIndexes: j }), J = q === P && 0 === D ? T ? P : v : q;
          t2.previousConformedValue = J, t2.previousPlaceholder = P, o2.value !== J && (o2.value = J, i(o2, D));
        }
      }
    } };
  }
  function i(e3, t2) {
    document.activeElement === e3 && (b ? g(function() {
      return e3.setSelectionRange(t2, t2, y);
    }, 0) : e3.setSelectionRange(t2, t2, y));
  }
  function a(e3) {
    if ((0, d.isString)(e3))
      return e3;
    if ((0, d.isNumber)(e3))
      return String(e3);
    if (null == e3)
      return v;
    throw new Error("The 'value' provided to Text Mask needs to be a string or a number. The value received was:\n\n " + JSON.stringify(e3));
  }
  Object.defineProperty(t, "__esModule", { value: true });
  var u = Object.assign || function(e3) {
    for (var t2 = 1; t2 < arguments.length; t2++) {
      var r2 = arguments[t2];
      for (var n2 in r2)
        Object.prototype.hasOwnProperty.call(r2, n2) && (e3[n2] = r2[n2]);
    }
    return e3;
  }, s = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e3) {
    return typeof e3;
  } : function(e3) {
    return e3 && "function" == typeof Symbol && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : typeof e3;
  };
  t.default = o;
  var f = n(r(4)), p = n(r(3)), d = r(2), h = r(1), v = "", y = "none", m = "object", b = "undefined" != typeof navigator && /Android/i.test(navigator.userAgent), g = "undefined" != typeof requestAnimationFrame ? requestAnimationFrame : setTimeout;
}, function(e2, t) {
  function r(e3) {
    return function() {
      return e3;
    };
  }
  var n = function() {
  };
  n.thatReturns = r, n.thatReturnsFalse = r(false), n.thatReturnsTrue = r(true), n.thatReturnsNull = r(null), n.thatReturnsThis = function() {
    return this;
  }, n.thatReturnsArgument = function(e3) {
    return e3;
  }, e2.exports = n;
}, function(e2, t, r) {
  function n(e3, t2, r2, n2, i, a, u, s) {
    if (!e3) {
      var l;
      if (void 0 === t2)
        l = new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");
      else {
        var f = [r2, n2, i, a, u, s], c = 0;
        (l = new Error(t2.replace(/%s/g, function() {
          return f[c++];
        }))).name = "Invariant Violation";
      }
      throw l.framesToPop = 1, l;
    }
  }
  e2.exports = n;
}, function(e2, t, r) {
  var n = r(6), o = r(7), i = r(10);
  e2.exports = function() {
    function e3(e4, t3, r3, n2, a, u) {
      u !== i && o(false, "Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");
    }
    function t2() {
      return e3;
    }
    e3.isRequired = e3;
    var r2 = { array: e3, bool: e3, func: e3, number: e3, object: e3, string: e3, symbol: e3, any: e3, arrayOf: t2, element: e3, instanceOf: t2, node: e3, objectOf: t2, oneOf: t2, oneOfType: t2, shape: t2, exact: t2 };
    return r2.checkPropTypes = n, r2.PropTypes = r2, r2;
  };
}, function(e2, t, r) {
  e2.exports = r(8)();
}, function(e2, t) {
  var r = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
  e2.exports = r;
}, function(t, r) {
  t.exports = e;
}]))), regenerate = { exports: {} };
module$1 = regenerate, exports = regenerate.exports, function(root) {
  var freeExports = exports, freeModule = module$1 && module$1.exports == freeExports && module$1, freeGlobal = "object" == typeof commonjsGlobal$1 && commonjsGlobal$1;
  freeGlobal.global !== freeGlobal && freeGlobal.window !== freeGlobal || (root = freeGlobal);
  var ERRORS_rangeOrder = "A range\u2019s `stop` value must be greater than or equal to the `start` value.", ERRORS_codePointRange = "Invalid code point value. Code points range from U+000000 to U+10FFFF.", regexNull = /\\x00([^0123456789]|$)/g, object = {}, hasOwnProperty = object.hasOwnProperty, forEach = function(array, callback) {
    for (var index = -1, length = array.length; ++index < length; )
      callback(array[index], index);
  }, toString = object.toString, isArray = function(value) {
    return "[object Array]" == toString.call(value);
  }, isNumber = function(value) {
    return "number" == typeof value || "[object Number]" == toString.call(value);
  }, pad = function(number2, totalCharacters) {
    var string = String(number2);
    return string.length < totalCharacters ? ("0000" + string).slice(-totalCharacters) : string;
  }, hex = function(number2) {
    return Number(number2).toString(16).toUpperCase();
  }, slice = [].slice, dataRemove = function(data, codePoint) {
    for (var start, end, index = 0, length = data.length; index < length; ) {
      if (start = data[index], end = data[index + 1], codePoint >= start && codePoint < end)
        return codePoint == start ? end == start + 1 ? (data.splice(index, 2), data) : (data[index] = codePoint + 1, data) : codePoint == end - 1 ? (data[index + 1] = codePoint, data) : (data.splice(index, 2, start, codePoint, codePoint + 1, end), data);
      index += 2;
    }
    return data;
  }, dataRemoveRange = function(data, rangeStart, rangeEnd) {
    if (rangeEnd < rangeStart)
      throw Error(ERRORS_rangeOrder);
    for (var start, end, index = 0; index < data.length; ) {
      if (start = data[index], end = data[index + 1] - 1, start > rangeEnd)
        return data;
      if (rangeStart <= start && rangeEnd >= end)
        data.splice(index, 2);
      else {
        if (rangeStart >= start && rangeEnd < end)
          return rangeStart == start ? (data[index] = rangeEnd + 1, data[index + 1] = end + 1, data) : (data.splice(index, 2, start, rangeStart, rangeEnd + 1, end + 1), data);
        if (rangeStart >= start && rangeStart <= end)
          data[index + 1] = rangeStart;
        else if (rangeEnd >= start && rangeEnd <= end)
          return data[index] = rangeEnd + 1, data;
        index += 2;
      }
    }
    return data;
  }, dataAdd = function(data, codePoint) {
    var start, end, index = 0, lastIndex = null, length = data.length;
    if (codePoint < 0 || codePoint > 1114111)
      throw RangeError(ERRORS_codePointRange);
    for (; index < length; ) {
      if (start = data[index], end = data[index + 1], codePoint >= start && codePoint < end)
        return data;
      if (codePoint == start - 1)
        return data[index] = codePoint, data;
      if (start > codePoint)
        return data.splice(null != lastIndex ? lastIndex + 2 : 0, 0, codePoint, codePoint + 1), data;
      if (codePoint == end)
        return codePoint + 1 == data[index + 2] ? (data.splice(index, 4, start, data[index + 3]), data) : (data[index + 1] = codePoint + 1, data);
      lastIndex = index, index += 2;
    }
    return data.push(codePoint, codePoint + 1), data;
  }, dataAddData = function(dataA, dataB) {
    for (var start, end, index = 0, data = dataA.slice(), length = dataB.length; index < length; )
      data = (start = dataB[index]) == (end = dataB[index + 1] - 1) ? dataAdd(data, start) : dataAddRange(data, start, end), index += 2;
    return data;
  }, dataAddRange = function(data, rangeStart, rangeEnd) {
    if (rangeEnd < rangeStart)
      throw Error(ERRORS_rangeOrder);
    if (rangeStart < 0 || rangeStart > 1114111 || rangeEnd < 0 || rangeEnd > 1114111)
      throw RangeError(ERRORS_codePointRange);
    for (var start, end, index = 0, added = false, length = data.length; index < length; ) {
      if (start = data[index], end = data[index + 1], added) {
        if (start == rangeEnd + 1)
          return data.splice(index - 1, 2), data;
        if (start > rangeEnd)
          return data;
        start >= rangeStart && start <= rangeEnd && (end > rangeStart && end - 1 <= rangeEnd ? (data.splice(index, 2), index -= 2) : (data.splice(index - 1, 2), index -= 2));
      } else {
        if (start == rangeEnd + 1 || start == rangeEnd)
          return data[index] = rangeStart, data;
        if (start > rangeEnd)
          return data.splice(index, 0, rangeStart, rangeEnd + 1), data;
        if (rangeStart >= start && rangeStart < end && rangeEnd + 1 <= end)
          return data;
        rangeStart >= start && rangeStart < end || end == rangeStart ? (data[index + 1] = rangeEnd + 1, added = true) : rangeStart <= start && rangeEnd + 1 >= end && (data[index] = rangeStart, data[index + 1] = rangeEnd + 1, added = true);
      }
      index += 2;
    }
    return added || data.push(rangeStart, rangeEnd + 1), data;
  }, dataContains = function(data, codePoint) {
    var index = 0, length = data.length, start = data[index], end = data[length - 1];
    if (length >= 2 && (codePoint < start || codePoint > end))
      return false;
    for (; index < length; ) {
      if (start = data[index], end = data[index + 1], codePoint >= start && codePoint < end)
        return true;
      index += 2;
    }
    return false;
  }, dataIsEmpty = function(data) {
    return !data.length;
  }, dataIsSingleton = function(data) {
    return 2 == data.length && data[0] + 1 == data[1];
  }, dataToArray = function(data) {
    for (var start, end, index = 0, result = [], length = data.length; index < length; ) {
      for (start = data[index], end = data[index + 1]; start < end; )
        result.push(start), ++start;
      index += 2;
    }
    return result;
  }, floor = Math.floor, highSurrogate = function(codePoint) {
    return parseInt(floor((codePoint - 65536) / 1024) + 55296, 10);
  }, lowSurrogate = function(codePoint) {
    return parseInt((codePoint - 65536) % 1024 + 56320, 10);
  }, stringFromCharCode = String.fromCharCode, codePointToString = function(codePoint) {
    return 9 == codePoint ? "\\t" : 10 == codePoint ? "\\n" : 12 == codePoint ? "\\f" : 13 == codePoint ? "\\r" : 45 == codePoint ? "\\x2D" : 92 == codePoint ? "\\\\" : 36 == codePoint || codePoint >= 40 && codePoint <= 43 || 46 == codePoint || 47 == codePoint || 63 == codePoint || codePoint >= 91 && codePoint <= 94 || codePoint >= 123 && codePoint <= 125 ? "\\" + stringFromCharCode(codePoint) : codePoint >= 32 && codePoint <= 126 ? stringFromCharCode(codePoint) : codePoint <= 255 ? "\\x" + pad(hex(codePoint), 2) : "\\u" + pad(hex(codePoint), 4);
  }, codePointToStringUnicode = function(codePoint) {
    return codePoint <= 65535 ? codePointToString(codePoint) : "\\u{" + codePoint.toString(16).toUpperCase() + "}";
  }, symbolToCodePoint = function(symbol) {
    var length = symbol.length, first = symbol.charCodeAt(0);
    return first >= 55296 && first <= 56319 && length > 1 ? 1024 * (first - 55296) + symbol.charCodeAt(1) - 56320 + 65536 : first;
  }, createBMPCharacterClasses = function(data) {
    var start, end, result = "", index = 0, length = data.length;
    if (dataIsSingleton(data))
      return codePointToString(data[0]);
    for (; index < length; )
      result += (start = data[index]) == (end = data[index + 1] - 1) ? codePointToString(start) : start + 1 == end ? codePointToString(start) + codePointToString(end) : codePointToString(start) + "-" + codePointToString(end), index += 2;
    return "[" + result + "]";
  }, optimizeByLowSurrogates = function(surrogateMappings) {
    if (1 == surrogateMappings.length)
      return surrogateMappings;
    for (var index = -1, innerIndex = -1; ++index < surrogateMappings.length; ) {
      var mapping = surrogateMappings[index], lowSurrogates = mapping[1], lowSurrogateStart = lowSurrogates[0], lowSurrogateEnd = lowSurrogates[1];
      for (innerIndex = index; ++innerIndex < surrogateMappings.length; ) {
        var otherMapping = surrogateMappings[innerIndex], otherLowSurrogates = otherMapping[1], otherLowSurrogateStart = otherLowSurrogates[0], otherLowSurrogateEnd = otherLowSurrogates[1];
        lowSurrogateStart == otherLowSurrogateStart && lowSurrogateEnd == otherLowSurrogateEnd && 2 === otherLowSurrogates.length && (dataIsSingleton(otherMapping[0]) ? mapping[0] = dataAdd(mapping[0], otherMapping[0][0]) : mapping[0] = dataAddRange(mapping[0], otherMapping[0][0], otherMapping[0][1] - 1), surrogateMappings.splice(innerIndex, 1), --innerIndex);
      }
    }
    return surrogateMappings;
  }, surrogateSet = function(data) {
    if (!data.length)
      return [];
    for (var start, end, startHigh, startLow, endHigh, endLow, index = 0, surrogateMappings = [], length = data.length; index < length; ) {
      start = data[index], end = data[index + 1] - 1, startHigh = highSurrogate(start), startLow = lowSurrogate(start), endHigh = highSurrogate(end);
      var endsWithHighestLowSurrogate = 57343 == (endLow = lowSurrogate(end)), complete = false;
      startHigh == endHigh || 56320 == startLow && endsWithHighestLowSurrogate ? (surrogateMappings.push([[startHigh, endHigh + 1], [startLow, endLow + 1]]), complete = true) : surrogateMappings.push([[startHigh, startHigh + 1], [startLow, 57344]]), !complete && startHigh + 1 < endHigh && (endsWithHighestLowSurrogate ? (surrogateMappings.push([[startHigh + 1, endHigh + 1], [56320, endLow + 1]]), complete = true) : surrogateMappings.push([[startHigh + 1, endHigh], [56320, 57344]])), complete || surrogateMappings.push([[endHigh, endHigh + 1], [56320, endLow + 1]]), index += 2;
    }
    return function(surrogateMappings2) {
      for (var mapping, nextMapping, highSurrogates, lowSurrogates, nextHighSurrogates, nextLowSurrogates, result = [], tmpLow = [], addLow = false, index2 = -1, length2 = surrogateMappings2.length; ++index2 < length2; )
        if (mapping = surrogateMappings2[index2], nextMapping = surrogateMappings2[index2 + 1]) {
          for (highSurrogates = mapping[0], lowSurrogates = mapping[1], nextHighSurrogates = nextMapping[0], nextLowSurrogates = nextMapping[1], tmpLow = lowSurrogates; nextHighSurrogates && highSurrogates[0] == nextHighSurrogates[0] && highSurrogates[1] == nextHighSurrogates[1]; )
            tmpLow = dataIsSingleton(nextLowSurrogates) ? dataAdd(tmpLow, nextLowSurrogates[0]) : dataAddRange(tmpLow, nextLowSurrogates[0], nextLowSurrogates[1] - 1), highSurrogates = (mapping = surrogateMappings2[++index2])[0], lowSurrogates = mapping[1], nextHighSurrogates = (nextMapping = surrogateMappings2[index2 + 1]) && nextMapping[0], nextLowSurrogates = nextMapping && nextMapping[1], addLow = true;
          result.push([highSurrogates, addLow ? tmpLow : lowSurrogates]), addLow = false;
        } else
          result.push(mapping);
      return optimizeByLowSurrogates(result);
    }(surrogateMappings);
  }, createCharacterClassesFromData = function(data, bmpOnly, hasUnicodeFlag) {
    if (hasUnicodeFlag)
      return function(data2) {
        var start, end, result2 = "", index = 0, length = data2.length;
        if (dataIsSingleton(data2))
          return codePointToStringUnicode(data2[0]);
        for (; index < length; )
          result2 += (start = data2[index]) == (end = data2[index + 1] - 1) ? codePointToStringUnicode(start) : start + 1 == end ? codePointToStringUnicode(start) + codePointToStringUnicode(end) : codePointToStringUnicode(start) + "-" + codePointToStringUnicode(end), index += 2;
        return "[" + result2 + "]";
      }(data);
    var result = [], parts = function(data2) {
      for (var start, end, loneHighSurrogates2 = [], loneLowSurrogates2 = [], bmp2 = [], astral2 = [], index = 0, length = data2.length; index < length; )
        start = data2[index], end = data2[index + 1] - 1, start < 55296 ? (end < 55296 && bmp2.push(start, end + 1), end >= 55296 && end <= 56319 && (bmp2.push(start, 55296), loneHighSurrogates2.push(55296, end + 1)), end >= 56320 && end <= 57343 && (bmp2.push(start, 55296), loneHighSurrogates2.push(55296, 56320), loneLowSurrogates2.push(56320, end + 1)), end > 57343 && (bmp2.push(start, 55296), loneHighSurrogates2.push(55296, 56320), loneLowSurrogates2.push(56320, 57344), end <= 65535 ? bmp2.push(57344, end + 1) : (bmp2.push(57344, 65536), astral2.push(65536, end + 1)))) : start >= 55296 && start <= 56319 ? (end >= 55296 && end <= 56319 && loneHighSurrogates2.push(start, end + 1), end >= 56320 && end <= 57343 && (loneHighSurrogates2.push(start, 56320), loneLowSurrogates2.push(56320, end + 1)), end > 57343 && (loneHighSurrogates2.push(start, 56320), loneLowSurrogates2.push(56320, 57344), end <= 65535 ? bmp2.push(57344, end + 1) : (bmp2.push(57344, 65536), astral2.push(65536, end + 1)))) : start >= 56320 && start <= 57343 ? (end >= 56320 && end <= 57343 && loneLowSurrogates2.push(start, end + 1), end > 57343 && (loneLowSurrogates2.push(start, 57344), end <= 65535 ? bmp2.push(57344, end + 1) : (bmp2.push(57344, 65536), astral2.push(65536, end + 1)))) : start > 57343 && start <= 65535 ? end <= 65535 ? bmp2.push(start, end + 1) : (bmp2.push(start, 65536), astral2.push(65536, end + 1)) : astral2.push(start, end + 1), index += 2;
      return { loneHighSurrogates: loneHighSurrogates2, loneLowSurrogates: loneLowSurrogates2, bmp: bmp2, astral: astral2 };
    }(data), loneHighSurrogates = parts.loneHighSurrogates, loneLowSurrogates = parts.loneLowSurrogates, bmp = parts.bmp, astral = parts.astral, hasLoneHighSurrogates = !dataIsEmpty(loneHighSurrogates), hasLoneLowSurrogates = !dataIsEmpty(loneLowSurrogates), surrogateMappings = surrogateSet(astral);
    return bmpOnly && (bmp = dataAddData(bmp, loneHighSurrogates), hasLoneHighSurrogates = false, bmp = dataAddData(bmp, loneLowSurrogates), hasLoneLowSurrogates = false), dataIsEmpty(bmp) || result.push(createBMPCharacterClasses(bmp)), surrogateMappings.length && result.push(function(surrogateMappings2) {
      var result2 = [];
      return forEach(surrogateMappings2, function(surrogateMapping) {
        var highSurrogates = surrogateMapping[0], lowSurrogates = surrogateMapping[1];
        result2.push(createBMPCharacterClasses(highSurrogates) + createBMPCharacterClasses(lowSurrogates));
      }), result2.join("|");
    }(surrogateMappings)), hasLoneHighSurrogates && result.push(createBMPCharacterClasses(loneHighSurrogates) + "(?![\\uDC00-\\uDFFF])"), hasLoneLowSurrogates && result.push("(?:[^\\uD800-\\uDBFF]|^)" + createBMPCharacterClasses(loneLowSurrogates)), result.join("|");
  }, regenerate2 = function(value) {
    return arguments.length > 1 && (value = slice.call(arguments)), this instanceof regenerate2 ? (this.data = [], value ? this.add(value) : this) : new regenerate2().add(value);
  };
  regenerate2.version = "1.4.2";
  var proto = regenerate2.prototype;
  !function(destination, source) {
    var key;
    for (key in source)
      hasOwnProperty.call(source, key) && (destination[key] = source[key]);
  }(proto, { add: function(value) {
    var $this = this;
    return null == value ? $this : value instanceof regenerate2 ? ($this.data = dataAddData($this.data, value.data), $this) : (arguments.length > 1 && (value = slice.call(arguments)), isArray(value) ? (forEach(value, function(item) {
      $this.add(item);
    }), $this) : ($this.data = dataAdd($this.data, isNumber(value) ? value : symbolToCodePoint(value)), $this));
  }, remove: function(value) {
    var $this = this;
    return null == value ? $this : value instanceof regenerate2 ? ($this.data = function(dataA, dataB) {
      for (var start, end, index = 0, data = dataA.slice(), length = dataB.length; index < length; )
        data = (start = dataB[index]) == (end = dataB[index + 1] - 1) ? dataRemove(data, start) : dataRemoveRange(data, start, end), index += 2;
      return data;
    }($this.data, value.data), $this) : (arguments.length > 1 && (value = slice.call(arguments)), isArray(value) ? (forEach(value, function(item) {
      $this.remove(item);
    }), $this) : ($this.data = dataRemove($this.data, isNumber(value) ? value : symbolToCodePoint(value)), $this));
  }, addRange: function(start, end) {
    return this.data = dataAddRange(this.data, isNumber(start) ? start : symbolToCodePoint(start), isNumber(end) ? end : symbolToCodePoint(end)), this;
  }, removeRange: function(start, end) {
    var startCodePoint = isNumber(start) ? start : symbolToCodePoint(start), endCodePoint = isNumber(end) ? end : symbolToCodePoint(end);
    return this.data = dataRemoveRange(this.data, startCodePoint, endCodePoint), this;
  }, intersection: function(argument) {
    var array = argument instanceof regenerate2 ? dataToArray(argument.data) : argument;
    return this.data = function(data, codePoints) {
      for (var codePoint, index = 0, length = codePoints.length, result = []; index < length; )
        codePoint = codePoints[index], dataContains(data, codePoint) && result.push(codePoint), ++index;
      return function(codePoints2) {
        for (var tmp, index2 = -1, length2 = codePoints2.length, max = length2 - 1, result2 = [], isStart = true, previous = 0; ++index2 < length2; )
          if (tmp = codePoints2[index2], isStart)
            result2.push(tmp), previous = tmp, isStart = false;
          else if (tmp == previous + 1) {
            if (index2 != max) {
              previous = tmp;
              continue;
            }
            isStart = true, result2.push(tmp + 1);
          } else
            result2.push(previous + 1, tmp), previous = tmp;
        return isStart || result2.push(tmp + 1), result2;
      }(result);
    }(this.data, array), this;
  }, contains: function(codePoint) {
    return dataContains(this.data, isNumber(codePoint) ? codePoint : symbolToCodePoint(codePoint));
  }, clone: function() {
    var set2 = new regenerate2();
    return set2.data = this.data.slice(0), set2;
  }, toString: function(options) {
    var result = createCharacterClassesFromData(this.data, !!options && options.bmpOnly, !!options && options.hasUnicodeFlag);
    return result ? result.replace(regexNull, "\\0$1") : "[]";
  }, toRegExp: function(flags) {
    var pattern = this.toString(flags && -1 != flags.indexOf("u") ? { hasUnicodeFlag: true } : null);
    return RegExp(pattern, flags || "");
  }, valueOf: function() {
    return dataToArray(this.data);
  } }), proto.toArray = proto.valueOf, freeExports && !freeExports.nodeType ? freeModule ? freeModule.exports = regenerate2 : freeExports.regenerate = regenerate2 : root.regenerate = regenerate2;
}(commonjsGlobal$1);
var regenerateExports = regenerate.exports;
const set$3 = regenerateExports(170, 181, 186, 748, 750, 895, 902, 908, 1369, 1749, 1791, 1808, 1969, 2042, 2074, 2084, 2088, 2365, 2384, 2482, 2493, 2510, 2556, 2654, 2749, 2768, 2809, 2877, 2929, 2947, 2972, 3024, 3133, 3200, 3261, 3294, 3389, 3406, 3517, 3716, 3749, 3773, 3782, 3840, 4159, 4193, 4238, 4295, 4301, 4696, 4800, 6103, 6108, 6314, 6823, 7418, 8025, 8027, 8029, 8126, 8305, 8319, 8450, 8455, 8469, 8484, 8486, 8488, 8526, 11559, 11565, 11631, 11823, 43259, 43471, 43642, 43697, 43712, 43714, 64285, 64318, 67592, 67644, 68096, 69415, 69956, 69959, 70006, 70106, 70108, 70280, 70461, 70480, 70855, 71236, 71352, 71945, 71999, 72001, 72161, 72163, 72192, 72250, 72272, 72349, 72768, 73030, 73112, 73648, 94032, 94179, 119970, 119995, 120134, 123214, 125259, 126500, 126503, 126521, 126523, 126530, 126535, 126537, 126539, 126548, 126551, 126553, 126555, 126557, 126559, 126564, 126590);
set$3.addRange(65, 90).addRange(97, 122).addRange(192, 214).addRange(216, 246).addRange(248, 705).addRange(710, 721).addRange(736, 740).addRange(880, 884).addRange(886, 887).addRange(890, 893).addRange(904, 906).addRange(910, 929).addRange(931, 1013).addRange(1015, 1153).addRange(1162, 1327).addRange(1329, 1366).addRange(1376, 1416).addRange(1488, 1514).addRange(1519, 1522).addRange(1568, 1610).addRange(1646, 1647).addRange(1649, 1747).addRange(1765, 1766).addRange(1774, 1775).addRange(1786, 1788).addRange(1810, 1839).addRange(1869, 1957).addRange(1994, 2026).addRange(2036, 2037).addRange(2048, 2069).addRange(2112, 2136).addRange(2144, 2154).addRange(2208, 2228).addRange(2230, 2247).addRange(2308, 2361).addRange(2392, 2401).addRange(2417, 2432).addRange(2437, 2444).addRange(2447, 2448).addRange(2451, 2472).addRange(2474, 2480).addRange(2486, 2489).addRange(2524, 2525).addRange(2527, 2529).addRange(2544, 2545).addRange(2565, 2570).addRange(2575, 2576).addRange(2579, 2600).addRange(2602, 2608).addRange(2610, 2611).addRange(2613, 2614), set$3.addRange(2616, 2617).addRange(2649, 2652).addRange(2674, 2676).addRange(2693, 2701).addRange(2703, 2705).addRange(2707, 2728).addRange(2730, 2736).addRange(2738, 2739).addRange(2741, 2745).addRange(2784, 2785).addRange(2821, 2828).addRange(2831, 2832).addRange(2835, 2856).addRange(2858, 2864).addRange(2866, 2867).addRange(2869, 2873).addRange(2908, 2909).addRange(2911, 2913).addRange(2949, 2954).addRange(2958, 2960).addRange(2962, 2965).addRange(2969, 2970).addRange(2974, 2975).addRange(2979, 2980).addRange(2984, 2986).addRange(2990, 3001).addRange(3077, 3084).addRange(3086, 3088).addRange(3090, 3112).addRange(3114, 3129).addRange(3160, 3162).addRange(3168, 3169).addRange(3205, 3212).addRange(3214, 3216).addRange(3218, 3240).addRange(3242, 3251).addRange(3253, 3257).addRange(3296, 3297).addRange(3313, 3314).addRange(3332, 3340).addRange(3342, 3344).addRange(3346, 3386).addRange(3412, 3414).addRange(3423, 3425).addRange(3450, 3455).addRange(3461, 3478).addRange(3482, 3505).addRange(3507, 3515).addRange(3520, 3526).addRange(3585, 3632).addRange(3634, 3635), set$3.addRange(3648, 3654).addRange(3713, 3714).addRange(3718, 3722).addRange(3724, 3747).addRange(3751, 3760).addRange(3762, 3763).addRange(3776, 3780).addRange(3804, 3807).addRange(3904, 3911).addRange(3913, 3948).addRange(3976, 3980).addRange(4096, 4138).addRange(4176, 4181).addRange(4186, 4189).addRange(4197, 4198).addRange(4206, 4208).addRange(4213, 4225).addRange(4256, 4293).addRange(4304, 4346).addRange(4348, 4680).addRange(4682, 4685).addRange(4688, 4694).addRange(4698, 4701).addRange(4704, 4744).addRange(4746, 4749).addRange(4752, 4784).addRange(4786, 4789).addRange(4792, 4798).addRange(4802, 4805).addRange(4808, 4822).addRange(4824, 4880).addRange(4882, 4885).addRange(4888, 4954).addRange(4992, 5007).addRange(5024, 5109).addRange(5112, 5117).addRange(5121, 5740).addRange(5743, 5759).addRange(5761, 5786).addRange(5792, 5866).addRange(5873, 5880).addRange(5888, 5900).addRange(5902, 5905).addRange(5920, 5937).addRange(5952, 5969).addRange(5984, 5996).addRange(5998, 6e3).addRange(6016, 6067).addRange(6176, 6264).addRange(6272, 6276).addRange(6279, 6312), set$3.addRange(6320, 6389).addRange(6400, 6430).addRange(6480, 6509).addRange(6512, 6516).addRange(6528, 6571).addRange(6576, 6601).addRange(6656, 6678).addRange(6688, 6740).addRange(6917, 6963).addRange(6981, 6987).addRange(7043, 7072).addRange(7086, 7087).addRange(7098, 7141).addRange(7168, 7203).addRange(7245, 7247).addRange(7258, 7293).addRange(7296, 7304).addRange(7312, 7354).addRange(7357, 7359).addRange(7401, 7404).addRange(7406, 7411).addRange(7413, 7414).addRange(7424, 7615).addRange(7680, 7957).addRange(7960, 7965).addRange(7968, 8005).addRange(8008, 8013).addRange(8016, 8023).addRange(8031, 8061).addRange(8064, 8116).addRange(8118, 8124).addRange(8130, 8132).addRange(8134, 8140).addRange(8144, 8147).addRange(8150, 8155).addRange(8160, 8172).addRange(8178, 8180).addRange(8182, 8188).addRange(8336, 8348).addRange(8458, 8467).addRange(8473, 8477).addRange(8490, 8493).addRange(8495, 8505).addRange(8508, 8511).addRange(8517, 8521).addRange(8579, 8580).addRange(11264, 11310).addRange(11312, 11358).addRange(11360, 11492).addRange(11499, 11502).addRange(11506, 11507), set$3.addRange(11520, 11557).addRange(11568, 11623).addRange(11648, 11670).addRange(11680, 11686).addRange(11688, 11694).addRange(11696, 11702).addRange(11704, 11710).addRange(11712, 11718).addRange(11720, 11726).addRange(11728, 11734).addRange(11736, 11742).addRange(12293, 12294).addRange(12337, 12341).addRange(12347, 12348).addRange(12353, 12438).addRange(12445, 12447).addRange(12449, 12538).addRange(12540, 12543).addRange(12549, 12591).addRange(12593, 12686).addRange(12704, 12735).addRange(12784, 12799).addRange(13312, 19903).addRange(19968, 40956).addRange(40960, 42124).addRange(42192, 42237).addRange(42240, 42508).addRange(42512, 42527).addRange(42538, 42539).addRange(42560, 42606).addRange(42623, 42653).addRange(42656, 42725).addRange(42775, 42783).addRange(42786, 42888).addRange(42891, 42943).addRange(42946, 42954).addRange(42997, 43009).addRange(43011, 43013).addRange(43015, 43018).addRange(43020, 43042).addRange(43072, 43123).addRange(43138, 43187).addRange(43250, 43255).addRange(43261, 43262).addRange(43274, 43301).addRange(43312, 43334).addRange(43360, 43388).addRange(43396, 43442).addRange(43488, 43492).addRange(43494, 43503).addRange(43514, 43518), set$3.addRange(43520, 43560).addRange(43584, 43586).addRange(43588, 43595).addRange(43616, 43638).addRange(43646, 43695).addRange(43701, 43702).addRange(43705, 43709).addRange(43739, 43741).addRange(43744, 43754).addRange(43762, 43764).addRange(43777, 43782).addRange(43785, 43790).addRange(43793, 43798).addRange(43808, 43814).addRange(43816, 43822).addRange(43824, 43866).addRange(43868, 43881).addRange(43888, 44002).addRange(44032, 55203).addRange(55216, 55238).addRange(55243, 55291).addRange(63744, 64109).addRange(64112, 64217).addRange(64256, 64262).addRange(64275, 64279).addRange(64287, 64296).addRange(64298, 64310).addRange(64312, 64316).addRange(64320, 64321).addRange(64323, 64324).addRange(64326, 64433).addRange(64467, 64829).addRange(64848, 64911).addRange(64914, 64967).addRange(65008, 65019).addRange(65136, 65140).addRange(65142, 65276).addRange(65313, 65338).addRange(65345, 65370).addRange(65382, 65470).addRange(65474, 65479).addRange(65482, 65487).addRange(65490, 65495).addRange(65498, 65500).addRange(65536, 65547).addRange(65549, 65574).addRange(65576, 65594).addRange(65596, 65597).addRange(65599, 65613).addRange(65616, 65629).addRange(65664, 65786), set$3.addRange(66176, 66204).addRange(66208, 66256).addRange(66304, 66335).addRange(66349, 66368).addRange(66370, 66377).addRange(66384, 66421).addRange(66432, 66461).addRange(66464, 66499).addRange(66504, 66511).addRange(66560, 66717).addRange(66736, 66771).addRange(66776, 66811).addRange(66816, 66855).addRange(66864, 66915).addRange(67072, 67382).addRange(67392, 67413).addRange(67424, 67431).addRange(67584, 67589).addRange(67594, 67637).addRange(67639, 67640).addRange(67647, 67669).addRange(67680, 67702).addRange(67712, 67742).addRange(67808, 67826).addRange(67828, 67829).addRange(67840, 67861).addRange(67872, 67897).addRange(67968, 68023).addRange(68030, 68031).addRange(68112, 68115).addRange(68117, 68119).addRange(68121, 68149).addRange(68192, 68220).addRange(68224, 68252).addRange(68288, 68295).addRange(68297, 68324).addRange(68352, 68405).addRange(68416, 68437).addRange(68448, 68466).addRange(68480, 68497).addRange(68608, 68680).addRange(68736, 68786).addRange(68800, 68850).addRange(68864, 68899).addRange(69248, 69289).addRange(69296, 69297).addRange(69376, 69404).addRange(69424, 69445).addRange(69552, 69572).addRange(69600, 69622).addRange(69635, 69687), set$3.addRange(69763, 69807).addRange(69840, 69864).addRange(69891, 69926).addRange(69968, 70002).addRange(70019, 70066).addRange(70081, 70084).addRange(70144, 70161).addRange(70163, 70187).addRange(70272, 70278).addRange(70282, 70285).addRange(70287, 70301).addRange(70303, 70312).addRange(70320, 70366).addRange(70405, 70412).addRange(70415, 70416).addRange(70419, 70440).addRange(70442, 70448).addRange(70450, 70451).addRange(70453, 70457).addRange(70493, 70497).addRange(70656, 70708).addRange(70727, 70730).addRange(70751, 70753).addRange(70784, 70831).addRange(70852, 70853).addRange(71040, 71086).addRange(71128, 71131).addRange(71168, 71215).addRange(71296, 71338).addRange(71424, 71450).addRange(71680, 71723).addRange(71840, 71903).addRange(71935, 71942).addRange(71948, 71955).addRange(71957, 71958).addRange(71960, 71983).addRange(72096, 72103).addRange(72106, 72144).addRange(72203, 72242).addRange(72284, 72329).addRange(72384, 72440).addRange(72704, 72712).addRange(72714, 72750).addRange(72818, 72847).addRange(72960, 72966).addRange(72968, 72969).addRange(72971, 73008).addRange(73056, 73061).addRange(73063, 73064).addRange(73066, 73097).addRange(73440, 73458), set$3.addRange(73728, 74649).addRange(74880, 75075).addRange(77824, 78894).addRange(82944, 83526).addRange(92160, 92728).addRange(92736, 92766).addRange(92880, 92909).addRange(92928, 92975).addRange(92992, 92995).addRange(93027, 93047).addRange(93053, 93071).addRange(93760, 93823).addRange(93952, 94026).addRange(94099, 94111).addRange(94176, 94177).addRange(94208, 100343).addRange(100352, 101589).addRange(101632, 101640).addRange(110592, 110878).addRange(110928, 110930).addRange(110948, 110951).addRange(110960, 111355).addRange(113664, 113770).addRange(113776, 113788).addRange(113792, 113800).addRange(113808, 113817).addRange(119808, 119892).addRange(119894, 119964).addRange(119966, 119967).addRange(119973, 119974).addRange(119977, 119980).addRange(119982, 119993).addRange(119997, 120003).addRange(120005, 120069).addRange(120071, 120074).addRange(120077, 120084).addRange(120086, 120092).addRange(120094, 120121).addRange(120123, 120126).addRange(120128, 120132).addRange(120138, 120144).addRange(120146, 120485).addRange(120488, 120512).addRange(120514, 120538).addRange(120540, 120570).addRange(120572, 120596).addRange(120598, 120628).addRange(120630, 120654).addRange(120656, 120686).addRange(120688, 120712).addRange(120714, 120744), set$3.addRange(120746, 120770).addRange(120772, 120779).addRange(123136, 123180).addRange(123191, 123197).addRange(123584, 123627).addRange(124928, 125124).addRange(125184, 125251).addRange(126464, 126467).addRange(126469, 126495).addRange(126497, 126498).addRange(126505, 126514).addRange(126516, 126519).addRange(126541, 126543).addRange(126545, 126546).addRange(126561, 126562).addRange(126567, 126570).addRange(126572, 126578).addRange(126580, 126583).addRange(126585, 126588).addRange(126592, 126601).addRange(126603, 126619).addRange(126625, 126627).addRange(126629, 126633).addRange(126635, 126651).addRange(131072, 173789).addRange(173824, 177972).addRange(177984, 178205).addRange(178208, 183969).addRange(183984, 191456).addRange(194560, 195101).addRange(196608, 201546);
var letter = getDefaultExportFromCjs$1(set$3);
const set$2 = regenerateExports(181, 257, 259, 261, 263, 265, 267, 269, 271, 273, 275, 277, 279, 281, 283, 285, 287, 289, 291, 293, 295, 297, 299, 301, 303, 305, 307, 309, 314, 316, 318, 320, 322, 324, 326, 331, 333, 335, 337, 339, 341, 343, 345, 347, 349, 351, 353, 355, 357, 359, 361, 363, 365, 367, 369, 371, 373, 375, 378, 380, 387, 389, 392, 402, 405, 414, 417, 419, 421, 424, 429, 432, 436, 438, 454, 457, 460, 462, 464, 466, 468, 470, 472, 474, 479, 481, 483, 485, 487, 489, 491, 493, 499, 501, 505, 507, 509, 511, 513, 515, 517, 519, 521, 523, 525, 527, 529, 531, 533, 535, 537, 539, 541, 543, 545, 547, 549, 551, 553, 555, 557, 559, 561, 572, 578, 583, 585, 587, 589, 881, 883, 887, 912, 985, 987, 989, 991, 993, 995, 997, 999, 1001, 1003, 1005, 1013, 1016, 1121, 1123, 1125, 1127, 1129, 1131, 1133, 1135, 1137, 1139, 1141, 1143, 1145, 1147, 1149, 1151, 1153, 1163, 1165, 1167, 1169, 1171, 1173, 1175, 1177, 1179, 1181, 1183, 1185, 1187, 1189, 1191, 1193, 1195, 1197, 1199, 1201, 1203, 1205, 1207, 1209, 1211, 1213, 1215, 1218, 1220, 1222, 1224, 1226, 1228, 1233, 1235, 1237, 1239, 1241, 1243, 1245, 1247, 1249, 1251, 1253, 1255, 1257, 1259, 1261, 1263, 1265, 1267, 1269, 1271, 1273, 1275, 1277, 1279, 1281, 1283, 1285, 1287, 1289, 1291, 1293, 1295, 1297, 1299, 1301, 1303, 1305, 1307, 1309, 1311, 1313, 1315, 1317, 1319, 1321, 1323, 1325, 1327, 7681, 7683, 7685, 7687, 7689, 7691, 7693, 7695, 7697, 7699, 7701, 7703, 7705, 7707, 7709, 7711, 7713, 7715, 7717, 7719, 7721, 7723, 7725, 7727, 7729, 7731, 7733, 7735, 7737, 7739, 7741, 7743, 7745, 7747, 7749, 7751, 7753, 7755, 7757, 7759, 7761, 7763, 7765, 7767, 7769, 7771, 7773, 7775, 7777, 7779, 7781, 7783, 7785, 7787, 7789, 7791, 7793, 7795, 7797, 7799, 7801, 7803, 7805, 7807, 7809, 7811, 7813, 7815, 7817, 7819, 7821, 7823, 7825, 7827, 7839, 7841, 7843, 7845, 7847, 7849, 7851, 7853, 7855, 7857, 7859, 7861, 7863, 7865, 7867, 7869, 7871, 7873, 7875, 7877, 7879, 7881, 7883, 7885, 7887, 7889, 7891, 7893, 7895, 7897, 7899, 7901, 7903, 7905, 7907, 7909, 7911, 7913, 7915, 7917, 7919, 7921, 7923, 7925, 7927, 7929, 7931, 7933, 8126, 8458, 8467, 8495, 8500, 8505, 8526, 8580, 11361, 11368, 11370, 11372, 11377, 11393, 11395, 11397, 11399, 11401, 11403, 11405, 11407, 11409, 11411, 11413, 11415, 11417, 11419, 11421, 11423, 11425, 11427, 11429, 11431, 11433, 11435, 11437, 11439, 11441, 11443, 11445, 11447, 11449, 11451, 11453, 11455, 11457, 11459, 11461, 11463, 11465, 11467, 11469, 11471, 11473, 11475, 11477, 11479, 11481, 11483, 11485, 11487, 11489, 11500, 11502, 11507, 11559, 11565, 42561, 42563, 42565, 42567, 42569, 42571, 42573, 42575, 42577, 42579, 42581, 42583, 42585, 42587, 42589, 42591, 42593, 42595, 42597, 42599, 42601, 42603, 42605, 42625, 42627, 42629, 42631, 42633, 42635, 42637, 42639, 42641, 42643, 42645, 42647, 42649, 42651, 42787, 42789, 42791, 42793, 42795, 42797, 42803, 42805, 42807, 42809, 42811, 42813, 42815, 42817, 42819, 42821, 42823, 42825, 42827, 42829, 42831, 42833, 42835, 42837, 42839, 42841, 42843, 42845, 42847, 42849, 42851, 42853, 42855, 42857, 42859, 42861, 42863, 42874, 42876, 42879, 42881, 42883, 42885, 42887, 42892, 42894, 42897, 42903, 42905, 42907, 42909, 42911, 42913, 42915, 42917, 42919, 42921, 42927, 42933, 42935, 42937, 42939, 42941, 42943, 42947, 42952, 42954, 42998, 43002, 119995, 120779);
set$2.addRange(97, 122).addRange(223, 246).addRange(248, 255).addRange(311, 312).addRange(328, 329).addRange(382, 384).addRange(396, 397).addRange(409, 411).addRange(426, 427).addRange(441, 442).addRange(445, 447).addRange(476, 477).addRange(495, 496).addRange(563, 569).addRange(575, 576).addRange(591, 659).addRange(661, 687).addRange(891, 893).addRange(940, 974).addRange(976, 977).addRange(981, 983).addRange(1007, 1011).addRange(1019, 1020).addRange(1072, 1119).addRange(1230, 1231).addRange(1376, 1416).addRange(4304, 4346).addRange(4349, 4351).addRange(5112, 5117).addRange(7296, 7304).addRange(7424, 7467).addRange(7531, 7543).addRange(7545, 7578).addRange(7829, 7837).addRange(7935, 7943).addRange(7952, 7957).addRange(7968, 7975).addRange(7984, 7991).addRange(8e3, 8005).addRange(8016, 8023).addRange(8032, 8039).addRange(8048, 8061).addRange(8064, 8071).addRange(8080, 8087).addRange(8096, 8103).addRange(8112, 8116).addRange(8118, 8119).addRange(8130, 8132).addRange(8134, 8135).addRange(8144, 8147).addRange(8150, 8151), set$2.addRange(8160, 8167).addRange(8178, 8180).addRange(8182, 8183).addRange(8462, 8463).addRange(8508, 8509).addRange(8518, 8521).addRange(11312, 11358).addRange(11365, 11366).addRange(11379, 11380).addRange(11382, 11387).addRange(11491, 11492).addRange(11520, 11557).addRange(42799, 42801).addRange(42865, 42872).addRange(42899, 42901).addRange(43824, 43866).addRange(43872, 43880).addRange(43888, 43967).addRange(64256, 64262).addRange(64275, 64279).addRange(65345, 65370).addRange(66600, 66639).addRange(66776, 66811).addRange(68800, 68850).addRange(71872, 71903).addRange(93792, 93823).addRange(119834, 119859).addRange(119886, 119892).addRange(119894, 119911).addRange(119938, 119963).addRange(119990, 119993).addRange(119997, 120003).addRange(120005, 120015).addRange(120042, 120067).addRange(120094, 120119).addRange(120146, 120171).addRange(120198, 120223).addRange(120250, 120275).addRange(120302, 120327).addRange(120354, 120379).addRange(120406, 120431).addRange(120458, 120485).addRange(120514, 120538).addRange(120540, 120545).addRange(120572, 120596).addRange(120598, 120603).addRange(120630, 120654).addRange(120656, 120661).addRange(120688, 120712).addRange(120714, 120719).addRange(120746, 120770), set$2.addRange(120772, 120777).addRange(125218, 125251);
var lowerCaseLetter = getDefaultExportFromCjs$1(set$2);
const set$1 = regenerateExports(185, 8304, 11517, 12295, 66369, 66378);
set$1.addRange(48, 57).addRange(178, 179).addRange(188, 190).addRange(1632, 1641).addRange(1776, 1785).addRange(1984, 1993).addRange(2406, 2415).addRange(2534, 2543).addRange(2548, 2553).addRange(2662, 2671).addRange(2790, 2799).addRange(2918, 2927).addRange(2930, 2935).addRange(3046, 3058).addRange(3174, 3183).addRange(3192, 3198).addRange(3302, 3311).addRange(3416, 3422).addRange(3430, 3448).addRange(3558, 3567).addRange(3664, 3673).addRange(3792, 3801).addRange(3872, 3891).addRange(4160, 4169).addRange(4240, 4249).addRange(4969, 4988).addRange(5870, 5872).addRange(6112, 6121).addRange(6128, 6137).addRange(6160, 6169).addRange(6470, 6479).addRange(6608, 6618).addRange(6784, 6793).addRange(6800, 6809).addRange(6992, 7001).addRange(7088, 7097).addRange(7232, 7241).addRange(7248, 7257).addRange(8308, 8313).addRange(8320, 8329).addRange(8528, 8578).addRange(8581, 8585).addRange(9312, 9371).addRange(9450, 9471).addRange(10102, 10131).addRange(12321, 12329).addRange(12344, 12346).addRange(12690, 12693).addRange(12832, 12841).addRange(12872, 12879).addRange(12881, 12895), set$1.addRange(12928, 12937).addRange(12977, 12991).addRange(42528, 42537).addRange(42726, 42735).addRange(43056, 43061).addRange(43216, 43225).addRange(43264, 43273).addRange(43472, 43481).addRange(43504, 43513).addRange(43600, 43609).addRange(44016, 44025).addRange(65296, 65305).addRange(65799, 65843).addRange(65856, 65912).addRange(65930, 65931).addRange(66273, 66299).addRange(66336, 66339).addRange(66513, 66517).addRange(66720, 66729).addRange(67672, 67679).addRange(67705, 67711).addRange(67751, 67759).addRange(67835, 67839).addRange(67862, 67867).addRange(68028, 68029).addRange(68032, 68047).addRange(68050, 68095).addRange(68160, 68168).addRange(68221, 68222).addRange(68253, 68255).addRange(68331, 68335).addRange(68440, 68447).addRange(68472, 68479).addRange(68521, 68527).addRange(68858, 68863).addRange(68912, 68921).addRange(69216, 69246).addRange(69405, 69414).addRange(69457, 69460).addRange(69573, 69579).addRange(69714, 69743).addRange(69872, 69881).addRange(69942, 69951).addRange(70096, 70105).addRange(70113, 70132).addRange(70384, 70393).addRange(70736, 70745).addRange(70864, 70873).addRange(71248, 71257).addRange(71360, 71369).addRange(71472, 71483), set$1.addRange(71904, 71922).addRange(72016, 72025).addRange(72784, 72812).addRange(73040, 73049).addRange(73120, 73129).addRange(73664, 73684).addRange(74752, 74862).addRange(92768, 92777).addRange(93008, 93017).addRange(93019, 93025).addRange(93824, 93846).addRange(119520, 119539).addRange(119648, 119672).addRange(120782, 120831).addRange(123200, 123209).addRange(123632, 123641).addRange(125127, 125135).addRange(125264, 125273).addRange(126065, 126123).addRange(126125, 126127).addRange(126129, 126132).addRange(126209, 126253).addRange(126255, 126269).addRange(127232, 127244).addRange(130032, 130041);
var number = getDefaultExportFromCjs$1(set$1);
const set = regenerateExports(256, 258, 260, 262, 264, 266, 268, 270, 272, 274, 276, 278, 280, 282, 284, 286, 288, 290, 292, 294, 296, 298, 300, 302, 304, 306, 308, 310, 313, 315, 317, 319, 321, 323, 325, 327, 330, 332, 334, 336, 338, 340, 342, 344, 346, 348, 350, 352, 354, 356, 358, 360, 362, 364, 366, 368, 370, 372, 374, 379, 381, 388, 418, 420, 425, 428, 437, 444, 452, 455, 458, 461, 463, 465, 467, 469, 471, 473, 475, 478, 480, 482, 484, 486, 488, 490, 492, 494, 497, 500, 506, 508, 510, 512, 514, 516, 518, 520, 522, 524, 526, 528, 530, 532, 534, 536, 538, 540, 542, 544, 546, 548, 550, 552, 554, 556, 558, 560, 562, 577, 584, 586, 588, 590, 880, 882, 886, 895, 902, 908, 975, 984, 986, 988, 990, 992, 994, 996, 998, 1e3, 1002, 1004, 1006, 1012, 1015, 1120, 1122, 1124, 1126, 1128, 1130, 1132, 1134, 1136, 1138, 1140, 1142, 1144, 1146, 1148, 1150, 1152, 1162, 1164, 1166, 1168, 1170, 1172, 1174, 1176, 1178, 1180, 1182, 1184, 1186, 1188, 1190, 1192, 1194, 1196, 1198, 1200, 1202, 1204, 1206, 1208, 1210, 1212, 1214, 1219, 1221, 1223, 1225, 1227, 1229, 1232, 1234, 1236, 1238, 1240, 1242, 1244, 1246, 1248, 1250, 1252, 1254, 1256, 1258, 1260, 1262, 1264, 1266, 1268, 1270, 1272, 1274, 1276, 1278, 1280, 1282, 1284, 1286, 1288, 1290, 1292, 1294, 1296, 1298, 1300, 1302, 1304, 1306, 1308, 1310, 1312, 1314, 1316, 1318, 1320, 1322, 1324, 1326, 4295, 4301, 7680, 7682, 7684, 7686, 7688, 7690, 7692, 7694, 7696, 7698, 7700, 7702, 7704, 7706, 7708, 7710, 7712, 7714, 7716, 7718, 7720, 7722, 7724, 7726, 7728, 7730, 7732, 7734, 7736, 7738, 7740, 7742, 7744, 7746, 7748, 7750, 7752, 7754, 7756, 7758, 7760, 7762, 7764, 7766, 7768, 7770, 7772, 7774, 7776, 7778, 7780, 7782, 7784, 7786, 7788, 7790, 7792, 7794, 7796, 7798, 7800, 7802, 7804, 7806, 7808, 7810, 7812, 7814, 7816, 7818, 7820, 7822, 7824, 7826, 7828, 7838, 7840, 7842, 7844, 7846, 7848, 7850, 7852, 7854, 7856, 7858, 7860, 7862, 7864, 7866, 7868, 7870, 7872, 7874, 7876, 7878, 7880, 7882, 7884, 7886, 7888, 7890, 7892, 7894, 7896, 7898, 7900, 7902, 7904, 7906, 7908, 7910, 7912, 7914, 7916, 7918, 7920, 7922, 7924, 7926, 7928, 7930, 7932, 7934, 8025, 8027, 8029, 8031, 8450, 8455, 8469, 8484, 8486, 8488, 8517, 8579, 11360, 11367, 11369, 11371, 11378, 11381, 11394, 11396, 11398, 11400, 11402, 11404, 11406, 11408, 11410, 11412, 11414, 11416, 11418, 11420, 11422, 11424, 11426, 11428, 11430, 11432, 11434, 11436, 11438, 11440, 11442, 11444, 11446, 11448, 11450, 11452, 11454, 11456, 11458, 11460, 11462, 11464, 11466, 11468, 11470, 11472, 11474, 11476, 11478, 11480, 11482, 11484, 11486, 11488, 11490, 11499, 11501, 11506, 42560, 42562, 42564, 42566, 42568, 42570, 42572, 42574, 42576, 42578, 42580, 42582, 42584, 42586, 42588, 42590, 42592, 42594, 42596, 42598, 42600, 42602, 42604, 42624, 42626, 42628, 42630, 42632, 42634, 42636, 42638, 42640, 42642, 42644, 42646, 42648, 42650, 42786, 42788, 42790, 42792, 42794, 42796, 42798, 42802, 42804, 42806, 42808, 42810, 42812, 42814, 42816, 42818, 42820, 42822, 42824, 42826, 42828, 42830, 42832, 42834, 42836, 42838, 42840, 42842, 42844, 42846, 42848, 42850, 42852, 42854, 42856, 42858, 42860, 42862, 42873, 42875, 42880, 42882, 42884, 42886, 42891, 42893, 42896, 42898, 42902, 42904, 42906, 42908, 42910, 42912, 42914, 42916, 42918, 42920, 42934, 42936, 42938, 42940, 42942, 42946, 42953, 42997, 119964, 119970, 120134, 120778);
set.addRange(65, 90).addRange(192, 214).addRange(216, 222).addRange(376, 377).addRange(385, 386).addRange(390, 391).addRange(393, 395).addRange(398, 401).addRange(403, 404).addRange(406, 408).addRange(412, 413).addRange(415, 416).addRange(422, 423).addRange(430, 431).addRange(433, 435).addRange(439, 440).addRange(502, 504).addRange(570, 571).addRange(573, 574).addRange(579, 582).addRange(904, 906).addRange(910, 911).addRange(913, 929).addRange(931, 939).addRange(978, 980).addRange(1017, 1018).addRange(1021, 1071).addRange(1216, 1217).addRange(1329, 1366).addRange(4256, 4293).addRange(5024, 5109).addRange(7312, 7354).addRange(7357, 7359).addRange(7944, 7951).addRange(7960, 7965).addRange(7976, 7983).addRange(7992, 7999).addRange(8008, 8013).addRange(8040, 8047).addRange(8120, 8123).addRange(8136, 8139).addRange(8152, 8155).addRange(8168, 8172).addRange(8184, 8187).addRange(8459, 8461).addRange(8464, 8466).addRange(8473, 8477).addRange(8490, 8493).addRange(8496, 8499).addRange(8510, 8511).addRange(11264, 11310), set.addRange(11362, 11364).addRange(11373, 11376).addRange(11390, 11392).addRange(42877, 42878).addRange(42922, 42926).addRange(42928, 42932).addRange(42948, 42951).addRange(65313, 65338).addRange(66560, 66599).addRange(66736, 66771).addRange(68736, 68786).addRange(71840, 71871).addRange(93760, 93791).addRange(119808, 119833).addRange(119860, 119885).addRange(119912, 119937).addRange(119966, 119967).addRange(119973, 119974).addRange(119977, 119980).addRange(119982, 119989).addRange(120016, 120041).addRange(120068, 120069).addRange(120071, 120074).addRange(120077, 120084).addRange(120086, 120092).addRange(120120, 120121).addRange(120123, 120126).addRange(120128, 120132).addRange(120138, 120144).addRange(120172, 120197).addRange(120224, 120249).addRange(120276, 120301).addRange(120328, 120353).addRange(120380, 120405).addRange(120432, 120457).addRange(120488, 120512).addRange(120546, 120570).addRange(120604, 120628).addRange(120662, 120686).addRange(120720, 120744).addRange(125184, 125217);
var uppercaseLetter = getDefaultExportFromCjs$1(set);
class MaskedInput extends reactExports.Component {
  constructor() {
    super(...arguments), this.state = { focused: false }, this.mask = MaskedInput.createInputMask(this.props.mask), this.onFocusHandler = this.onFocus.bind(this), this.onBlurHandler = this.onBlur.bind(this), this.onChangeHandler = this.onChange.bind(this), this.onKeyDownHandler = this.onKeyDown.bind(this), this.pipeHandler = this.pipe.bind(this);
  }
  pipe(value, { placeholder }) {
    return this.filteredValue = value === placeholder ? "" : value, this.state.focused ? value : this.filteredValue;
  }
  onFocus(e2) {
    setTimeout(() => {
      this.setState({ focused: true });
    }, 0), void 0 !== this.props.onFocus && this.props.onFocus(e2);
  }
  onBlur(e2) {
    this.setState({ focused: false }), void 0 !== this.props.onBlur && this.props.onBlur(e2);
  }
  onChange(e2) {
    this.dispatchOnChangeEvent(e2, this.filteredValue);
  }
  onKeyDown(e2) {
    this.props.onKeyDown?.(e2);
    const target = e2.target, selectionLength = Math.abs((target.selectionEnd ?? 0) - (target.selectionStart ?? 0));
    ("Delete" === e2.key || "Backspace" === e2.key) && selectionLength > 0 && this.filteredValue?.length === selectionLength && this.dispatchOnChangeEvent(e2, "");
  }
  dispatchOnChangeEvent(e2, value) {
    const filteredTarget = { ...e2.target, value }, filteredEvent = { ...e2, target: filteredTarget };
    this.props.onChange?.(filteredEvent);
  }
  render() {
    return void 0 !== this.mask ? reactExports.createElement(ReactTextMask, { ...this.props, maxLength: void 0, onChange: this.onChangeHandler, onKeyDown: this.onKeyDownHandler, onFocus: this.onFocusHandler, onBlur: this.onBlurHandler, mask: this.mask, pipe: this.pipeHandler, showMask: this.state.focused }) : reactExports.createElement("input", this.props);
  }
  static createInputMask(mask) {
    if ("" === mask)
      return;
    const maskCharMap = { 9: number.toRegExp(), Z: letter.toRegExp(), U: uppercaseLetter.toRegExp(), L: lowerCaseLetter.toRegExp(), "*": letter.clone().add(number).toRegExp() }, match = mask.match(/[^\\]|\\./g);
    return match ? match.map((item) => item[1] ? item[1] : maskCharMap[item] ?? item) : void 0;
  }
}

let decimalSeparator;
class TextBox extends reactExports.Component {
  constructor() {
    super(...arguments), this.state = {}, this.onChangeHandler = this.onChange.bind(this), this.onKeyDownHandler = this.onKeyDown.bind(this), this.onKeyUpHandler = this.onKeyUp.bind(this), this.onFocusHandler = this.onFocus.bind(this), this.onBlurHandler = this.onBlur.bind(this), this.onSelectHandler = this.onSelect.bind(this), this.onChangeBehaviourHandler = this.createOnChangeBehaviour(), this.hadEnterKeyDown = false;
  }
  componentDidUpdate(prevProps, prevState) {
    if (!prevState.editedValue)
      return;
    const { value: newValue, displayValue: newDisplayValue } = this.props.inputValue, { value: oldValue, displayValue: oldDisplayValue } = prevProps.inputValue;
    !this.props.inputValue.readOnly && deepEqual$1(newValue, oldValue) && newDisplayValue === oldDisplayValue || this.setState({ editedValue: void 0 });
  }
  createOnChangeBehaviour() {
    return this.props.submitWhileEditing ? debounce(this.submitValue.bind(this), ensure(this.props.submitDelay)) : () => {
    };
  }
  onChange(e) {
    this.setDisplayValue(e.target.value, () => {
      !this.props.inputValue.readOnly && e.target instanceof HTMLInputElement && document.activeElement !== e.target && this.submitValue();
    }), this.onChangeBehaviourHandler();
  }
  setDisplayValue(displayValue, callback) {
    this.setState({ editedValue: { displayValue, internalValue: this.props.inputValue.formatter.parse(displayValue) } }, callback);
  }
  onKeyDown(e) {
    "Enter" === e.key && (this.hadEnterKeyDown = true), this.isNumberTextBox() && 110 === e.keyCode && this.convertNumpadDecimalToLocaleDecimalSeparator(e);
  }
  isNumberTextBox() {
    return this.props.inputValue.formatter.type === FormatterType.Number;
  }
  convertNumpadDecimalToLocaleDecimalSeparator(e) {
    const target = e.target, value = target.value, start = target.selectionStart, end = target.selectionEnd, prefix = value.substring(0, Math.min(start, end)) + (void 0 === decimalSeparator && (decimalSeparator = getLocale().numbers.decimalSeparator), decimalSeparator), suffix = value.substring(Math.max(start, end));
    target.value = prefix + suffix, target.selectionStart = target.selectionEnd = prefix.length, e.preventDefault(), this.setDisplayValue(target.value);
  }
  onKeyUp(e) {
    "Enter" === e.key && this.hadEnterKeyDown && (this.submitValue(), this.dispatchAction("onEnterKeyPress"), this.hadEnterKeyDown = false);
  }
  onFocus() {
    this.setState({ afterFocus: true }), this.dispatchAction("onEnter");
  }
  onBlur() {
    this.submitValue(), this.dispatchAction("onLeave"), this.props.inputValue.setFormatter(void 0);
  }
  submitValue() {
    const editedValue = this.state.editedValue;
    if (editedValue) {
      if (editedValue.internalValue.valid) {
        const newValue = editedValue.internalValue.value;
        void 0 === this.props.inputValue.validation && this.isSameValue(newValue, this.props.inputValue.value) || this.props.inputValue.setValue(newValue);
      } else
        editedValue.displayValue !== this.props.inputValue.displayValue && this.props.inputValue.setTextValue(editedValue.displayValue);
      this.setState({ editedValue: void 0 });
    }
  }
  isSameValue(a, b) {
    const formatter = this.props.inputValue.formatter;
    return formatter.format(a) === formatter.format(b);
  }
  onSelect(e) {
    if (this.state.afterFocus) {
      const input = e.target, unfocusedValue = this.props.inputValue.displayValue, selectionStart = input.selectionStart, selectionEnd = input.selectionEnd, formatter = this.props.inputValue.formatter;
      formatter.type === FormatterType.Number && this.props.inputValue.setFormatter(formatter.withConfig({ ...formatter.config, groupDigits: false })), this.setState({ afterFocus: void 0 }, () => {
        const focusedValue = this.props.inputValue.displayValue;
        focusedValue !== unfocusedValue && (input.selectionStart = translatePosition(unfocusedValue, selectionStart, focusedValue), input.selectionEnd = translatePosition(unfocusedValue, selectionEnd, focusedValue));
      });
    }
  }
  render() {
    return jsxRuntimeExports.jsxs(reactExports.Fragment, { children: [this.props.inputValue.readOnly && "control" !== this.props.readOnlyStyle ? this.renderAsText() : this.renderAsInput(), jsxRuntimeExports.jsx(Alert, { id: `${this.props.id}-error`, validation: this.props.inputValue.validation })] });
  }
  renderAsInput() {
    return jsxRuntimeExports.jsx(MaskedInput, { id: this.props.id, className: "form-control", type: this.props.isPassword ? "password" : "text", value: (this.state.editedValue ?? this.props.inputValue).displayValue, tabIndex: this.props.tabIndex, maxLength: this.props.maxLength, placeholder: this.props.placeholder.value && this.props.placeholder.value.length > 0 ? this.props.placeholder.value : void 0, onChange: this.onChangeHandler, onFocus: this.onFocusHandler, onBlur: this.onBlurHandler, onKeyDown: this.onKeyDownHandler, onKeyUp: this.onKeyUpHandler, onSelect: this.onSelectHandler, disabled: this.props.inputValue.readOnly, mask: this.props.mask, autoComplete: this.props.autocomplete, ...getAriaLabelProps(this.props.ariaLabel?.value), ...getValidationAriaProps(this.props.inputValue.validation, this.props.id), "aria-required": this.props.ariaRequired });
  }
  renderAsText() {
    return jsxRuntimeExports.jsx("div", { className: "form-control-static", children: (this.props.isPassword ? "" : this.props.inputValue.displayValue) || "\xA0" });
  }
  dispatchAction(property) {
    const prop = this.props[property];
    "available" === this.props.inputValue.status && prop && prop.execute();
  }
}
function translatePosition(oldString, oldPosition, newString) {
  if (newString === oldString)
    return Math.min(newString.length, oldPosition);
  let newPosition = 0;
  const len = Math.min(oldString.length, oldPosition);
  for (let i = 0; i < len && newPosition < newString.length; i++)
    oldString[i] === newString[newPosition] && newPosition++;
  return newPosition;
}

const Placeholder = (props) => jsxRuntimeExports.jsx("div", { className: "mx-placeholder", children: props.content });

const ScrollContainerRegion = reactExports.forwardRef((props, ref) => jsxRuntimeExports.jsx("div", { className: classNames(`mx-scrollcontainer-${props.name}`, props.class, { "mx-scrollcontainer-toggleable": props.canToggle }), style: { ...props.style, ...props.size ? { "--sidebar-size": props.size } : {} }, ref, children: jsxRuntimeExports.jsx("div", { className: classNames("mx-scrollcontainer-wrapper", { "mx-scrollcontainer-nested": props.hasNestedScrollContainer }), children: props.children }) }));

function ScrollContainer(props) {
  const uniqueId = reactExports.useMemo(() => newId("scrollcontainer"), []);
  if (!props.top.enabled && !props.bottom.enabled)
    return jsxRuntimeExports.jsx(HorizontalContainer, { ...props, containerType: ContainerType.Standalone, containerId: uniqueId });
  return !props.left.enabled && !props.right.enabled ? jsxRuntimeExports.jsx(VerticalContainer, { ...props, containerType: ContainerType.Standalone }) : "headline" === props.layoutMode ? jsxRuntimeExports.jsx(VerticalContainer, { ...props, containerType: ContainerType.Outer, containerId: uniqueId, children: jsxRuntimeExports.jsx(HorizontalContainer, { ...props, containerType: ContainerType.Inner, containerId: uniqueId }) }) : jsxRuntimeExports.jsx(HorizontalContainer, { ...props, containerType: ContainerType.Outer, containerId: uniqueId, children: jsxRuntimeExports.jsx(VerticalContainer, { ...props, containerType: ContainerType.Inner }) });
}
function getRegionSize(props) {
  if (!props.enabled)
    throw new Error("Region is not enabled");
  return "auto" === props.sizeMode ? "min-content" : `${props.sizeValue}${"percentage" === props.sizeMode ? "%" : "px"}`;
}
var ContainerType;
function HorizontalContainer(props) {
  const [toggleMode, isSidebarOpenInitially, toggleableSidebarSize] = (left = props.left, right = props.right, left.enabled && "none" !== left.toggleMode ? [left.toggleMode, left.initiallyOpen, getRegionSize(left)] : right.enabled && "none" !== right.toggleMode ? [right.toggleMode, right.initiallyOpen, getRegionSize(right)] : ["none", false, "0px"]);
  var left, right;
  const [isSidebarOpen, setSidebarOpen] = reactExports.useState(isSidebarOpenInitially), sidebarRef = reactExports.useRef(null), onClick = reactExports.useCallback((e) => {
    isSidebarOpen && (sidebarRef.current?.contains(e.target) || setSidebarOpen(false));
  }, [isSidebarOpen]);
  return reactExports.useEffect(() => {
    if ("none" !== toggleMode)
      return window.__mx_ScrollContainer_SidebarToggle || (window.__mx_ScrollContainer_SidebarToggle = {}), window.__mx_ScrollContainer_SidebarToggle[props.containerId] = () => setSidebarOpen((isOpen) => !isOpen), () => {
        delete window.__mx_ScrollContainer_SidebarToggle[props.containerId];
      };
  }, []), jsxRuntimeExports.jsxs("div", { className: classNames("mx-scrollcontainer", "mx-scrollcontainer-horizontal", { "mx-scrollcontainer-fixed": props.scrollPerRegion, "mx-scrollcontainer-open": isSidebarOpen, [`mx-scrollcontainer-${toggleMode}`]: "none" !== toggleMode }, props.containerType !== ContainerType.Inner ? props.class : void 0), style: { ...props.containerType !== ContainerType.Inner ? props.style : void 0, "--toggleable-sidebar-width": toggleableSidebarSize }, onClick: "slide" === toggleMode || "push" === toggleMode ? onClick : void 0, "data-scrollcontainer-id": props.containerType !== ContainerType.Inner ? props.containerId : void 0, children: [props.left.enabled && jsxRuntimeExports.jsx(ScrollContainerRegion, { name: "left", class: props.left.class, style: props.left.style, size: getRegionSize(props.left), canToggle: "none" !== props.left.toggleMode, ref: "none" !== props.left.toggleMode ? sidebarRef : void 0, children: props.left.content }), jsxRuntimeExports.jsx(ScrollContainerRegion, { name: "center", hasNestedScrollContainer: props.containerType === ContainerType.Outer, class: props.containerType !== ContainerType.Outer ? props.center.class : void 0, style: props.containerType !== ContainerType.Outer ? props.center.style : void 0, children: props.children ? props.children : props.center.content }), props.right.enabled && jsxRuntimeExports.jsx(ScrollContainerRegion, { name: "right", class: props.right.class, style: props.right.style, size: getRegionSize(props.right), canToggle: "none" !== props.right.toggleMode, ref: "none" !== props.right.toggleMode ? sidebarRef : void 0, children: props.right.content })] });
}
function VerticalContainer(props) {
  return jsxRuntimeExports.jsxs("div", { className: classNames("mx-scrollcontainer", "mx-scrollcontainer-vertical", { "mx-scrollcontainer-fixed": props.scrollPerRegion }, props.containerType !== ContainerType.Inner ? props.class : void 0), style: { ...props.containerType !== ContainerType.Inner ? props.style : void 0 }, "data-scrollcontainer-id": props.containerId, children: [props.top.enabled && jsxRuntimeExports.jsx(ScrollContainerRegion, { name: "top", class: props.top.class, style: props.top.style, size: getRegionSize(props.top), children: props.top.content }), jsxRuntimeExports.jsx(ScrollContainerRegion, { name: "middle", hasNestedScrollContainer: props.containerType === ContainerType.Outer, class: props.containerType !== ContainerType.Outer ? props.center.class : void 0, style: props.containerType !== ContainerType.Outer ? props.center.style : void 0, children: props.children ? props.children : props.center.content }), props.bottom.enabled && jsxRuntimeExports.jsx(ScrollContainerRegion, { name: "bottom", class: props.bottom.class, style: props.bottom.style, size: getRegionSize(props.bottom), children: props.bottom.content })] });
}
!function(ContainerType2) {
  ContainerType2[ContainerType2.Standalone = 0] = "Standalone", ContainerType2[ContainerType2.Outer = 1] = "Outer", ContainerType2[ContainerType2.Inner = 2] = "Inner";
}(ContainerType || (ContainerType = {}));

function getFileValue$(name, scope, path, store, widgetId, needsAccessToChangedDate, showAsThumbnail, shareObject) {
  const rootObject$ = getSubscribedObjectState$(store, scope), object$ = path ? getObjectByPath$(rootObject$, path, store) : rootObject$, sharedObject$ = shareObject ? withObjectSharing$(object$, store, widgetId, false) : withFirstLoadDoneSharing$$1(object$, store, widgetId), hasContents$ = getAttribute$(sharedObject$, "HasContents", store), contents$ = getAttribute$(sharedObject$, "Contents", store), changedDate$ = getAttribute$(sharedObject$, "changedDate", store), fileName$ = getAttribute$(sharedObject$, "Name", store);
  return fromComputation$(name, () => flatMapL(sharedObject$.dependOn(), (obj) => {
    const data = getData();
    if (obj.metaData.isRemoteFileEntity) {
      return getOrCrashL(contents$.dependOn()).access === Access.None ? unavailable() : available({ uri: data.getDocumentUrl(obj.getGuid(), "", false) });
    }
    const hasContents = getOrCrashL(hasContents$.dependOn()), changedDate = getOrCrashL(changedDate$.dependOn()), fileName = getOrCrashL(fileName$.dependOn());
    if (hasContents.access === Access.None || !hasContents.value || fileName.access === Access.None)
      return unavailable();
    const uri = data.getDocumentUrl(obj.getGuid(), (changedDate.access !== Access.None ? changedDate.value : void 0)?.getTime() ?? "", showAsThumbnail, fileName.value);
    return available({ uri, name: fileName.value });
  }));
}

const DynamicFileProperty = asProperty(({ scope, path }, store, widgetId, propertyPath) => asDynamicValue$(getFileValue$(`File property of ${widgetId}/${propertyPath}`, scope, path, store, widgetId, false, false, false)));

const logger$7 = LogManager.get().getLogger(), FileUploadProperty = asProperty((config, store, widgetId, propertyPath) => {
  const object$ = getSubscribedObjectState$(store, config.scope), [subtreeReadonly$] = store.useSlot(pageScope, "subtreeReadonly"), isEditable$ = config.isEditable ? getFormExpressionResultFromStore$(`Conditional editability of ${toFriendlyId(widgetId)}`, config.isEditable, store) : fromConstant$(available(true)), readOnly$ = fromComputation$(`Readonly of ${widgetId}/${propertyPath}`, () => "available" !== object$.dependOn().status || !getOrElseL(isEditable$.dependOn(), false) || Boolean(subtreeReadonly$.dependOn()));
  let validator;
  function setValidator(v) {
    validator = v;
  }
  const [validation$, setValidation] = useValue(`Validation of ${widgetId}/${propertyPath}`, void 0), [, setIsInvalid] = store.useSlot(widgetId, "isInvalid"), [file$, setFile] = useValue(`Selected file of ${widgetId}/${propertyPath}`, void 0);
  function setValue(value) {
    if (readUntracked(readOnly$))
      return void logger$7.debug(`Widget ${toFriendlyId(widgetId)} is attempting to upload a file while it is readonly.`);
    const validation = void 0 !== validator ? validator(value) : void 0;
    runInAction(() => {
      setValidation(validation), setIsInvalid(void 0 !== validation), setFile(value);
    });
  }
  const previousObject$ = getPreviousValue$(object$);
  return function(value$, form$, object$2, thumbnailSize, widgetId2, propertyPath2) {
    let unsubscribe;
    return withSideEffect$(`Upload value of ${widgetId2}/${propertyPath2}`, value$, void 0, () => {
      unsubscribe();
    }, () => {
      const form = ensure(readUntracked(form$))[0];
      unsubscribe = form.listen("submit", (callback, error) => {
        const object = readUntracked(object$2), { value, validation } = readUntracked(value$);
        if (!value || validation)
          return void callback();
        if ("available" !== object.status)
          return void error(new AssertionError());
        const ui = getUI(), pid = ui.showProgress();
        getData().saveDocument(object.value.getGuid(), null, thumbnailSize ?? {}, value, () => {
          ui.hideProgress(pid), callback();
        }, (e) => {
          ui.hideProgress(pid), error(e);
        });
      });
    });
  }(fromComputation$(`File upload value of ${widgetId}/${propertyPath}`, () => {
    const object = getOrElseL(object$.dependOn(), void 0), previousObject = getOrElseL(previousObject$.dependOn() ?? unavailable(), void 0), readOnly = readOnly$.dependOn();
    return (object !== previousObject || readOnly) && runActionInComputed(() => {
      setValidation(void 0), setIsInvalid(false), setFile(void 0);
    }), { readOnly, value: file$.dependOn(), validation: validation$.dependOn(), setValidator, setValue };
  }), store.useSlot(pageScope, "form")[0], object$, config.thumbnailSize, widgetId, propertyPath);
});

const Div = (props) => jsxRuntimeExports.jsx("div", { className: props.class, style: props.style, children: props.content });

function FileDownloader(props) {
  return jsxRuntimeExports.jsxs("button", { type: "button", disabled: !props.download.value, className: "btn mx-button mx-fileinput-download-button", id: `${props.id}-download`, "aria-labelledby": `${props.id}-label ${props.id}-download`, onClick: (e) => function(e2, file, showInBrowser) {
    if (e2.stopPropagation(), !file)
      return;
    if (showInBrowser) {
      const url = `${file.uri}&target=window`;
      window.open(url, "mendix_file");
    } else
      window.open(`${file.uri}&target=inline`, "_self");
  }(e, props.download.value, props.showInBrowser), children: [translate("mxui.widget.FileInput", "download"), jsxRuntimeExports.jsx("span", { className: "sr-only", children: props.download.value?.name ?? "" })] });
}
function Mime$1() {
  this._types = /* @__PURE__ */ Object.create(null), this._extensions = /* @__PURE__ */ Object.create(null);
  for (let i = 0; i < arguments.length; i++)
    this.define(arguments[i]);
  this.define = this.define.bind(this), this.getType = this.getType.bind(this), this.getExtension = this.getExtension.bind(this);
}
Mime$1.prototype.define = function(typeMap, force) {
  for (let type in typeMap) {
    let extensions = typeMap[type].map(function(t) {
      return t.toLowerCase();
    });
    type = type.toLowerCase();
    for (let i = 0; i < extensions.length; i++) {
      const ext = extensions[i];
      if ("*" !== ext[0]) {
        if (!force && ext in this._types)
          throw new Error('Attempt to change mapping for "' + ext + '" extension from "' + this._types[ext] + '" to "' + type + '". Pass `force=true` to allow this, otherwise remove "' + ext + '" from the list of extensions for "' + type + '".');
        this._types[ext] = type;
      }
    }
    if (force || !this._extensions[type]) {
      const ext = extensions[0];
      this._extensions[type] = "*" !== ext[0] ? ext : ext.substr(1);
    }
  }
}, Mime$1.prototype.getType = function(path) {
  let last = (path = String(path)).replace(/^.*[/\\]/, "").toLowerCase(), ext = last.replace(/^.*\./, "").toLowerCase(), hasPath = last.length < path.length;
  return (ext.length < last.length - 1 || !hasPath) && this._types[ext] || null;
}, Mime$1.prototype.getExtension = function(type) {
  return (type = /^\s*([^;\s]*)/.test(type) && RegExp.$1) && this._extensions[type.toLowerCase()] || null;
};
var mime = new Mime$1({ "application/andrew-inset": ["ez"], "application/applixware": ["aw"], "application/atom+xml": ["atom"], "application/atomcat+xml": ["atomcat"], "application/atomdeleted+xml": ["atomdeleted"], "application/atomsvc+xml": ["atomsvc"], "application/atsc-dwd+xml": ["dwd"], "application/atsc-held+xml": ["held"], "application/atsc-rsat+xml": ["rsat"], "application/bdoc": ["bdoc"], "application/calendar+xml": ["xcs"], "application/ccxml+xml": ["ccxml"], "application/cdfx+xml": ["cdfx"], "application/cdmi-capability": ["cdmia"], "application/cdmi-container": ["cdmic"], "application/cdmi-domain": ["cdmid"], "application/cdmi-object": ["cdmio"], "application/cdmi-queue": ["cdmiq"], "application/cu-seeme": ["cu"], "application/dash+xml": ["mpd"], "application/davmount+xml": ["davmount"], "application/docbook+xml": ["dbk"], "application/dssc+der": ["dssc"], "application/dssc+xml": ["xdssc"], "application/ecmascript": ["es", "ecma"], "application/emma+xml": ["emma"], "application/emotionml+xml": ["emotionml"], "application/epub+zip": ["epub"], "application/exi": ["exi"], "application/express": ["exp"], "application/fdt+xml": ["fdt"], "application/font-tdpfr": ["pfr"], "application/geo+json": ["geojson"], "application/gml+xml": ["gml"], "application/gpx+xml": ["gpx"], "application/gxf": ["gxf"], "application/gzip": ["gz"], "application/hjson": ["hjson"], "application/hyperstudio": ["stk"], "application/inkml+xml": ["ink", "inkml"], "application/ipfix": ["ipfix"], "application/its+xml": ["its"], "application/java-archive": ["jar", "war", "ear"], "application/java-serialized-object": ["ser"], "application/java-vm": ["class"], "application/javascript": ["js", "mjs"], "application/json": ["json", "map"], "application/json5": ["json5"], "application/jsonml+json": ["jsonml"], "application/ld+json": ["jsonld"], "application/lgr+xml": ["lgr"], "application/lost+xml": ["lostxml"], "application/mac-binhex40": ["hqx"], "application/mac-compactpro": ["cpt"], "application/mads+xml": ["mads"], "application/manifest+json": ["webmanifest"], "application/marc": ["mrc"], "application/marcxml+xml": ["mrcx"], "application/mathematica": ["ma", "nb", "mb"], "application/mathml+xml": ["mathml"], "application/mbox": ["mbox"], "application/mediaservercontrol+xml": ["mscml"], "application/metalink+xml": ["metalink"], "application/metalink4+xml": ["meta4"], "application/mets+xml": ["mets"], "application/mmt-aei+xml": ["maei"], "application/mmt-usd+xml": ["musd"], "application/mods+xml": ["mods"], "application/mp21": ["m21", "mp21"], "application/mp4": ["mp4s", "m4p"], "application/msword": ["doc", "dot"], "application/mxf": ["mxf"], "application/n-quads": ["nq"], "application/n-triples": ["nt"], "application/node": ["cjs"], "application/octet-stream": ["bin", "dms", "lrf", "mar", "so", "dist", "distz", "pkg", "bpk", "dump", "elc", "deploy", "exe", "dll", "deb", "dmg", "iso", "img", "msi", "msp", "msm", "buffer"], "application/oda": ["oda"], "application/oebps-package+xml": ["opf"], "application/ogg": ["ogx"], "application/omdoc+xml": ["omdoc"], "application/onenote": ["onetoc", "onetoc2", "onetmp", "onepkg"], "application/oxps": ["oxps"], "application/p2p-overlay+xml": ["relo"], "application/patch-ops-error+xml": ["xer"], "application/pdf": ["pdf"], "application/pgp-encrypted": ["pgp"], "application/pgp-signature": ["asc", "sig"], "application/pics-rules": ["prf"], "application/pkcs10": ["p10"], "application/pkcs7-mime": ["p7m", "p7c"], "application/pkcs7-signature": ["p7s"], "application/pkcs8": ["p8"], "application/pkix-attr-cert": ["ac"], "application/pkix-cert": ["cer"], "application/pkix-crl": ["crl"], "application/pkix-pkipath": ["pkipath"], "application/pkixcmp": ["pki"], "application/pls+xml": ["pls"], "application/postscript": ["ai", "eps", "ps"], "application/provenance+xml": ["provx"], "application/pskc+xml": ["pskcxml"], "application/raml+yaml": ["raml"], "application/rdf+xml": ["rdf", "owl"], "application/reginfo+xml": ["rif"], "application/relax-ng-compact-syntax": ["rnc"], "application/resource-lists+xml": ["rl"], "application/resource-lists-diff+xml": ["rld"], "application/rls-services+xml": ["rs"], "application/route-apd+xml": ["rapd"], "application/route-s-tsid+xml": ["sls"], "application/route-usd+xml": ["rusd"], "application/rpki-ghostbusters": ["gbr"], "application/rpki-manifest": ["mft"], "application/rpki-roa": ["roa"], "application/rsd+xml": ["rsd"], "application/rss+xml": ["rss"], "application/rtf": ["rtf"], "application/sbml+xml": ["sbml"], "application/scvp-cv-request": ["scq"], "application/scvp-cv-response": ["scs"], "application/scvp-vp-request": ["spq"], "application/scvp-vp-response": ["spp"], "application/sdp": ["sdp"], "application/senml+xml": ["senmlx"], "application/sensml+xml": ["sensmlx"], "application/set-payment-initiation": ["setpay"], "application/set-registration-initiation": ["setreg"], "application/shf+xml": ["shf"], "application/sieve": ["siv", "sieve"], "application/smil+xml": ["smi", "smil"], "application/sparql-query": ["rq"], "application/sparql-results+xml": ["srx"], "application/srgs": ["gram"], "application/srgs+xml": ["grxml"], "application/sru+xml": ["sru"], "application/ssdl+xml": ["ssdl"], "application/ssml+xml": ["ssml"], "application/swid+xml": ["swidtag"], "application/tei+xml": ["tei", "teicorpus"], "application/thraud+xml": ["tfi"], "application/timestamped-data": ["tsd"], "application/toml": ["toml"], "application/trig": ["trig"], "application/ttml+xml": ["ttml"], "application/ubjson": ["ubj"], "application/urc-ressheet+xml": ["rsheet"], "application/urc-targetdesc+xml": ["td"], "application/voicexml+xml": ["vxml"], "application/wasm": ["wasm"], "application/widget": ["wgt"], "application/winhlp": ["hlp"], "application/wsdl+xml": ["wsdl"], "application/wspolicy+xml": ["wspolicy"], "application/xaml+xml": ["xaml"], "application/xcap-att+xml": ["xav"], "application/xcap-caps+xml": ["xca"], "application/xcap-diff+xml": ["xdf"], "application/xcap-el+xml": ["xel"], "application/xcap-ns+xml": ["xns"], "application/xenc+xml": ["xenc"], "application/xhtml+xml": ["xhtml", "xht"], "application/xliff+xml": ["xlf"], "application/xml": ["xml", "xsl", "xsd", "rng"], "application/xml-dtd": ["dtd"], "application/xop+xml": ["xop"], "application/xproc+xml": ["xpl"], "application/xslt+xml": ["*xsl", "xslt"], "application/xspf+xml": ["xspf"], "application/xv+xml": ["mxml", "xhvml", "xvml", "xvm"], "application/yang": ["yang"], "application/yin+xml": ["yin"], "application/zip": ["zip"], "audio/3gpp": ["*3gpp"], "audio/adpcm": ["adp"], "audio/amr": ["amr"], "audio/basic": ["au", "snd"], "audio/midi": ["mid", "midi", "kar", "rmi"], "audio/mobile-xmf": ["mxmf"], "audio/mp3": ["*mp3"], "audio/mp4": ["m4a", "mp4a"], "audio/mpeg": ["mpga", "mp2", "mp2a", "mp3", "m2a", "m3a"], "audio/ogg": ["oga", "ogg", "spx", "opus"], "audio/s3m": ["s3m"], "audio/silk": ["sil"], "audio/wav": ["wav"], "audio/wave": ["*wav"], "audio/webm": ["weba"], "audio/xm": ["xm"], "font/collection": ["ttc"], "font/otf": ["otf"], "font/ttf": ["ttf"], "font/woff": ["woff"], "font/woff2": ["woff2"], "image/aces": ["exr"], "image/apng": ["apng"], "image/avif": ["avif"], "image/bmp": ["bmp"], "image/cgm": ["cgm"], "image/dicom-rle": ["drle"], "image/emf": ["emf"], "image/fits": ["fits"], "image/g3fax": ["g3"], "image/gif": ["gif"], "image/heic": ["heic"], "image/heic-sequence": ["heics"], "image/heif": ["heif"], "image/heif-sequence": ["heifs"], "image/hej2k": ["hej2"], "image/hsj2": ["hsj2"], "image/ief": ["ief"], "image/jls": ["jls"], "image/jp2": ["jp2", "jpg2"], "image/jpeg": ["jpeg", "jpg", "jpe"], "image/jph": ["jph"], "image/jphc": ["jhc"], "image/jpm": ["jpm"], "image/jpx": ["jpx", "jpf"], "image/jxr": ["jxr"], "image/jxra": ["jxra"], "image/jxrs": ["jxrs"], "image/jxs": ["jxs"], "image/jxsc": ["jxsc"], "image/jxsi": ["jxsi"], "image/jxss": ["jxss"], "image/ktx": ["ktx"], "image/ktx2": ["ktx2"], "image/png": ["png"], "image/sgi": ["sgi"], "image/svg+xml": ["svg", "svgz"], "image/t38": ["t38"], "image/tiff": ["tif", "tiff"], "image/tiff-fx": ["tfx"], "image/webp": ["webp"], "image/wmf": ["wmf"], "message/disposition-notification": ["disposition-notification"], "message/global": ["u8msg"], "message/global-delivery-status": ["u8dsn"], "message/global-disposition-notification": ["u8mdn"], "message/global-headers": ["u8hdr"], "message/rfc822": ["eml", "mime"], "model/3mf": ["3mf"], "model/gltf+json": ["gltf"], "model/gltf-binary": ["glb"], "model/iges": ["igs", "iges"], "model/mesh": ["msh", "mesh", "silo"], "model/mtl": ["mtl"], "model/obj": ["obj"], "model/step+xml": ["stpx"], "model/step+zip": ["stpz"], "model/step-xml+zip": ["stpxz"], "model/stl": ["stl"], "model/vrml": ["wrl", "vrml"], "model/x3d+binary": ["*x3db", "x3dbz"], "model/x3d+fastinfoset": ["x3db"], "model/x3d+vrml": ["*x3dv", "x3dvz"], "model/x3d+xml": ["x3d", "x3dz"], "model/x3d-vrml": ["x3dv"], "text/cache-manifest": ["appcache", "manifest"], "text/calendar": ["ics", "ifb"], "text/coffeescript": ["coffee", "litcoffee"], "text/css": ["css"], "text/csv": ["csv"], "text/html": ["html", "htm", "shtml"], "text/jade": ["jade"], "text/jsx": ["jsx"], "text/less": ["less"], "text/markdown": ["markdown", "md"], "text/mathml": ["mml"], "text/mdx": ["mdx"], "text/n3": ["n3"], "text/plain": ["txt", "text", "conf", "def", "list", "log", "in", "ini"], "text/richtext": ["rtx"], "text/rtf": ["*rtf"], "text/sgml": ["sgml", "sgm"], "text/shex": ["shex"], "text/slim": ["slim", "slm"], "text/spdx": ["spdx"], "text/stylus": ["stylus", "styl"], "text/tab-separated-values": ["tsv"], "text/troff": ["t", "tr", "roff", "man", "me", "ms"], "text/turtle": ["ttl"], "text/uri-list": ["uri", "uris", "urls"], "text/vcard": ["vcard"], "text/vtt": ["vtt"], "text/xml": ["*xml"], "text/yaml": ["yaml", "yml"], "video/3gpp": ["3gp", "3gpp"], "video/3gpp2": ["3g2"], "video/h261": ["h261"], "video/h263": ["h263"], "video/h264": ["h264"], "video/iso.segment": ["m4s"], "video/jpeg": ["jpgv"], "video/jpm": ["*jpm", "jpgm"], "video/mj2": ["mj2", "mjp2"], "video/mp2t": ["ts"], "video/mp4": ["mp4", "mp4v", "mpg4"], "video/mpeg": ["mpeg", "mpg", "mpe", "m1v", "m2v"], "video/ogg": ["ogv"], "video/quicktime": ["qt", "mov"], "video/webm": ["webm"] }, { "application/prs.cww": ["cww"], "application/vnd.1000minds.decision-model+xml": ["1km"], "application/vnd.3gpp.pic-bw-large": ["plb"], "application/vnd.3gpp.pic-bw-small": ["psb"], "application/vnd.3gpp.pic-bw-var": ["pvb"], "application/vnd.3gpp2.tcap": ["tcap"], "application/vnd.3m.post-it-notes": ["pwn"], "application/vnd.accpac.simply.aso": ["aso"], "application/vnd.accpac.simply.imp": ["imp"], "application/vnd.acucobol": ["acu"], "application/vnd.acucorp": ["atc", "acutc"], "application/vnd.adobe.air-application-installer-package+zip": ["air"], "application/vnd.adobe.formscentral.fcdt": ["fcdt"], "application/vnd.adobe.fxp": ["fxp", "fxpl"], "application/vnd.adobe.xdp+xml": ["xdp"], "application/vnd.adobe.xfdf": ["xfdf"], "application/vnd.ahead.space": ["ahead"], "application/vnd.airzip.filesecure.azf": ["azf"], "application/vnd.airzip.filesecure.azs": ["azs"], "application/vnd.amazon.ebook": ["azw"], "application/vnd.americandynamics.acc": ["acc"], "application/vnd.amiga.ami": ["ami"], "application/vnd.android.package-archive": ["apk"], "application/vnd.anser-web-certificate-issue-initiation": ["cii"], "application/vnd.anser-web-funds-transfer-initiation": ["fti"], "application/vnd.antix.game-component": ["atx"], "application/vnd.apple.installer+xml": ["mpkg"], "application/vnd.apple.keynote": ["key"], "application/vnd.apple.mpegurl": ["m3u8"], "application/vnd.apple.numbers": ["numbers"], "application/vnd.apple.pages": ["pages"], "application/vnd.apple.pkpass": ["pkpass"], "application/vnd.aristanetworks.swi": ["swi"], "application/vnd.astraea-software.iota": ["iota"], "application/vnd.audiograph": ["aep"], "application/vnd.balsamiq.bmml+xml": ["bmml"], "application/vnd.blueice.multipass": ["mpm"], "application/vnd.bmi": ["bmi"], "application/vnd.businessobjects": ["rep"], "application/vnd.chemdraw+xml": ["cdxml"], "application/vnd.chipnuts.karaoke-mmd": ["mmd"], "application/vnd.cinderella": ["cdy"], "application/vnd.citationstyles.style+xml": ["csl"], "application/vnd.claymore": ["cla"], "application/vnd.cloanto.rp9": ["rp9"], "application/vnd.clonk.c4group": ["c4g", "c4d", "c4f", "c4p", "c4u"], "application/vnd.cluetrust.cartomobile-config": ["c11amc"], "application/vnd.cluetrust.cartomobile-config-pkg": ["c11amz"], "application/vnd.commonspace": ["csp"], "application/vnd.contact.cmsg": ["cdbcmsg"], "application/vnd.cosmocaller": ["cmc"], "application/vnd.crick.clicker": ["clkx"], "application/vnd.crick.clicker.keyboard": ["clkk"], "application/vnd.crick.clicker.palette": ["clkp"], "application/vnd.crick.clicker.template": ["clkt"], "application/vnd.crick.clicker.wordbank": ["clkw"], "application/vnd.criticaltools.wbs+xml": ["wbs"], "application/vnd.ctc-posml": ["pml"], "application/vnd.cups-ppd": ["ppd"], "application/vnd.curl.car": ["car"], "application/vnd.curl.pcurl": ["pcurl"], "application/vnd.dart": ["dart"], "application/vnd.data-vision.rdz": ["rdz"], "application/vnd.dbf": ["dbf"], "application/vnd.dece.data": ["uvf", "uvvf", "uvd", "uvvd"], "application/vnd.dece.ttml+xml": ["uvt", "uvvt"], "application/vnd.dece.unspecified": ["uvx", "uvvx"], "application/vnd.dece.zip": ["uvz", "uvvz"], "application/vnd.denovo.fcselayout-link": ["fe_launch"], "application/vnd.dna": ["dna"], "application/vnd.dolby.mlp": ["mlp"], "application/vnd.dpgraph": ["dpg"], "application/vnd.dreamfactory": ["dfac"], "application/vnd.ds-keypoint": ["kpxx"], "application/vnd.dvb.ait": ["ait"], "application/vnd.dvb.service": ["svc"], "application/vnd.dynageo": ["geo"], "application/vnd.ecowin.chart": ["mag"], "application/vnd.enliven": ["nml"], "application/vnd.epson.esf": ["esf"], "application/vnd.epson.msf": ["msf"], "application/vnd.epson.quickanime": ["qam"], "application/vnd.epson.salt": ["slt"], "application/vnd.epson.ssf": ["ssf"], "application/vnd.eszigno3+xml": ["es3", "et3"], "application/vnd.ezpix-album": ["ez2"], "application/vnd.ezpix-package": ["ez3"], "application/vnd.fdf": ["fdf"], "application/vnd.fdsn.mseed": ["mseed"], "application/vnd.fdsn.seed": ["seed", "dataless"], "application/vnd.flographit": ["gph"], "application/vnd.fluxtime.clip": ["ftc"], "application/vnd.framemaker": ["fm", "frame", "maker", "book"], "application/vnd.frogans.fnc": ["fnc"], "application/vnd.frogans.ltf": ["ltf"], "application/vnd.fsc.weblaunch": ["fsc"], "application/vnd.fujitsu.oasys": ["oas"], "application/vnd.fujitsu.oasys2": ["oa2"], "application/vnd.fujitsu.oasys3": ["oa3"], "application/vnd.fujitsu.oasysgp": ["fg5"], "application/vnd.fujitsu.oasysprs": ["bh2"], "application/vnd.fujixerox.ddd": ["ddd"], "application/vnd.fujixerox.docuworks": ["xdw"], "application/vnd.fujixerox.docuworks.binder": ["xbd"], "application/vnd.fuzzysheet": ["fzs"], "application/vnd.genomatix.tuxedo": ["txd"], "application/vnd.geogebra.file": ["ggb"], "application/vnd.geogebra.tool": ["ggt"], "application/vnd.geometry-explorer": ["gex", "gre"], "application/vnd.geonext": ["gxt"], "application/vnd.geoplan": ["g2w"], "application/vnd.geospace": ["g3w"], "application/vnd.gmx": ["gmx"], "application/vnd.google-apps.document": ["gdoc"], "application/vnd.google-apps.presentation": ["gslides"], "application/vnd.google-apps.spreadsheet": ["gsheet"], "application/vnd.google-earth.kml+xml": ["kml"], "application/vnd.google-earth.kmz": ["kmz"], "application/vnd.grafeq": ["gqf", "gqs"], "application/vnd.groove-account": ["gac"], "application/vnd.groove-help": ["ghf"], "application/vnd.groove-identity-message": ["gim"], "application/vnd.groove-injector": ["grv"], "application/vnd.groove-tool-message": ["gtm"], "application/vnd.groove-tool-template": ["tpl"], "application/vnd.groove-vcard": ["vcg"], "application/vnd.hal+xml": ["hal"], "application/vnd.handheld-entertainment+xml": ["zmm"], "application/vnd.hbci": ["hbci"], "application/vnd.hhe.lesson-player": ["les"], "application/vnd.hp-hpgl": ["hpgl"], "application/vnd.hp-hpid": ["hpid"], "application/vnd.hp-hps": ["hps"], "application/vnd.hp-jlyt": ["jlt"], "application/vnd.hp-pcl": ["pcl"], "application/vnd.hp-pclxl": ["pclxl"], "application/vnd.hydrostatix.sof-data": ["sfd-hdstx"], "application/vnd.ibm.minipay": ["mpy"], "application/vnd.ibm.modcap": ["afp", "listafp", "list3820"], "application/vnd.ibm.rights-management": ["irm"], "application/vnd.ibm.secure-container": ["sc"], "application/vnd.iccprofile": ["icc", "icm"], "application/vnd.igloader": ["igl"], "application/vnd.immervision-ivp": ["ivp"], "application/vnd.immervision-ivu": ["ivu"], "application/vnd.insors.igm": ["igm"], "application/vnd.intercon.formnet": ["xpw", "xpx"], "application/vnd.intergeo": ["i2g"], "application/vnd.intu.qbo": ["qbo"], "application/vnd.intu.qfx": ["qfx"], "application/vnd.ipunplugged.rcprofile": ["rcprofile"], "application/vnd.irepository.package+xml": ["irp"], "application/vnd.is-xpr": ["xpr"], "application/vnd.isac.fcs": ["fcs"], "application/vnd.jam": ["jam"], "application/vnd.jcp.javame.midlet-rms": ["rms"], "application/vnd.jisp": ["jisp"], "application/vnd.joost.joda-archive": ["joda"], "application/vnd.kahootz": ["ktz", "ktr"], "application/vnd.kde.karbon": ["karbon"], "application/vnd.kde.kchart": ["chrt"], "application/vnd.kde.kformula": ["kfo"], "application/vnd.kde.kivio": ["flw"], "application/vnd.kde.kontour": ["kon"], "application/vnd.kde.kpresenter": ["kpr", "kpt"], "application/vnd.kde.kspread": ["ksp"], "application/vnd.kde.kword": ["kwd", "kwt"], "application/vnd.kenameaapp": ["htke"], "application/vnd.kidspiration": ["kia"], "application/vnd.kinar": ["kne", "knp"], "application/vnd.koan": ["skp", "skd", "skt", "skm"], "application/vnd.kodak-descriptor": ["sse"], "application/vnd.las.las+xml": ["lasxml"], "application/vnd.llamagraphics.life-balance.desktop": ["lbd"], "application/vnd.llamagraphics.life-balance.exchange+xml": ["lbe"], "application/vnd.lotus-1-2-3": ["123"], "application/vnd.lotus-approach": ["apr"], "application/vnd.lotus-freelance": ["pre"], "application/vnd.lotus-notes": ["nsf"], "application/vnd.lotus-organizer": ["org"], "application/vnd.lotus-screencam": ["scm"], "application/vnd.lotus-wordpro": ["lwp"], "application/vnd.macports.portpkg": ["portpkg"], "application/vnd.mapbox-vector-tile": ["mvt"], "application/vnd.mcd": ["mcd"], "application/vnd.medcalcdata": ["mc1"], "application/vnd.mediastation.cdkey": ["cdkey"], "application/vnd.mfer": ["mwf"], "application/vnd.mfmp": ["mfm"], "application/vnd.micrografx.flo": ["flo"], "application/vnd.micrografx.igx": ["igx"], "application/vnd.mif": ["mif"], "application/vnd.mobius.daf": ["daf"], "application/vnd.mobius.dis": ["dis"], "application/vnd.mobius.mbk": ["mbk"], "application/vnd.mobius.mqy": ["mqy"], "application/vnd.mobius.msl": ["msl"], "application/vnd.mobius.plc": ["plc"], "application/vnd.mobius.txf": ["txf"], "application/vnd.mophun.application": ["mpn"], "application/vnd.mophun.certificate": ["mpc"], "application/vnd.mozilla.xul+xml": ["xul"], "application/vnd.ms-artgalry": ["cil"], "application/vnd.ms-cab-compressed": ["cab"], "application/vnd.ms-excel": ["xls", "xlm", "xla", "xlc", "xlt", "xlw"], "application/vnd.ms-excel.addin.macroenabled.12": ["xlam"], "application/vnd.ms-excel.sheet.binary.macroenabled.12": ["xlsb"], "application/vnd.ms-excel.sheet.macroenabled.12": ["xlsm"], "application/vnd.ms-excel.template.macroenabled.12": ["xltm"], "application/vnd.ms-fontobject": ["eot"], "application/vnd.ms-htmlhelp": ["chm"], "application/vnd.ms-ims": ["ims"], "application/vnd.ms-lrm": ["lrm"], "application/vnd.ms-officetheme": ["thmx"], "application/vnd.ms-outlook": ["msg"], "application/vnd.ms-pki.seccat": ["cat"], "application/vnd.ms-pki.stl": ["*stl"], "application/vnd.ms-powerpoint": ["ppt", "pps", "pot"], "application/vnd.ms-powerpoint.addin.macroenabled.12": ["ppam"], "application/vnd.ms-powerpoint.presentation.macroenabled.12": ["pptm"], "application/vnd.ms-powerpoint.slide.macroenabled.12": ["sldm"], "application/vnd.ms-powerpoint.slideshow.macroenabled.12": ["ppsm"], "application/vnd.ms-powerpoint.template.macroenabled.12": ["potm"], "application/vnd.ms-project": ["mpp", "mpt"], "application/vnd.ms-word.document.macroenabled.12": ["docm"], "application/vnd.ms-word.template.macroenabled.12": ["dotm"], "application/vnd.ms-works": ["wps", "wks", "wcm", "wdb"], "application/vnd.ms-wpl": ["wpl"], "application/vnd.ms-xpsdocument": ["xps"], "application/vnd.mseq": ["mseq"], "application/vnd.musician": ["mus"], "application/vnd.muvee.style": ["msty"], "application/vnd.mynfc": ["taglet"], "application/vnd.neurolanguage.nlu": ["nlu"], "application/vnd.nitf": ["ntf", "nitf"], "application/vnd.noblenet-directory": ["nnd"], "application/vnd.noblenet-sealer": ["nns"], "application/vnd.noblenet-web": ["nnw"], "application/vnd.nokia.n-gage.ac+xml": ["*ac"], "application/vnd.nokia.n-gage.data": ["ngdat"], "application/vnd.nokia.n-gage.symbian.install": ["n-gage"], "application/vnd.nokia.radio-preset": ["rpst"], "application/vnd.nokia.radio-presets": ["rpss"], "application/vnd.novadigm.edm": ["edm"], "application/vnd.novadigm.edx": ["edx"], "application/vnd.novadigm.ext": ["ext"], "application/vnd.oasis.opendocument.chart": ["odc"], "application/vnd.oasis.opendocument.chart-template": ["otc"], "application/vnd.oasis.opendocument.database": ["odb"], "application/vnd.oasis.opendocument.formula": ["odf"], "application/vnd.oasis.opendocument.formula-template": ["odft"], "application/vnd.oasis.opendocument.graphics": ["odg"], "application/vnd.oasis.opendocument.graphics-template": ["otg"], "application/vnd.oasis.opendocument.image": ["odi"], "application/vnd.oasis.opendocument.image-template": ["oti"], "application/vnd.oasis.opendocument.presentation": ["odp"], "application/vnd.oasis.opendocument.presentation-template": ["otp"], "application/vnd.oasis.opendocument.spreadsheet": ["ods"], "application/vnd.oasis.opendocument.spreadsheet-template": ["ots"], "application/vnd.oasis.opendocument.text": ["odt"], "application/vnd.oasis.opendocument.text-master": ["odm"], "application/vnd.oasis.opendocument.text-template": ["ott"], "application/vnd.oasis.opendocument.text-web": ["oth"], "application/vnd.olpc-sugar": ["xo"], "application/vnd.oma.dd2+xml": ["dd2"], "application/vnd.openblox.game+xml": ["obgx"], "application/vnd.openofficeorg.extension": ["oxt"], "application/vnd.openstreetmap.data+xml": ["osm"], "application/vnd.openxmlformats-officedocument.presentationml.presentation": ["pptx"], "application/vnd.openxmlformats-officedocument.presentationml.slide": ["sldx"], "application/vnd.openxmlformats-officedocument.presentationml.slideshow": ["ppsx"], "application/vnd.openxmlformats-officedocument.presentationml.template": ["potx"], "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": ["xlsx"], "application/vnd.openxmlformats-officedocument.spreadsheetml.template": ["xltx"], "application/vnd.openxmlformats-officedocument.wordprocessingml.document": ["docx"], "application/vnd.openxmlformats-officedocument.wordprocessingml.template": ["dotx"], "application/vnd.osgeo.mapguide.package": ["mgp"], "application/vnd.osgi.dp": ["dp"], "application/vnd.osgi.subsystem": ["esa"], "application/vnd.palm": ["pdb", "pqa", "oprc"], "application/vnd.pawaafile": ["paw"], "application/vnd.pg.format": ["str"], "application/vnd.pg.osasli": ["ei6"], "application/vnd.picsel": ["efif"], "application/vnd.pmi.widget": ["wg"], "application/vnd.pocketlearn": ["plf"], "application/vnd.powerbuilder6": ["pbd"], "application/vnd.previewsystems.box": ["box"], "application/vnd.proteus.magazine": ["mgz"], "application/vnd.publishare-delta-tree": ["qps"], "application/vnd.pvi.ptid1": ["ptid"], "application/vnd.quark.quarkxpress": ["qxd", "qxt", "qwd", "qwt", "qxl", "qxb"], "application/vnd.rar": ["rar"], "application/vnd.realvnc.bed": ["bed"], "application/vnd.recordare.musicxml": ["mxl"], "application/vnd.recordare.musicxml+xml": ["musicxml"], "application/vnd.rig.cryptonote": ["cryptonote"], "application/vnd.rim.cod": ["cod"], "application/vnd.rn-realmedia": ["rm"], "application/vnd.rn-realmedia-vbr": ["rmvb"], "application/vnd.route66.link66+xml": ["link66"], "application/vnd.sailingtracker.track": ["st"], "application/vnd.seemail": ["see"], "application/vnd.sema": ["sema"], "application/vnd.semd": ["semd"], "application/vnd.semf": ["semf"], "application/vnd.shana.informed.formdata": ["ifm"], "application/vnd.shana.informed.formtemplate": ["itp"], "application/vnd.shana.informed.interchange": ["iif"], "application/vnd.shana.informed.package": ["ipk"], "application/vnd.simtech-mindmapper": ["twd", "twds"], "application/vnd.smaf": ["mmf"], "application/vnd.smart.teacher": ["teacher"], "application/vnd.software602.filler.form+xml": ["fo"], "application/vnd.solent.sdkm+xml": ["sdkm", "sdkd"], "application/vnd.spotfire.dxp": ["dxp"], "application/vnd.spotfire.sfs": ["sfs"], "application/vnd.stardivision.calc": ["sdc"], "application/vnd.stardivision.draw": ["sda"], "application/vnd.stardivision.impress": ["sdd"], "application/vnd.stardivision.math": ["smf"], "application/vnd.stardivision.writer": ["sdw", "vor"], "application/vnd.stardivision.writer-global": ["sgl"], "application/vnd.stepmania.package": ["smzip"], "application/vnd.stepmania.stepchart": ["sm"], "application/vnd.sun.wadl+xml": ["wadl"], "application/vnd.sun.xml.calc": ["sxc"], "application/vnd.sun.xml.calc.template": ["stc"], "application/vnd.sun.xml.draw": ["sxd"], "application/vnd.sun.xml.draw.template": ["std"], "application/vnd.sun.xml.impress": ["sxi"], "application/vnd.sun.xml.impress.template": ["sti"], "application/vnd.sun.xml.math": ["sxm"], "application/vnd.sun.xml.writer": ["sxw"], "application/vnd.sun.xml.writer.global": ["sxg"], "application/vnd.sun.xml.writer.template": ["stw"], "application/vnd.sus-calendar": ["sus", "susp"], "application/vnd.svd": ["svd"], "application/vnd.symbian.install": ["sis", "sisx"], "application/vnd.syncml+xml": ["xsm"], "application/vnd.syncml.dm+wbxml": ["bdm"], "application/vnd.syncml.dm+xml": ["xdm"], "application/vnd.syncml.dmddf+xml": ["ddf"], "application/vnd.tao.intent-module-archive": ["tao"], "application/vnd.tcpdump.pcap": ["pcap", "cap", "dmp"], "application/vnd.tmobile-livetv": ["tmo"], "application/vnd.trid.tpt": ["tpt"], "application/vnd.triscape.mxs": ["mxs"], "application/vnd.trueapp": ["tra"], "application/vnd.ufdl": ["ufd", "ufdl"], "application/vnd.uiq.theme": ["utz"], "application/vnd.umajin": ["umj"], "application/vnd.unity": ["unityweb"], "application/vnd.uoml+xml": ["uoml"], "application/vnd.vcx": ["vcx"], "application/vnd.visio": ["vsd", "vst", "vss", "vsw"], "application/vnd.visionary": ["vis"], "application/vnd.vsf": ["vsf"], "application/vnd.wap.wbxml": ["wbxml"], "application/vnd.wap.wmlc": ["wmlc"], "application/vnd.wap.wmlscriptc": ["wmlsc"], "application/vnd.webturbo": ["wtb"], "application/vnd.wolfram.player": ["nbp"], "application/vnd.wordperfect": ["wpd"], "application/vnd.wqd": ["wqd"], "application/vnd.wt.stf": ["stf"], "application/vnd.xara": ["xar"], "application/vnd.xfdl": ["xfdl"], "application/vnd.yamaha.hv-dic": ["hvd"], "application/vnd.yamaha.hv-script": ["hvs"], "application/vnd.yamaha.hv-voice": ["hvp"], "application/vnd.yamaha.openscoreformat": ["osf"], "application/vnd.yamaha.openscoreformat.osfpvg+xml": ["osfpvg"], "application/vnd.yamaha.smaf-audio": ["saf"], "application/vnd.yamaha.smaf-phrase": ["spf"], "application/vnd.yellowriver-custom-menu": ["cmp"], "application/vnd.zul": ["zir", "zirz"], "application/vnd.zzazz.deck+xml": ["zaz"], "application/x-7z-compressed": ["7z"], "application/x-abiword": ["abw"], "application/x-ace-compressed": ["ace"], "application/x-apple-diskimage": ["*dmg"], "application/x-arj": ["arj"], "application/x-authorware-bin": ["aab", "x32", "u32", "vox"], "application/x-authorware-map": ["aam"], "application/x-authorware-seg": ["aas"], "application/x-bcpio": ["bcpio"], "application/x-bdoc": ["*bdoc"], "application/x-bittorrent": ["torrent"], "application/x-blorb": ["blb", "blorb"], "application/x-bzip": ["bz"], "application/x-bzip2": ["bz2", "boz"], "application/x-cbr": ["cbr", "cba", "cbt", "cbz", "cb7"], "application/x-cdlink": ["vcd"], "application/x-cfs-compressed": ["cfs"], "application/x-chat": ["chat"], "application/x-chess-pgn": ["pgn"], "application/x-chrome-extension": ["crx"], "application/x-cocoa": ["cco"], "application/x-conference": ["nsc"], "application/x-cpio": ["cpio"], "application/x-csh": ["csh"], "application/x-debian-package": ["*deb", "udeb"], "application/x-dgc-compressed": ["dgc"], "application/x-director": ["dir", "dcr", "dxr", "cst", "cct", "cxt", "w3d", "fgd", "swa"], "application/x-doom": ["wad"], "application/x-dtbncx+xml": ["ncx"], "application/x-dtbook+xml": ["dtb"], "application/x-dtbresource+xml": ["res"], "application/x-dvi": ["dvi"], "application/x-envoy": ["evy"], "application/x-eva": ["eva"], "application/x-font-bdf": ["bdf"], "application/x-font-ghostscript": ["gsf"], "application/x-font-linux-psf": ["psf"], "application/x-font-pcf": ["pcf"], "application/x-font-snf": ["snf"], "application/x-font-type1": ["pfa", "pfb", "pfm", "afm"], "application/x-freearc": ["arc"], "application/x-futuresplash": ["spl"], "application/x-gca-compressed": ["gca"], "application/x-glulx": ["ulx"], "application/x-gnumeric": ["gnumeric"], "application/x-gramps-xml": ["gramps"], "application/x-gtar": ["gtar"], "application/x-hdf": ["hdf"], "application/x-httpd-php": ["php"], "application/x-install-instructions": ["install"], "application/x-iso9660-image": ["*iso"], "application/x-iwork-keynote-sffkey": ["*key"], "application/x-iwork-numbers-sffnumbers": ["*numbers"], "application/x-iwork-pages-sffpages": ["*pages"], "application/x-java-archive-diff": ["jardiff"], "application/x-java-jnlp-file": ["jnlp"], "application/x-keepass2": ["kdbx"], "application/x-latex": ["latex"], "application/x-lua-bytecode": ["luac"], "application/x-lzh-compressed": ["lzh", "lha"], "application/x-makeself": ["run"], "application/x-mie": ["mie"], "application/x-mobipocket-ebook": ["prc", "mobi"], "application/x-ms-application": ["application"], "application/x-ms-shortcut": ["lnk"], "application/x-ms-wmd": ["wmd"], "application/x-ms-wmz": ["wmz"], "application/x-ms-xbap": ["xbap"], "application/x-msaccess": ["mdb"], "application/x-msbinder": ["obd"], "application/x-mscardfile": ["crd"], "application/x-msclip": ["clp"], "application/x-msdos-program": ["*exe"], "application/x-msdownload": ["*exe", "*dll", "com", "bat", "*msi"], "application/x-msmediaview": ["mvb", "m13", "m14"], "application/x-msmetafile": ["*wmf", "*wmz", "*emf", "emz"], "application/x-msmoney": ["mny"], "application/x-mspublisher": ["pub"], "application/x-msschedule": ["scd"], "application/x-msterminal": ["trm"], "application/x-mswrite": ["wri"], "application/x-netcdf": ["nc", "cdf"], "application/x-ns-proxy-autoconfig": ["pac"], "application/x-nzb": ["nzb"], "application/x-perl": ["pl", "pm"], "application/x-pilot": ["*prc", "*pdb"], "application/x-pkcs12": ["p12", "pfx"], "application/x-pkcs7-certificates": ["p7b", "spc"], "application/x-pkcs7-certreqresp": ["p7r"], "application/x-rar-compressed": ["*rar"], "application/x-redhat-package-manager": ["rpm"], "application/x-research-info-systems": ["ris"], "application/x-sea": ["sea"], "application/x-sh": ["sh"], "application/x-shar": ["shar"], "application/x-shockwave-flash": ["swf"], "application/x-silverlight-app": ["xap"], "application/x-sql": ["sql"], "application/x-stuffit": ["sit"], "application/x-stuffitx": ["sitx"], "application/x-subrip": ["srt"], "application/x-sv4cpio": ["sv4cpio"], "application/x-sv4crc": ["sv4crc"], "application/x-t3vm-image": ["t3"], "application/x-tads": ["gam"], "application/x-tar": ["tar"], "application/x-tcl": ["tcl", "tk"], "application/x-tex": ["tex"], "application/x-tex-tfm": ["tfm"], "application/x-texinfo": ["texinfo", "texi"], "application/x-tgif": ["*obj"], "application/x-ustar": ["ustar"], "application/x-virtualbox-hdd": ["hdd"], "application/x-virtualbox-ova": ["ova"], "application/x-virtualbox-ovf": ["ovf"], "application/x-virtualbox-vbox": ["vbox"], "application/x-virtualbox-vbox-extpack": ["vbox-extpack"], "application/x-virtualbox-vdi": ["vdi"], "application/x-virtualbox-vhd": ["vhd"], "application/x-virtualbox-vmdk": ["vmdk"], "application/x-wais-source": ["src"], "application/x-web-app-manifest+json": ["webapp"], "application/x-x509-ca-cert": ["der", "crt", "pem"], "application/x-xfig": ["fig"], "application/x-xliff+xml": ["*xlf"], "application/x-xpinstall": ["xpi"], "application/x-xz": ["xz"], "application/x-zmachine": ["z1", "z2", "z3", "z4", "z5", "z6", "z7", "z8"], "audio/vnd.dece.audio": ["uva", "uvva"], "audio/vnd.digital-winds": ["eol"], "audio/vnd.dra": ["dra"], "audio/vnd.dts": ["dts"], "audio/vnd.dts.hd": ["dtshd"], "audio/vnd.lucent.voice": ["lvp"], "audio/vnd.ms-playready.media.pya": ["pya"], "audio/vnd.nuera.ecelp4800": ["ecelp4800"], "audio/vnd.nuera.ecelp7470": ["ecelp7470"], "audio/vnd.nuera.ecelp9600": ["ecelp9600"], "audio/vnd.rip": ["rip"], "audio/x-aac": ["aac"], "audio/x-aiff": ["aif", "aiff", "aifc"], "audio/x-caf": ["caf"], "audio/x-flac": ["flac"], "audio/x-m4a": ["*m4a"], "audio/x-matroska": ["mka"], "audio/x-mpegurl": ["m3u"], "audio/x-ms-wax": ["wax"], "audio/x-ms-wma": ["wma"], "audio/x-pn-realaudio": ["ram", "ra"], "audio/x-pn-realaudio-plugin": ["rmp"], "audio/x-realaudio": ["*ra"], "audio/x-wav": ["*wav"], "chemical/x-cdx": ["cdx"], "chemical/x-cif": ["cif"], "chemical/x-cmdf": ["cmdf"], "chemical/x-cml": ["cml"], "chemical/x-csml": ["csml"], "chemical/x-xyz": ["xyz"], "image/prs.btif": ["btif"], "image/prs.pti": ["pti"], "image/vnd.adobe.photoshop": ["psd"], "image/vnd.airzip.accelerator.azv": ["azv"], "image/vnd.dece.graphic": ["uvi", "uvvi", "uvg", "uvvg"], "image/vnd.djvu": ["djvu", "djv"], "image/vnd.dvb.subtitle": ["*sub"], "image/vnd.dwg": ["dwg"], "image/vnd.dxf": ["dxf"], "image/vnd.fastbidsheet": ["fbs"], "image/vnd.fpx": ["fpx"], "image/vnd.fst": ["fst"], "image/vnd.fujixerox.edmics-mmr": ["mmr"], "image/vnd.fujixerox.edmics-rlc": ["rlc"], "image/vnd.microsoft.icon": ["ico"], "image/vnd.ms-dds": ["dds"], "image/vnd.ms-modi": ["mdi"], "image/vnd.ms-photo": ["wdp"], "image/vnd.net-fpx": ["npx"], "image/vnd.pco.b16": ["b16"], "image/vnd.tencent.tap": ["tap"], "image/vnd.valve.source.texture": ["vtf"], "image/vnd.wap.wbmp": ["wbmp"], "image/vnd.xiff": ["xif"], "image/vnd.zbrush.pcx": ["pcx"], "image/x-3ds": ["3ds"], "image/x-cmu-raster": ["ras"], "image/x-cmx": ["cmx"], "image/x-freehand": ["fh", "fhc", "fh4", "fh5", "fh7"], "image/x-icon": ["*ico"], "image/x-jng": ["jng"], "image/x-mrsid-image": ["sid"], "image/x-ms-bmp": ["*bmp"], "image/x-pcx": ["*pcx"], "image/x-pict": ["pic", "pct"], "image/x-portable-anymap": ["pnm"], "image/x-portable-bitmap": ["pbm"], "image/x-portable-graymap": ["pgm"], "image/x-portable-pixmap": ["ppm"], "image/x-rgb": ["rgb"], "image/x-tga": ["tga"], "image/x-xbitmap": ["xbm"], "image/x-xpixmap": ["xpm"], "image/x-xwindowdump": ["xwd"], "message/vnd.wfa.wsc": ["wsc"], "model/vnd.collada+xml": ["dae"], "model/vnd.dwf": ["dwf"], "model/vnd.gdl": ["gdl"], "model/vnd.gtw": ["gtw"], "model/vnd.mts": ["mts"], "model/vnd.opengex": ["ogex"], "model/vnd.parasolid.transmit.binary": ["x_b"], "model/vnd.parasolid.transmit.text": ["x_t"], "model/vnd.sap.vds": ["vds"], "model/vnd.usdz+zip": ["usdz"], "model/vnd.valve.source.compiled-map": ["bsp"], "model/vnd.vtu": ["vtu"], "text/prs.lines.tag": ["dsc"], "text/vnd.curl": ["curl"], "text/vnd.curl.dcurl": ["dcurl"], "text/vnd.curl.mcurl": ["mcurl"], "text/vnd.curl.scurl": ["scurl"], "text/vnd.dvb.subtitle": ["sub"], "text/vnd.fly": ["fly"], "text/vnd.fmi.flexstor": ["flx"], "text/vnd.graphviz": ["gv"], "text/vnd.in3d.3dml": ["3dml"], "text/vnd.in3d.spot": ["spot"], "text/vnd.sun.j2me.app-descriptor": ["jad"], "text/vnd.wap.wml": ["wml"], "text/vnd.wap.wmlscript": ["wmls"], "text/x-asm": ["s", "asm"], "text/x-c": ["c", "cc", "cxx", "cpp", "h", "hh", "dic"], "text/x-component": ["htc"], "text/x-fortran": ["f", "for", "f77", "f90"], "text/x-handlebars-template": ["hbs"], "text/x-java-source": ["java"], "text/x-lua": ["lua"], "text/x-markdown": ["mkd"], "text/x-nfo": ["nfo"], "text/x-opml": ["opml"], "text/x-org": ["*org"], "text/x-pascal": ["p", "pas"], "text/x-processing": ["pde"], "text/x-sass": ["sass"], "text/x-scss": ["scss"], "text/x-setext": ["etx"], "text/x-sfv": ["sfv"], "text/x-suse-ymp": ["ymp"], "text/x-uuencode": ["uu"], "text/x-vcalendar": ["vcs"], "text/x-vcard": ["vcf"], "video/vnd.dece.hd": ["uvh", "uvvh"], "video/vnd.dece.mobile": ["uvm", "uvvm"], "video/vnd.dece.pd": ["uvp", "uvvp"], "video/vnd.dece.sd": ["uvs", "uvvs"], "video/vnd.dece.video": ["uvv", "uvvv"], "video/vnd.dvb.file": ["dvb"], "video/vnd.fvt": ["fvt"], "video/vnd.mpegurl": ["mxu", "m4u"], "video/vnd.ms-playready.media.pyv": ["pyv"], "video/vnd.uvvu.mp4": ["uvu", "uvvu"], "video/vnd.vivo": ["viv"], "video/x-f4v": ["f4v"], "video/x-fli": ["fli"], "video/x-flv": ["flv"], "video/x-m4v": ["m4v"], "video/x-matroska": ["mkv", "mk3d", "mks"], "video/x-mng": ["mng"], "video/x-ms-asf": ["asf", "asx"], "video/x-ms-vob": ["vob"], "video/x-ms-wm": ["wm"], "video/x-ms-wmv": ["wmv"], "video/x-ms-wmx": ["wmx"], "video/x-ms-wvx": ["wvx"], "video/x-msvideo": ["avi"], "video/x-sgi-movie": ["movie"], "video/x-smv": ["smv"], "x-conference/x-cooltalk": ["ice"] });
function FileUploader(props) {
  const fileInputRef = reactExports.useRef(null), uploadButtonRef = reactExports.useRef(null), accept = function(extensions) {
    if (!("cordova" in window) && !function() {
      const userAgent = window.navigator.userAgent, iOS = /iP(ad|hone)/i.test(userAgent), webKit = /WebKit/i.test(userAgent);
      return iOS && webKit && !/(CriOS|FxiOS|OPiOS|mercury)/i.test(userAgent);
    }())
      return extensions;
    const mimeTypes = /* @__PURE__ */ new Set();
    for (const extension of extensions.split(",")) {
      const mimeType = mime.getType(extension);
      if (!mimeType)
        return "*/*";
      mimeTypes.add(mimeType);
    }
    if (!mimeTypes.size)
      return "*/*";
    return Array.from(mimeTypes).join("cordova" in window ? ";" : ",");
  }(props.extensions);
  return reactExports.useEffect(() => props.upload.setValidator((file) => function(file2, allowedExtensions, maxFileSize) {
    if (file2) {
      const extension = ensure(file2.name.toLowerCase().split(".").pop());
      if (allowedExtensions) {
        if (void 0 === allowedExtensions.split(",").find((element) => element.trim() === `.${extension.trim()}`))
          return translate("mxui.widget.FileInput", "incorrect_extension", allowedExtensions);
      }
      const fileSize = Number(file2.size) / 1048576;
      if (fileSize > maxFileSize)
        return translate("mxui.widget.FileInput", "file_too_large", fileSize.toFixed(2), maxFileSize.toString());
    }
    return;
  }(file, props.extensions, props.maxFileSize)), []), jsxRuntimeExports.jsxs(reactExports.Fragment, { children: [jsxRuntimeExports.jsx("form", { className: "sr-only", encType: "multipart/form-data", method: "POST", onSubmit: () => false, children: jsxRuntimeExports.jsx("input", { type: "file", disabled: props.upload.readOnly, tabIndex: -1, ...accept && "*/*" !== accept ? { accept } : {}, ref: fileInputRef, onChange: (e) => {
    const file = ensure(e.target).files?.[0];
    props.upload.setValue(file);
  } }) }), jsxRuntimeExports.jsx("input", { type: "text", className: "form-control", readOnly: true, value: props.upload.value ? props.upload.value.name : translate("mxui.widget.FileInput", "no_file_selected"), "aria-labelledby": `${props.id}-label`, onClick: () => ensure(uploadButtonRef.current).focus() }), jsxRuntimeExports.jsx("button", { type: "button", disabled: props.upload.readOnly, className: "btn mx-button mx-fileinput-upload-button", id: `${props.id}-upload`, "aria-labelledby": `${props.id}-label ${props.id}-upload`, ref: uploadButtonRef, onClick: () => {
    fileInputRef.current && (fileInputRef.current.value = ""), ensure(fileInputRef.current).click();
  }, onKeyUp: (e) => {
    "Delete" !== e.key && "Backspace" !== e.key || (props.upload.setValue(void 0), e.stopPropagation());
  }, children: translate("mxui.widget.FileInput", "upload") })] });
}
function FileManager({ class: className, style, tabIndex, ...rest }) {
  return jsxRuntimeExports.jsxs("div", { className: classNames("mx-compound-control", className), "data-focusindex": tabIndex ?? 0, style, children: ["upload" in rest ? jsxRuntimeExports.jsx(FileUploader, { ...rest }) : null, "download" in rest ? jsxRuntimeExports.jsx(FileDownloader, { ...rest }) : null, "upload" in rest ? jsxRuntimeExports.jsx(Alert, { id: `${rest.id}-error`, validation: rest.upload.validation }) : null] });
}

const logger$6 = LogManager.get().getLogger(), MicroflowObjectProperty = asProperty((config, store, widgetId) => {
  const friendlyId = toFriendlyId(widgetId), [form$] = store.useSlot(pageScope, "form"), form = readUntracked(form$)?.[0];
  return fromObjectProperty$(config, store, widgetId, getRuntimeArguments$(config.argMap, store, widgetId), async (args) => {
    try {
      !function(args2) {
        logger$6.debug(`Fetching object using microflow '${config.operationId}' for widget ${friendlyId}`, "parameter mapping:", args2);
      }(args);
      const result = await onlineData().retrieveByMicroflow(config.operationId, args, form);
      return function(mxObject, extra) {
        const guid = mxObject?.getGuid();
        logger$6.debug(guid ? `Received object '${guid}' and ${extra.length} objects over schema for widget ${friendlyId}` : `Received no object for widget ${friendlyId}`, "extra ids", extra.map((o) => o.getGuid()));
      }(result.mxObjects[0], result.extra), result.mxObjects[0] ? available(result.mxObjects[0]) : unavailable();
    } catch (e) {
      return function(widgetId2, e2) {
        handleError(new Error(`An error occurred while executing object data source microflow for widget ${toFriendlyId(widgetId2)}: ${e2 instanceof Error ? e2.message : e2}`));
      }(widgetId, e), unavailable();
    }
  });
});

function conditionalExpression(condition, then, elseExpr) {
  return { type: "conditional", condition, then, else: elseExpr };
}
function functionExpression(name, arg1, arg2) {
  return { type: "function", name, parameters: void 0 === arg2 ? [arg1] : [arg1, arg2] };
}
function literalExpression(value) {
  return { type: "literal", value };
}
function literalNumericExpression(value) {
  return { type: "literalNumeric", value };
}
function variableExpression(variableName, attribute) {
  return void 0 !== attribute ? { type: "variable", variable: variableName, path: attribute } : { type: "variable", variable: variableName };
}
const attributeIdToSortingFlag = {};
function registerSortingAttribute(attributeId, sortable) {
  attributeIdToSortingFlag[attributeId] = sortable;
}
function ensureValidAttribute(attributeId) {
  const attributeInfo = getAttributeInfoById(attributeId), sortable = attributeIdToSortingFlag[attributeId];
  if (void 0 === attributeInfo || void 0 === sortable)
    throw new AssertionError(`Sort order item: invalid attribute id '${attributeId}'`);
  return { attributePath: attributeInfo.attributePath, sortable };
}
function convertToSortSpecs(sortInstructions) {
  return sortInstructions.map((s) => [ensureValidAttribute(s[0]).attributePath, s[1]]);
}
function convertToSortInstructions(sortSpecs, dataSourceId) {
  return sortSpecs.map((s) => {
    const attributeId = ensureAttributeId(s[0], dataSourceId);
    return registerSortingAttribute(attributeId, true), [attributeId, s[1]];
  });
}
function convertSortInstructionToExpression(sortInstruction) {
  const attributePath = ensure(getAttributeInfoById(sortInstruction[0])).attributePath, attributeType = ensure(getAttributeTypeById(sortInstruction[0])), attributePathExpression = variableExpression("currentObject", attributePath);
  return "String" === attributeType ? functionExpression("toLowerCase", attributePathExpression) : attributePathExpression;
}
function getCompareFunction(sortOrder) {
  return function(item1, item2) {
    let compareResult = 0;
    for (let i = 0; i < sortOrder.length && 0 === compareResult; i++) {
      const sortValue1 = item1.sortValues[i], sortValue2 = item2.sortValues[i], sortInstruction = ensure(sortOrder[i]), factor = "asc" === sortInstruction[1] ? 1 : -1;
      if (sortValue1 === sortValue2)
        continue;
      if (void 0 === sortValue1 || "" === sortValue1) {
        compareResult = factor;
        break;
      }
      if (void 0 === sortValue2 || "" === sortValue2) {
        compareResult = -factor;
        break;
      }
      switch (ensure(getAttributeTypeById(sortInstruction[0]))) {
        case "AutoNumber":
          compareResult = Big(sortValue1).cmp(Big(sortValue2));
          break;
        case "String":
        case "Enum":
        case "HashString":
          compareResult = sortValue1 > sortValue2 ? 1 : -1;
          break;
        case "Long":
        case "Integer":
        case "Decimal":
          sortValue1 instanceof Big && sortValue2 instanceof Big || crash(), compareResult = sortValue1.cmp(sortValue2);
          break;
        case "DateTime":
          sortValue1 instanceof Date && sortValue2 instanceof Date || crash(), compareResult = sortValue1.getTime() > sortValue2.getTime() ? 1 : -1;
          break;
        case "Boolean":
          compareResult = sortValue1 ? 1 : -1;
          break;
        default:
          crash();
      }
      compareResult *= factor;
    }
    if (0 === compareResult) {
      const factor = "asc" === ensure(sortOrder[0])[1] ? 1 : -1;
      compareResult = item1.mxObject.getGuid() > item2.mxObject.getGuid() ? factor : -factor;
    }
    return compareResult;
  };
}
function equalSortInstructions(a, b) {
  return deepEqual$1(a, b);
}
function assertIsValidSortOrder(options, dataSourceId) {
  if (void 0 === options)
    return true;
  if (!Array.isArray(options))
    throw new AssertionError("Sort order: must be array");
  return options.forEach((o) => function(sortItem) {
    if (!Array.isArray(sortItem) || 2 !== sortItem.length)
      throw new AssertionError("Sort order item: must be an array with 2 elements");
    const [id, dir] = sortItem;
    if (!function(id2) {
      return ensureValidAttribute(id2).sortable;
    }(id))
      throw new AssertionError(`Sort order item: attribute with id '${id}' is not sortable`);
    if (getAttributeInfoById(id).dataSourceId !== dataSourceId)
      throw new AssertionError(`Sort order item: attribute with id '${id}' is linked to a different data source`);
    if ("asc" !== dir && "desc" !== dir)
      throw new AssertionError(`Sort order item: sort direction must be 'asc' or 'desc'. Got: '${dir}'`);
  }(o)), true;
}

function convertFilterConditionToXPath(filter) {
  if (void 0 === filter)
    return "";
  const queryFilter = convertFilterExpressionToQueryFilter(filter);
  return `[${toXpathConstraint(queryFilter)}]`;
}
function convertFilterExpressionToExpression(filter) {
  switch (filter.type) {
    case "attribute":
      const attributePath = ensure(getAttributeInfoById(filter.attributeId)).attributePath;
      return variableExpression("currentObject", attributePath);
    case "literal":
      return "Numeric" === filter.valueType ? literalNumericExpression(filter.value) : literalExpression(filter.value ?? null);
    case "function":
      if ("arg" in filter)
        return functionExpression(filter.name, convertFilterExpressionToExpression(filter.arg));
      if ("arg1" in filter) {
        if (!function(filter2) {
          return filter2.name in filterFunctionsToExpressionFunctions;
        }(filter))
          return convertFilterExpressionToExpression(expandDayFilter(filter));
        const isCaseInsensitive = function(filter2) {
          switch (filter2.name) {
            case "starts-with":
            case "ends-with":
              return true;
            case "contains":
            case "=":
            case "!=":
            case ">":
            case ">=":
            case "<":
            case "<=":
              return isStringExpression(filter2.arg1) && isStringExpression(filter2.arg2);
            default:
              return false;
          }
        }(filter), transform = (e) => isCaseInsensitive ? functionExpression("toLowerCase", e) : e, arg1 = transform(convertFilterExpressionToExpression(filter.arg1)), arg2 = transform(convertFilterExpressionToExpression(filter.arg2)), fnExpr = functionExpression(filterFunctionsToExpressionFunctions[filter.name], arg1, arg2);
        return nullUnsafeFilterFunctions.includes(filter.name) ? conditionalExpression(functionExpression("=", arg1, literalExpression(null)), literalExpression(false), conditionalExpression(functionExpression("=", arg2, literalExpression(null)), literalExpression(false), fnExpr)) : fnExpr;
      }
      return filter.args.map(convertFilterExpressionToExpression).reduce((prev, curr) => "and" === filter.name ? conditionalExpression(prev, curr, literalExpression(false)) : conditionalExpression(prev, literalExpression(true), curr));
    case "association":
      const associationPath = ensure(getAssociationInfoById(filter.associationId)).associationPath;
      return variableExpression("currentObject", associationPath);
  }
}
const dayFilterFunctions = ["day:=", "day:!=", "day:>", "day:>=", "day:<", "day:<="];
function expandDayFilter(filter) {
  const filterAttribute = filter.arg1, dayValue = startOfDay(filter.arg2.value);
  switch (filter.name) {
    case "day:=":
      return and(greaterThanOrEqual(filterAttribute, literal(dayValue)), lessThan(filterAttribute, literal(addDays(dayValue, 1))));
    case "day:!=":
      return or(lessThan(filterAttribute, literal(dayValue)), greaterThanOrEqual(filterAttribute, literal(addDays(dayValue, 1))));
    case "day:>":
      return greaterThanOrEqual(filterAttribute, literal(addDays(dayValue, 1)));
    case "day:>=":
      return greaterThanOrEqual(filterAttribute, literal(dayValue));
    case "day:<":
      return lessThan(filterAttribute, literal(dayValue));
    case "day:<=":
      return lessThan(filterAttribute, literal(addDays(dayValue, 1)));
  }
}
function isStringExpression(expression) {
  switch (expression.type) {
    case "literal":
      return "string" === expression.valueType;
    case "attribute":
      return "String" === ensure(getAttributeTypeById(expression.attributeId));
    case "association":
      return false;
  }
}
const filterFunctionsToExpressionFunctions = { "=": "=", "!=": "!=", ">": ">", ">=": ">=", "<": "<", "<=": "<=", contains: "contains", "starts-with": "startsWith", "ends-with": "endsWith" }, nullUnsafeFilterFunctions = [">", ">=", "<", "<="];
function convertFilterExpressionToQueryFilter(filter, isDelocalizedDateExpression = false, expandEqualsEmpty = true) {
  switch (filter.type) {
    case "attribute":
      return { type: "attribute", attribute: ensure(getAttributeInfoById(filter.attributeId)).attributePath, attributeType: ensure(getAttributeTypeById(filter.attributeId)) };
    case "literal":
      return { type: "value", value: "DateTime" === filter.valueType && isDelocalizedDateExpression ? delocalizeDate(filter.value) : filter.value, isGuid: "Reference" === filter.valueType || "ReferenceSet" === filter.valueType };
    case "function":
      if (function(filter2) {
        return dayFilterFunctions.includes(filter2.name);
      }(filter))
        return convertFilterExpressionToQueryFilter(expandDayFilter(filter));
      if (expandEqualsEmpty && ("=" === (expr = filter).name && (isEmptyLiteral(expr.arg1) || isEmptyLiteral(expr.arg2))))
        return function(filter2) {
          const queryFilter = convertFilterExpressionToQueryFilter(filter2, false, false), attribute = [filter2.arg1, filter2.arg2].find(isAttributeExpression);
          if (attribute) {
            const pathElements = ensure(getAttributeInfoById(attribute.attributeId)).attributePath.split("/");
            if (1 === pathElements.length)
              return queryFilter;
            pathElements.pop();
            const expandedFilters = [queryFilter], emptyLiteral = { type: "value", value: void 0, isGuid: true };
            for (; pathElements.length; ) {
              const associationPath = pathElements.join("/");
              pathElements.splice(pathElements.length - 2, 2), expandedFilters.unshift({ type: "function", name: "=", parameters: [{ type: "association", associationPath, associationType: "Reference" }, emptyLiteral] });
            }
            return { type: "function", name: "or", parameters: expandedFilters };
          }
          return queryFilter;
        }(filter);
      const parameters = "arg" in filter ? [filter.arg] : "arg1" in filter ? [filter.arg1, filter.arg2] : filter.args, delocalizeDateLiterals = parameters.some(containsUnlocalizedDateAttribute);
      return { type: "function", name: filter.name, parameters: parameters.map((p) => convertFilterExpressionToQueryFilter(p, delocalizeDateLiterals)) };
    case "association":
      return { type: "association", associationPath: ensure(getAssociationInfoById(filter.associationId)).associationPath, associationType: ensure(getAssociationTypeById(filter.associationId)) };
  }
  var expr;
}
function containsUnlocalizedDateAttribute(expr) {
  return "attribute" === expr.type && isUnlocalizedDateAttribute(expr.attributeId);
}
function isEmptyLiteral(expr) {
  return "literal" === expr.type && void 0 === expr.value;
}

function objectListTrigger(config, initialSortOrder, store, widgetId, parameters$) {
  const [entityUpdate$, loadedCallback] = fromMxSubscription$(`Entity subscription of data source of ${widgetId}`, store, { entity: config.entity }), intervalRefresh$ = config.refreshTime ? fromTimer$(`Refresh of data source of ${widgetId}`, config.refreshTime) : fromConstant$(void 0), parentIsReady$ = getParentIsReady$(config.scope, store, widgetId), loadDelayed$ = function(widgetId2) {
    const [isDelayed$, setIsDelayed] = useValue(`Load delay of data source of ${widgetId2}`, true);
    return setTimeout(action(() => setIsDelayed(false)), 1), isDelayed$;
  }(widgetId), shouldLoad$ = fromComputation$(`Load breaker of ${widgetId}`, () => parentIsReady$.dependOn() && !loadDelayed$.dependOn()), [limit$, setLimit] = store.useSlot(widgetId, `${config.dataSourceId}/limit`), returnEmpty$ = fromComputation$(`Return empty of ${widgetId}`, () => (limit$.dependOn() ?? Number.POSITIVE_INFINITY) <= 0), previousParameters$ = getPreviousValue$(parameters$), [sortOrder$, setSortOrder] = store.useSlot(widgetId, `${config.dataSourceId}/sortOrder`), [filter$, setFilter] = store.useSlot(widgetId, `${config.dataSourceId}/filter`), [reload$, setReload] = useValue(`Reload ${widgetId}`, []);
  let fetchId = -1;
  const rawFetchTrigger$ = fromComputation$(`Load trigger of data source of ${widgetId}`, () => {
    if (entityUpdate$.dependOn(), intervalRefresh$.dependOn(), reload$.dependOn(), shouldLoad$.dependOn()) {
      const p = parameters$.dependOn();
      return "unavailable" === p.status && loadedCallback(), mapL(p, (parameters) => returnEmpty$.dependOn() ? { empty: true } : { empty: false, parameters, id: ++fetchId });
    }
    return loadedCallback(), loading();
  }), fetchTrigger$ = withFormSuspension$(store, widgetId, rawFetchTrigger$, loadedCallback), [offset$, setOffset] = store.useSlot(widgetId, `${config.dataSourceId}/offset`), retrieveParameters$ = fromMutableComputation$(`Retrieve parameters info of data source of ${widgetId}`, () => {
    const limit = limit$.dependOn();
    let offset = offset$.dependOn();
    const sortOrder = sortOrder$.dependOn(), filter = filter$.dependOn();
    if (shouldLoad$.dependOn()) {
      const previousParameter = previousParameters$.dependOn();
      void 0 === previousParameter || deepEqual$1(parameters$.dependOn(), previousParameter) || (offset = 0, scheduleSideEffect(() => silentlyResetOffset));
    }
    return { offset: offset ?? 0, limit: limit ?? Number.POSITIVE_INFINITY, sortOrder: sortOrder ?? initialSortOrder, filter };
  }), [needTotalCount$, setRequestTotalCount] = useValue(`Request total count of ${widgetId}`, false), silentlyResetOffset = () => retrieveParameters$.muted(() => setOffset(0));
  return { fetchTrigger$, retrieveParameters$, silentlyResetOffset, needTotalCount$, immediateRetrieveParametersSetters: getRetrieveParametersSetters(runInAction), delayedRetrieveParametersSetters: getRetrieveParametersSetters(scheduleAction), loadedCallback };
  function getRetrieveParametersSetters(scheduler) {
    return { setOffset(offset) {
      assertIsPositiveInteger(offset) && Number.isFinite(offset) && scheduler(() => setOffset(offset));
    }, setLimit(limit) {
      (void 0 === limit || assertIsPositiveInteger(limit)) && scheduler(() => setLimit(Number.isFinite(limit) ? limit : void 0));
    }, requestTotalCount(needTotalCount) {
      assertIsBoolean(needTotalCount) && scheduler(() => setRequestTotalCount(needTotalCount));
    }, setSortOrder: (sortOrder) => {
      assertIsValidSortOrder(sortOrder, config.dataSourceId) && scheduler(() => {
        equalSortInstructions(readUntracked(sortOrder$), sortOrder) || setSortOrder(sortOrder);
      });
    }, setFilter: (filter) => {
      assertValidFilterCondition$1(filter, config.dataSourceId) && scheduler(() => {
        equalFilterCondition(readUntracked(filter$), filter) || setFilter(filter);
      });
    }, reload: () => {
      scheduler(() => {
        setReload([]);
      });
    } };
  }
}
function withFirstLoadDoneSharing$(value$, store, widgetId, propertyPath) {
  const slotId = propertyPath ? `${widgetId}/${propertyPath}` : widgetId, [firstLoadDone$, setFirstLoadDone] = store.useSlot(slotId, "firstLoadDone");
  return withSideEffect$(`Share firstLoadDone state of ${slotId}`, value$, (value) => {
    readUntracked(firstLoadDone$) || setFirstLoadDone("loading" !== value.status);
  });
}
function asReloadableListValue$(value$) {
  return asReloadable$(value$, (oldValue) => {
    const { filter, sortOrder, offset, limit, items, totalCount, hasMoreItems } = oldValue;
    return { filter, sortOrder, offset, limit, items, totalCount, hasMoreItems };
  });
}
function withSetItemsStoreSideEffect$(widgetId, dataSourceId, listValue$, store) {
  const [, setDataSourceObjects] = store.useSlot(widgetId, `${dataSourceId}/items`);
  return withSideEffect$(`Published list value of data source: ${dataSourceId}`, listValue$, ({ status, items }) => setDataSourceObjects("available" === status ? { status, value: items } : { status }));
}

function getServerPagedList$(config, initialSort, store, widgetId, parameters$, fetchData) {
  const { fetchTrigger$, retrieveParameters$, silentlyResetOffset, needTotalCount$, immediateRetrieveParametersSetters, delayedRetrieveParametersSetters, loadedCallback } = objectListTrigger(config, initialSort, store, widgetId, parameters$), listChunk$ = fromRequest$(`Load data of ${widgetId}`, () => {
    const trigger = fetchTrigger$.dependOn();
    if ("available" !== trigger.status)
      return trigger;
    const retrieveParameters = retrieveParameters$.dependOn();
    if (trigger.value.empty)
      return available({ offset: retrieveParameters.offset, limit: 0, sortOrder: retrieveParameters.sortOrder, filter: retrieveParameters.filter, objects: [], hasMoreItems: true, parameters: void 0, triggerId: -1, requestedTotalCount: false });
    const { parameters, id: triggerId } = trigger.value, needTotalCount = needTotalCount$.dependOn(), currentChunk = readUntracked(fixedListChunk$), { sliceToKeep, pageToFetch, loadAtEnd } = function(currentList, nextQuery) {
      if ("available" !== currentList.status)
        return {};
      if (!equalSortInstructions(currentList.value.sortOrder, nextQuery.sortOrder))
        return {};
      if (!equalFilterCondition(currentList.value.filter, nextQuery.filter))
        return {};
      const [currentStart, currentEnd] = [currentList.value.offset, currentList.value.offset + currentList.value.limit], [newStart, newEnd] = [nextQuery.offset, nextQuery.offset + nextQuery.limit], [keepStart, keepEnd] = [Math.max(currentStart, newStart), Math.min(currentEnd, newEnd)];
      if (keepStart >= keepEnd)
        return {};
      if (newStart < keepStart && newEnd > keepEnd)
        return {};
      const loadAtEnd2 = newEnd > currentEnd, pageToFetch2 = { offset: loadAtEnd2 ? keepEnd : newStart, limit: newEnd - newStart - (keepEnd - keepStart) };
      return { sliceToKeep: [keepStart - currentStart, keepEnd - currentStart], loadAtEnd: loadAtEnd2, pageToFetch: pageToFetch2.limit > 0 ? pageToFetch2 : void 0 };
    }(currentChunk, retrieveParameters);
    if ("available" !== currentChunk.status || currentChunk.value.triggerId !== triggerId || needTotalCount && !currentChunk.value.requestedTotalCount || void 0 === sliceToKeep)
      return fetchData(parameters, retrieveParameters, needTotalCount).then(({ mxObjects, totalCount, hasMoreItems }) => available({ ...retrieveParameters, parameters, triggerId, objects: mxObjects, totalCount, hasMoreItems, requestedTotalCount: needTotalCount }));
    if (void 0 === pageToFetch)
      return available({ ...currentChunk.value, ...retrieveParameters, objects: currentChunk.value.objects.slice(...sliceToKeep), hasMoreItems: !!(sliceToKeep[1] && sliceToKeep[1] < currentChunk.value.objects.length) || currentChunk.value.hasMoreItems, totalCount: needTotalCount ? currentChunk.value.totalCount : void 0, requestedTotalCount: needTotalCount });
    {
      const reusedObjects = currentChunk.value.objects.slice(...sliceToKeep);
      return [currentChunk, fetchData(parameters, { ...pageToFetch, sortOrder: retrieveParameters.sortOrder, filter: retrieveParameters.filter }, needTotalCount).then(({ mxObjects, hasMoreItems, totalCount }) => available({ ...currentChunk.value, ...retrieveParameters, objects: loadAtEnd ? reusedObjects.concat(mxObjects) : mxObjects.concat(reusedObjects), hasMoreItems: loadAtEnd ? hasMoreItems : currentChunk.value.hasMoreItems, totalCount, requestedTotalCount: needTotalCount }))];
    }
  }), fixedListChunk$ = fromRequest$(`Retry to load data of ${widgetId}`, () => {
    const loadedChunk = listChunk$.dependOn();
    if ("available" !== loadedChunk.status)
      return loadedChunk;
    if (loadedChunk.value.objects.length > 0 || 0 === loadedChunk.value.offset)
      return loadedChunk;
    if (scheduleSideEffect(silentlyResetOffset), 0 === loadedChunk.value.limit)
      return available({ ...loadedChunk.value, offset: 0 });
    const { limit, sortOrder, filter } = readUntracked(retrieveParameters$), needTotalCount = readUntracked(needTotalCount$);
    return fetchData(loadedChunk.value.parameters, { limit, offset: 0, sortOrder, filter }, needTotalCount).then(({ mxObjects, totalCount, hasMoreItems }) => available({ ...loadedChunk.value, limit, sortOrder, filter, offset: 0, objects: mxObjects, totalCount, hasMoreItems }));
  }), subscribedListChunk$ = withObjectKeeping$(widgetId, store, fixedListChunk$, (listChunk) => listChunk.objects), listValue$ = fromComputation$(`Prepare data of ${widgetId}`, () => {
    const listChunk = subscribedListChunk$.dependOn();
    let result;
    if ("available" === listChunk.status) {
      const { objects, totalCount, offset, limit, hasMoreItems, sortOrder, filter } = listChunk.value;
      result = { status: "available", offset, limit, sortOrder, filter, items: objects.map((obj) => toObjectItem(obj, config.dataSourceId)), hasMoreItems, totalCount, ...delayedRetrieveParametersSetters };
    } else
      result = { status: listChunk.status, ...readUntracked(retrieveParameters$), ...immediateRetrieveParametersSetters };
    return "loading" !== result.status && store.addUpdateCallback(loadedCallback), result;
  }), storedItemsListValue$ = withSetItemsStoreSideEffect$(widgetId, config.dataSourceId, listValue$, store);
  return asReloadableListValue$(withFirstLoadDoneSharing$(storedItemsListValue$, store, widgetId));
}

const logger$5 = LogManager.get().getLogger(), OfflineDatabaseObjectListProperty = asProperty((config, store, widgetId, propertyPath) => {
  const queryArguments$ = Object.fromEntries(Object.entries(config.arguments ?? {}).map(([runtimeName, [source]]) => tuple(ensure(runtimeName.split("$")[0]), getSubscribedObjectState$(store, source)))), constraints = config.constraints, fetchParameters$ = constraints ? fromComputation$(`queryFilter for ${widgetId}/${propertyPath}`, () => {
    const queryArguments = mapValues(queryArguments$, (value$) => value$.dependOn());
    return Object.values(queryArguments).some((value) => "loading" === value.status) ? loading() : Object.values(queryArguments).some((value) => "unavailable" === value.status) && config.fetchOnlyWithAllParams ? unavailable() : available(toQueryFilter(constraints, (name) => getOrElseL(ensure(queryArguments[name]), void 0)));
  }) : fromConstant$(available(void 0));
  return getServerPagedList$(config, config.sort ? convertToSortInstructions(config.sort, config.dataSourceId) : [], store, widgetId, fetchParameters$, async function(parameter, { offset, limit, sortOrder, filter }, needTotalCount) {
    const options = { offset, ...limit !== Number.POSITIVE_INFINITY ? { amount: limit } : {}, sort: convertToSortSpecs(sortOrder) }, combinedFilter = function(filter1, filter2) {
      if (void 0 === filter2)
        return filter1;
      const queryFilter2 = convertFilterExpressionToQueryFilter(filter2);
      if (void 0 === filter1)
        return queryFilter2;
      return { type: "function", name: "and", parameters: [filter1, queryFilter2] };
    }(parameter, filter);
    logger$5.debug(`Fetching data for entity '${config.entity}' for widget ${toFriendlyId(widgetId)}`);
    const { mxObjects, count } = await offlineData().retrieve(config.entity, combinedFilter, options);
    return function(objects) {
      logger$5.debug(`Received ${objects.length} objects for widget ${toFriendlyId(widgetId)}`, "object ids:", objects.map((mxobj) => mxobj.getGuid()));
    }(mxObjects), { mxObjects, totalCount: needTotalCount ? count : void 0, hasMoreItems: offset + limit < count };
  });
});

const logger$4 = LogManager.get().getLogger(), OnlineDatabaseObjectListProperty = asProperty((config, store, widgetId, propertyPath) => getServerPagedList$(config, config.sort ? convertToSortInstructions(config.sort, config.dataSourceId) : [], store, widgetId, function(fetchOnlyWithAllParams = false) {
  const argumentValues$ = Object.entries(config.arguments ?? {}).map(([name, [source, attribute]]) => {
    const [object$] = store.useSlot(source, "object");
    return { name, value$: fromComputation$(`Subexpression ${name} in ${widgetId}/${propertyPath}`, () => mapL(flatMapL(object$.dependOn() ?? loading(), (object) => object.isUnavailable() ? unavailable() : available(object)), (object) => (dependOnSubscription({ guid: object.getGuid(), tag: widgetId }, store), void 0 === attribute ? expressionVariableToRuntimeArgument(object) : (dependOnSubscription({ guid: object.getGuid(), attr: attribute, tag: widgetId }, store), toRuntimeArgument(object, attribute))))) };
  });
  return fromComputation$(`Runtime arguments of ${widgetId}/${propertyPath}`, () => {
    const argumentValues = argumentValues$.map(({ name, value$ }) => ({ name, value: value$.dependOn() }));
    if (argumentValues.some(({ value }) => "loading" === value.status))
      return loading();
    if (argumentValues.some(({ value }) => "unavailable" === value.status) && fetchOnlyWithAllParams)
      return unavailable();
    const runtimeArguments = argumentValues.map(({ name, value }) => ({ name, value: getOrElseL(value, void 0) })).filter(({ value }) => void 0 !== value).map(({ name, value }) => tuple(name, ensure(value)));
    return available(Object.fromEntries(runtimeArguments));
  });
}(config.fetchOnlyWithAllParams), async function(args, { offset, limit, sortOrder, filter }, needTotalCount) {
  !function(runtimeArgs) {
    const friendlyId = toFriendlyId(widgetId);
    logger$4.debug(Object.values(runtimeArgs).length ? `Fetching data using XPath with arguments '${JSON.stringify(runtimeArgs)}' and operationId '${config.operationId}' for widget ${friendlyId}` : `Fetching data using XPath with operationId '${config.operationId}' for widget ${friendlyId}`);
  }(args);
  const result = await onlineData().retrieveByXPath(config.operationId, args, convertFilterConditionToXPath(filter), { offset, amount: limit, sort: convertToSortSpecs(sortOrder) }, needTotalCount);
  return function(objects) {
    logger$4.debug(`Received ${objects.length} objects for widget ${toFriendlyId(widgetId)}`, "object ids:", objects.map((mxobj) => mxobj.getGuid()));
  }(result.mxObjects), { mxObjects: result.mxObjects, hasMoreItems: result.hasMoreItems, totalCount: result.count };
}));

const DatabaseObjectListProperty = (config) => mx.isOffline(config.entity) ? OfflineDatabaseObjectListProperty(config) : OnlineDatabaseObjectListProperty(config);

const IconProperty = ({ icon }) => {
  if (!icon)
    throw new AssertionError();
  switch (icon.type) {
    case "image":
      return asResult(dynAvailable({ type: icon.type, iconUrl: getStaticResourceUrlFromPath(icon.iconUrl) }));
    case "glyph":
    case "icon":
      return asResult(dynAvailable(icon));
  }
};

const logger$3 = LogManager.get().getLogger();
function listItemProperty(getValue$, description, dataSourceId, itemValueTemplate, legacyItems = false) {
  let reactions = {};
  const lastRequestedItems = /* @__PURE__ */ new Set(), [isUpdated, triggerUpdate] = useDependency(`Update ${description}`, () => {
    Object.values(reactions).forEach((r) => r.disposer()), reactions = {};
  });
  return [fromComputation$(`Value for ${description}`, () => {
    isUpdated.dependOn();
    const itemGetter = (item) => function(item2) {
      let returningData = true;
      lastRequestedItems.add(item2.id);
      const mxObject = fromObjectItem(item2, dataSourceId, description), currentReaction = reactions[item2.id];
      if (currentReaction && currentReaction.source !== mxObject && (currentReaction.disposer(), delete reactions[item2.id]), !(item2.id in reactions)) {
        const computedValue$ = getValue$(mxObject), entry = { source: mxObject };
        entry.disposer = reaction(() => (returningData || scheduleAction(triggerUpdate), computedValue$.dependOn()), (value) => entry.value = value, { fireImmediately: true }), reactions[item2.id] = entry;
      }
      return returningData = false, ensure(reactions[item2.id]).value;
    }(item);
    return Object.assign(legacyItems ? (item) => (logger$3.warn(`DEPRECATED: direct usage of ${description} as a function, use .get() instead -- will be removed in version: 10.0`), itemGetter(item)) : {}, itemValueTemplate, { get: itemGetter });
  }), function() {
    Object.entries(reactions).forEach(([key, value]) => {
      lastRequestedItems.has(key) || (value.disposer(), delete reactions[key]);
    }), lastRequestedItems.clear();
  }];
}

const ListActionProperty = asProperty((config, store, widgetId, propertyPath) => listItemProperty((object) => computeAction(config, store, widgetId, { [widgetId]: { object: { object } } }), `List action "${widgetId}/${propertyPath}"`, config.dataSourceId));

const logger$2 = LogManager.get().getLogger(), ListAttributeProperty = asProperty((config, store, widgetId, propertyPath) => {
  const defaultFormatter = createFormatter(config.entity, config.attribute, config.formatting ?? {}), description = `List attribute "${widgetId}/${propertyPath}"`;
  function attributeValue$(refObjects$, valueDescription) {
    const currentReferencedObjects$ = getAttribute$(refObjects$, config.attribute, store), value$ = fromComputation$(valueDescription, () => {
      const valueL = flatMapL(currentReferencedObjects$.dependOn(), (attribute) => attribute.access === Access.None ? (function(config2, widgetId2) {
        logger$2.debug(`No access to attribute "${config2.attribute}" of entity "${config2.entity}" in widget ${toFriendlyId(widgetId2)}.`);
      }(config, widgetId), unavailable()) : available(attribute.value)), value = getOrElseL(valueL, void 0), displayValue = value instanceof Array && config.isList ? value.map((v) => defaultFormatter.format(v)).join(", ") : defaultFormatter.format(value);
      return { status: valueL.status, value, displayValue, formatter: defaultFormatter, readOnly: true, setFormatter: () => unsupportedOperationError("setFormatter", widgetId), setValue: () => unsupportedOperationError("setValue", widgetId), setTextValue: () => unsupportedOperationError("setTextValue", widgetId), validation: void 0, setValidator: () => unsupportedOperationError("setValidator", widgetId), isList: config.isList };
    });
    return asReloadable$(value$, ({ value, displayValue }) => ({ value, displayValue }));
  }
  const attributePath = config.path ? `${config.path}/${config.attribute}` : config.attribute, sortable = config.sortable && !(mx.isOffline() && config.path), filterable = config.filterable && !(mx.isOffline() && config.path), id = ensureAttributeId(attributePath, config.dataSourceId), type = config.attributeType, universe = createUniverse(config.entity, config.attribute), enumUniverse = "Enum" === type ? universe : void 0;
  registerAttributeType(id, type, function(config2) {
    const entity = config2.path ? config2.path.split("/").reverse()[0] : config2.entity, isDateLocalized = getEntityMeta(entity)?.attributes[config2.attribute]?.isDateLocalized;
    return void 0 !== isDateLocalized && !isDateLocalized;
  }(config), enumUniverse), registerSortingAttribute(id, sortable), registerFilterAttribute(id, filterable);
  const isList = config.isList;
  return listItemProperty(function(object) {
    const rootObject$ = fromConstant$(available(object)), valueDescription = `${description} for object ${object.getGuid()}`;
    return config.isList ? attributeValue$(getObjectsByPath$(rootObject$, config.path, store), valueDescription) : attributeValue$(config.path ? getObjectByPath$(rootObject$, config.path, store) : rootObject$, valueDescription);
  }, description, config.dataSourceId, { id, sortable, filterable, type, formatter: defaultFormatter, universe, isList });
});
function unsupportedOperationError(functionName, widgetId) {
  throw new Error(`Widget ${toFriendlyId(widgetId)} is attempting to call "${functionName}". This operation is not yet supported on attributes linked to a datasource.`);
}

const SelectionProperty = asProperty(({ selectionType, dataSourceId, onChange }, store, widgetId, propertyPath) => {
  const description = `${widgetId}/${propertyPath}`, [slot$, setSlot] = store.useSlot(widgetId, "selection"), [dataSourceItems$] = store.useSlot(widgetId, `${dataSourceId}/items`), [items$, setItems] = useValue(`Selected items of ${description}`, []), onChangeHandler = function() {
    if (!onChange)
      return;
    const onChangeArguments$ = getActionArguments$(onChange.argMap, store, widgetId), [form$] = store.useSlot(pageScope, "form");
    return (value, oldValue) => {
      deepEqual$1(value, oldValue) || raiseOnChange(onChangeArguments$, form$, onChange, widgetId);
    };
  }();
  switch (selectionType) {
    case "Single":
      return selectionValue$();
    case "Multi":
      return void 0 === readUntracked(slot$) && setSlot([]), selectionValue$();
  }
  function updateSelectedItems(items) {
    const guids = items.map((i) => i.id), value = "Single" === selectionType ? guids[0] : guids, oldValue = readUntracked(slot$);
    setSlot(value), setItems(items), onChangeHandler?.(value, oldValue);
  }
  function setSelection(newValue) {
    if (!function(newValue2) {
      return "Single" === selectionType && (void 0 === newValue2 || isObjectItem(newValue2)) || "Multi" === selectionType && isObjectItemArray(newValue2);
    }(newValue))
      throw new AssertionError(`Value ${newValue} is not assignable to selection of type ${selectionType}. (${description})`);
    const newItems = asArray(newValue);
    if (newItems.some((o) => !isDataSourceValid(o, dataSourceId)))
      throw new AssertionError(`An ObjectItem can only be passed to a selection property that belongs to the same data source. (${description})`);
    if (newItems.length > 1 && new Set(newItems.map((o) => o.id)).size !== newItems.length)
      throw new AssertionError(`A multi-selection may not contain duplicate objects. (${description})`);
    runInAction(() => updateSelectedItems(newItems));
  }
  function selectionValue$() {
    const selectedItems$ = fromComputationWithDeepEquality$(`Selected items from data source of ${description}`, () => {
      const slot = asArray(slot$.dependOn()), dsItems = dataSourceItems$.dependOn() ?? loading();
      switch (dsItems.status) {
        case "loading":
          return items$.dependOn();
        case "unavailable":
          return filterByItems(slot, []);
        case "available":
          return filterByItems(slot, dsItems.value);
      }
    });
    function filterByItems(slot, items) {
      const itemsByGuid = toObjectByKey(items, (i) => i.id), selection = slot.map((guid) => itemsByGuid[guid]).filter((o) => o);
      return scheduleAction(() => updateSelectedItems(selection)), selection.length === slot.length ? selection : items$.dependOn();
    }
    return fromComputation$(`Selection value of ${description}`, () => {
      const selection = (value = selectedItems$.dependOn(), "Single" === selectionType ? value[0] : value);
      var value;
      return { type: selectionType, name: description, selection: Object.freeze(selection), setSelection: action((newValue) => setSelection(newValue)) };
    });
  }
  function asArray(value) {
    return Array.isArray(value) ? value : value ? [value] : [];
  }
});

const TemplatedWidgetProperty = asProperty(({ children, dataSourceId, editable }, _store, widgetId, propertyPath) => {
  const description = `widget template "${widgetId}/${propertyPath}"`;
  return fromConstant$({ get: (item) => {
    const namespace = `${widgetId}/${propertyPath}/${item.id}`;
    return jsxRuntimeExports.jsx(NestedStoreWithObject, { namespace, item, children: children() }, namespace);
  } });
  function NestedStoreWithObject(props) {
    return jsxRuntimeExports.jsx(NestedStoreProvider, { namespace: props.namespace, setupStore: reactExports.useCallback((store) => {
      const [, setObject] = store.useSlot(widgetId, "object"), [, setEditableObject] = store.useSlot(widgetId, "editableObject"), availableObject = available(fromObjectItem(props.item, dataSourceId, description));
      setObject(availableObject), editable && setEditableObject(availableObject);
    }, [props.item]), children: props.children });
  }
});

var reactDom$1 = {exports: {}};

var reactDom_development = {};

var scheduler$1 = {exports: {}};

var scheduler_development$1 = {};

(function (exports) {
	"use strict";
	/**
	 * @license React
	 * scheduler.development.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */
	if (true) {
	  (function() {
	    "use strict";
	    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
	      __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
	    }
	    var enableSchedulerDebugging = false;
	    var enableProfiling = false;
	    var frameYieldMs = 5;
	    function push(heap, node) {
	      var index = heap.length;
	      heap.push(node);
	      siftUp(heap, node, index);
	    }
	    function peek(heap) {
	      return heap.length === 0 ? null : heap[0];
	    }
	    function pop(heap) {
	      if (heap.length === 0) {
	        return null;
	      }
	      var first = heap[0];
	      var last = heap.pop();
	      if (last !== first) {
	        heap[0] = last;
	        siftDown(heap, last, 0);
	      }
	      return first;
	    }
	    function siftUp(heap, node, i) {
	      var index = i;
	      while (index > 0) {
	        var parentIndex = index - 1 >>> 1;
	        var parent = heap[parentIndex];
	        if (compare(parent, node) > 0) {
	          heap[parentIndex] = node;
	          heap[index] = parent;
	          index = parentIndex;
	        } else {
	          return;
	        }
	      }
	    }
	    function siftDown(heap, node, i) {
	      var index = i;
	      var length = heap.length;
	      var halfLength = length >>> 1;
	      while (index < halfLength) {
	        var leftIndex = (index + 1) * 2 - 1;
	        var left = heap[leftIndex];
	        var rightIndex = leftIndex + 1;
	        var right = heap[rightIndex];
	        if (compare(left, node) < 0) {
	          if (rightIndex < length && compare(right, left) < 0) {
	            heap[index] = right;
	            heap[rightIndex] = node;
	            index = rightIndex;
	          } else {
	            heap[index] = left;
	            heap[leftIndex] = node;
	            index = leftIndex;
	          }
	        } else if (rightIndex < length && compare(right, node) < 0) {
	          heap[index] = right;
	          heap[rightIndex] = node;
	          index = rightIndex;
	        } else {
	          return;
	        }
	      }
	    }
	    function compare(a, b) {
	      var diff = a.sortIndex - b.sortIndex;
	      return diff !== 0 ? diff : a.id - b.id;
	    }
	    var ImmediatePriority = 1;
	    var UserBlockingPriority = 2;
	    var NormalPriority = 3;
	    var LowPriority = 4;
	    var IdlePriority = 5;
	    function markTaskErrored(task, ms) {
	    }
	    var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
	    if (hasPerformanceNow) {
	      var localPerformance = performance;
	      exports.unstable_now = function() {
	        return localPerformance.now();
	      };
	    } else {
	      var localDate = Date;
	      var initialTime = localDate.now();
	      exports.unstable_now = function() {
	        return localDate.now() - initialTime;
	      };
	    }
	    var maxSigned31BitInt = 1073741823;
	    var IMMEDIATE_PRIORITY_TIMEOUT = -1;
	    var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
	    var NORMAL_PRIORITY_TIMEOUT = 5e3;
	    var LOW_PRIORITY_TIMEOUT = 1e4;
	    var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
	    var taskQueue = [];
	    var timerQueue = [];
	    var taskIdCounter = 1;
	    var currentTask = null;
	    var currentPriorityLevel = NormalPriority;
	    var isPerformingWork = false;
	    var isHostCallbackScheduled = false;
	    var isHostTimeoutScheduled = false;
	    var localSetTimeout = typeof setTimeout === "function" ? setTimeout : null;
	    var localClearTimeout = typeof clearTimeout === "function" ? clearTimeout : null;
	    var localSetImmediate = typeof setImmediate !== "undefined" ? setImmediate : null;
	    var isInputPending = typeof navigator !== "undefined" && navigator.scheduling !== void 0 && navigator.scheduling.isInputPending !== void 0 ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;
	    function advanceTimers(currentTime) {
	      var timer = peek(timerQueue);
	      while (timer !== null) {
	        if (timer.callback === null) {
	          pop(timerQueue);
	        } else if (timer.startTime <= currentTime) {
	          pop(timerQueue);
	          timer.sortIndex = timer.expirationTime;
	          push(taskQueue, timer);
	        } else {
	          return;
	        }
	        timer = peek(timerQueue);
	      }
	    }
	    function handleTimeout(currentTime) {
	      isHostTimeoutScheduled = false;
	      advanceTimers(currentTime);
	      if (!isHostCallbackScheduled) {
	        if (peek(taskQueue) !== null) {
	          isHostCallbackScheduled = true;
	          requestHostCallback(flushWork);
	        } else {
	          var firstTimer = peek(timerQueue);
	          if (firstTimer !== null) {
	            requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
	          }
	        }
	      }
	    }
	    function flushWork(hasTimeRemaining, initialTime2) {
	      isHostCallbackScheduled = false;
	      if (isHostTimeoutScheduled) {
	        isHostTimeoutScheduled = false;
	        cancelHostTimeout();
	      }
	      isPerformingWork = true;
	      var previousPriorityLevel = currentPriorityLevel;
	      try {
	        if (enableProfiling) {
	          try {
	            return workLoop(hasTimeRemaining, initialTime2);
	          } catch (error) {
	            if (currentTask !== null) {
	              var currentTime = exports.unstable_now();
	              markTaskErrored(currentTask, currentTime);
	              currentTask.isQueued = false;
	            }
	            throw error;
	          }
	        } else {
	          return workLoop(hasTimeRemaining, initialTime2);
	        }
	      } finally {
	        currentTask = null;
	        currentPriorityLevel = previousPriorityLevel;
	        isPerformingWork = false;
	      }
	    }
	    function workLoop(hasTimeRemaining, initialTime2) {
	      var currentTime = initialTime2;
	      advanceTimers(currentTime);
	      currentTask = peek(taskQueue);
	      while (currentTask !== null && !enableSchedulerDebugging) {
	        if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
	          break;
	        }
	        var callback = currentTask.callback;
	        if (typeof callback === "function") {
	          currentTask.callback = null;
	          currentPriorityLevel = currentTask.priorityLevel;
	          var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
	          var continuationCallback = callback(didUserCallbackTimeout);
	          currentTime = exports.unstable_now();
	          if (typeof continuationCallback === "function") {
	            currentTask.callback = continuationCallback;
	          } else {
	            if (currentTask === peek(taskQueue)) {
	              pop(taskQueue);
	            }
	          }
	          advanceTimers(currentTime);
	        } else {
	          pop(taskQueue);
	        }
	        currentTask = peek(taskQueue);
	      }
	      if (currentTask !== null) {
	        return true;
	      } else {
	        var firstTimer = peek(timerQueue);
	        if (firstTimer !== null) {
	          requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
	        }
	        return false;
	      }
	    }
	    function unstable_runWithPriority(priorityLevel, eventHandler) {
	      switch (priorityLevel) {
	        case ImmediatePriority:
	        case UserBlockingPriority:
	        case NormalPriority:
	        case LowPriority:
	        case IdlePriority:
	          break;
	        default:
	          priorityLevel = NormalPriority;
	      }
	      var previousPriorityLevel = currentPriorityLevel;
	      currentPriorityLevel = priorityLevel;
	      try {
	        return eventHandler();
	      } finally {
	        currentPriorityLevel = previousPriorityLevel;
	      }
	    }
	    function unstable_next(eventHandler) {
	      var priorityLevel;
	      switch (currentPriorityLevel) {
	        case ImmediatePriority:
	        case UserBlockingPriority:
	        case NormalPriority:
	          priorityLevel = NormalPriority;
	          break;
	        default:
	          priorityLevel = currentPriorityLevel;
	          break;
	      }
	      var previousPriorityLevel = currentPriorityLevel;
	      currentPriorityLevel = priorityLevel;
	      try {
	        return eventHandler();
	      } finally {
	        currentPriorityLevel = previousPriorityLevel;
	      }
	    }
	    function unstable_wrapCallback(callback) {
	      var parentPriorityLevel = currentPriorityLevel;
	      return function() {
	        var previousPriorityLevel = currentPriorityLevel;
	        currentPriorityLevel = parentPriorityLevel;
	        try {
	          return callback.apply(this, arguments);
	        } finally {
	          currentPriorityLevel = previousPriorityLevel;
	        }
	      };
	    }
	    function unstable_scheduleCallback(priorityLevel, callback, options) {
	      var currentTime = exports.unstable_now();
	      var startTime2;
	      if (typeof options === "object" && options !== null) {
	        var delay = options.delay;
	        if (typeof delay === "number" && delay > 0) {
	          startTime2 = currentTime + delay;
	        } else {
	          startTime2 = currentTime;
	        }
	      } else {
	        startTime2 = currentTime;
	      }
	      var timeout;
	      switch (priorityLevel) {
	        case ImmediatePriority:
	          timeout = IMMEDIATE_PRIORITY_TIMEOUT;
	          break;
	        case UserBlockingPriority:
	          timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
	          break;
	        case IdlePriority:
	          timeout = IDLE_PRIORITY_TIMEOUT;
	          break;
	        case LowPriority:
	          timeout = LOW_PRIORITY_TIMEOUT;
	          break;
	        case NormalPriority:
	        default:
	          timeout = NORMAL_PRIORITY_TIMEOUT;
	          break;
	      }
	      var expirationTime = startTime2 + timeout;
	      var newTask = {
	        id: taskIdCounter++,
	        callback,
	        priorityLevel,
	        startTime: startTime2,
	        expirationTime,
	        sortIndex: -1
	      };
	      if (startTime2 > currentTime) {
	        newTask.sortIndex = startTime2;
	        push(timerQueue, newTask);
	        if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
	          if (isHostTimeoutScheduled) {
	            cancelHostTimeout();
	          } else {
	            isHostTimeoutScheduled = true;
	          }
	          requestHostTimeout(handleTimeout, startTime2 - currentTime);
	        }
	      } else {
	        newTask.sortIndex = expirationTime;
	        push(taskQueue, newTask);
	        if (!isHostCallbackScheduled && !isPerformingWork) {
	          isHostCallbackScheduled = true;
	          requestHostCallback(flushWork);
	        }
	      }
	      return newTask;
	    }
	    function unstable_pauseExecution() {
	    }
	    function unstable_continueExecution() {
	      if (!isHostCallbackScheduled && !isPerformingWork) {
	        isHostCallbackScheduled = true;
	        requestHostCallback(flushWork);
	      }
	    }
	    function unstable_getFirstCallbackNode() {
	      return peek(taskQueue);
	    }
	    function unstable_cancelCallback(task) {
	      task.callback = null;
	    }
	    function unstable_getCurrentPriorityLevel() {
	      return currentPriorityLevel;
	    }
	    var isMessageLoopRunning = false;
	    var scheduledHostCallback = null;
	    var taskTimeoutID = -1;
	    var frameInterval = frameYieldMs;
	    var startTime = -1;
	    function shouldYieldToHost() {
	      var timeElapsed = exports.unstable_now() - startTime;
	      if (timeElapsed < frameInterval) {
	        return false;
	      }
	      return true;
	    }
	    function requestPaint() {
	    }
	    function forceFrameRate(fps) {
	      if (fps < 0 || fps > 125) {
	        console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
	        return;
	      }
	      if (fps > 0) {
	        frameInterval = Math.floor(1e3 / fps);
	      } else {
	        frameInterval = frameYieldMs;
	      }
	    }
	    var performWorkUntilDeadline = function() {
	      if (scheduledHostCallback !== null) {
	        var currentTime = exports.unstable_now();
	        startTime = currentTime;
	        var hasTimeRemaining = true;
	        var hasMoreWork = true;
	        try {
	          hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
	        } finally {
	          if (hasMoreWork) {
	            schedulePerformWorkUntilDeadline();
	          } else {
	            isMessageLoopRunning = false;
	            scheduledHostCallback = null;
	          }
	        }
	      } else {
	        isMessageLoopRunning = false;
	      }
	    };
	    var schedulePerformWorkUntilDeadline;
	    if (typeof localSetImmediate === "function") {
	      schedulePerformWorkUntilDeadline = function() {
	        localSetImmediate(performWorkUntilDeadline);
	      };
	    } else if (typeof MessageChannel !== "undefined") {
	      var channel = new MessageChannel();
	      var port = channel.port2;
	      channel.port1.onmessage = performWorkUntilDeadline;
	      schedulePerformWorkUntilDeadline = function() {
	        port.postMessage(null);
	      };
	    } else {
	      schedulePerformWorkUntilDeadline = function() {
	        localSetTimeout(performWorkUntilDeadline, 0);
	      };
	    }
	    function requestHostCallback(callback) {
	      scheduledHostCallback = callback;
	      if (!isMessageLoopRunning) {
	        isMessageLoopRunning = true;
	        schedulePerformWorkUntilDeadline();
	      }
	    }
	    function requestHostTimeout(callback, ms) {
	      taskTimeoutID = localSetTimeout(function() {
	        callback(exports.unstable_now());
	      }, ms);
	    }
	    function cancelHostTimeout() {
	      localClearTimeout(taskTimeoutID);
	      taskTimeoutID = -1;
	    }
	    var unstable_requestPaint = requestPaint;
	    var unstable_Profiling = null;
	    exports.unstable_IdlePriority = IdlePriority;
	    exports.unstable_ImmediatePriority = ImmediatePriority;
	    exports.unstable_LowPriority = LowPriority;
	    exports.unstable_NormalPriority = NormalPriority;
	    exports.unstable_Profiling = unstable_Profiling;
	    exports.unstable_UserBlockingPriority = UserBlockingPriority;
	    exports.unstable_cancelCallback = unstable_cancelCallback;
	    exports.unstable_continueExecution = unstable_continueExecution;
	    exports.unstable_forceFrameRate = forceFrameRate;
	    exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
	    exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
	    exports.unstable_next = unstable_next;
	    exports.unstable_pauseExecution = unstable_pauseExecution;
	    exports.unstable_requestPaint = unstable_requestPaint;
	    exports.unstable_runWithPriority = unstable_runWithPriority;
	    exports.unstable_scheduleCallback = unstable_scheduleCallback;
	    exports.unstable_shouldYield = shouldYieldToHost;
	    exports.unstable_wrapCallback = unstable_wrapCallback;
	    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
	      __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
	    }
	  })();
	}
} (scheduler_development$1));

var scheduler_development = /*@__PURE__*/getDefaultExportFromCjs(scheduler_development$1);

var scheduler = scheduler$1.exports;

"use strict";
if (false) {
  module.exports = require("./cjs/scheduler.production.min.js");
} else {
  scheduler$1.exports = scheduler_development$1;
}

var schedulerExports = scheduler$1.exports;
var index = /*@__PURE__*/getDefaultExportFromCjs(schedulerExports);

var version;
var unstable_renderSubtreeIntoContainer_1;
var unstable_batchedUpdates;
var unmountComponentAtNode_1;
var render_1;
var hydrateRoot_1;
var hydrate_1;
var flushSync_1;
var findDOMNode_1;
var createRoot_1;
var createPortal_1;
var __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
"use strict";
/**
 * @license React
 * react-dom.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
if (true) {
  (function() {
    "use strict";
    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
      __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
    }
    var React = reactExports;
    var Scheduler = schedulerExports;
    var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    var suppressWarning = false;
    function setSuppressWarning(newSuppressWarning) {
      {
        suppressWarning = newSuppressWarning;
      }
    }
    function warn(format) {
      {
        if (!suppressWarning) {
          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }
          printWarning("warn", format, args);
        }
      }
    }
    function error(format) {
      {
        if (!suppressWarning) {
          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
            args[_key2 - 1] = arguments[_key2];
          }
          printWarning("error", format, args);
        }
      }
    }
    function printWarning(level, format, args) {
      {
        var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
        var stack = ReactDebugCurrentFrame2.getStackAddendum();
        if (stack !== "") {
          format += "%s";
          args = args.concat([stack]);
        }
        var argsWithFormat = args.map(function(item) {
          return String(item);
        });
        argsWithFormat.unshift("Warning: " + format);
        Function.prototype.apply.call(console[level], console, argsWithFormat);
      }
    }
    var FunctionComponent = 0;
    var ClassComponent = 1;
    var IndeterminateComponent = 2;
    var HostRoot = 3;
    var HostPortal = 4;
    var HostComponent = 5;
    var HostText = 6;
    var Fragment = 7;
    var Mode = 8;
    var ContextConsumer = 9;
    var ContextProvider = 10;
    var ForwardRef = 11;
    var Profiler = 12;
    var SuspenseComponent = 13;
    var MemoComponent = 14;
    var SimpleMemoComponent = 15;
    var LazyComponent = 16;
    var IncompleteClassComponent = 17;
    var DehydratedFragment = 18;
    var SuspenseListComponent = 19;
    var ScopeComponent = 21;
    var OffscreenComponent = 22;
    var LegacyHiddenComponent = 23;
    var CacheComponent = 24;
    var TracingMarkerComponent = 25;
    var enableClientRenderFallbackOnTextMismatch = true;
    var enableNewReconciler = false;
    var enableLazyContextPropagation = false;
    var enableLegacyHidden = false;
    var enableSuspenseAvoidThisFallback = false;
    var disableCommentsAsDOMContainers = true;
    var enableCustomElementPropertySupport = false;
    var warnAboutStringRefs = false;
    var enableSchedulingProfiler = true;
    var enableProfilerTimer = true;
    var enableProfilerCommitHooks = true;
    var allNativeEvents = /* @__PURE__ */ new Set();
    var registrationNameDependencies = {};
    var possibleRegistrationNames = {};
    function registerTwoPhaseEvent(registrationName, dependencies) {
      registerDirectEvent(registrationName, dependencies);
      registerDirectEvent(registrationName + "Capture", dependencies);
    }
    function registerDirectEvent(registrationName, dependencies) {
      {
        if (registrationNameDependencies[registrationName]) {
          error("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
        }
      }
      registrationNameDependencies[registrationName] = dependencies;
      {
        var lowerCasedName = registrationName.toLowerCase();
        possibleRegistrationNames[lowerCasedName] = registrationName;
        if (registrationName === "onDoubleClick") {
          possibleRegistrationNames.ondblclick = registrationName;
        }
      }
      for (var i = 0; i < dependencies.length; i++) {
        allNativeEvents.add(dependencies[i]);
      }
    }
    var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    function typeName(value) {
      {
        var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
        var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
        return type;
      }
    }
    function willCoercionThrow(value) {
      {
        try {
          testStringCoercion(value);
          return false;
        } catch (e) {
          return true;
        }
      }
    }
    function testStringCoercion(value) {
      return "" + value;
    }
    function checkAttributeStringCoercion(value, attributeName) {
      {
        if (willCoercionThrow(value)) {
          error("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value));
          return testStringCoercion(value);
        }
      }
    }
    function checkKeyStringCoercion(value) {
      {
        if (willCoercionThrow(value)) {
          error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
          return testStringCoercion(value);
        }
      }
    }
    function checkPropStringCoercion(value, propName) {
      {
        if (willCoercionThrow(value)) {
          error("The provided `%s` prop is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
          return testStringCoercion(value);
        }
      }
    }
    function checkCSSPropertyStringCoercion(value, propName) {
      {
        if (willCoercionThrow(value)) {
          error("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
          return testStringCoercion(value);
        }
      }
    }
    function checkHtmlStringCoercion(value) {
      {
        if (willCoercionThrow(value)) {
          error("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
          return testStringCoercion(value);
        }
      }
    }
    function checkFormFieldValueStringCoercion(value) {
      {
        if (willCoercionThrow(value)) {
          error("Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before before using it here.", typeName(value));
          return testStringCoercion(value);
        }
      }
    }
    var RESERVED = 0;
    var STRING = 1;
    var BOOLEANISH_STRING = 2;
    var BOOLEAN = 3;
    var OVERLOADED_BOOLEAN = 4;
    var NUMERIC = 5;
    var POSITIVE_NUMERIC = 6;
    var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
    var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
    var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
    var illegalAttributeNameCache = {};
    var validatedAttributeNameCache = {};
    function isAttributeNameSafe(attributeName) {
      if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
        return true;
      }
      if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
        return false;
      }
      if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
        validatedAttributeNameCache[attributeName] = true;
        return true;
      }
      illegalAttributeNameCache[attributeName] = true;
      {
        error("Invalid attribute name: `%s`", attributeName);
      }
      return false;
    }
    function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
      if (propertyInfo !== null) {
        return propertyInfo.type === RESERVED;
      }
      if (isCustomComponentTag) {
        return false;
      }
      if (name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")) {
        return true;
      }
      return false;
    }
    function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
      if (propertyInfo !== null && propertyInfo.type === RESERVED) {
        return false;
      }
      switch (typeof value) {
        case "function":
        case "symbol":
          return true;
        case "boolean": {
          if (isCustomComponentTag) {
            return false;
          }
          if (propertyInfo !== null) {
            return !propertyInfo.acceptsBooleans;
          } else {
            var prefix2 = name.toLowerCase().slice(0, 5);
            return prefix2 !== "data-" && prefix2 !== "aria-";
          }
        }
        default:
          return false;
      }
    }
    function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
      if (value === null || typeof value === "undefined") {
        return true;
      }
      if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
        return true;
      }
      if (isCustomComponentTag) {
        return false;
      }
      if (propertyInfo !== null) {
        switch (propertyInfo.type) {
          case BOOLEAN:
            return !value;
          case OVERLOADED_BOOLEAN:
            return value === false;
          case NUMERIC:
            return isNaN(value);
          case POSITIVE_NUMERIC:
            return isNaN(value) || value < 1;
        }
      }
      return false;
    }
    function getPropertyInfo(name) {
      return properties.hasOwnProperty(name) ? properties[name] : null;
    }
    function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
      this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
      this.attributeName = attributeName;
      this.attributeNamespace = attributeNamespace;
      this.mustUseProperty = mustUseProperty;
      this.propertyName = name;
      this.type = type;
      this.sanitizeURL = sanitizeURL2;
      this.removeEmptyString = removeEmptyString;
    }
    var properties = {};
    var reservedProps = [
      "children",
      "dangerouslySetInnerHTML",
      // TODO: This prevents the assignment of defaultValue to regular
      // elements (not just inputs). Now that ReactDOMInput assigns to the
      // defaultValue property -- do we need this?
      "defaultValue",
      "defaultChecked",
      "innerHTML",
      "suppressContentEditableWarning",
      "suppressHydrationWarning",
      "style"
    ];
    reservedProps.forEach(function(name) {
      properties[name] = new PropertyInfoRecord(
        name,
        RESERVED,
        false,
        // mustUseProperty
        name,
        // attributeName
        null,
        // attributeNamespace
        false,
        // sanitizeURL
        false
      );
    });
    [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
      var name = _ref[0], attributeName = _ref[1];
      properties[name] = new PropertyInfoRecord(
        name,
        STRING,
        false,
        // mustUseProperty
        attributeName,
        // attributeName
        null,
        // attributeNamespace
        false,
        // sanitizeURL
        false
      );
    });
    ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
      properties[name] = new PropertyInfoRecord(
        name,
        BOOLEANISH_STRING,
        false,
        // mustUseProperty
        name.toLowerCase(),
        // attributeName
        null,
        // attributeNamespace
        false,
        // sanitizeURL
        false
      );
    });
    ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
      properties[name] = new PropertyInfoRecord(
        name,
        BOOLEANISH_STRING,
        false,
        // mustUseProperty
        name,
        // attributeName
        null,
        // attributeNamespace
        false,
        // sanitizeURL
        false
      );
    });
    [
      "allowFullScreen",
      "async",
      // Note: there is a special case that prevents it from being written to the DOM
      // on the client side because the browsers are inconsistent. Instead we call focus().
      "autoFocus",
      "autoPlay",
      "controls",
      "default",
      "defer",
      "disabled",
      "disablePictureInPicture",
      "disableRemotePlayback",
      "formNoValidate",
      "hidden",
      "loop",
      "noModule",
      "noValidate",
      "open",
      "playsInline",
      "readOnly",
      "required",
      "reversed",
      "scoped",
      "seamless",
      // Microdata
      "itemScope"
    ].forEach(function(name) {
      properties[name] = new PropertyInfoRecord(
        name,
        BOOLEAN,
        false,
        // mustUseProperty
        name.toLowerCase(),
        // attributeName
        null,
        // attributeNamespace
        false,
        // sanitizeURL
        false
      );
    });
    [
      "checked",
      // Note: `option.selected` is not updated if `select.multiple` is
      // disabled with `removeAttribute`. We have special logic for handling this.
      "multiple",
      "muted",
      "selected"
      // NOTE: if you add a camelCased prop to this list,
      // you'll need to set attributeName to name.toLowerCase()
      // instead in the assignment below.
    ].forEach(function(name) {
      properties[name] = new PropertyInfoRecord(
        name,
        BOOLEAN,
        true,
        // mustUseProperty
        name,
        // attributeName
        null,
        // attributeNamespace
        false,
        // sanitizeURL
        false
      );
    });
    [
      "capture",
      "download"
      // NOTE: if you add a camelCased prop to this list,
      // you'll need to set attributeName to name.toLowerCase()
      // instead in the assignment below.
    ].forEach(function(name) {
      properties[name] = new PropertyInfoRecord(
        name,
        OVERLOADED_BOOLEAN,
        false,
        // mustUseProperty
        name,
        // attributeName
        null,
        // attributeNamespace
        false,
        // sanitizeURL
        false
      );
    });
    [
      "cols",
      "rows",
      "size",
      "span"
      // NOTE: if you add a camelCased prop to this list,
      // you'll need to set attributeName to name.toLowerCase()
      // instead in the assignment below.
    ].forEach(function(name) {
      properties[name] = new PropertyInfoRecord(
        name,
        POSITIVE_NUMERIC,
        false,
        // mustUseProperty
        name,
        // attributeName
        null,
        // attributeNamespace
        false,
        // sanitizeURL
        false
      );
    });
    ["rowSpan", "start"].forEach(function(name) {
      properties[name] = new PropertyInfoRecord(
        name,
        NUMERIC,
        false,
        // mustUseProperty
        name.toLowerCase(),
        // attributeName
        null,
        // attributeNamespace
        false,
        // sanitizeURL
        false
      );
    });
    var CAMELIZE = /[\-\:]([a-z])/g;
    var capitalize = function(token) {
      return token[1].toUpperCase();
    };
    [
      "accent-height",
      "alignment-baseline",
      "arabic-form",
      "baseline-shift",
      "cap-height",
      "clip-path",
      "clip-rule",
      "color-interpolation",
      "color-interpolation-filters",
      "color-profile",
      "color-rendering",
      "dominant-baseline",
      "enable-background",
      "fill-opacity",
      "fill-rule",
      "flood-color",
      "flood-opacity",
      "font-family",
      "font-size",
      "font-size-adjust",
      "font-stretch",
      "font-style",
      "font-variant",
      "font-weight",
      "glyph-name",
      "glyph-orientation-horizontal",
      "glyph-orientation-vertical",
      "horiz-adv-x",
      "horiz-origin-x",
      "image-rendering",
      "letter-spacing",
      "lighting-color",
      "marker-end",
      "marker-mid",
      "marker-start",
      "overline-position",
      "overline-thickness",
      "paint-order",
      "panose-1",
      "pointer-events",
      "rendering-intent",
      "shape-rendering",
      "stop-color",
      "stop-opacity",
      "strikethrough-position",
      "strikethrough-thickness",
      "stroke-dasharray",
      "stroke-dashoffset",
      "stroke-linecap",
      "stroke-linejoin",
      "stroke-miterlimit",
      "stroke-opacity",
      "stroke-width",
      "text-anchor",
      "text-decoration",
      "text-rendering",
      "underline-position",
      "underline-thickness",
      "unicode-bidi",
      "unicode-range",
      "units-per-em",
      "v-alphabetic",
      "v-hanging",
      "v-ideographic",
      "v-mathematical",
      "vector-effect",
      "vert-adv-y",
      "vert-origin-x",
      "vert-origin-y",
      "word-spacing",
      "writing-mode",
      "xmlns:xlink",
      "x-height"
      // NOTE: if you add a camelCased prop to this list,
      // you'll need to set attributeName to name.toLowerCase()
      // instead in the assignment below.
    ].forEach(function(attributeName) {
      var name = attributeName.replace(CAMELIZE, capitalize);
      properties[name] = new PropertyInfoRecord(
        name,
        STRING,
        false,
        // mustUseProperty
        attributeName,
        null,
        // attributeNamespace
        false,
        // sanitizeURL
        false
      );
    });
    [
      "xlink:actuate",
      "xlink:arcrole",
      "xlink:role",
      "xlink:show",
      "xlink:title",
      "xlink:type"
      // NOTE: if you add a camelCased prop to this list,
      // you'll need to set attributeName to name.toLowerCase()
      // instead in the assignment below.
    ].forEach(function(attributeName) {
      var name = attributeName.replace(CAMELIZE, capitalize);
      properties[name] = new PropertyInfoRecord(
        name,
        STRING,
        false,
        // mustUseProperty
        attributeName,
        "http://www.w3.org/1999/xlink",
        false,
        // sanitizeURL
        false
      );
    });
    [
      "xml:base",
      "xml:lang",
      "xml:space"
      // NOTE: if you add a camelCased prop to this list,
      // you'll need to set attributeName to name.toLowerCase()
      // instead in the assignment below.
    ].forEach(function(attributeName) {
      var name = attributeName.replace(CAMELIZE, capitalize);
      properties[name] = new PropertyInfoRecord(
        name,
        STRING,
        false,
        // mustUseProperty
        attributeName,
        "http://www.w3.org/XML/1998/namespace",
        false,
        // sanitizeURL
        false
      );
    });
    ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
      properties[attributeName] = new PropertyInfoRecord(
        attributeName,
        STRING,
        false,
        // mustUseProperty
        attributeName.toLowerCase(),
        // attributeName
        null,
        // attributeNamespace
        false,
        // sanitizeURL
        false
      );
    });
    var xlinkHref = "xlinkHref";
    properties[xlinkHref] = new PropertyInfoRecord(
      "xlinkHref",
      STRING,
      false,
      // mustUseProperty
      "xlink:href",
      "http://www.w3.org/1999/xlink",
      true,
      // sanitizeURL
      false
    );
    ["src", "href", "action", "formAction"].forEach(function(attributeName) {
      properties[attributeName] = new PropertyInfoRecord(
        attributeName,
        STRING,
        false,
        // mustUseProperty
        attributeName.toLowerCase(),
        // attributeName
        null,
        // attributeNamespace
        true,
        // sanitizeURL
        true
      );
    });
    var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
    var didWarn = false;
    function sanitizeURL(url) {
      {
        if (!didWarn && isJavaScriptProtocol.test(url)) {
          didWarn = true;
          error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
        }
      }
    }
    function getValueForProperty(node, name, expected, propertyInfo) {
      {
        if (propertyInfo.mustUseProperty) {
          var propertyName = propertyInfo.propertyName;
          return node[propertyName];
        } else {
          {
            checkAttributeStringCoercion(expected, name);
          }
          if (propertyInfo.sanitizeURL) {
            sanitizeURL("" + expected);
          }
          var attributeName = propertyInfo.attributeName;
          var stringValue = null;
          if (propertyInfo.type === OVERLOADED_BOOLEAN) {
            if (node.hasAttribute(attributeName)) {
              var value = node.getAttribute(attributeName);
              if (value === "") {
                return true;
              }
              if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                return value;
              }
              if (value === "" + expected) {
                return expected;
              }
              return value;
            }
          } else if (node.hasAttribute(attributeName)) {
            if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
              return node.getAttribute(attributeName);
            }
            if (propertyInfo.type === BOOLEAN) {
              return expected;
            }
            stringValue = node.getAttribute(attributeName);
          }
          if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
            return stringValue === null ? expected : stringValue;
          } else if (stringValue === "" + expected) {
            return expected;
          } else {
            return stringValue;
          }
        }
      }
    }
    function getValueForAttribute(node, name, expected, isCustomComponentTag) {
      {
        if (!isAttributeNameSafe(name)) {
          return;
        }
        if (!node.hasAttribute(name)) {
          return expected === void 0 ? void 0 : null;
        }
        var value = node.getAttribute(name);
        {
          checkAttributeStringCoercion(expected, name);
        }
        if (value === "" + expected) {
          return expected;
        }
        return value;
      }
    }
    function setValueForProperty(node, name, value, isCustomComponentTag) {
      var propertyInfo = getPropertyInfo(name);
      if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
        return;
      }
      if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
        value = null;
      }
      if (isCustomComponentTag || propertyInfo === null) {
        if (isAttributeNameSafe(name)) {
          var _attributeName = name;
          if (value === null) {
            node.removeAttribute(_attributeName);
          } else {
            {
              checkAttributeStringCoercion(value, name);
            }
            node.setAttribute(_attributeName, "" + value);
          }
        }
        return;
      }
      var mustUseProperty = propertyInfo.mustUseProperty;
      if (mustUseProperty) {
        var propertyName = propertyInfo.propertyName;
        if (value === null) {
          var type = propertyInfo.type;
          node[propertyName] = type === BOOLEAN ? false : "";
        } else {
          node[propertyName] = value;
        }
        return;
      }
      var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
      if (value === null) {
        node.removeAttribute(attributeName);
      } else {
        var _type = propertyInfo.type;
        var attributeValue;
        if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
          attributeValue = "";
        } else {
          {
            {
              checkAttributeStringCoercion(value, attributeName);
            }
            attributeValue = "" + value;
          }
          if (propertyInfo.sanitizeURL) {
            sanitizeURL(attributeValue.toString());
          }
        }
        if (attributeNamespace) {
          node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
        } else {
          node.setAttribute(attributeName, attributeValue);
        }
      }
    }
    var REACT_ELEMENT_TYPE = Symbol.for("react.element");
    var REACT_PORTAL_TYPE = Symbol.for("react.portal");
    var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
    var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
    var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
    var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
    var REACT_CONTEXT_TYPE = Symbol.for("react.context");
    var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
    var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
    var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
    var REACT_MEMO_TYPE = Symbol.for("react.memo");
    var REACT_LAZY_TYPE = Symbol.for("react.lazy");
    var REACT_SCOPE_TYPE = Symbol.for("react.scope");
    var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
    var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
    var REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden");
    var REACT_CACHE_TYPE = Symbol.for("react.cache");
    var REACT_TRACING_MARKER_TYPE = Symbol.for("react.tracing_marker");
    var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = "@@iterator";
    function getIteratorFn(maybeIterable) {
      if (maybeIterable === null || typeof maybeIterable !== "object") {
        return null;
      }
      var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
      if (typeof maybeIterator === "function") {
        return maybeIterator;
      }
      return null;
    }
    var assign = Object.assign;
    var disabledDepth = 0;
    var prevLog;
    var prevInfo;
    var prevWarn;
    var prevError;
    var prevGroup;
    var prevGroupCollapsed;
    var prevGroupEnd;
    function disabledLog() {
    }
    disabledLog.__reactDisabledLog = true;
    function disableLogs() {
      {
        if (disabledDepth === 0) {
          prevLog = console.log;
          prevInfo = console.info;
          prevWarn = console.warn;
          prevError = console.error;
          prevGroup = console.group;
          prevGroupCollapsed = console.groupCollapsed;
          prevGroupEnd = console.groupEnd;
          var props = {
            configurable: true,
            enumerable: true,
            value: disabledLog,
            writable: true
          };
          Object.defineProperties(console, {
            info: props,
            log: props,
            warn: props,
            error: props,
            group: props,
            groupCollapsed: props,
            groupEnd: props
          });
        }
        disabledDepth++;
      }
    }
    function reenableLogs() {
      {
        disabledDepth--;
        if (disabledDepth === 0) {
          var props = {
            configurable: true,
            enumerable: true,
            writable: true
          };
          Object.defineProperties(console, {
            log: assign({}, props, {
              value: prevLog
            }),
            info: assign({}, props, {
              value: prevInfo
            }),
            warn: assign({}, props, {
              value: prevWarn
            }),
            error: assign({}, props, {
              value: prevError
            }),
            group: assign({}, props, {
              value: prevGroup
            }),
            groupCollapsed: assign({}, props, {
              value: prevGroupCollapsed
            }),
            groupEnd: assign({}, props, {
              value: prevGroupEnd
            })
          });
        }
        if (disabledDepth < 0) {
          error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
        }
      }
    }
    var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
    var prefix;
    function describeBuiltInComponentFrame(name, source, ownerFn) {
      {
        if (prefix === void 0) {
          try {
            throw Error();
          } catch (x) {
            var match = x.stack.trim().match(/\n( *(at )?)/);
            prefix = match && match[1] || "";
          }
        }
        return "\n" + prefix + name;
      }
    }
    var reentry = false;
    var componentFrameCache;
    {
      var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
      componentFrameCache = new PossiblyWeakMap();
    }
    function describeNativeComponentFrame(fn, construct) {
      if (!fn || reentry) {
        return "";
      }
      {
        var frame = componentFrameCache.get(fn);
        if (frame !== void 0) {
          return frame;
        }
      }
      var control;
      reentry = true;
      var previousPrepareStackTrace = Error.prepareStackTrace;
      Error.prepareStackTrace = void 0;
      var previousDispatcher;
      {
        previousDispatcher = ReactCurrentDispatcher.current;
        ReactCurrentDispatcher.current = null;
        disableLogs();
      }
      try {
        if (construct) {
          var Fake = function() {
            throw Error();
          };
          Object.defineProperty(Fake.prototype, "props", {
            set: function() {
              throw Error();
            }
          });
          if (typeof Reflect === "object" && Reflect.construct) {
            try {
              Reflect.construct(Fake, []);
            } catch (x) {
              control = x;
            }
            Reflect.construct(fn, [], Fake);
          } else {
            try {
              Fake.call();
            } catch (x) {
              control = x;
            }
            fn.call(Fake.prototype);
          }
        } else {
          try {
            throw Error();
          } catch (x) {
            control = x;
          }
          fn();
        }
      } catch (sample) {
        if (sample && control && typeof sample.stack === "string") {
          var sampleLines = sample.stack.split("\n");
          var controlLines = control.stack.split("\n");
          var s = sampleLines.length - 1;
          var c = controlLines.length - 1;
          while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
            c--;
          }
          for (; s >= 1 && c >= 0; s--, c--) {
            if (sampleLines[s] !== controlLines[c]) {
              if (s !== 1 || c !== 1) {
                do {
                  s--;
                  c--;
                  if (c < 0 || sampleLines[s] !== controlLines[c]) {
                    var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                    if (fn.displayName && _frame.includes("<anonymous>")) {
                      _frame = _frame.replace("<anonymous>", fn.displayName);
                    }
                    {
                      if (typeof fn === "function") {
                        componentFrameCache.set(fn, _frame);
                      }
                    }
                    return _frame;
                  }
                } while (s >= 1 && c >= 0);
              }
              break;
            }
          }
        }
      } finally {
        reentry = false;
        {
          ReactCurrentDispatcher.current = previousDispatcher;
          reenableLogs();
        }
        Error.prepareStackTrace = previousPrepareStackTrace;
      }
      var name = fn ? fn.displayName || fn.name : "";
      var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
      {
        if (typeof fn === "function") {
          componentFrameCache.set(fn, syntheticFrame);
        }
      }
      return syntheticFrame;
    }
    function describeClassComponentFrame(ctor, source, ownerFn) {
      {
        return describeNativeComponentFrame(ctor, true);
      }
    }
    function describeFunctionComponentFrame(fn, source, ownerFn) {
      {
        return describeNativeComponentFrame(fn, false);
      }
    }
    function shouldConstruct(Component) {
      var prototype = Component.prototype;
      return !!(prototype && prototype.isReactComponent);
    }
    function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
      if (type == null) {
        return "";
      }
      if (typeof type === "function") {
        {
          return describeNativeComponentFrame(type, shouldConstruct(type));
        }
      }
      if (typeof type === "string") {
        return describeBuiltInComponentFrame(type);
      }
      switch (type) {
        case REACT_SUSPENSE_TYPE:
          return describeBuiltInComponentFrame("Suspense");
        case REACT_SUSPENSE_LIST_TYPE:
          return describeBuiltInComponentFrame("SuspenseList");
      }
      if (typeof type === "object") {
        switch (type.$$typeof) {
          case REACT_FORWARD_REF_TYPE:
            return describeFunctionComponentFrame(type.render);
          case REACT_MEMO_TYPE:
            return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
          case REACT_LAZY_TYPE: {
            var lazyComponent = type;
            var payload = lazyComponent._payload;
            var init = lazyComponent._init;
            try {
              return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
            } catch (x) {
            }
          }
        }
      }
      return "";
    }
    function describeFiber(fiber) {
      var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
      var source = fiber._debugSource;
      switch (fiber.tag) {
        case HostComponent:
          return describeBuiltInComponentFrame(fiber.type);
        case LazyComponent:
          return describeBuiltInComponentFrame("Lazy");
        case SuspenseComponent:
          return describeBuiltInComponentFrame("Suspense");
        case SuspenseListComponent:
          return describeBuiltInComponentFrame("SuspenseList");
        case FunctionComponent:
        case IndeterminateComponent:
        case SimpleMemoComponent:
          return describeFunctionComponentFrame(fiber.type);
        case ForwardRef:
          return describeFunctionComponentFrame(fiber.type.render);
        case ClassComponent:
          return describeClassComponentFrame(fiber.type);
        default:
          return "";
      }
    }
    function getStackByFiberInDevAndProd(workInProgress2) {
      try {
        var info = "";
        var node = workInProgress2;
        do {
          info += describeFiber(node);
          node = node.return;
        } while (node);
        return info;
      } catch (x) {
        return "\nError generating stack: " + x.message + "\n" + x.stack;
      }
    }
    function getWrappedName(outerType, innerType, wrapperName) {
      var displayName = outerType.displayName;
      if (displayName) {
        return displayName;
      }
      var functionName = innerType.displayName || innerType.name || "";
      return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
    }
    function getContextName(type) {
      return type.displayName || "Context";
    }
    function getComponentNameFromType(type) {
      if (type == null) {
        return null;
      }
      {
        if (typeof type.tag === "number") {
          error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
        }
      }
      if (typeof type === "function") {
        return type.displayName || type.name || null;
      }
      if (typeof type === "string") {
        return type;
      }
      switch (type) {
        case REACT_FRAGMENT_TYPE:
          return "Fragment";
        case REACT_PORTAL_TYPE:
          return "Portal";
        case REACT_PROFILER_TYPE:
          return "Profiler";
        case REACT_STRICT_MODE_TYPE:
          return "StrictMode";
        case REACT_SUSPENSE_TYPE:
          return "Suspense";
        case REACT_SUSPENSE_LIST_TYPE:
          return "SuspenseList";
      }
      if (typeof type === "object") {
        switch (type.$$typeof) {
          case REACT_CONTEXT_TYPE:
            var context = type;
            return getContextName(context) + ".Consumer";
          case REACT_PROVIDER_TYPE:
            var provider = type;
            return getContextName(provider._context) + ".Provider";
          case REACT_FORWARD_REF_TYPE:
            return getWrappedName(type, type.render, "ForwardRef");
          case REACT_MEMO_TYPE:
            var outerName = type.displayName || null;
            if (outerName !== null) {
              return outerName;
            }
            return getComponentNameFromType(type.type) || "Memo";
          case REACT_LAZY_TYPE: {
            var lazyComponent = type;
            var payload = lazyComponent._payload;
            var init = lazyComponent._init;
            try {
              return getComponentNameFromType(init(payload));
            } catch (x) {
              return null;
            }
          }
        }
      }
      return null;
    }
    function getWrappedName$1(outerType, innerType, wrapperName) {
      var functionName = innerType.displayName || innerType.name || "";
      return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
    }
    function getContextName$1(type) {
      return type.displayName || "Context";
    }
    function getComponentNameFromFiber(fiber) {
      var tag = fiber.tag, type = fiber.type;
      switch (tag) {
        case CacheComponent:
          return "Cache";
        case ContextConsumer:
          var context = type;
          return getContextName$1(context) + ".Consumer";
        case ContextProvider:
          var provider = type;
          return getContextName$1(provider._context) + ".Provider";
        case DehydratedFragment:
          return "DehydratedFragment";
        case ForwardRef:
          return getWrappedName$1(type, type.render, "ForwardRef");
        case Fragment:
          return "Fragment";
        case HostComponent:
          return type;
        case HostPortal:
          return "Portal";
        case HostRoot:
          return "Root";
        case HostText:
          return "Text";
        case LazyComponent:
          return getComponentNameFromType(type);
        case Mode:
          if (type === REACT_STRICT_MODE_TYPE) {
            return "StrictMode";
          }
          return "Mode";
        case OffscreenComponent:
          return "Offscreen";
        case Profiler:
          return "Profiler";
        case ScopeComponent:
          return "Scope";
        case SuspenseComponent:
          return "Suspense";
        case SuspenseListComponent:
          return "SuspenseList";
        case TracingMarkerComponent:
          return "TracingMarker";
        case ClassComponent:
        case FunctionComponent:
        case IncompleteClassComponent:
        case IndeterminateComponent:
        case MemoComponent:
        case SimpleMemoComponent:
          if (typeof type === "function") {
            return type.displayName || type.name || null;
          }
          if (typeof type === "string") {
            return type;
          }
          break;
      }
      return null;
    }
    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
    var current = null;
    var isRendering = false;
    function getCurrentFiberOwnerNameInDevOrNull() {
      {
        if (current === null) {
          return null;
        }
        var owner = current._debugOwner;
        if (owner !== null && typeof owner !== "undefined") {
          return getComponentNameFromFiber(owner);
        }
      }
      return null;
    }
    function getCurrentFiberStackInDev() {
      {
        if (current === null) {
          return "";
        }
        return getStackByFiberInDevAndProd(current);
      }
    }
    function resetCurrentFiber() {
      {
        ReactDebugCurrentFrame.getCurrentStack = null;
        current = null;
        isRendering = false;
      }
    }
    function setCurrentFiber(fiber) {
      {
        ReactDebugCurrentFrame.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev;
        current = fiber;
        isRendering = false;
      }
    }
    function getCurrentFiber() {
      {
        return current;
      }
    }
    function setIsRendering(rendering) {
      {
        isRendering = rendering;
      }
    }
    function toString(value) {
      return "" + value;
    }
    function getToStringValue(value) {
      switch (typeof value) {
        case "boolean":
        case "number":
        case "string":
        case "undefined":
          return value;
        case "object":
          {
            checkFormFieldValueStringCoercion(value);
          }
          return value;
        default:
          return "";
      }
    }
    var hasReadOnlyValue = {
      button: true,
      checkbox: true,
      image: true,
      hidden: true,
      radio: true,
      reset: true,
      submit: true
    };
    function checkControlledValueProps(tagName, props) {
      {
        if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
          error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
        }
        if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
          error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
        }
      }
    }
    function isCheckable(elem) {
      var type = elem.type;
      var nodeName = elem.nodeName;
      return nodeName && nodeName.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
    }
    function getTracker(node) {
      return node._valueTracker;
    }
    function detachTracker(node) {
      node._valueTracker = null;
    }
    function getValueFromNode(node) {
      var value = "";
      if (!node) {
        return value;
      }
      if (isCheckable(node)) {
        value = node.checked ? "true" : "false";
      } else {
        value = node.value;
      }
      return value;
    }
    function trackValueOnNode(node) {
      var valueField = isCheckable(node) ? "checked" : "value";
      var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
      {
        checkFormFieldValueStringCoercion(node[valueField]);
      }
      var currentValue = "" + node[valueField];
      if (node.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
        return;
      }
      var get2 = descriptor.get, set2 = descriptor.set;
      Object.defineProperty(node, valueField, {
        configurable: true,
        get: function() {
          return get2.call(this);
        },
        set: function(value) {
          {
            checkFormFieldValueStringCoercion(value);
          }
          currentValue = "" + value;
          set2.call(this, value);
        }
      });
      Object.defineProperty(node, valueField, {
        enumerable: descriptor.enumerable
      });
      var tracker = {
        getValue: function() {
          return currentValue;
        },
        setValue: function(value) {
          {
            checkFormFieldValueStringCoercion(value);
          }
          currentValue = "" + value;
        },
        stopTracking: function() {
          detachTracker(node);
          delete node[valueField];
        }
      };
      return tracker;
    }
    function track(node) {
      if (getTracker(node)) {
        return;
      }
      node._valueTracker = trackValueOnNode(node);
    }
    function updateValueIfChanged(node) {
      if (!node) {
        return false;
      }
      var tracker = getTracker(node);
      if (!tracker) {
        return true;
      }
      var lastValue = tracker.getValue();
      var nextValue = getValueFromNode(node);
      if (nextValue !== lastValue) {
        tracker.setValue(nextValue);
        return true;
      }
      return false;
    }
    function getActiveElement(doc) {
      doc = doc || (typeof document !== "undefined" ? document : void 0);
      if (typeof doc === "undefined") {
        return null;
      }
      try {
        return doc.activeElement || doc.body;
      } catch (e) {
        return doc.body;
      }
    }
    var didWarnValueDefaultValue = false;
    var didWarnCheckedDefaultChecked = false;
    var didWarnControlledToUncontrolled = false;
    var didWarnUncontrolledToControlled = false;
    function isControlled(props) {
      var usesChecked = props.type === "checkbox" || props.type === "radio";
      return usesChecked ? props.checked != null : props.value != null;
    }
    function getHostProps(element, props) {
      var node = element;
      var checked = props.checked;
      var hostProps = assign({}, props, {
        defaultChecked: void 0,
        defaultValue: void 0,
        value: void 0,
        checked: checked != null ? checked : node._wrapperState.initialChecked
      });
      return hostProps;
    }
    function initWrapperState(element, props) {
      {
        checkControlledValueProps("input", props);
        if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked) {
          error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
          didWarnCheckedDefaultChecked = true;
        }
        if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue) {
          error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
          didWarnValueDefaultValue = true;
        }
      }
      var node = element;
      var defaultValue = props.defaultValue == null ? "" : props.defaultValue;
      node._wrapperState = {
        initialChecked: props.checked != null ? props.checked : props.defaultChecked,
        initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
        controlled: isControlled(props)
      };
    }
    function updateChecked(element, props) {
      var node = element;
      var checked = props.checked;
      if (checked != null) {
        setValueForProperty(node, "checked", checked, false);
      }
    }
    function updateWrapper(element, props) {
      var node = element;
      {
        var controlled = isControlled(props);
        if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
          error("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
          didWarnUncontrolledToControlled = true;
        }
        if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
          error("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
          didWarnControlledToUncontrolled = true;
        }
      }
      updateChecked(element, props);
      var value = getToStringValue(props.value);
      var type = props.type;
      if (value != null) {
        if (type === "number") {
          if (value === 0 && node.value === "" || // We explicitly want to coerce to number here if possible.
          // eslint-disable-next-line
          node.value != value) {
            node.value = toString(value);
          }
        } else if (node.value !== toString(value)) {
          node.value = toString(value);
        }
      } else if (type === "submit" || type === "reset") {
        node.removeAttribute("value");
        return;
      }
      {
        if (props.hasOwnProperty("value")) {
          setDefaultValue(node, props.type, value);
        } else if (props.hasOwnProperty("defaultValue")) {
          setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
        }
      }
      {
        if (props.checked == null && props.defaultChecked != null) {
          node.defaultChecked = !!props.defaultChecked;
        }
      }
    }
    function postMountWrapper(element, props, isHydrating2) {
      var node = element;
      if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
        var type = props.type;
        var isButton = type === "submit" || type === "reset";
        if (isButton && (props.value === void 0 || props.value === null)) {
          return;
        }
        var initialValue = toString(node._wrapperState.initialValue);
        if (!isHydrating2) {
          {
            if (initialValue !== node.value) {
              node.value = initialValue;
            }
          }
        }
        {
          node.defaultValue = initialValue;
        }
      }
      var name = node.name;
      if (name !== "") {
        node.name = "";
      }
      {
        node.defaultChecked = !node.defaultChecked;
        node.defaultChecked = !!node._wrapperState.initialChecked;
      }
      if (name !== "") {
        node.name = name;
      }
    }
    function restoreControlledState(element, props) {
      var node = element;
      updateWrapper(node, props);
      updateNamedCousins(node, props);
    }
    function updateNamedCousins(rootNode, props) {
      var name = props.name;
      if (props.type === "radio" && name != null) {
        var queryRoot = rootNode;
        while (queryRoot.parentNode) {
          queryRoot = queryRoot.parentNode;
        }
        {
          checkAttributeStringCoercion(name, "name");
        }
        var group = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name) + '][type="radio"]');
        for (var i = 0; i < group.length; i++) {
          var otherNode = group[i];
          if (otherNode === rootNode || otherNode.form !== rootNode.form) {
            continue;
          }
          var otherProps = getFiberCurrentPropsFromNode(otherNode);
          if (!otherProps) {
            throw new Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
          }
          updateValueIfChanged(otherNode);
          updateWrapper(otherNode, otherProps);
        }
      }
    }
    function setDefaultValue(node, type, value) {
      if (
        // Focused number inputs synchronize on blur. See ChangeEventPlugin.js
        type !== "number" || getActiveElement(node.ownerDocument) !== node
      ) {
        if (value == null) {
          node.defaultValue = toString(node._wrapperState.initialValue);
        } else if (node.defaultValue !== toString(value)) {
          node.defaultValue = toString(value);
        }
      }
    }
    var didWarnSelectedSetOnOption = false;
    var didWarnInvalidChild = false;
    var didWarnInvalidInnerHTML = false;
    function validateProps(element, props) {
      {
        if (props.value == null) {
          if (typeof props.children === "object" && props.children !== null) {
            React.Children.forEach(props.children, function(child) {
              if (child == null) {
                return;
              }
              if (typeof child === "string" || typeof child === "number") {
                return;
              }
              if (!didWarnInvalidChild) {
                didWarnInvalidChild = true;
                error("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.");
              }
            });
          } else if (props.dangerouslySetInnerHTML != null) {
            if (!didWarnInvalidInnerHTML) {
              didWarnInvalidInnerHTML = true;
              error("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.");
            }
          }
        }
        if (props.selected != null && !didWarnSelectedSetOnOption) {
          error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
          didWarnSelectedSetOnOption = true;
        }
      }
    }
    function postMountWrapper$1(element, props) {
      if (props.value != null) {
        element.setAttribute("value", toString(getToStringValue(props.value)));
      }
    }
    var isArrayImpl = Array.isArray;
    function isArray(a) {
      return isArrayImpl(a);
    }
    var didWarnValueDefaultValue$1;
    {
      didWarnValueDefaultValue$1 = false;
    }
    function getDeclarationErrorAddendum() {
      var ownerName = getCurrentFiberOwnerNameInDevOrNull();
      if (ownerName) {
        return "\n\nCheck the render method of `" + ownerName + "`.";
      }
      return "";
    }
    var valuePropNames = ["value", "defaultValue"];
    function checkSelectPropTypes(props) {
      {
        checkControlledValueProps("select", props);
        for (var i = 0; i < valuePropNames.length; i++) {
          var propName = valuePropNames[i];
          if (props[propName] == null) {
            continue;
          }
          var propNameIsArray = isArray(props[propName]);
          if (props.multiple && !propNameIsArray) {
            error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
          } else if (!props.multiple && propNameIsArray) {
            error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
          }
        }
      }
    }
    function updateOptions(node, multiple, propValue, setDefaultSelected) {
      var options2 = node.options;
      if (multiple) {
        var selectedValues = propValue;
        var selectedValue = {};
        for (var i = 0; i < selectedValues.length; i++) {
          selectedValue["$" + selectedValues[i]] = true;
        }
        for (var _i = 0; _i < options2.length; _i++) {
          var selected = selectedValue.hasOwnProperty("$" + options2[_i].value);
          if (options2[_i].selected !== selected) {
            options2[_i].selected = selected;
          }
          if (selected && setDefaultSelected) {
            options2[_i].defaultSelected = true;
          }
        }
      } else {
        var _selectedValue = toString(getToStringValue(propValue));
        var defaultSelected = null;
        for (var _i2 = 0; _i2 < options2.length; _i2++) {
          if (options2[_i2].value === _selectedValue) {
            options2[_i2].selected = true;
            if (setDefaultSelected) {
              options2[_i2].defaultSelected = true;
            }
            return;
          }
          if (defaultSelected === null && !options2[_i2].disabled) {
            defaultSelected = options2[_i2];
          }
        }
        if (defaultSelected !== null) {
          defaultSelected.selected = true;
        }
      }
    }
    function getHostProps$1(element, props) {
      return assign({}, props, {
        value: void 0
      });
    }
    function initWrapperState$1(element, props) {
      var node = element;
      {
        checkSelectPropTypes(props);
      }
      node._wrapperState = {
        wasMultiple: !!props.multiple
      };
      {
        if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1) {
          error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
          didWarnValueDefaultValue$1 = true;
        }
      }
    }
    function postMountWrapper$2(element, props) {
      var node = element;
      node.multiple = !!props.multiple;
      var value = props.value;
      if (value != null) {
        updateOptions(node, !!props.multiple, value, false);
      } else if (props.defaultValue != null) {
        updateOptions(node, !!props.multiple, props.defaultValue, true);
      }
    }
    function postUpdateWrapper(element, props) {
      var node = element;
      var wasMultiple = node._wrapperState.wasMultiple;
      node._wrapperState.wasMultiple = !!props.multiple;
      var value = props.value;
      if (value != null) {
        updateOptions(node, !!props.multiple, value, false);
      } else if (wasMultiple !== !!props.multiple) {
        if (props.defaultValue != null) {
          updateOptions(node, !!props.multiple, props.defaultValue, true);
        } else {
          updateOptions(node, !!props.multiple, props.multiple ? [] : "", false);
        }
      }
    }
    function restoreControlledState$1(element, props) {
      var node = element;
      var value = props.value;
      if (value != null) {
        updateOptions(node, !!props.multiple, value, false);
      }
    }
    var didWarnValDefaultVal = false;
    function getHostProps$2(element, props) {
      var node = element;
      if (props.dangerouslySetInnerHTML != null) {
        throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
      }
      var hostProps = assign({}, props, {
        value: void 0,
        defaultValue: void 0,
        children: toString(node._wrapperState.initialValue)
      });
      return hostProps;
    }
    function initWrapperState$2(element, props) {
      var node = element;
      {
        checkControlledValueProps("textarea", props);
        if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal) {
          error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
          didWarnValDefaultVal = true;
        }
      }
      var initialValue = props.value;
      if (initialValue == null) {
        var children = props.children, defaultValue = props.defaultValue;
        if (children != null) {
          {
            error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
          }
          {
            if (defaultValue != null) {
              throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
            }
            if (isArray(children)) {
              if (children.length > 1) {
                throw new Error("<textarea> can only have at most one child.");
              }
              children = children[0];
            }
            defaultValue = children;
          }
        }
        if (defaultValue == null) {
          defaultValue = "";
        }
        initialValue = defaultValue;
      }
      node._wrapperState = {
        initialValue: getToStringValue(initialValue)
      };
    }
    function updateWrapper$1(element, props) {
      var node = element;
      var value = getToStringValue(props.value);
      var defaultValue = getToStringValue(props.defaultValue);
      if (value != null) {
        var newValue = toString(value);
        if (newValue !== node.value) {
          node.value = newValue;
        }
        if (props.defaultValue == null && node.defaultValue !== newValue) {
          node.defaultValue = newValue;
        }
      }
      if (defaultValue != null) {
        node.defaultValue = toString(defaultValue);
      }
    }
    function postMountWrapper$3(element, props) {
      var node = element;
      var textContent = node.textContent;
      if (textContent === node._wrapperState.initialValue) {
        if (textContent !== "" && textContent !== null) {
          node.value = textContent;
        }
      }
    }
    function restoreControlledState$2(element, props) {
      updateWrapper$1(element, props);
    }
    var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
    var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
    var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
    function getIntrinsicNamespace(type) {
      switch (type) {
        case "svg":
          return SVG_NAMESPACE;
        case "math":
          return MATH_NAMESPACE;
        default:
          return HTML_NAMESPACE;
      }
    }
    function getChildNamespace(parentNamespace, type) {
      if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
        return getIntrinsicNamespace(type);
      }
      if (parentNamespace === SVG_NAMESPACE && type === "foreignObject") {
        return HTML_NAMESPACE;
      }
      return parentNamespace;
    }
    var createMicrosoftUnsafeLocalFunction = function(func) {
      if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) {
        return function(arg0, arg1, arg2, arg3) {
          MSApp.execUnsafeLocalFunction(function() {
            return func(arg0, arg1, arg2, arg3);
          });
        };
      } else {
        return func;
      }
    };
    var reusableSVGContainer;
    var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node, html) {
      if (node.namespaceURI === SVG_NAMESPACE) {
        if (!("innerHTML" in node)) {
          reusableSVGContainer = reusableSVGContainer || document.createElement("div");
          reusableSVGContainer.innerHTML = "<svg>" + html.valueOf().toString() + "</svg>";
          var svgNode = reusableSVGContainer.firstChild;
          while (node.firstChild) {
            node.removeChild(node.firstChild);
          }
          while (svgNode.firstChild) {
            node.appendChild(svgNode.firstChild);
          }
          return;
        }
      }
      node.innerHTML = html;
    });
    var ELEMENT_NODE = 1;
    var TEXT_NODE = 3;
    var COMMENT_NODE = 8;
    var DOCUMENT_NODE = 9;
    var DOCUMENT_FRAGMENT_NODE = 11;
    var setTextContent = function(node, text) {
      if (text) {
        var firstChild = node.firstChild;
        if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
          firstChild.nodeValue = text;
          return;
        }
      }
      node.textContent = text;
    };
    var shorthandToLonghand = {
      animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
      background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
      backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
      border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
      borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
      borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
      borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
      borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
      borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
      borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
      borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
      borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
      borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
      borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
      borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
      borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
      borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
      columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
      columns: ["columnCount", "columnWidth"],
      flex: ["flexBasis", "flexGrow", "flexShrink"],
      flexFlow: ["flexDirection", "flexWrap"],
      font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
      fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
      gap: ["columnGap", "rowGap"],
      grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
      gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
      gridColumn: ["gridColumnEnd", "gridColumnStart"],
      gridColumnGap: ["columnGap"],
      gridGap: ["columnGap", "rowGap"],
      gridRow: ["gridRowEnd", "gridRowStart"],
      gridRowGap: ["rowGap"],
      gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
      listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
      margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
      marker: ["markerEnd", "markerMid", "markerStart"],
      mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
      maskPosition: ["maskPositionX", "maskPositionY"],
      outline: ["outlineColor", "outlineStyle", "outlineWidth"],
      overflow: ["overflowX", "overflowY"],
      padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
      placeContent: ["alignContent", "justifyContent"],
      placeItems: ["alignItems", "justifyItems"],
      placeSelf: ["alignSelf", "justifySelf"],
      textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
      textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
      transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
      wordWrap: ["overflowWrap"]
    };
    var isUnitlessNumber = {
      animationIterationCount: true,
      aspectRatio: true,
      borderImageOutset: true,
      borderImageSlice: true,
      borderImageWidth: true,
      boxFlex: true,
      boxFlexGroup: true,
      boxOrdinalGroup: true,
      columnCount: true,
      columns: true,
      flex: true,
      flexGrow: true,
      flexPositive: true,
      flexShrink: true,
      flexNegative: true,
      flexOrder: true,
      gridArea: true,
      gridRow: true,
      gridRowEnd: true,
      gridRowSpan: true,
      gridRowStart: true,
      gridColumn: true,
      gridColumnEnd: true,
      gridColumnSpan: true,
      gridColumnStart: true,
      fontWeight: true,
      lineClamp: true,
      lineHeight: true,
      opacity: true,
      order: true,
      orphans: true,
      tabSize: true,
      widows: true,
      zIndex: true,
      zoom: true,
      // SVG-related properties
      fillOpacity: true,
      floodOpacity: true,
      stopOpacity: true,
      strokeDasharray: true,
      strokeDashoffset: true,
      strokeMiterlimit: true,
      strokeOpacity: true,
      strokeWidth: true
    };
    function prefixKey(prefix2, key) {
      return prefix2 + key.charAt(0).toUpperCase() + key.substring(1);
    }
    var prefixes = ["Webkit", "ms", "Moz", "O"];
    Object.keys(isUnitlessNumber).forEach(function(prop) {
      prefixes.forEach(function(prefix2) {
        isUnitlessNumber[prefixKey(prefix2, prop)] = isUnitlessNumber[prop];
      });
    });
    function dangerousStyleValue(name, value, isCustomProperty) {
      var isEmpty = value == null || typeof value === "boolean" || value === "";
      if (isEmpty) {
        return "";
      }
      if (!isCustomProperty && typeof value === "number" && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
        return value + "px";
      }
      {
        checkCSSPropertyStringCoercion(value, name);
      }
      return ("" + value).trim();
    }
    var uppercasePattern = /([A-Z])/g;
    var msPattern = /^ms-/;
    function hyphenateStyleName(name) {
      return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
    }
    var warnValidStyle = function() {
    };
    {
      var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
      var msPattern$1 = /^-ms-/;
      var hyphenPattern = /-(.)/g;
      var badStyleValueWithSemicolonPattern = /;\s*$/;
      var warnedStyleNames = {};
      var warnedStyleValues = {};
      var warnedForNaNValue = false;
      var warnedForInfinityValue = false;
      var camelize = function(string) {
        return string.replace(hyphenPattern, function(_, character) {
          return character.toUpperCase();
        });
      };
      var warnHyphenatedStyleName = function(name) {
        if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
          return;
        }
        warnedStyleNames[name] = true;
        error(
          "Unsupported style property %s. Did you mean %s?",
          name,
          // As Andi Smith suggests
          // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
          // is converted to lowercase `ms`.
          camelize(name.replace(msPattern$1, "ms-"))
        );
      };
      var warnBadVendoredStyleName = function(name) {
        if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
          return;
        }
        warnedStyleNames[name] = true;
        error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
      };
      var warnStyleValueWithSemicolon = function(name, value) {
        if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
          return;
        }
        warnedStyleValues[value] = true;
        error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, ""));
      };
      var warnStyleValueIsNaN = function(name, value) {
        if (warnedForNaNValue) {
          return;
        }
        warnedForNaNValue = true;
        error("`NaN` is an invalid value for the `%s` css style property.", name);
      };
      var warnStyleValueIsInfinity = function(name, value) {
        if (warnedForInfinityValue) {
          return;
        }
        warnedForInfinityValue = true;
        error("`Infinity` is an invalid value for the `%s` css style property.", name);
      };
      warnValidStyle = function(name, value) {
        if (name.indexOf("-") > -1) {
          warnHyphenatedStyleName(name);
        } else if (badVendoredStyleNamePattern.test(name)) {
          warnBadVendoredStyleName(name);
        } else if (badStyleValueWithSemicolonPattern.test(value)) {
          warnStyleValueWithSemicolon(name, value);
        }
        if (typeof value === "number") {
          if (isNaN(value)) {
            warnStyleValueIsNaN(name, value);
          } else if (!isFinite(value)) {
            warnStyleValueIsInfinity(name, value);
          }
        }
      };
    }
    var warnValidStyle$1 = warnValidStyle;
    function createDangerousStringForStyles(styles) {
      {
        var serialized = "";
        var delimiter = "";
        for (var styleName in styles) {
          if (!styles.hasOwnProperty(styleName)) {
            continue;
          }
          var styleValue = styles[styleName];
          if (styleValue != null) {
            var isCustomProperty = styleName.indexOf("--") === 0;
            serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ":";
            serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
            delimiter = ";";
          }
        }
        return serialized || null;
      }
    }
    function setValueForStyles(node, styles) {
      var style2 = node.style;
      for (var styleName in styles) {
        if (!styles.hasOwnProperty(styleName)) {
          continue;
        }
        var isCustomProperty = styleName.indexOf("--") === 0;
        {
          if (!isCustomProperty) {
            warnValidStyle$1(styleName, styles[styleName]);
          }
        }
        var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
        if (styleName === "float") {
          styleName = "cssFloat";
        }
        if (isCustomProperty) {
          style2.setProperty(styleName, styleValue);
        } else {
          style2[styleName] = styleValue;
        }
      }
    }
    function isValueEmpty(value) {
      return value == null || typeof value === "boolean" || value === "";
    }
    function expandShorthandMap(styles) {
      var expanded = {};
      for (var key in styles) {
        var longhands = shorthandToLonghand[key] || [key];
        for (var i = 0; i < longhands.length; i++) {
          expanded[longhands[i]] = key;
        }
      }
      return expanded;
    }
    function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
      {
        if (!nextStyles) {
          return;
        }
        var expandedUpdates = expandShorthandMap(styleUpdates);
        var expandedStyles = expandShorthandMap(nextStyles);
        var warnedAbout = {};
        for (var key in expandedUpdates) {
          var originalKey = expandedUpdates[key];
          var correctOriginalKey = expandedStyles[key];
          if (correctOriginalKey && originalKey !== correctOriginalKey) {
            var warningKey = originalKey + "," + correctOriginalKey;
            if (warnedAbout[warningKey]) {
              continue;
            }
            warnedAbout[warningKey] = true;
            error("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
          }
        }
      }
    }
    var omittedCloseTags = {
      area: true,
      base: true,
      br: true,
      col: true,
      embed: true,
      hr: true,
      img: true,
      input: true,
      keygen: true,
      link: true,
      meta: true,
      param: true,
      source: true,
      track: true,
      wbr: true
      // NOTE: menuitem's close tag should be omitted, but that causes problems.
    };
    var voidElementTags = assign({
      menuitem: true
    }, omittedCloseTags);
    var HTML = "__html";
    function assertValidProps(tag, props) {
      if (!props) {
        return;
      }
      if (voidElementTags[tag]) {
        if (props.children != null || props.dangerouslySetInnerHTML != null) {
          throw new Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
        }
      }
      if (props.dangerouslySetInnerHTML != null) {
        if (props.children != null) {
          throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
        }
        if (typeof props.dangerouslySetInnerHTML !== "object" || !(HTML in props.dangerouslySetInnerHTML)) {
          throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
        }
      }
      {
        if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
          error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
        }
      }
      if (props.style != null && typeof props.style !== "object") {
        throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
      }
    }
    function isCustomComponent(tagName, props) {
      if (tagName.indexOf("-") === -1) {
        return typeof props.is === "string";
      }
      switch (tagName) {
        case "annotation-xml":
        case "color-profile":
        case "font-face":
        case "font-face-src":
        case "font-face-uri":
        case "font-face-format":
        case "font-face-name":
        case "missing-glyph":
          return false;
        default:
          return true;
      }
    }
    var possibleStandardNames = {
      // HTML
      accept: "accept",
      acceptcharset: "acceptCharset",
      "accept-charset": "acceptCharset",
      accesskey: "accessKey",
      action: "action",
      allowfullscreen: "allowFullScreen",
      alt: "alt",
      as: "as",
      async: "async",
      autocapitalize: "autoCapitalize",
      autocomplete: "autoComplete",
      autocorrect: "autoCorrect",
      autofocus: "autoFocus",
      autoplay: "autoPlay",
      autosave: "autoSave",
      capture: "capture",
      cellpadding: "cellPadding",
      cellspacing: "cellSpacing",
      challenge: "challenge",
      charset: "charSet",
      checked: "checked",
      children: "children",
      cite: "cite",
      class: "className",
      classid: "classID",
      classname: "className",
      cols: "cols",
      colspan: "colSpan",
      content: "content",
      contenteditable: "contentEditable",
      contextmenu: "contextMenu",
      controls: "controls",
      controlslist: "controlsList",
      coords: "coords",
      crossorigin: "crossOrigin",
      dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
      data: "data",
      datetime: "dateTime",
      default: "default",
      defaultchecked: "defaultChecked",
      defaultvalue: "defaultValue",
      defer: "defer",
      dir: "dir",
      disabled: "disabled",
      disablepictureinpicture: "disablePictureInPicture",
      disableremoteplayback: "disableRemotePlayback",
      download: "download",
      draggable: "draggable",
      enctype: "encType",
      enterkeyhint: "enterKeyHint",
      for: "htmlFor",
      form: "form",
      formmethod: "formMethod",
      formaction: "formAction",
      formenctype: "formEncType",
      formnovalidate: "formNoValidate",
      formtarget: "formTarget",
      frameborder: "frameBorder",
      headers: "headers",
      height: "height",
      hidden: "hidden",
      high: "high",
      href: "href",
      hreflang: "hrefLang",
      htmlfor: "htmlFor",
      httpequiv: "httpEquiv",
      "http-equiv": "httpEquiv",
      icon: "icon",
      id: "id",
      imagesizes: "imageSizes",
      imagesrcset: "imageSrcSet",
      innerhtml: "innerHTML",
      inputmode: "inputMode",
      integrity: "integrity",
      is: "is",
      itemid: "itemID",
      itemprop: "itemProp",
      itemref: "itemRef",
      itemscope: "itemScope",
      itemtype: "itemType",
      keyparams: "keyParams",
      keytype: "keyType",
      kind: "kind",
      label: "label",
      lang: "lang",
      list: "list",
      loop: "loop",
      low: "low",
      manifest: "manifest",
      marginwidth: "marginWidth",
      marginheight: "marginHeight",
      max: "max",
      maxlength: "maxLength",
      media: "media",
      mediagroup: "mediaGroup",
      method: "method",
      min: "min",
      minlength: "minLength",
      multiple: "multiple",
      muted: "muted",
      name: "name",
      nomodule: "noModule",
      nonce: "nonce",
      novalidate: "noValidate",
      open: "open",
      optimum: "optimum",
      pattern: "pattern",
      placeholder: "placeholder",
      playsinline: "playsInline",
      poster: "poster",
      preload: "preload",
      profile: "profile",
      radiogroup: "radioGroup",
      readonly: "readOnly",
      referrerpolicy: "referrerPolicy",
      rel: "rel",
      required: "required",
      reversed: "reversed",
      role: "role",
      rows: "rows",
      rowspan: "rowSpan",
      sandbox: "sandbox",
      scope: "scope",
      scoped: "scoped",
      scrolling: "scrolling",
      seamless: "seamless",
      selected: "selected",
      shape: "shape",
      size: "size",
      sizes: "sizes",
      span: "span",
      spellcheck: "spellCheck",
      src: "src",
      srcdoc: "srcDoc",
      srclang: "srcLang",
      srcset: "srcSet",
      start: "start",
      step: "step",
      style: "style",
      summary: "summary",
      tabindex: "tabIndex",
      target: "target",
      title: "title",
      type: "type",
      usemap: "useMap",
      value: "value",
      width: "width",
      wmode: "wmode",
      wrap: "wrap",
      // SVG
      about: "about",
      accentheight: "accentHeight",
      "accent-height": "accentHeight",
      accumulate: "accumulate",
      additive: "additive",
      alignmentbaseline: "alignmentBaseline",
      "alignment-baseline": "alignmentBaseline",
      allowreorder: "allowReorder",
      alphabetic: "alphabetic",
      amplitude: "amplitude",
      arabicform: "arabicForm",
      "arabic-form": "arabicForm",
      ascent: "ascent",
      attributename: "attributeName",
      attributetype: "attributeType",
      autoreverse: "autoReverse",
      azimuth: "azimuth",
      basefrequency: "baseFrequency",
      baselineshift: "baselineShift",
      "baseline-shift": "baselineShift",
      baseprofile: "baseProfile",
      bbox: "bbox",
      begin: "begin",
      bias: "bias",
      by: "by",
      calcmode: "calcMode",
      capheight: "capHeight",
      "cap-height": "capHeight",
      clip: "clip",
      clippath: "clipPath",
      "clip-path": "clipPath",
      clippathunits: "clipPathUnits",
      cliprule: "clipRule",
      "clip-rule": "clipRule",
      color: "color",
      colorinterpolation: "colorInterpolation",
      "color-interpolation": "colorInterpolation",
      colorinterpolationfilters: "colorInterpolationFilters",
      "color-interpolation-filters": "colorInterpolationFilters",
      colorprofile: "colorProfile",
      "color-profile": "colorProfile",
      colorrendering: "colorRendering",
      "color-rendering": "colorRendering",
      contentscripttype: "contentScriptType",
      contentstyletype: "contentStyleType",
      cursor: "cursor",
      cx: "cx",
      cy: "cy",
      d: "d",
      datatype: "datatype",
      decelerate: "decelerate",
      descent: "descent",
      diffuseconstant: "diffuseConstant",
      direction: "direction",
      display: "display",
      divisor: "divisor",
      dominantbaseline: "dominantBaseline",
      "dominant-baseline": "dominantBaseline",
      dur: "dur",
      dx: "dx",
      dy: "dy",
      edgemode: "edgeMode",
      elevation: "elevation",
      enablebackground: "enableBackground",
      "enable-background": "enableBackground",
      end: "end",
      exponent: "exponent",
      externalresourcesrequired: "externalResourcesRequired",
      fill: "fill",
      fillopacity: "fillOpacity",
      "fill-opacity": "fillOpacity",
      fillrule: "fillRule",
      "fill-rule": "fillRule",
      filter: "filter",
      filterres: "filterRes",
      filterunits: "filterUnits",
      floodopacity: "floodOpacity",
      "flood-opacity": "floodOpacity",
      floodcolor: "floodColor",
      "flood-color": "floodColor",
      focusable: "focusable",
      fontfamily: "fontFamily",
      "font-family": "fontFamily",
      fontsize: "fontSize",
      "font-size": "fontSize",
      fontsizeadjust: "fontSizeAdjust",
      "font-size-adjust": "fontSizeAdjust",
      fontstretch: "fontStretch",
      "font-stretch": "fontStretch",
      fontstyle: "fontStyle",
      "font-style": "fontStyle",
      fontvariant: "fontVariant",
      "font-variant": "fontVariant",
      fontweight: "fontWeight",
      "font-weight": "fontWeight",
      format: "format",
      from: "from",
      fx: "fx",
      fy: "fy",
      g1: "g1",
      g2: "g2",
      glyphname: "glyphName",
      "glyph-name": "glyphName",
      glyphorientationhorizontal: "glyphOrientationHorizontal",
      "glyph-orientation-horizontal": "glyphOrientationHorizontal",
      glyphorientationvertical: "glyphOrientationVertical",
      "glyph-orientation-vertical": "glyphOrientationVertical",
      glyphref: "glyphRef",
      gradienttransform: "gradientTransform",
      gradientunits: "gradientUnits",
      hanging: "hanging",
      horizadvx: "horizAdvX",
      "horiz-adv-x": "horizAdvX",
      horizoriginx: "horizOriginX",
      "horiz-origin-x": "horizOriginX",
      ideographic: "ideographic",
      imagerendering: "imageRendering",
      "image-rendering": "imageRendering",
      in2: "in2",
      in: "in",
      inlist: "inlist",
      intercept: "intercept",
      k1: "k1",
      k2: "k2",
      k3: "k3",
      k4: "k4",
      k: "k",
      kernelmatrix: "kernelMatrix",
      kernelunitlength: "kernelUnitLength",
      kerning: "kerning",
      keypoints: "keyPoints",
      keysplines: "keySplines",
      keytimes: "keyTimes",
      lengthadjust: "lengthAdjust",
      letterspacing: "letterSpacing",
      "letter-spacing": "letterSpacing",
      lightingcolor: "lightingColor",
      "lighting-color": "lightingColor",
      limitingconeangle: "limitingConeAngle",
      local: "local",
      markerend: "markerEnd",
      "marker-end": "markerEnd",
      markerheight: "markerHeight",
      markermid: "markerMid",
      "marker-mid": "markerMid",
      markerstart: "markerStart",
      "marker-start": "markerStart",
      markerunits: "markerUnits",
      markerwidth: "markerWidth",
      mask: "mask",
      maskcontentunits: "maskContentUnits",
      maskunits: "maskUnits",
      mathematical: "mathematical",
      mode: "mode",
      numoctaves: "numOctaves",
      offset: "offset",
      opacity: "opacity",
      operator: "operator",
      order: "order",
      orient: "orient",
      orientation: "orientation",
      origin: "origin",
      overflow: "overflow",
      overlineposition: "overlinePosition",
      "overline-position": "overlinePosition",
      overlinethickness: "overlineThickness",
      "overline-thickness": "overlineThickness",
      paintorder: "paintOrder",
      "paint-order": "paintOrder",
      panose1: "panose1",
      "panose-1": "panose1",
      pathlength: "pathLength",
      patterncontentunits: "patternContentUnits",
      patterntransform: "patternTransform",
      patternunits: "patternUnits",
      pointerevents: "pointerEvents",
      "pointer-events": "pointerEvents",
      points: "points",
      pointsatx: "pointsAtX",
      pointsaty: "pointsAtY",
      pointsatz: "pointsAtZ",
      prefix: "prefix",
      preservealpha: "preserveAlpha",
      preserveaspectratio: "preserveAspectRatio",
      primitiveunits: "primitiveUnits",
      property: "property",
      r: "r",
      radius: "radius",
      refx: "refX",
      refy: "refY",
      renderingintent: "renderingIntent",
      "rendering-intent": "renderingIntent",
      repeatcount: "repeatCount",
      repeatdur: "repeatDur",
      requiredextensions: "requiredExtensions",
      requiredfeatures: "requiredFeatures",
      resource: "resource",
      restart: "restart",
      result: "result",
      results: "results",
      rotate: "rotate",
      rx: "rx",
      ry: "ry",
      scale: "scale",
      security: "security",
      seed: "seed",
      shaperendering: "shapeRendering",
      "shape-rendering": "shapeRendering",
      slope: "slope",
      spacing: "spacing",
      specularconstant: "specularConstant",
      specularexponent: "specularExponent",
      speed: "speed",
      spreadmethod: "spreadMethod",
      startoffset: "startOffset",
      stddeviation: "stdDeviation",
      stemh: "stemh",
      stemv: "stemv",
      stitchtiles: "stitchTiles",
      stopcolor: "stopColor",
      "stop-color": "stopColor",
      stopopacity: "stopOpacity",
      "stop-opacity": "stopOpacity",
      strikethroughposition: "strikethroughPosition",
      "strikethrough-position": "strikethroughPosition",
      strikethroughthickness: "strikethroughThickness",
      "strikethrough-thickness": "strikethroughThickness",
      string: "string",
      stroke: "stroke",
      strokedasharray: "strokeDasharray",
      "stroke-dasharray": "strokeDasharray",
      strokedashoffset: "strokeDashoffset",
      "stroke-dashoffset": "strokeDashoffset",
      strokelinecap: "strokeLinecap",
      "stroke-linecap": "strokeLinecap",
      strokelinejoin: "strokeLinejoin",
      "stroke-linejoin": "strokeLinejoin",
      strokemiterlimit: "strokeMiterlimit",
      "stroke-miterlimit": "strokeMiterlimit",
      strokewidth: "strokeWidth",
      "stroke-width": "strokeWidth",
      strokeopacity: "strokeOpacity",
      "stroke-opacity": "strokeOpacity",
      suppresscontenteditablewarning: "suppressContentEditableWarning",
      suppresshydrationwarning: "suppressHydrationWarning",
      surfacescale: "surfaceScale",
      systemlanguage: "systemLanguage",
      tablevalues: "tableValues",
      targetx: "targetX",
      targety: "targetY",
      textanchor: "textAnchor",
      "text-anchor": "textAnchor",
      textdecoration: "textDecoration",
      "text-decoration": "textDecoration",
      textlength: "textLength",
      textrendering: "textRendering",
      "text-rendering": "textRendering",
      to: "to",
      transform: "transform",
      typeof: "typeof",
      u1: "u1",
      u2: "u2",
      underlineposition: "underlinePosition",
      "underline-position": "underlinePosition",
      underlinethickness: "underlineThickness",
      "underline-thickness": "underlineThickness",
      unicode: "unicode",
      unicodebidi: "unicodeBidi",
      "unicode-bidi": "unicodeBidi",
      unicoderange: "unicodeRange",
      "unicode-range": "unicodeRange",
      unitsperem: "unitsPerEm",
      "units-per-em": "unitsPerEm",
      unselectable: "unselectable",
      valphabetic: "vAlphabetic",
      "v-alphabetic": "vAlphabetic",
      values: "values",
      vectoreffect: "vectorEffect",
      "vector-effect": "vectorEffect",
      version: "version",
      vertadvy: "vertAdvY",
      "vert-adv-y": "vertAdvY",
      vertoriginx: "vertOriginX",
      "vert-origin-x": "vertOriginX",
      vertoriginy: "vertOriginY",
      "vert-origin-y": "vertOriginY",
      vhanging: "vHanging",
      "v-hanging": "vHanging",
      videographic: "vIdeographic",
      "v-ideographic": "vIdeographic",
      viewbox: "viewBox",
      viewtarget: "viewTarget",
      visibility: "visibility",
      vmathematical: "vMathematical",
      "v-mathematical": "vMathematical",
      vocab: "vocab",
      widths: "widths",
      wordspacing: "wordSpacing",
      "word-spacing": "wordSpacing",
      writingmode: "writingMode",
      "writing-mode": "writingMode",
      x1: "x1",
      x2: "x2",
      x: "x",
      xchannelselector: "xChannelSelector",
      xheight: "xHeight",
      "x-height": "xHeight",
      xlinkactuate: "xlinkActuate",
      "xlink:actuate": "xlinkActuate",
      xlinkarcrole: "xlinkArcrole",
      "xlink:arcrole": "xlinkArcrole",
      xlinkhref: "xlinkHref",
      "xlink:href": "xlinkHref",
      xlinkrole: "xlinkRole",
      "xlink:role": "xlinkRole",
      xlinkshow: "xlinkShow",
      "xlink:show": "xlinkShow",
      xlinktitle: "xlinkTitle",
      "xlink:title": "xlinkTitle",
      xlinktype: "xlinkType",
      "xlink:type": "xlinkType",
      xmlbase: "xmlBase",
      "xml:base": "xmlBase",
      xmllang: "xmlLang",
      "xml:lang": "xmlLang",
      xmlns: "xmlns",
      "xml:space": "xmlSpace",
      xmlnsxlink: "xmlnsXlink",
      "xmlns:xlink": "xmlnsXlink",
      xmlspace: "xmlSpace",
      y1: "y1",
      y2: "y2",
      y: "y",
      ychannelselector: "yChannelSelector",
      z: "z",
      zoomandpan: "zoomAndPan"
    };
    var ariaProperties = {
      "aria-current": 0,
      // state
      "aria-description": 0,
      "aria-details": 0,
      "aria-disabled": 0,
      // state
      "aria-hidden": 0,
      // state
      "aria-invalid": 0,
      // state
      "aria-keyshortcuts": 0,
      "aria-label": 0,
      "aria-roledescription": 0,
      // Widget Attributes
      "aria-autocomplete": 0,
      "aria-checked": 0,
      "aria-expanded": 0,
      "aria-haspopup": 0,
      "aria-level": 0,
      "aria-modal": 0,
      "aria-multiline": 0,
      "aria-multiselectable": 0,
      "aria-orientation": 0,
      "aria-placeholder": 0,
      "aria-pressed": 0,
      "aria-readonly": 0,
      "aria-required": 0,
      "aria-selected": 0,
      "aria-sort": 0,
      "aria-valuemax": 0,
      "aria-valuemin": 0,
      "aria-valuenow": 0,
      "aria-valuetext": 0,
      // Live Region Attributes
      "aria-atomic": 0,
      "aria-busy": 0,
      "aria-live": 0,
      "aria-relevant": 0,
      // Drag-and-Drop Attributes
      "aria-dropeffect": 0,
      "aria-grabbed": 0,
      // Relationship Attributes
      "aria-activedescendant": 0,
      "aria-colcount": 0,
      "aria-colindex": 0,
      "aria-colspan": 0,
      "aria-controls": 0,
      "aria-describedby": 0,
      "aria-errormessage": 0,
      "aria-flowto": 0,
      "aria-labelledby": 0,
      "aria-owns": 0,
      "aria-posinset": 0,
      "aria-rowcount": 0,
      "aria-rowindex": 0,
      "aria-rowspan": 0,
      "aria-setsize": 0
    };
    var warnedProperties = {};
    var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
    var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
    function validateProperty(tagName, name) {
      {
        if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name]) {
          return true;
        }
        if (rARIACamel.test(name)) {
          var ariaName = "aria-" + name.slice(4).toLowerCase();
          var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
          if (correctName == null) {
            error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
            warnedProperties[name] = true;
            return true;
          }
          if (name !== correctName) {
            error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
            warnedProperties[name] = true;
            return true;
          }
        }
        if (rARIA.test(name)) {
          var lowerCasedName = name.toLowerCase();
          var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
          if (standardName == null) {
            warnedProperties[name] = true;
            return false;
          }
          if (name !== standardName) {
            error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
            warnedProperties[name] = true;
            return true;
          }
        }
      }
      return true;
    }
    function warnInvalidARIAProps(type, props) {
      {
        var invalidProps = [];
        for (var key in props) {
          var isValid = validateProperty(type, key);
          if (!isValid) {
            invalidProps.push(key);
          }
        }
        var unknownPropString = invalidProps.map(function(prop) {
          return "`" + prop + "`";
        }).join(", ");
        if (invalidProps.length === 1) {
          error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
        } else if (invalidProps.length > 1) {
          error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
        }
      }
    }
    function validateProperties(type, props) {
      if (isCustomComponent(type, props)) {
        return;
      }
      warnInvalidARIAProps(type, props);
    }
    var didWarnValueNull = false;
    function validateProperties$1(type, props) {
      {
        if (type !== "input" && type !== "textarea" && type !== "select") {
          return;
        }
        if (props != null && props.value === null && !didWarnValueNull) {
          didWarnValueNull = true;
          if (type === "select" && props.multiple) {
            error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
          } else {
            error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
          }
        }
      }
    }
    var validateProperty$1 = function() {
    };
    {
      var warnedProperties$1 = {};
      var EVENT_NAME_REGEX = /^on./;
      var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
      var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
      var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
      validateProperty$1 = function(tagName, name, value, eventRegistry) {
        if (hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
          return true;
        }
        var lowerCasedName = name.toLowerCase();
        if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
          error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
          warnedProperties$1[name] = true;
          return true;
        }
        if (eventRegistry != null) {
          var registrationNameDependencies2 = eventRegistry.registrationNameDependencies, possibleRegistrationNames2 = eventRegistry.possibleRegistrationNames;
          if (registrationNameDependencies2.hasOwnProperty(name)) {
            return true;
          }
          var registrationName = possibleRegistrationNames2.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames2[lowerCasedName] : null;
          if (registrationName != null) {
            error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
            warnedProperties$1[name] = true;
            return true;
          }
          if (EVENT_NAME_REGEX.test(name)) {
            error("Unknown event handler property `%s`. It will be ignored.", name);
            warnedProperties$1[name] = true;
            return true;
          }
        } else if (EVENT_NAME_REGEX.test(name)) {
          if (INVALID_EVENT_NAME_REGEX.test(name)) {
            error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
          }
          warnedProperties$1[name] = true;
          return true;
        }
        if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
          return true;
        }
        if (lowerCasedName === "innerhtml") {
          error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
          warnedProperties$1[name] = true;
          return true;
        }
        if (lowerCasedName === "aria") {
          error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
          warnedProperties$1[name] = true;
          return true;
        }
        if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
          error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
          warnedProperties$1[name] = true;
          return true;
        }
        if (typeof value === "number" && isNaN(value)) {
          error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
          warnedProperties$1[name] = true;
          return true;
        }
        var propertyInfo = getPropertyInfo(name);
        var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
        if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
          var standardName = possibleStandardNames[lowerCasedName];
          if (standardName !== name) {
            error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
            warnedProperties$1[name] = true;
            return true;
          }
        } else if (!isReserved && name !== lowerCasedName) {
          error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
          warnedProperties$1[name] = true;
          return true;
        }
        if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
          if (value) {
            error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
          } else {
            error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
          }
          warnedProperties$1[name] = true;
          return true;
        }
        if (isReserved) {
          return true;
        }
        if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
          warnedProperties$1[name] = true;
          return false;
        }
        if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
          error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
          warnedProperties$1[name] = true;
          return true;
        }
        return true;
      };
    }
    var warnUnknownProperties = function(type, props, eventRegistry) {
      {
        var unknownProps = [];
        for (var key in props) {
          var isValid = validateProperty$1(type, key, props[key], eventRegistry);
          if (!isValid) {
            unknownProps.push(key);
          }
        }
        var unknownPropString = unknownProps.map(function(prop) {
          return "`" + prop + "`";
        }).join(", ");
        if (unknownProps.length === 1) {
          error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
        } else if (unknownProps.length > 1) {
          error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
        }
      }
    };
    function validateProperties$2(type, props, eventRegistry) {
      if (isCustomComponent(type, props)) {
        return;
      }
      warnUnknownProperties(type, props, eventRegistry);
    }
    var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
    var IS_NON_DELEGATED = 1 << 1;
    var IS_CAPTURE_PHASE = 1 << 2;
    var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
    var currentReplayingEvent = null;
    function setReplayingEvent(event) {
      {
        if (currentReplayingEvent !== null) {
          error("Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue.");
        }
      }
      currentReplayingEvent = event;
    }
    function resetReplayingEvent() {
      {
        if (currentReplayingEvent === null) {
          error("Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue.");
        }
      }
      currentReplayingEvent = null;
    }
    function isReplayingEvent(event) {
      return event === currentReplayingEvent;
    }
    function getEventTarget(nativeEvent) {
      var target = nativeEvent.target || nativeEvent.srcElement || window;
      if (target.correspondingUseElement) {
        target = target.correspondingUseElement;
      }
      return target.nodeType === TEXT_NODE ? target.parentNode : target;
    }
    var restoreImpl = null;
    var restoreTarget = null;
    var restoreQueue = null;
    function restoreStateOfTarget(target) {
      var internalInstance = getInstanceFromNode(target);
      if (!internalInstance) {
        return;
      }
      if (typeof restoreImpl !== "function") {
        throw new Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
      }
      var stateNode = internalInstance.stateNode;
      if (stateNode) {
        var _props = getFiberCurrentPropsFromNode(stateNode);
        restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
      }
    }
    function setRestoreImplementation(impl) {
      restoreImpl = impl;
    }
    function enqueueStateRestore(target) {
      if (restoreTarget) {
        if (restoreQueue) {
          restoreQueue.push(target);
        } else {
          restoreQueue = [target];
        }
      } else {
        restoreTarget = target;
      }
    }
    function needsStateRestore() {
      return restoreTarget !== null || restoreQueue !== null;
    }
    function restoreStateIfNeeded() {
      if (!restoreTarget) {
        return;
      }
      var target = restoreTarget;
      var queuedTargets = restoreQueue;
      restoreTarget = null;
      restoreQueue = null;
      restoreStateOfTarget(target);
      if (queuedTargets) {
        for (var i = 0; i < queuedTargets.length; i++) {
          restoreStateOfTarget(queuedTargets[i]);
        }
      }
    }
    var batchedUpdatesImpl = function(fn, bookkeeping) {
      return fn(bookkeeping);
    };
    var flushSyncImpl = function() {
    };
    var isInsideEventHandler = false;
    function finishEventHandler() {
      var controlledComponentsHavePendingUpdates = needsStateRestore();
      if (controlledComponentsHavePendingUpdates) {
        flushSyncImpl();
        restoreStateIfNeeded();
      }
    }
    function batchedUpdates(fn, a, b) {
      if (isInsideEventHandler) {
        return fn(a, b);
      }
      isInsideEventHandler = true;
      try {
        return batchedUpdatesImpl(fn, a, b);
      } finally {
        isInsideEventHandler = false;
        finishEventHandler();
      }
    }
    function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushSyncImpl) {
      batchedUpdatesImpl = _batchedUpdatesImpl;
      flushSyncImpl = _flushSyncImpl;
    }
    function isInteractive(tag) {
      return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
    }
    function shouldPreventMouseEvent(name, type, props) {
      switch (name) {
        case "onClick":
        case "onClickCapture":
        case "onDoubleClick":
        case "onDoubleClickCapture":
        case "onMouseDown":
        case "onMouseDownCapture":
        case "onMouseMove":
        case "onMouseMoveCapture":
        case "onMouseUp":
        case "onMouseUpCapture":
        case "onMouseEnter":
          return !!(props.disabled && isInteractive(type));
        default:
          return false;
      }
    }
    function getListener(inst, registrationName) {
      var stateNode = inst.stateNode;
      if (stateNode === null) {
        return null;
      }
      var props = getFiberCurrentPropsFromNode(stateNode);
      if (props === null) {
        return null;
      }
      var listener = props[registrationName];
      if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
        return null;
      }
      if (listener && typeof listener !== "function") {
        throw new Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
      }
      return listener;
    }
    var passiveBrowserEventsSupported = false;
    if (canUseDOM) {
      try {
        var options = {};
        Object.defineProperty(options, "passive", {
          get: function() {
            passiveBrowserEventsSupported = true;
          }
        });
        window.addEventListener("test", options, options);
        window.removeEventListener("test", options, options);
      } catch (e) {
        passiveBrowserEventsSupported = false;
      }
    }
    function invokeGuardedCallbackProd(name, func, context, a, b, c, d, e, f) {
      var funcArgs = Array.prototype.slice.call(arguments, 3);
      try {
        func.apply(context, funcArgs);
      } catch (error2) {
        this.onError(error2);
      }
    }
    var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
    {
      if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
        var fakeNode = document.createElement("react");
        invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {
          if (typeof document === "undefined" || document === null) {
            throw new Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
          }
          var evt = document.createEvent("Event");
          var didCall = false;
          var didError = true;
          var windowEvent = window.event;
          var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
          function restoreAfterDispatch() {
            fakeNode.removeEventListener(evtType, callCallback2, false);
            if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
              window.event = windowEvent;
            }
          }
          var funcArgs = Array.prototype.slice.call(arguments, 3);
          function callCallback2() {
            didCall = true;
            restoreAfterDispatch();
            func.apply(context, funcArgs);
            didError = false;
          }
          var error2;
          var didSetError = false;
          var isCrossOriginError = false;
          function handleWindowError(event) {
            error2 = event.error;
            didSetError = true;
            if (error2 === null && event.colno === 0 && event.lineno === 0) {
              isCrossOriginError = true;
            }
            if (event.defaultPrevented) {
              if (error2 != null && typeof error2 === "object") {
                try {
                  error2._suppressLogging = true;
                } catch (inner) {
                }
              }
            }
          }
          var evtType = "react-" + (name ? name : "invokeguardedcallback");
          window.addEventListener("error", handleWindowError);
          fakeNode.addEventListener(evtType, callCallback2, false);
          evt.initEvent(evtType, false, false);
          fakeNode.dispatchEvent(evt);
          if (windowEventDescriptor) {
            Object.defineProperty(window, "event", windowEventDescriptor);
          }
          if (didCall && didError) {
            if (!didSetError) {
              error2 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
            } else if (isCrossOriginError) {
              error2 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
            }
            this.onError(error2);
          }
          window.removeEventListener("error", handleWindowError);
          if (!didCall) {
            restoreAfterDispatch();
            return invokeGuardedCallbackProd.apply(this, arguments);
          }
        };
      }
    }
    var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
    var hasError = false;
    var caughtError = null;
    var hasRethrowError = false;
    var rethrowError = null;
    var reporter = {
      onError: function(error2) {
        hasError = true;
        caughtError = error2;
      }
    };
    function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
      hasError = false;
      caughtError = null;
      invokeGuardedCallbackImpl$1.apply(reporter, arguments);
    }
    function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
      invokeGuardedCallback.apply(this, arguments);
      if (hasError) {
        var error2 = clearCaughtError();
        if (!hasRethrowError) {
          hasRethrowError = true;
          rethrowError = error2;
        }
      }
    }
    function rethrowCaughtError() {
      if (hasRethrowError) {
        var error2 = rethrowError;
        hasRethrowError = false;
        rethrowError = null;
        throw error2;
      }
    }
    function hasCaughtError() {
      return hasError;
    }
    function clearCaughtError() {
      if (hasError) {
        var error2 = caughtError;
        hasError = false;
        caughtError = null;
        return error2;
      } else {
        throw new Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
      }
    }
    function get(key) {
      return key._reactInternals;
    }
    function has(key) {
      return key._reactInternals !== void 0;
    }
    function set(key, value) {
      key._reactInternals = value;
    }
    var NoFlags = (
      /*                      */
      0
    );
    var PerformedWork = (
      /*                */
      1
    );
    var Placement = (
      /*                    */
      2
    );
    var Update = (
      /*                       */
      4
    );
    var ChildDeletion = (
      /*                */
      16
    );
    var ContentReset = (
      /*                 */
      32
    );
    var Callback = (
      /*                     */
      64
    );
    var DidCapture = (
      /*                   */
      128
    );
    var ForceClientRender = (
      /*            */
      256
    );
    var Ref = (
      /*                          */
      512
    );
    var Snapshot = (
      /*                     */
      1024
    );
    var Passive = (
      /*                      */
      2048
    );
    var Hydrating = (
      /*                    */
      4096
    );
    var Visibility = (
      /*                   */
      8192
    );
    var StoreConsistency = (
      /*             */
      16384
    );
    var LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot | StoreConsistency;
    var HostEffectMask = (
      /*               */
      32767
    );
    var Incomplete = (
      /*                   */
      32768
    );
    var ShouldCapture = (
      /*                */
      65536
    );
    var ForceUpdateForLegacySuspense = (
      /* */
      131072
    );
    var Forked = (
      /*                       */
      1048576
    );
    var RefStatic = (
      /*                    */
      2097152
    );
    var LayoutStatic = (
      /*                 */
      4194304
    );
    var PassiveStatic = (
      /*                */
      8388608
    );
    var MountLayoutDev = (
      /*               */
      16777216
    );
    var MountPassiveDev = (
      /*              */
      33554432
    );
    var BeforeMutationMask = (
      // TODO: Remove Update flag from before mutation phase by re-landing Visibility
      // flag logic (see #20043)
      Update | Snapshot | 0
    );
    var MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility;
    var LayoutMask = Update | Callback | Ref | Visibility;
    var PassiveMask = Passive | ChildDeletion;
    var StaticMask = LayoutStatic | PassiveStatic | RefStatic;
    var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
    function getNearestMountedFiber(fiber) {
      var node = fiber;
      var nearestMounted = fiber;
      if (!fiber.alternate) {
        var nextNode = node;
        do {
          node = nextNode;
          if ((node.flags & (Placement | Hydrating)) !== NoFlags) {
            nearestMounted = node.return;
          }
          nextNode = node.return;
        } while (nextNode);
      } else {
        while (node.return) {
          node = node.return;
        }
      }
      if (node.tag === HostRoot) {
        return nearestMounted;
      }
      return null;
    }
    function getSuspenseInstanceFromFiber(fiber) {
      if (fiber.tag === SuspenseComponent) {
        var suspenseState = fiber.memoizedState;
        if (suspenseState === null) {
          var current2 = fiber.alternate;
          if (current2 !== null) {
            suspenseState = current2.memoizedState;
          }
        }
        if (suspenseState !== null) {
          return suspenseState.dehydrated;
        }
      }
      return null;
    }
    function getContainerFromFiber(fiber) {
      return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
    }
    function isFiberMounted(fiber) {
      return getNearestMountedFiber(fiber) === fiber;
    }
    function isMounted(component) {
      {
        var owner = ReactCurrentOwner.current;
        if (owner !== null && owner.tag === ClassComponent) {
          var ownerFiber = owner;
          var instance = ownerFiber.stateNode;
          if (!instance._warnedAboutRefsInRender) {
            error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromFiber(ownerFiber) || "A component");
          }
          instance._warnedAboutRefsInRender = true;
        }
      }
      var fiber = get(component);
      if (!fiber) {
        return false;
      }
      return getNearestMountedFiber(fiber) === fiber;
    }
    function assertIsMounted(fiber) {
      if (getNearestMountedFiber(fiber) !== fiber) {
        throw new Error("Unable to find node on an unmounted component.");
      }
    }
    function findCurrentFiberUsingSlowPath(fiber) {
      var alternate = fiber.alternate;
      if (!alternate) {
        var nearestMounted = getNearestMountedFiber(fiber);
        if (nearestMounted === null) {
          throw new Error("Unable to find node on an unmounted component.");
        }
        if (nearestMounted !== fiber) {
          return null;
        }
        return fiber;
      }
      var a = fiber;
      var b = alternate;
      while (true) {
        var parentA = a.return;
        if (parentA === null) {
          break;
        }
        var parentB = parentA.alternate;
        if (parentB === null) {
          var nextParent = parentA.return;
          if (nextParent !== null) {
            a = b = nextParent;
            continue;
          }
          break;
        }
        if (parentA.child === parentB.child) {
          var child = parentA.child;
          while (child) {
            if (child === a) {
              assertIsMounted(parentA);
              return fiber;
            }
            if (child === b) {
              assertIsMounted(parentA);
              return alternate;
            }
            child = child.sibling;
          }
          throw new Error("Unable to find node on an unmounted component.");
        }
        if (a.return !== b.return) {
          a = parentA;
          b = parentB;
        } else {
          var didFindChild = false;
          var _child = parentA.child;
          while (_child) {
            if (_child === a) {
              didFindChild = true;
              a = parentA;
              b = parentB;
              break;
            }
            if (_child === b) {
              didFindChild = true;
              b = parentA;
              a = parentB;
              break;
            }
            _child = _child.sibling;
          }
          if (!didFindChild) {
            _child = parentB.child;
            while (_child) {
              if (_child === a) {
                didFindChild = true;
                a = parentB;
                b = parentA;
                break;
              }
              if (_child === b) {
                didFindChild = true;
                b = parentB;
                a = parentA;
                break;
              }
              _child = _child.sibling;
            }
            if (!didFindChild) {
              throw new Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
            }
          }
        }
        if (a.alternate !== b) {
          throw new Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
        }
      }
      if (a.tag !== HostRoot) {
        throw new Error("Unable to find node on an unmounted component.");
      }
      if (a.stateNode.current === a) {
        return fiber;
      }
      return alternate;
    }
    function findCurrentHostFiber(parent) {
      var currentParent = findCurrentFiberUsingSlowPath(parent);
      return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;
    }
    function findCurrentHostFiberImpl(node) {
      if (node.tag === HostComponent || node.tag === HostText) {
        return node;
      }
      var child = node.child;
      while (child !== null) {
        var match = findCurrentHostFiberImpl(child);
        if (match !== null) {
          return match;
        }
        child = child.sibling;
      }
      return null;
    }
    function findCurrentHostFiberWithNoPortals(parent) {
      var currentParent = findCurrentFiberUsingSlowPath(parent);
      return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;
    }
    function findCurrentHostFiberWithNoPortalsImpl(node) {
      if (node.tag === HostComponent || node.tag === HostText) {
        return node;
      }
      var child = node.child;
      while (child !== null) {
        if (child.tag !== HostPortal) {
          var match = findCurrentHostFiberWithNoPortalsImpl(child);
          if (match !== null) {
            return match;
          }
        }
        child = child.sibling;
      }
      return null;
    }
    var scheduleCallback = Scheduler.unstable_scheduleCallback;
    var cancelCallback = Scheduler.unstable_cancelCallback;
    var shouldYield = Scheduler.unstable_shouldYield;
    var requestPaint = Scheduler.unstable_requestPaint;
    var now = Scheduler.unstable_now;
    var getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel;
    var ImmediatePriority = Scheduler.unstable_ImmediatePriority;
    var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
    var NormalPriority = Scheduler.unstable_NormalPriority;
    var LowPriority = Scheduler.unstable_LowPriority;
    var IdlePriority = Scheduler.unstable_IdlePriority;
    var unstable_yieldValue = Scheduler.unstable_yieldValue;
    var unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue;
    var rendererID = null;
    var injectedHook = null;
    var injectedProfilingHooks = null;
    var hasLoggedError = false;
    var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
    function injectInternals(internals) {
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
        return false;
      }
      var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
      if (hook.isDisabled) {
        return true;
      }
      if (!hook.supportsFiber) {
        {
          error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
        }
        return true;
      }
      try {
        if (enableSchedulingProfiler) {
          internals = assign({}, internals, {
            getLaneLabelMap,
            injectProfilingHooks
          });
        }
        rendererID = hook.inject(internals);
        injectedHook = hook;
      } catch (err) {
        {
          error("React instrumentation encountered an error: %s.", err);
        }
      }
      if (hook.checkDCE) {
        return true;
      } else {
        return false;
      }
    }
    function onScheduleRoot(root2, children) {
      {
        if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") {
          try {
            injectedHook.onScheduleFiberRoot(rendererID, root2, children);
          } catch (err) {
            if (!hasLoggedError) {
              hasLoggedError = true;
              error("React instrumentation encountered an error: %s", err);
            }
          }
        }
      }
    }
    function onCommitRoot(root2, eventPriority) {
      if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") {
        try {
          var didError = (root2.current.flags & DidCapture) === DidCapture;
          if (enableProfilerTimer) {
            var schedulerPriority;
            switch (eventPriority) {
              case DiscreteEventPriority:
                schedulerPriority = ImmediatePriority;
                break;
              case ContinuousEventPriority:
                schedulerPriority = UserBlockingPriority;
                break;
              case DefaultEventPriority:
                schedulerPriority = NormalPriority;
                break;
              case IdleEventPriority:
                schedulerPriority = IdlePriority;
                break;
              default:
                schedulerPriority = NormalPriority;
                break;
            }
            injectedHook.onCommitFiberRoot(rendererID, root2, schedulerPriority, didError);
          } else {
            injectedHook.onCommitFiberRoot(rendererID, root2, void 0, didError);
          }
        } catch (err) {
          {
            if (!hasLoggedError) {
              hasLoggedError = true;
              error("React instrumentation encountered an error: %s", err);
            }
          }
        }
      }
    }
    function onPostCommitRoot(root2) {
      if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === "function") {
        try {
          injectedHook.onPostCommitFiberRoot(rendererID, root2);
        } catch (err) {
          {
            if (!hasLoggedError) {
              hasLoggedError = true;
              error("React instrumentation encountered an error: %s", err);
            }
          }
        }
      }
    }
    function onCommitUnmount(fiber) {
      if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") {
        try {
          injectedHook.onCommitFiberUnmount(rendererID, fiber);
        } catch (err) {
          {
            if (!hasLoggedError) {
              hasLoggedError = true;
              error("React instrumentation encountered an error: %s", err);
            }
          }
        }
      }
    }
    function setIsStrictModeForDevtools(newIsStrictMode) {
      {
        if (typeof unstable_yieldValue === "function") {
          unstable_setDisableYieldValue(newIsStrictMode);
          setSuppressWarning(newIsStrictMode);
        }
        if (injectedHook && typeof injectedHook.setStrictMode === "function") {
          try {
            injectedHook.setStrictMode(rendererID, newIsStrictMode);
          } catch (err) {
            {
              if (!hasLoggedError) {
                hasLoggedError = true;
                error("React instrumentation encountered an error: %s", err);
              }
            }
          }
        }
      }
    }
    function injectProfilingHooks(profilingHooks) {
      injectedProfilingHooks = profilingHooks;
    }
    function getLaneLabelMap() {
      {
        var map = /* @__PURE__ */ new Map();
        var lane = 1;
        for (var index2 = 0; index2 < TotalLanes; index2++) {
          var label = getLabelForLane(lane);
          map.set(lane, label);
          lane *= 2;
        }
        return map;
      }
    }
    function markCommitStarted(lanes) {
      {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted === "function") {
          injectedProfilingHooks.markCommitStarted(lanes);
        }
      }
    }
    function markCommitStopped() {
      {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped === "function") {
          injectedProfilingHooks.markCommitStopped();
        }
      }
    }
    function markComponentRenderStarted(fiber) {
      {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted === "function") {
          injectedProfilingHooks.markComponentRenderStarted(fiber);
        }
      }
    }
    function markComponentRenderStopped() {
      {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped === "function") {
          injectedProfilingHooks.markComponentRenderStopped();
        }
      }
    }
    function markComponentPassiveEffectMountStarted(fiber) {
      {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === "function") {
          injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);
        }
      }
    }
    function markComponentPassiveEffectMountStopped() {
      {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === "function") {
          injectedProfilingHooks.markComponentPassiveEffectMountStopped();
        }
      }
    }
    function markComponentPassiveEffectUnmountStarted(fiber) {
      {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === "function") {
          injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);
        }
      }
    }
    function markComponentPassiveEffectUnmountStopped() {
      {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === "function") {
          injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();
        }
      }
    }
    function markComponentLayoutEffectMountStarted(fiber) {
      {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === "function") {
          injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);
        }
      }
    }
    function markComponentLayoutEffectMountStopped() {
      {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === "function") {
          injectedProfilingHooks.markComponentLayoutEffectMountStopped();
        }
      }
    }
    function markComponentLayoutEffectUnmountStarted(fiber) {
      {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === "function") {
          injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);
        }
      }
    }
    function markComponentLayoutEffectUnmountStopped() {
      {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === "function") {
          injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();
        }
      }
    }
    function markComponentErrored(fiber, thrownValue, lanes) {
      {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored === "function") {
          injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);
        }
      }
    }
    function markComponentSuspended(fiber, wakeable, lanes) {
      {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended === "function") {
          injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);
        }
      }
    }
    function markLayoutEffectsStarted(lanes) {
      {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted === "function") {
          injectedProfilingHooks.markLayoutEffectsStarted(lanes);
        }
      }
    }
    function markLayoutEffectsStopped() {
      {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped === "function") {
          injectedProfilingHooks.markLayoutEffectsStopped();
        }
      }
    }
    function markPassiveEffectsStarted(lanes) {
      {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted === "function") {
          injectedProfilingHooks.markPassiveEffectsStarted(lanes);
        }
      }
    }
    function markPassiveEffectsStopped() {
      {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped === "function") {
          injectedProfilingHooks.markPassiveEffectsStopped();
        }
      }
    }
    function markRenderStarted(lanes) {
      {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted === "function") {
          injectedProfilingHooks.markRenderStarted(lanes);
        }
      }
    }
    function markRenderYielded() {
      {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded === "function") {
          injectedProfilingHooks.markRenderYielded();
        }
      }
    }
    function markRenderStopped() {
      {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped === "function") {
          injectedProfilingHooks.markRenderStopped();
        }
      }
    }
    function markRenderScheduled(lane) {
      {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled === "function") {
          injectedProfilingHooks.markRenderScheduled(lane);
        }
      }
    }
    function markForceUpdateScheduled(fiber, lane) {
      {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled === "function") {
          injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);
        }
      }
    }
    function markStateUpdateScheduled(fiber, lane) {
      {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled === "function") {
          injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
        }
      }
    }
    var NoMode = (
      /*                         */
      0
    );
    var ConcurrentMode = (
      /*                 */
      1
    );
    var ProfileMode = (
      /*                    */
      2
    );
    var StrictLegacyMode = (
      /*               */
      8
    );
    var StrictEffectsMode = (
      /*              */
      16
    );
    var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
    var log = Math.log;
    var LN2 = Math.LN2;
    function clz32Fallback(x) {
      var asUint = x >>> 0;
      if (asUint === 0) {
        return 32;
      }
      return 31 - (log(asUint) / LN2 | 0) | 0;
    }
    var TotalLanes = 31;
    var NoLanes = (
      /*                        */
      0
    );
    var NoLane = (
      /*                          */
      0
    );
    var SyncLane = (
      /*                        */
      1
    );
    var InputContinuousHydrationLane = (
      /*    */
      2
    );
    var InputContinuousLane = (
      /*             */
      4
    );
    var DefaultHydrationLane = (
      /*            */
      8
    );
    var DefaultLane = (
      /*                     */
      16
    );
    var TransitionHydrationLane = (
      /*                */
      32
    );
    var TransitionLanes = (
      /*                       */
      4194240
    );
    var TransitionLane1 = (
      /*                        */
      64
    );
    var TransitionLane2 = (
      /*                        */
      128
    );
    var TransitionLane3 = (
      /*                        */
      256
    );
    var TransitionLane4 = (
      /*                        */
      512
    );
    var TransitionLane5 = (
      /*                        */
      1024
    );
    var TransitionLane6 = (
      /*                        */
      2048
    );
    var TransitionLane7 = (
      /*                        */
      4096
    );
    var TransitionLane8 = (
      /*                        */
      8192
    );
    var TransitionLane9 = (
      /*                        */
      16384
    );
    var TransitionLane10 = (
      /*                       */
      32768
    );
    var TransitionLane11 = (
      /*                       */
      65536
    );
    var TransitionLane12 = (
      /*                       */
      131072
    );
    var TransitionLane13 = (
      /*                       */
      262144
    );
    var TransitionLane14 = (
      /*                       */
      524288
    );
    var TransitionLane15 = (
      /*                       */
      1048576
    );
    var TransitionLane16 = (
      /*                       */
      2097152
    );
    var RetryLanes = (
      /*                            */
      130023424
    );
    var RetryLane1 = (
      /*                             */
      4194304
    );
    var RetryLane2 = (
      /*                             */
      8388608
    );
    var RetryLane3 = (
      /*                             */
      16777216
    );
    var RetryLane4 = (
      /*                             */
      33554432
    );
    var RetryLane5 = (
      /*                             */
      67108864
    );
    var SomeRetryLane = RetryLane1;
    var SelectiveHydrationLane = (
      /*          */
      134217728
    );
    var NonIdleLanes = (
      /*                          */
      268435455
    );
    var IdleHydrationLane = (
      /*               */
      268435456
    );
    var IdleLane = (
      /*                        */
      536870912
    );
    var OffscreenLane = (
      /*                   */
      1073741824
    );
    function getLabelForLane(lane) {
      {
        if (lane & SyncLane) {
          return "Sync";
        }
        if (lane & InputContinuousHydrationLane) {
          return "InputContinuousHydration";
        }
        if (lane & InputContinuousLane) {
          return "InputContinuous";
        }
        if (lane & DefaultHydrationLane) {
          return "DefaultHydration";
        }
        if (lane & DefaultLane) {
          return "Default";
        }
        if (lane & TransitionHydrationLane) {
          return "TransitionHydration";
        }
        if (lane & TransitionLanes) {
          return "Transition";
        }
        if (lane & RetryLanes) {
          return "Retry";
        }
        if (lane & SelectiveHydrationLane) {
          return "SelectiveHydration";
        }
        if (lane & IdleHydrationLane) {
          return "IdleHydration";
        }
        if (lane & IdleLane) {
          return "Idle";
        }
        if (lane & OffscreenLane) {
          return "Offscreen";
        }
      }
    }
    var NoTimestamp = -1;
    var nextTransitionLane = TransitionLane1;
    var nextRetryLane = RetryLane1;
    function getHighestPriorityLanes(lanes) {
      switch (getHighestPriorityLane(lanes)) {
        case SyncLane:
          return SyncLane;
        case InputContinuousHydrationLane:
          return InputContinuousHydrationLane;
        case InputContinuousLane:
          return InputContinuousLane;
        case DefaultHydrationLane:
          return DefaultHydrationLane;
        case DefaultLane:
          return DefaultLane;
        case TransitionHydrationLane:
          return TransitionHydrationLane;
        case TransitionLane1:
        case TransitionLane2:
        case TransitionLane3:
        case TransitionLane4:
        case TransitionLane5:
        case TransitionLane6:
        case TransitionLane7:
        case TransitionLane8:
        case TransitionLane9:
        case TransitionLane10:
        case TransitionLane11:
        case TransitionLane12:
        case TransitionLane13:
        case TransitionLane14:
        case TransitionLane15:
        case TransitionLane16:
          return lanes & TransitionLanes;
        case RetryLane1:
        case RetryLane2:
        case RetryLane3:
        case RetryLane4:
        case RetryLane5:
          return lanes & RetryLanes;
        case SelectiveHydrationLane:
          return SelectiveHydrationLane;
        case IdleHydrationLane:
          return IdleHydrationLane;
        case IdleLane:
          return IdleLane;
        case OffscreenLane:
          return OffscreenLane;
        default:
          {
            error("Should have found matching lanes. This is a bug in React.");
          }
          return lanes;
      }
    }
    function getNextLanes(root2, wipLanes) {
      var pendingLanes = root2.pendingLanes;
      if (pendingLanes === NoLanes) {
        return NoLanes;
      }
      var nextLanes = NoLanes;
      var suspendedLanes = root2.suspendedLanes;
      var pingedLanes = root2.pingedLanes;
      var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
      if (nonIdlePendingLanes !== NoLanes) {
        var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
        if (nonIdleUnblockedLanes !== NoLanes) {
          nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
        } else {
          var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
          if (nonIdlePingedLanes !== NoLanes) {
            nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
          }
        }
      } else {
        var unblockedLanes = pendingLanes & ~suspendedLanes;
        if (unblockedLanes !== NoLanes) {
          nextLanes = getHighestPriorityLanes(unblockedLanes);
        } else {
          if (pingedLanes !== NoLanes) {
            nextLanes = getHighestPriorityLanes(pingedLanes);
          }
        }
      }
      if (nextLanes === NoLanes) {
        return NoLanes;
      }
      if (wipLanes !== NoLanes && wipLanes !== nextLanes && // If we already suspended with a delay, then interrupting is fine. Don't
      // bother waiting until the root is complete.
      (wipLanes & suspendedLanes) === NoLanes) {
        var nextLane = getHighestPriorityLane(nextLanes);
        var wipLane = getHighestPriorityLane(wipLanes);
        if (
          // Tests whether the next lane is equal or lower priority than the wip
          // one. This works because the bits decrease in priority as you go left.
          nextLane >= wipLane || // Default priority updates should not interrupt transition updates. The
          // only difference between default updates and transition updates is that
          // default updates do not support refresh transitions.
          nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes
        ) {
          return wipLanes;
        }
      }
      if ((nextLanes & InputContinuousLane) !== NoLanes) {
        nextLanes |= pendingLanes & DefaultLane;
      }
      var entangledLanes = root2.entangledLanes;
      if (entangledLanes !== NoLanes) {
        var entanglements = root2.entanglements;
        var lanes = nextLanes & entangledLanes;
        while (lanes > 0) {
          var index2 = pickArbitraryLaneIndex(lanes);
          var lane = 1 << index2;
          nextLanes |= entanglements[index2];
          lanes &= ~lane;
        }
      }
      return nextLanes;
    }
    function getMostRecentEventTime(root2, lanes) {
      var eventTimes = root2.eventTimes;
      var mostRecentEventTime = NoTimestamp;
      while (lanes > 0) {
        var index2 = pickArbitraryLaneIndex(lanes);
        var lane = 1 << index2;
        var eventTime = eventTimes[index2];
        if (eventTime > mostRecentEventTime) {
          mostRecentEventTime = eventTime;
        }
        lanes &= ~lane;
      }
      return mostRecentEventTime;
    }
    function computeExpirationTime(lane, currentTime) {
      switch (lane) {
        case SyncLane:
        case InputContinuousHydrationLane:
        case InputContinuousLane:
          return currentTime + 250;
        case DefaultHydrationLane:
        case DefaultLane:
        case TransitionHydrationLane:
        case TransitionLane1:
        case TransitionLane2:
        case TransitionLane3:
        case TransitionLane4:
        case TransitionLane5:
        case TransitionLane6:
        case TransitionLane7:
        case TransitionLane8:
        case TransitionLane9:
        case TransitionLane10:
        case TransitionLane11:
        case TransitionLane12:
        case TransitionLane13:
        case TransitionLane14:
        case TransitionLane15:
        case TransitionLane16:
          return currentTime + 5e3;
        case RetryLane1:
        case RetryLane2:
        case RetryLane3:
        case RetryLane4:
        case RetryLane5:
          return NoTimestamp;
        case SelectiveHydrationLane:
        case IdleHydrationLane:
        case IdleLane:
        case OffscreenLane:
          return NoTimestamp;
        default:
          {
            error("Should have found matching lanes. This is a bug in React.");
          }
          return NoTimestamp;
      }
    }
    function markStarvedLanesAsExpired(root2, currentTime) {
      var pendingLanes = root2.pendingLanes;
      var suspendedLanes = root2.suspendedLanes;
      var pingedLanes = root2.pingedLanes;
      var expirationTimes = root2.expirationTimes;
      var lanes = pendingLanes;
      while (lanes > 0) {
        var index2 = pickArbitraryLaneIndex(lanes);
        var lane = 1 << index2;
        var expirationTime = expirationTimes[index2];
        if (expirationTime === NoTimestamp) {
          if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
            expirationTimes[index2] = computeExpirationTime(lane, currentTime);
          }
        } else if (expirationTime <= currentTime) {
          root2.expiredLanes |= lane;
        }
        lanes &= ~lane;
      }
    }
    function getHighestPriorityPendingLanes(root2) {
      return getHighestPriorityLanes(root2.pendingLanes);
    }
    function getLanesToRetrySynchronouslyOnError(root2) {
      var everythingButOffscreen = root2.pendingLanes & ~OffscreenLane;
      if (everythingButOffscreen !== NoLanes) {
        return everythingButOffscreen;
      }
      if (everythingButOffscreen & OffscreenLane) {
        return OffscreenLane;
      }
      return NoLanes;
    }
    function includesSyncLane(lanes) {
      return (lanes & SyncLane) !== NoLanes;
    }
    function includesNonIdleWork(lanes) {
      return (lanes & NonIdleLanes) !== NoLanes;
    }
    function includesOnlyRetries(lanes) {
      return (lanes & RetryLanes) === lanes;
    }
    function includesOnlyNonUrgentLanes(lanes) {
      var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;
      return (lanes & UrgentLanes) === NoLanes;
    }
    function includesOnlyTransitions(lanes) {
      return (lanes & TransitionLanes) === lanes;
    }
    function includesBlockingLane(root2, lanes) {
      var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;
      return (lanes & SyncDefaultLanes) !== NoLanes;
    }
    function includesExpiredLane(root2, lanes) {
      return (lanes & root2.expiredLanes) !== NoLanes;
    }
    function isTransitionLane(lane) {
      return (lane & TransitionLanes) !== NoLanes;
    }
    function claimNextTransitionLane() {
      var lane = nextTransitionLane;
      nextTransitionLane <<= 1;
      if ((nextTransitionLane & TransitionLanes) === NoLanes) {
        nextTransitionLane = TransitionLane1;
      }
      return lane;
    }
    function claimNextRetryLane() {
      var lane = nextRetryLane;
      nextRetryLane <<= 1;
      if ((nextRetryLane & RetryLanes) === NoLanes) {
        nextRetryLane = RetryLane1;
      }
      return lane;
    }
    function getHighestPriorityLane(lanes) {
      return lanes & -lanes;
    }
    function pickArbitraryLane(lanes) {
      return getHighestPriorityLane(lanes);
    }
    function pickArbitraryLaneIndex(lanes) {
      return 31 - clz32(lanes);
    }
    function laneToIndex(lane) {
      return pickArbitraryLaneIndex(lane);
    }
    function includesSomeLane(a, b) {
      return (a & b) !== NoLanes;
    }
    function isSubsetOfLanes(set2, subset) {
      return (set2 & subset) === subset;
    }
    function mergeLanes(a, b) {
      return a | b;
    }
    function removeLanes(set2, subset) {
      return set2 & ~subset;
    }
    function intersectLanes(a, b) {
      return a & b;
    }
    function laneToLanes(lane) {
      return lane;
    }
    function higherPriorityLane(a, b) {
      return a !== NoLane && a < b ? a : b;
    }
    function createLaneMap(initial) {
      var laneMap = [];
      for (var i = 0; i < TotalLanes; i++) {
        laneMap.push(initial);
      }
      return laneMap;
    }
    function markRootUpdated(root2, updateLane, eventTime) {
      root2.pendingLanes |= updateLane;
      if (updateLane !== IdleLane) {
        root2.suspendedLanes = NoLanes;
        root2.pingedLanes = NoLanes;
      }
      var eventTimes = root2.eventTimes;
      var index2 = laneToIndex(updateLane);
      eventTimes[index2] = eventTime;
    }
    function markRootSuspended(root2, suspendedLanes) {
      root2.suspendedLanes |= suspendedLanes;
      root2.pingedLanes &= ~suspendedLanes;
      var expirationTimes = root2.expirationTimes;
      var lanes = suspendedLanes;
      while (lanes > 0) {
        var index2 = pickArbitraryLaneIndex(lanes);
        var lane = 1 << index2;
        expirationTimes[index2] = NoTimestamp;
        lanes &= ~lane;
      }
    }
    function markRootPinged(root2, pingedLanes, eventTime) {
      root2.pingedLanes |= root2.suspendedLanes & pingedLanes;
    }
    function markRootFinished(root2, remainingLanes) {
      var noLongerPendingLanes = root2.pendingLanes & ~remainingLanes;
      root2.pendingLanes = remainingLanes;
      root2.suspendedLanes = NoLanes;
      root2.pingedLanes = NoLanes;
      root2.expiredLanes &= remainingLanes;
      root2.mutableReadLanes &= remainingLanes;
      root2.entangledLanes &= remainingLanes;
      var entanglements = root2.entanglements;
      var eventTimes = root2.eventTimes;
      var expirationTimes = root2.expirationTimes;
      var lanes = noLongerPendingLanes;
      while (lanes > 0) {
        var index2 = pickArbitraryLaneIndex(lanes);
        var lane = 1 << index2;
        entanglements[index2] = NoLanes;
        eventTimes[index2] = NoTimestamp;
        expirationTimes[index2] = NoTimestamp;
        lanes &= ~lane;
      }
    }
    function markRootEntangled(root2, entangledLanes) {
      var rootEntangledLanes = root2.entangledLanes |= entangledLanes;
      var entanglements = root2.entanglements;
      var lanes = rootEntangledLanes;
      while (lanes) {
        var index2 = pickArbitraryLaneIndex(lanes);
        var lane = 1 << index2;
        if (
          // Is this one of the newly entangled lanes?
          lane & entangledLanes | // Is this lane transitively entangled with the newly entangled lanes?
          entanglements[index2] & entangledLanes
        ) {
          entanglements[index2] |= entangledLanes;
        }
        lanes &= ~lane;
      }
    }
    function getBumpedLaneForHydration(root2, renderLanes2) {
      var renderLane = getHighestPriorityLane(renderLanes2);
      var lane;
      switch (renderLane) {
        case InputContinuousLane:
          lane = InputContinuousHydrationLane;
          break;
        case DefaultLane:
          lane = DefaultHydrationLane;
          break;
        case TransitionLane1:
        case TransitionLane2:
        case TransitionLane3:
        case TransitionLane4:
        case TransitionLane5:
        case TransitionLane6:
        case TransitionLane7:
        case TransitionLane8:
        case TransitionLane9:
        case TransitionLane10:
        case TransitionLane11:
        case TransitionLane12:
        case TransitionLane13:
        case TransitionLane14:
        case TransitionLane15:
        case TransitionLane16:
        case RetryLane1:
        case RetryLane2:
        case RetryLane3:
        case RetryLane4:
        case RetryLane5:
          lane = TransitionHydrationLane;
          break;
        case IdleLane:
          lane = IdleHydrationLane;
          break;
        default:
          lane = NoLane;
          break;
      }
      if ((lane & (root2.suspendedLanes | renderLanes2)) !== NoLane) {
        return NoLane;
      }
      return lane;
    }
    function addFiberToLanesMap(root2, fiber, lanes) {
      if (!isDevToolsPresent) {
        return;
      }
      var pendingUpdatersLaneMap = root2.pendingUpdatersLaneMap;
      while (lanes > 0) {
        var index2 = laneToIndex(lanes);
        var lane = 1 << index2;
        var updaters = pendingUpdatersLaneMap[index2];
        updaters.add(fiber);
        lanes &= ~lane;
      }
    }
    function movePendingFibersToMemoized(root2, lanes) {
      if (!isDevToolsPresent) {
        return;
      }
      var pendingUpdatersLaneMap = root2.pendingUpdatersLaneMap;
      var memoizedUpdaters = root2.memoizedUpdaters;
      while (lanes > 0) {
        var index2 = laneToIndex(lanes);
        var lane = 1 << index2;
        var updaters = pendingUpdatersLaneMap[index2];
        if (updaters.size > 0) {
          updaters.forEach(function(fiber) {
            var alternate = fiber.alternate;
            if (alternate === null || !memoizedUpdaters.has(alternate)) {
              memoizedUpdaters.add(fiber);
            }
          });
          updaters.clear();
        }
        lanes &= ~lane;
      }
    }
    function getTransitionsForLanes(root2, lanes) {
      {
        return null;
      }
    }
    var DiscreteEventPriority = SyncLane;
    var ContinuousEventPriority = InputContinuousLane;
    var DefaultEventPriority = DefaultLane;
    var IdleEventPriority = IdleLane;
    var currentUpdatePriority = NoLane;
    function getCurrentUpdatePriority() {
      return currentUpdatePriority;
    }
    function setCurrentUpdatePriority(newPriority) {
      currentUpdatePriority = newPriority;
    }
    function runWithPriority(priority, fn) {
      var previousPriority = currentUpdatePriority;
      try {
        currentUpdatePriority = priority;
        return fn();
      } finally {
        currentUpdatePriority = previousPriority;
      }
    }
    function higherEventPriority(a, b) {
      return a !== 0 && a < b ? a : b;
    }
    function lowerEventPriority(a, b) {
      return a === 0 || a > b ? a : b;
    }
    function isHigherEventPriority(a, b) {
      return a !== 0 && a < b;
    }
    function lanesToEventPriority(lanes) {
      var lane = getHighestPriorityLane(lanes);
      if (!isHigherEventPriority(DiscreteEventPriority, lane)) {
        return DiscreteEventPriority;
      }
      if (!isHigherEventPriority(ContinuousEventPriority, lane)) {
        return ContinuousEventPriority;
      }
      if (includesNonIdleWork(lane)) {
        return DefaultEventPriority;
      }
      return IdleEventPriority;
    }
    function isRootDehydrated(root2) {
      var currentState = root2.current.memoizedState;
      return currentState.isDehydrated;
    }
    var _attemptSynchronousHydration;
    function setAttemptSynchronousHydration(fn) {
      _attemptSynchronousHydration = fn;
    }
    function attemptSynchronousHydration(fiber) {
      _attemptSynchronousHydration(fiber);
    }
    var attemptContinuousHydration;
    function setAttemptContinuousHydration(fn) {
      attemptContinuousHydration = fn;
    }
    var attemptHydrationAtCurrentPriority;
    function setAttemptHydrationAtCurrentPriority(fn) {
      attemptHydrationAtCurrentPriority = fn;
    }
    var getCurrentUpdatePriority$1;
    function setGetCurrentUpdatePriority(fn) {
      getCurrentUpdatePriority$1 = fn;
    }
    var attemptHydrationAtPriority;
    function setAttemptHydrationAtPriority(fn) {
      attemptHydrationAtPriority = fn;
    }
    var hasScheduledReplayAttempt = false;
    var queuedDiscreteEvents = [];
    var queuedFocus = null;
    var queuedDrag = null;
    var queuedMouse = null;
    var queuedPointers = /* @__PURE__ */ new Map();
    var queuedPointerCaptures = /* @__PURE__ */ new Map();
    var queuedExplicitHydrationTargets = [];
    var discreteReplayableEvents = [
      "mousedown",
      "mouseup",
      "touchcancel",
      "touchend",
      "touchstart",
      "auxclick",
      "dblclick",
      "pointercancel",
      "pointerdown",
      "pointerup",
      "dragend",
      "dragstart",
      "drop",
      "compositionend",
      "compositionstart",
      "keydown",
      "keypress",
      "keyup",
      "input",
      "textInput",
      // Intentionally camelCase
      "copy",
      "cut",
      "paste",
      "click",
      "change",
      "contextmenu",
      "reset",
      "submit"
    ];
    function isDiscreteEventThatRequiresHydration(eventType) {
      return discreteReplayableEvents.indexOf(eventType) > -1;
    }
    function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
      return {
        blockedOn,
        domEventName,
        eventSystemFlags,
        nativeEvent,
        targetContainers: [targetContainer]
      };
    }
    function clearIfContinuousEvent(domEventName, nativeEvent) {
      switch (domEventName) {
        case "focusin":
        case "focusout":
          queuedFocus = null;
          break;
        case "dragenter":
        case "dragleave":
          queuedDrag = null;
          break;
        case "mouseover":
        case "mouseout":
          queuedMouse = null;
          break;
        case "pointerover":
        case "pointerout": {
          var pointerId = nativeEvent.pointerId;
          queuedPointers.delete(pointerId);
          break;
        }
        case "gotpointercapture":
        case "lostpointercapture": {
          var _pointerId = nativeEvent.pointerId;
          queuedPointerCaptures.delete(_pointerId);
          break;
        }
      }
    }
    function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
      if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
        var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
        if (blockedOn !== null) {
          var _fiber2 = getInstanceFromNode(blockedOn);
          if (_fiber2 !== null) {
            attemptContinuousHydration(_fiber2);
          }
        }
        return queuedEvent;
      }
      existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
      var targetContainers = existingQueuedEvent.targetContainers;
      if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
        targetContainers.push(targetContainer);
      }
      return existingQueuedEvent;
    }
    function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
      switch (domEventName) {
        case "focusin": {
          var focusEvent = nativeEvent;
          queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
          return true;
        }
        case "dragenter": {
          var dragEvent = nativeEvent;
          queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
          return true;
        }
        case "mouseover": {
          var mouseEvent = nativeEvent;
          queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
          return true;
        }
        case "pointerover": {
          var pointerEvent = nativeEvent;
          var pointerId = pointerEvent.pointerId;
          queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
          return true;
        }
        case "gotpointercapture": {
          var _pointerEvent = nativeEvent;
          var _pointerId2 = _pointerEvent.pointerId;
          queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
          return true;
        }
      }
      return false;
    }
    function attemptExplicitHydrationTarget(queuedTarget) {
      var targetInst = getClosestInstanceFromNode(queuedTarget.target);
      if (targetInst !== null) {
        var nearestMounted = getNearestMountedFiber(targetInst);
        if (nearestMounted !== null) {
          var tag = nearestMounted.tag;
          if (tag === SuspenseComponent) {
            var instance = getSuspenseInstanceFromFiber(nearestMounted);
            if (instance !== null) {
              queuedTarget.blockedOn = instance;
              attemptHydrationAtPriority(queuedTarget.priority, function() {
                attemptHydrationAtCurrentPriority(nearestMounted);
              });
              return;
            }
          } else if (tag === HostRoot) {
            var root2 = nearestMounted.stateNode;
            if (isRootDehydrated(root2)) {
              queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
              return;
            }
          }
        }
      }
      queuedTarget.blockedOn = null;
    }
    function queueExplicitHydrationTarget(target) {
      var updatePriority = getCurrentUpdatePriority$1();
      var queuedTarget = {
        blockedOn: null,
        target,
        priority: updatePriority
      };
      var i = 0;
      for (; i < queuedExplicitHydrationTargets.length; i++) {
        if (!isHigherEventPriority(updatePriority, queuedExplicitHydrationTargets[i].priority)) {
          break;
        }
      }
      queuedExplicitHydrationTargets.splice(i, 0, queuedTarget);
      if (i === 0) {
        attemptExplicitHydrationTarget(queuedTarget);
      }
    }
    function attemptReplayContinuousQueuedEvent(queuedEvent) {
      if (queuedEvent.blockedOn !== null) {
        return false;
      }
      var targetContainers = queuedEvent.targetContainers;
      while (targetContainers.length > 0) {
        var targetContainer = targetContainers[0];
        var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
        if (nextBlockedOn === null) {
          {
            var nativeEvent = queuedEvent.nativeEvent;
            var nativeEventClone = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
            setReplayingEvent(nativeEventClone);
            nativeEvent.target.dispatchEvent(nativeEventClone);
            resetReplayingEvent();
          }
        } else {
          var _fiber3 = getInstanceFromNode(nextBlockedOn);
          if (_fiber3 !== null) {
            attemptContinuousHydration(_fiber3);
          }
          queuedEvent.blockedOn = nextBlockedOn;
          return false;
        }
        targetContainers.shift();
      }
      return true;
    }
    function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
      if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
        map.delete(key);
      }
    }
    function replayUnblockedEvents() {
      hasScheduledReplayAttempt = false;
      if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
        queuedFocus = null;
      }
      if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
        queuedDrag = null;
      }
      if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
        queuedMouse = null;
      }
      queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
      queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
    }
    function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
      if (queuedEvent.blockedOn === unblocked) {
        queuedEvent.blockedOn = null;
        if (!hasScheduledReplayAttempt) {
          hasScheduledReplayAttempt = true;
          Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
        }
      }
    }
    function retryIfBlockedOn(unblocked) {
      if (queuedDiscreteEvents.length > 0) {
        scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
        for (var i = 1; i < queuedDiscreteEvents.length; i++) {
          var queuedEvent = queuedDiscreteEvents[i];
          if (queuedEvent.blockedOn === unblocked) {
            queuedEvent.blockedOn = null;
          }
        }
      }
      if (queuedFocus !== null) {
        scheduleCallbackIfUnblocked(queuedFocus, unblocked);
      }
      if (queuedDrag !== null) {
        scheduleCallbackIfUnblocked(queuedDrag, unblocked);
      }
      if (queuedMouse !== null) {
        scheduleCallbackIfUnblocked(queuedMouse, unblocked);
      }
      var unblock = function(queuedEvent2) {
        return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
      };
      queuedPointers.forEach(unblock);
      queuedPointerCaptures.forEach(unblock);
      for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
        var queuedTarget = queuedExplicitHydrationTargets[_i];
        if (queuedTarget.blockedOn === unblocked) {
          queuedTarget.blockedOn = null;
        }
      }
      while (queuedExplicitHydrationTargets.length > 0) {
        var nextExplicitTarget = queuedExplicitHydrationTargets[0];
        if (nextExplicitTarget.blockedOn !== null) {
          break;
        } else {
          attemptExplicitHydrationTarget(nextExplicitTarget);
          if (nextExplicitTarget.blockedOn === null) {
            queuedExplicitHydrationTargets.shift();
          }
        }
      }
    }
    var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
    var _enabled = true;
    function setEnabled(enabled) {
      _enabled = !!enabled;
    }
    function isEnabled() {
      return _enabled;
    }
    function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
      var eventPriority = getEventPriority(domEventName);
      var listenerWrapper;
      switch (eventPriority) {
        case DiscreteEventPriority:
          listenerWrapper = dispatchDiscreteEvent;
          break;
        case ContinuousEventPriority:
          listenerWrapper = dispatchContinuousEvent;
          break;
        case DefaultEventPriority:
        default:
          listenerWrapper = dispatchEvent;
          break;
      }
      return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
    }
    function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
      var previousPriority = getCurrentUpdatePriority();
      var prevTransition = ReactCurrentBatchConfig.transition;
      ReactCurrentBatchConfig.transition = null;
      try {
        setCurrentUpdatePriority(DiscreteEventPriority);
        dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
      } finally {
        setCurrentUpdatePriority(previousPriority);
        ReactCurrentBatchConfig.transition = prevTransition;
      }
    }
    function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {
      var previousPriority = getCurrentUpdatePriority();
      var prevTransition = ReactCurrentBatchConfig.transition;
      ReactCurrentBatchConfig.transition = null;
      try {
        setCurrentUpdatePriority(ContinuousEventPriority);
        dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
      } finally {
        setCurrentUpdatePriority(previousPriority);
        ReactCurrentBatchConfig.transition = prevTransition;
      }
    }
    function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
      if (!_enabled) {
        return;
      }
      {
        dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent);
      }
    }
    function dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
      var blockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
      if (blockedOn === null) {
        dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
        clearIfContinuousEvent(domEventName, nativeEvent);
        return;
      }
      if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
        nativeEvent.stopPropagation();
        return;
      }
      clearIfContinuousEvent(domEventName, nativeEvent);
      if (eventSystemFlags & IS_CAPTURE_PHASE && isDiscreteEventThatRequiresHydration(domEventName)) {
        while (blockedOn !== null) {
          var fiber = getInstanceFromNode(blockedOn);
          if (fiber !== null) {
            attemptSynchronousHydration(fiber);
          }
          var nextBlockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
          if (nextBlockedOn === null) {
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
          }
          if (nextBlockedOn === blockedOn) {
            break;
          }
          blockedOn = nextBlockedOn;
        }
        if (blockedOn !== null) {
          nativeEvent.stopPropagation();
        }
        return;
      }
      dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
    }
    var return_targetInst = null;
    function findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
      return_targetInst = null;
      var nativeEventTarget = getEventTarget(nativeEvent);
      var targetInst = getClosestInstanceFromNode(nativeEventTarget);
      if (targetInst !== null) {
        var nearestMounted = getNearestMountedFiber(targetInst);
        if (nearestMounted === null) {
          targetInst = null;
        } else {
          var tag = nearestMounted.tag;
          if (tag === SuspenseComponent) {
            var instance = getSuspenseInstanceFromFiber(nearestMounted);
            if (instance !== null) {
              return instance;
            }
            targetInst = null;
          } else if (tag === HostRoot) {
            var root2 = nearestMounted.stateNode;
            if (isRootDehydrated(root2)) {
              return getContainerFromFiber(nearestMounted);
            }
            targetInst = null;
          } else if (nearestMounted !== targetInst) {
            targetInst = null;
          }
        }
      }
      return_targetInst = targetInst;
      return null;
    }
    function getEventPriority(domEventName) {
      switch (domEventName) {
        case "cancel":
        case "click":
        case "close":
        case "contextmenu":
        case "copy":
        case "cut":
        case "auxclick":
        case "dblclick":
        case "dragend":
        case "dragstart":
        case "drop":
        case "focusin":
        case "focusout":
        case "input":
        case "invalid":
        case "keydown":
        case "keypress":
        case "keyup":
        case "mousedown":
        case "mouseup":
        case "paste":
        case "pause":
        case "play":
        case "pointercancel":
        case "pointerdown":
        case "pointerup":
        case "ratechange":
        case "reset":
        case "resize":
        case "seeked":
        case "submit":
        case "touchcancel":
        case "touchend":
        case "touchstart":
        case "volumechange":
        case "change":
        case "selectionchange":
        case "textInput":
        case "compositionstart":
        case "compositionend":
        case "compositionupdate":
        case "beforeblur":
        case "afterblur":
        case "beforeinput":
        case "blur":
        case "fullscreenchange":
        case "focus":
        case "hashchange":
        case "popstate":
        case "select":
        case "selectstart":
          return DiscreteEventPriority;
        case "drag":
        case "dragenter":
        case "dragexit":
        case "dragleave":
        case "dragover":
        case "mousemove":
        case "mouseout":
        case "mouseover":
        case "pointermove":
        case "pointerout":
        case "pointerover":
        case "scroll":
        case "toggle":
        case "touchmove":
        case "wheel":
        case "mouseenter":
        case "mouseleave":
        case "pointerenter":
        case "pointerleave":
          return ContinuousEventPriority;
        case "message": {
          var schedulerPriority = getCurrentPriorityLevel();
          switch (schedulerPriority) {
            case ImmediatePriority:
              return DiscreteEventPriority;
            case UserBlockingPriority:
              return ContinuousEventPriority;
            case NormalPriority:
            case LowPriority:
              return DefaultEventPriority;
            case IdlePriority:
              return IdleEventPriority;
            default:
              return DefaultEventPriority;
          }
        }
        default:
          return DefaultEventPriority;
      }
    }
    function addEventBubbleListener(target, eventType, listener) {
      target.addEventListener(eventType, listener, false);
      return listener;
    }
    function addEventCaptureListener(target, eventType, listener) {
      target.addEventListener(eventType, listener, true);
      return listener;
    }
    function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
      target.addEventListener(eventType, listener, {
        capture: true,
        passive
      });
      return listener;
    }
    function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
      target.addEventListener(eventType, listener, {
        passive
      });
      return listener;
    }
    var root = null;
    var startText = null;
    var fallbackText = null;
    function initialize(nativeEventTarget) {
      root = nativeEventTarget;
      startText = getText();
      return true;
    }
    function reset() {
      root = null;
      startText = null;
      fallbackText = null;
    }
    function getData() {
      if (fallbackText) {
        return fallbackText;
      }
      var start;
      var startValue = startText;
      var startLength = startValue.length;
      var end;
      var endValue = getText();
      var endLength = endValue.length;
      for (start = 0; start < startLength; start++) {
        if (startValue[start] !== endValue[start]) {
          break;
        }
      }
      var minEnd = startLength - start;
      for (end = 1; end <= minEnd; end++) {
        if (startValue[startLength - end] !== endValue[endLength - end]) {
          break;
        }
      }
      var sliceTail = end > 1 ? 1 - end : void 0;
      fallbackText = endValue.slice(start, sliceTail);
      return fallbackText;
    }
    function getText() {
      if ("value" in root) {
        return root.value;
      }
      return root.textContent;
    }
    function getEventCharCode(nativeEvent) {
      var charCode;
      var keyCode = nativeEvent.keyCode;
      if ("charCode" in nativeEvent) {
        charCode = nativeEvent.charCode;
        if (charCode === 0 && keyCode === 13) {
          charCode = 13;
        }
      } else {
        charCode = keyCode;
      }
      if (charCode === 10) {
        charCode = 13;
      }
      if (charCode >= 32 || charCode === 13) {
        return charCode;
      }
      return 0;
    }
    function functionThatReturnsTrue() {
      return true;
    }
    function functionThatReturnsFalse() {
      return false;
    }
    function createSyntheticEvent(Interface) {
      function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
        this._reactName = reactName;
        this._targetInst = targetInst;
        this.type = reactEventType;
        this.nativeEvent = nativeEvent;
        this.target = nativeEventTarget;
        this.currentTarget = null;
        for (var _propName in Interface) {
          if (!Interface.hasOwnProperty(_propName)) {
            continue;
          }
          var normalize = Interface[_propName];
          if (normalize) {
            this[_propName] = normalize(nativeEvent);
          } else {
            this[_propName] = nativeEvent[_propName];
          }
        }
        var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
        if (defaultPrevented) {
          this.isDefaultPrevented = functionThatReturnsTrue;
        } else {
          this.isDefaultPrevented = functionThatReturnsFalse;
        }
        this.isPropagationStopped = functionThatReturnsFalse;
        return this;
      }
      assign(SyntheticBaseEvent.prototype, {
        preventDefault: function() {
          this.defaultPrevented = true;
          var event = this.nativeEvent;
          if (!event) {
            return;
          }
          if (event.preventDefault) {
            event.preventDefault();
          } else if (typeof event.returnValue !== "unknown") {
            event.returnValue = false;
          }
          this.isDefaultPrevented = functionThatReturnsTrue;
        },
        stopPropagation: function() {
          var event = this.nativeEvent;
          if (!event) {
            return;
          }
          if (event.stopPropagation) {
            event.stopPropagation();
          } else if (typeof event.cancelBubble !== "unknown") {
            event.cancelBubble = true;
          }
          this.isPropagationStopped = functionThatReturnsTrue;
        },
        /**
         * We release all dispatched `SyntheticEvent`s after each event loop, adding
         * them back into the pool. This allows a way to hold onto a reference that
         * won't be added back into the pool.
         */
        persist: function() {
        },
        /**
         * Checks if this event should be released back into the pool.
         *
         * @return {boolean} True if this should not be released, false otherwise.
         */
        isPersistent: functionThatReturnsTrue
      });
      return SyntheticBaseEvent;
    }
    var EventInterface = {
      eventPhase: 0,
      bubbles: 0,
      cancelable: 0,
      timeStamp: function(event) {
        return event.timeStamp || Date.now();
      },
      defaultPrevented: 0,
      isTrusted: 0
    };
    var SyntheticEvent = createSyntheticEvent(EventInterface);
    var UIEventInterface = assign({}, EventInterface, {
      view: 0,
      detail: 0
    });
    var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
    var lastMovementX;
    var lastMovementY;
    var lastMouseEvent;
    function updateMouseMovementPolyfillState(event) {
      if (event !== lastMouseEvent) {
        if (lastMouseEvent && event.type === "mousemove") {
          lastMovementX = event.screenX - lastMouseEvent.screenX;
          lastMovementY = event.screenY - lastMouseEvent.screenY;
        } else {
          lastMovementX = 0;
          lastMovementY = 0;
        }
        lastMouseEvent = event;
      }
    }
    var MouseEventInterface = assign({}, UIEventInterface, {
      screenX: 0,
      screenY: 0,
      clientX: 0,
      clientY: 0,
      pageX: 0,
      pageY: 0,
      ctrlKey: 0,
      shiftKey: 0,
      altKey: 0,
      metaKey: 0,
      getModifierState: getEventModifierState,
      button: 0,
      buttons: 0,
      relatedTarget: function(event) {
        if (event.relatedTarget === void 0)
          return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
        return event.relatedTarget;
      },
      movementX: function(event) {
        if ("movementX" in event) {
          return event.movementX;
        }
        updateMouseMovementPolyfillState(event);
        return lastMovementX;
      },
      movementY: function(event) {
        if ("movementY" in event) {
          return event.movementY;
        }
        return lastMovementY;
      }
    });
    var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
    var DragEventInterface = assign({}, MouseEventInterface, {
      dataTransfer: 0
    });
    var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
    var FocusEventInterface = assign({}, UIEventInterface, {
      relatedTarget: 0
    });
    var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
    var AnimationEventInterface = assign({}, EventInterface, {
      animationName: 0,
      elapsedTime: 0,
      pseudoElement: 0
    });
    var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
    var ClipboardEventInterface = assign({}, EventInterface, {
      clipboardData: function(event) {
        return "clipboardData" in event ? event.clipboardData : window.clipboardData;
      }
    });
    var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
    var CompositionEventInterface = assign({}, EventInterface, {
      data: 0
    });
    var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
    var SyntheticInputEvent = SyntheticCompositionEvent;
    var normalizeKey = {
      Esc: "Escape",
      Spacebar: " ",
      Left: "ArrowLeft",
      Up: "ArrowUp",
      Right: "ArrowRight",
      Down: "ArrowDown",
      Del: "Delete",
      Win: "OS",
      Menu: "ContextMenu",
      Apps: "ContextMenu",
      Scroll: "ScrollLock",
      MozPrintableKey: "Unidentified"
    };
    var translateToKey = {
      "8": "Backspace",
      "9": "Tab",
      "12": "Clear",
      "13": "Enter",
      "16": "Shift",
      "17": "Control",
      "18": "Alt",
      "19": "Pause",
      "20": "CapsLock",
      "27": "Escape",
      "32": " ",
      "33": "PageUp",
      "34": "PageDown",
      "35": "End",
      "36": "Home",
      "37": "ArrowLeft",
      "38": "ArrowUp",
      "39": "ArrowRight",
      "40": "ArrowDown",
      "45": "Insert",
      "46": "Delete",
      "112": "F1",
      "113": "F2",
      "114": "F3",
      "115": "F4",
      "116": "F5",
      "117": "F6",
      "118": "F7",
      "119": "F8",
      "120": "F9",
      "121": "F10",
      "122": "F11",
      "123": "F12",
      "144": "NumLock",
      "145": "ScrollLock",
      "224": "Meta"
    };
    function getEventKey(nativeEvent) {
      if (nativeEvent.key) {
        var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
        if (key !== "Unidentified") {
          return key;
        }
      }
      if (nativeEvent.type === "keypress") {
        var charCode = getEventCharCode(nativeEvent);
        return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
      }
      if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
        return translateToKey[nativeEvent.keyCode] || "Unidentified";
      }
      return "";
    }
    var modifierKeyToProp = {
      Alt: "altKey",
      Control: "ctrlKey",
      Meta: "metaKey",
      Shift: "shiftKey"
    };
    function modifierStateGetter(keyArg) {
      var syntheticEvent = this;
      var nativeEvent = syntheticEvent.nativeEvent;
      if (nativeEvent.getModifierState) {
        return nativeEvent.getModifierState(keyArg);
      }
      var keyProp = modifierKeyToProp[keyArg];
      return keyProp ? !!nativeEvent[keyProp] : false;
    }
    function getEventModifierState(nativeEvent) {
      return modifierStateGetter;
    }
    var KeyboardEventInterface = assign({}, UIEventInterface, {
      key: getEventKey,
      code: 0,
      location: 0,
      ctrlKey: 0,
      shiftKey: 0,
      altKey: 0,
      metaKey: 0,
      repeat: 0,
      locale: 0,
      getModifierState: getEventModifierState,
      // Legacy Interface
      charCode: function(event) {
        if (event.type === "keypress") {
          return getEventCharCode(event);
        }
        return 0;
      },
      keyCode: function(event) {
        if (event.type === "keydown" || event.type === "keyup") {
          return event.keyCode;
        }
        return 0;
      },
      which: function(event) {
        if (event.type === "keypress") {
          return getEventCharCode(event);
        }
        if (event.type === "keydown" || event.type === "keyup") {
          return event.keyCode;
        }
        return 0;
      }
    });
    var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
    var PointerEventInterface = assign({}, MouseEventInterface, {
      pointerId: 0,
      width: 0,
      height: 0,
      pressure: 0,
      tangentialPressure: 0,
      tiltX: 0,
      tiltY: 0,
      twist: 0,
      pointerType: 0,
      isPrimary: 0
    });
    var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
    var TouchEventInterface = assign({}, UIEventInterface, {
      touches: 0,
      targetTouches: 0,
      changedTouches: 0,
      altKey: 0,
      metaKey: 0,
      ctrlKey: 0,
      shiftKey: 0,
      getModifierState: getEventModifierState
    });
    var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
    var TransitionEventInterface = assign({}, EventInterface, {
      propertyName: 0,
      elapsedTime: 0,
      pseudoElement: 0
    });
    var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
    var WheelEventInterface = assign({}, MouseEventInterface, {
      deltaX: function(event) {
        return "deltaX" in event ? event.deltaX : (
          // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
          "wheelDeltaX" in event ? -event.wheelDeltaX : 0
        );
      },
      deltaY: function(event) {
        return "deltaY" in event ? event.deltaY : (
          // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
          "wheelDeltaY" in event ? -event.wheelDeltaY : (
            // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
            "wheelDelta" in event ? -event.wheelDelta : 0
          )
        );
      },
      deltaZ: 0,
      // Browsers without "deltaMode" is reporting in raw wheel delta where one
      // notch on the scroll is always +/- 120, roughly equivalent to pixels.
      // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
      // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
      deltaMode: 0
    });
    var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
    var END_KEYCODES = [9, 13, 27, 32];
    var START_KEYCODE = 229;
    var canUseCompositionEvent = canUseDOM && "CompositionEvent" in window;
    var documentMode = null;
    if (canUseDOM && "documentMode" in document) {
      documentMode = document.documentMode;
    }
    var canUseTextInputEvent = canUseDOM && "TextEvent" in window && !documentMode;
    var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
    var SPACEBAR_CODE = 32;
    var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
    function registerEvents() {
      registerTwoPhaseEvent("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
      registerTwoPhaseEvent("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
      registerTwoPhaseEvent("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
      registerTwoPhaseEvent("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
    }
    var hasSpaceKeypress = false;
    function isKeypressCommand(nativeEvent) {
      return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && // ctrlKey && altKey is equivalent to AltGr, and is not a command.
      !(nativeEvent.ctrlKey && nativeEvent.altKey);
    }
    function getCompositionEventType(domEventName) {
      switch (domEventName) {
        case "compositionstart":
          return "onCompositionStart";
        case "compositionend":
          return "onCompositionEnd";
        case "compositionupdate":
          return "onCompositionUpdate";
      }
    }
    function isFallbackCompositionStart(domEventName, nativeEvent) {
      return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
    }
    function isFallbackCompositionEnd(domEventName, nativeEvent) {
      switch (domEventName) {
        case "keyup":
          return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
        case "keydown":
          return nativeEvent.keyCode !== START_KEYCODE;
        case "keypress":
        case "mousedown":
        case "focusout":
          return true;
        default:
          return false;
      }
    }
    function getDataFromCustomEvent(nativeEvent) {
      var detail = nativeEvent.detail;
      if (typeof detail === "object" && "data" in detail) {
        return detail.data;
      }
      return null;
    }
    function isUsingKoreanIME(nativeEvent) {
      return nativeEvent.locale === "ko";
    }
    var isComposing = false;
    function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
      var eventType;
      var fallbackData;
      if (canUseCompositionEvent) {
        eventType = getCompositionEventType(domEventName);
      } else if (!isComposing) {
        if (isFallbackCompositionStart(domEventName, nativeEvent)) {
          eventType = "onCompositionStart";
        }
      } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
        eventType = "onCompositionEnd";
      }
      if (!eventType) {
        return null;
      }
      if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
        if (!isComposing && eventType === "onCompositionStart") {
          isComposing = initialize(nativeEventTarget);
        } else if (eventType === "onCompositionEnd") {
          if (isComposing) {
            fallbackData = getData();
          }
        }
      }
      var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
      if (listeners.length > 0) {
        var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
        dispatchQueue.push({
          event,
          listeners
        });
        if (fallbackData) {
          event.data = fallbackData;
        } else {
          var customData = getDataFromCustomEvent(nativeEvent);
          if (customData !== null) {
            event.data = customData;
          }
        }
      }
    }
    function getNativeBeforeInputChars(domEventName, nativeEvent) {
      switch (domEventName) {
        case "compositionend":
          return getDataFromCustomEvent(nativeEvent);
        case "keypress":
          var which = nativeEvent.which;
          if (which !== SPACEBAR_CODE) {
            return null;
          }
          hasSpaceKeypress = true;
          return SPACEBAR_CHAR;
        case "textInput":
          var chars = nativeEvent.data;
          if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
            return null;
          }
          return chars;
        default:
          return null;
      }
    }
    function getFallbackBeforeInputChars(domEventName, nativeEvent) {
      if (isComposing) {
        if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
          var chars = getData();
          reset();
          isComposing = false;
          return chars;
        }
        return null;
      }
      switch (domEventName) {
        case "paste":
          return null;
        case "keypress":
          if (!isKeypressCommand(nativeEvent)) {
            if (nativeEvent.char && nativeEvent.char.length > 1) {
              return nativeEvent.char;
            } else if (nativeEvent.which) {
              return String.fromCharCode(nativeEvent.which);
            }
          }
          return null;
        case "compositionend":
          return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
        default:
          return null;
      }
    }
    function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
      var chars;
      if (canUseTextInputEvent) {
        chars = getNativeBeforeInputChars(domEventName, nativeEvent);
      } else {
        chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
      }
      if (!chars) {
        return null;
      }
      var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
      if (listeners.length > 0) {
        var event = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
        dispatchQueue.push({
          event,
          listeners
        });
        event.data = chars;
      }
    }
    function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
      extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
      extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
    }
    var supportedInputTypes = {
      color: true,
      date: true,
      datetime: true,
      "datetime-local": true,
      email: true,
      month: true,
      number: true,
      password: true,
      range: true,
      search: true,
      tel: true,
      text: true,
      time: true,
      url: true,
      week: true
    };
    function isTextInputElement(elem) {
      var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
      if (nodeName === "input") {
        return !!supportedInputTypes[elem.type];
      }
      if (nodeName === "textarea") {
        return true;
      }
      return false;
    }
    /**
     * Checks if an event is supported in the current execution environment.
     *
     * NOTE: This will not work correctly for non-generic events such as `change`,
     * `reset`, `load`, `error`, and `select`.
     *
     * Borrows from Modernizr.
     *
     * @param {string} eventNameSuffix Event name, e.g. "click".
     * @return {boolean} True if the event is supported.
     * @internal
     * @license Modernizr 3.0.0pre (Custom Build) | MIT
     */
    function isEventSupported(eventNameSuffix) {
      if (!canUseDOM) {
        return false;
      }
      var eventName = "on" + eventNameSuffix;
      var isSupported = eventName in document;
      if (!isSupported) {
        var element = document.createElement("div");
        element.setAttribute(eventName, "return;");
        isSupported = typeof element[eventName] === "function";
      }
      return isSupported;
    }
    function registerEvents$1() {
      registerTwoPhaseEvent("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
    }
    function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
      enqueueStateRestore(target);
      var listeners = accumulateTwoPhaseListeners(inst, "onChange");
      if (listeners.length > 0) {
        var event = new SyntheticEvent("onChange", "change", null, nativeEvent, target);
        dispatchQueue.push({
          event,
          listeners
        });
      }
    }
    var activeElement = null;
    var activeElementInst = null;
    function shouldUseChangeEvent(elem) {
      var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
      return nodeName === "select" || nodeName === "input" && elem.type === "file";
    }
    function manualDispatchChangeEvent(nativeEvent) {
      var dispatchQueue = [];
      createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
      batchedUpdates(runEventInBatch, dispatchQueue);
    }
    function runEventInBatch(dispatchQueue) {
      processDispatchQueue(dispatchQueue, 0);
    }
    function getInstIfValueChanged(targetInst) {
      var targetNode = getNodeFromInstance(targetInst);
      if (updateValueIfChanged(targetNode)) {
        return targetInst;
      }
    }
    function getTargetInstForChangeEvent(domEventName, targetInst) {
      if (domEventName === "change") {
        return targetInst;
      }
    }
    var isInputEventSupported = false;
    if (canUseDOM) {
      isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
    }
    function startWatchingForValueChange(target, targetInst) {
      activeElement = target;
      activeElementInst = targetInst;
      activeElement.attachEvent("onpropertychange", handlePropertyChange);
    }
    function stopWatchingForValueChange() {
      if (!activeElement) {
        return;
      }
      activeElement.detachEvent("onpropertychange", handlePropertyChange);
      activeElement = null;
      activeElementInst = null;
    }
    function handlePropertyChange(nativeEvent) {
      if (nativeEvent.propertyName !== "value") {
        return;
      }
      if (getInstIfValueChanged(activeElementInst)) {
        manualDispatchChangeEvent(nativeEvent);
      }
    }
    function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
      if (domEventName === "focusin") {
        stopWatchingForValueChange();
        startWatchingForValueChange(target, targetInst);
      } else if (domEventName === "focusout") {
        stopWatchingForValueChange();
      }
    }
    function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
      if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown") {
        return getInstIfValueChanged(activeElementInst);
      }
    }
    function shouldUseClickEvent(elem) {
      var nodeName = elem.nodeName;
      return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
    }
    function getTargetInstForClickEvent(domEventName, targetInst) {
      if (domEventName === "click") {
        return getInstIfValueChanged(targetInst);
      }
    }
    function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
      if (domEventName === "input" || domEventName === "change") {
        return getInstIfValueChanged(targetInst);
      }
    }
    function handleControlledInputBlur(node) {
      var state = node._wrapperState;
      if (!state || !state.controlled || node.type !== "number") {
        return;
      }
      {
        setDefaultValue(node, "number", node.value);
      }
    }
    function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
      var getTargetInstFunc, handleEventFunc;
      if (shouldUseChangeEvent(targetNode)) {
        getTargetInstFunc = getTargetInstForChangeEvent;
      } else if (isTextInputElement(targetNode)) {
        if (isInputEventSupported) {
          getTargetInstFunc = getTargetInstForInputOrChangeEvent;
        } else {
          getTargetInstFunc = getTargetInstForInputEventPolyfill;
          handleEventFunc = handleEventsForInputEventPolyfill;
        }
      } else if (shouldUseClickEvent(targetNode)) {
        getTargetInstFunc = getTargetInstForClickEvent;
      }
      if (getTargetInstFunc) {
        var inst = getTargetInstFunc(domEventName, targetInst);
        if (inst) {
          createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
          return;
        }
      }
      if (handleEventFunc) {
        handleEventFunc(domEventName, targetNode, targetInst);
      }
      if (domEventName === "focusout") {
        handleControlledInputBlur(targetNode);
      }
    }
    function registerEvents$2() {
      registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
      registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
      registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
      registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
    }
    function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
      var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover";
      var isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
      if (isOverEvent && !isReplayingEvent(nativeEvent)) {
        var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
        if (related) {
          if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
            return;
          }
        }
      }
      if (!isOutEvent && !isOverEvent) {
        return;
      }
      var win;
      if (nativeEventTarget.window === nativeEventTarget) {
        win = nativeEventTarget;
      } else {
        var doc = nativeEventTarget.ownerDocument;
        if (doc) {
          win = doc.defaultView || doc.parentWindow;
        } else {
          win = window;
        }
      }
      var from;
      var to;
      if (isOutEvent) {
        var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
        from = targetInst;
        to = _related ? getClosestInstanceFromNode(_related) : null;
        if (to !== null) {
          var nearestMounted = getNearestMountedFiber(to);
          if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
            to = null;
          }
        }
      } else {
        from = null;
        to = targetInst;
      }
      if (from === to) {
        return;
      }
      var SyntheticEventCtor = SyntheticMouseEvent;
      var leaveEventType = "onMouseLeave";
      var enterEventType = "onMouseEnter";
      var eventTypePrefix = "mouse";
      if (domEventName === "pointerout" || domEventName === "pointerover") {
        SyntheticEventCtor = SyntheticPointerEvent;
        leaveEventType = "onPointerLeave";
        enterEventType = "onPointerEnter";
        eventTypePrefix = "pointer";
      }
      var fromNode = from == null ? win : getNodeFromInstance(from);
      var toNode = to == null ? win : getNodeFromInstance(to);
      var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from, nativeEvent, nativeEventTarget);
      leave.target = fromNode;
      leave.relatedTarget = toNode;
      var enter = null;
      var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
      if (nativeTargetInst === targetInst) {
        var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to, nativeEvent, nativeEventTarget);
        enterEvent.target = toNode;
        enterEvent.relatedTarget = fromNode;
        enter = enterEvent;
      }
      accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);
    }
    function is(x, y) {
      return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
    }
    var objectIs = typeof Object.is === "function" ? Object.is : is;
    function shallowEqual(objA, objB) {
      if (objectIs(objA, objB)) {
        return true;
      }
      if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
        return false;
      }
      var keysA = Object.keys(objA);
      var keysB = Object.keys(objB);
      if (keysA.length !== keysB.length) {
        return false;
      }
      for (var i = 0; i < keysA.length; i++) {
        var currentKey = keysA[i];
        if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {
          return false;
        }
      }
      return true;
    }
    function getLeafNode(node) {
      while (node && node.firstChild) {
        node = node.firstChild;
      }
      return node;
    }
    function getSiblingNode(node) {
      while (node) {
        if (node.nextSibling) {
          return node.nextSibling;
        }
        node = node.parentNode;
      }
    }
    function getNodeForCharacterOffset(root2, offset) {
      var node = getLeafNode(root2);
      var nodeStart = 0;
      var nodeEnd = 0;
      while (node) {
        if (node.nodeType === TEXT_NODE) {
          nodeEnd = nodeStart + node.textContent.length;
          if (nodeStart <= offset && nodeEnd >= offset) {
            return {
              node,
              offset: offset - nodeStart
            };
          }
          nodeStart = nodeEnd;
        }
        node = getLeafNode(getSiblingNode(node));
      }
    }
    function getOffsets(outerNode) {
      var ownerDocument = outerNode.ownerDocument;
      var win = ownerDocument && ownerDocument.defaultView || window;
      var selection = win.getSelection && win.getSelection();
      if (!selection || selection.rangeCount === 0) {
        return null;
      }
      var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset;
      try {
        anchorNode.nodeType;
        focusNode.nodeType;
      } catch (e) {
        return null;
      }
      return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
    }
    function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
      var length = 0;
      var start = -1;
      var end = -1;
      var indexWithinAnchor = 0;
      var indexWithinFocus = 0;
      var node = outerNode;
      var parentNode = null;
      outer:
        while (true) {
          var next = null;
          while (true) {
            if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
              start = length + anchorOffset;
            }
            if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
              end = length + focusOffset;
            }
            if (node.nodeType === TEXT_NODE) {
              length += node.nodeValue.length;
            }
            if ((next = node.firstChild) === null) {
              break;
            }
            parentNode = node;
            node = next;
          }
          while (true) {
            if (node === outerNode) {
              break outer;
            }
            if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
              start = length;
            }
            if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
              end = length;
            }
            if ((next = node.nextSibling) !== null) {
              break;
            }
            node = parentNode;
            parentNode = node.parentNode;
          }
          node = next;
        }
      if (start === -1 || end === -1) {
        return null;
      }
      return {
        start,
        end
      };
    }
    function setOffsets(node, offsets) {
      var doc = node.ownerDocument || document;
      var win = doc && doc.defaultView || window;
      if (!win.getSelection) {
        return;
      }
      var selection = win.getSelection();
      var length = node.textContent.length;
      var start = Math.min(offsets.start, length);
      var end = offsets.end === void 0 ? start : Math.min(offsets.end, length);
      if (!selection.extend && start > end) {
        var temp = end;
        end = start;
        start = temp;
      }
      var startMarker = getNodeForCharacterOffset(node, start);
      var endMarker = getNodeForCharacterOffset(node, end);
      if (startMarker && endMarker) {
        if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
          return;
        }
        var range = doc.createRange();
        range.setStart(startMarker.node, startMarker.offset);
        selection.removeAllRanges();
        if (start > end) {
          selection.addRange(range);
          selection.extend(endMarker.node, endMarker.offset);
        } else {
          range.setEnd(endMarker.node, endMarker.offset);
          selection.addRange(range);
        }
      }
    }
    function isTextNode(node) {
      return node && node.nodeType === TEXT_NODE;
    }
    function containsNode(outerNode, innerNode) {
      if (!outerNode || !innerNode) {
        return false;
      } else if (outerNode === innerNode) {
        return true;
      } else if (isTextNode(outerNode)) {
        return false;
      } else if (isTextNode(innerNode)) {
        return containsNode(outerNode, innerNode.parentNode);
      } else if ("contains" in outerNode) {
        return outerNode.contains(innerNode);
      } else if (outerNode.compareDocumentPosition) {
        return !!(outerNode.compareDocumentPosition(innerNode) & 16);
      } else {
        return false;
      }
    }
    function isInDocument(node) {
      return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
    }
    function isSameOriginFrame(iframe) {
      try {
        return typeof iframe.contentWindow.location.href === "string";
      } catch (err) {
        return false;
      }
    }
    function getActiveElementDeep() {
      var win = window;
      var element = getActiveElement();
      while (element instanceof win.HTMLIFrameElement) {
        if (isSameOriginFrame(element)) {
          win = element.contentWindow;
        } else {
          return element;
        }
        element = getActiveElement(win.document);
      }
      return element;
    }
    function hasSelectionCapabilities(elem) {
      var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
      return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
    }
    function getSelectionInformation() {
      var focusedElem = getActiveElementDeep();
      return {
        focusedElem,
        selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
      };
    }
    function restoreSelection(priorSelectionInformation) {
      var curFocusedElem = getActiveElementDeep();
      var priorFocusedElem = priorSelectionInformation.focusedElem;
      var priorSelectionRange = priorSelectionInformation.selectionRange;
      if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
        if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
          setSelection(priorFocusedElem, priorSelectionRange);
        }
        var ancestors = [];
        var ancestor = priorFocusedElem;
        while (ancestor = ancestor.parentNode) {
          if (ancestor.nodeType === ELEMENT_NODE) {
            ancestors.push({
              element: ancestor,
              left: ancestor.scrollLeft,
              top: ancestor.scrollTop
            });
          }
        }
        if (typeof priorFocusedElem.focus === "function") {
          priorFocusedElem.focus();
        }
        for (var i = 0; i < ancestors.length; i++) {
          var info = ancestors[i];
          info.element.scrollLeft = info.left;
          info.element.scrollTop = info.top;
        }
      }
    }
    function getSelection(input) {
      var selection;
      if ("selectionStart" in input) {
        selection = {
          start: input.selectionStart,
          end: input.selectionEnd
        };
      } else {
        selection = getOffsets(input);
      }
      return selection || {
        start: 0,
        end: 0
      };
    }
    function setSelection(input, offsets) {
      var start = offsets.start;
      var end = offsets.end;
      if (end === void 0) {
        end = start;
      }
      if ("selectionStart" in input) {
        input.selectionStart = start;
        input.selectionEnd = Math.min(end, input.value.length);
      } else {
        setOffsets(input, offsets);
      }
    }
    var skipSelectionChangeEvent = canUseDOM && "documentMode" in document && document.documentMode <= 11;
    function registerEvents$3() {
      registerTwoPhaseEvent("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
    }
    var activeElement$1 = null;
    var activeElementInst$1 = null;
    var lastSelection = null;
    var mouseDown = false;
    function getSelection$1(node) {
      if ("selectionStart" in node && hasSelectionCapabilities(node)) {
        return {
          start: node.selectionStart,
          end: node.selectionEnd
        };
      } else {
        var win = node.ownerDocument && node.ownerDocument.defaultView || window;
        var selection = win.getSelection();
        return {
          anchorNode: selection.anchorNode,
          anchorOffset: selection.anchorOffset,
          focusNode: selection.focusNode,
          focusOffset: selection.focusOffset
        };
      }
    }
    function getEventTargetDocument(eventTarget) {
      return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
    }
    function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
      var doc = getEventTargetDocument(nativeEventTarget);
      if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
        return;
      }
      var currentSelection = getSelection$1(activeElement$1);
      if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
        lastSelection = currentSelection;
        var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
        if (listeners.length > 0) {
          var event = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget);
          dispatchQueue.push({
            event,
            listeners
          });
          event.target = activeElement$1;
        }
      }
    }
    function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
      switch (domEventName) {
        case "focusin":
          if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
            activeElement$1 = targetNode;
            activeElementInst$1 = targetInst;
            lastSelection = null;
          }
          break;
        case "focusout":
          activeElement$1 = null;
          activeElementInst$1 = null;
          lastSelection = null;
          break;
        case "mousedown":
          mouseDown = true;
          break;
        case "contextmenu":
        case "mouseup":
        case "dragend":
          mouseDown = false;
          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
          break;
        case "selectionchange":
          if (skipSelectionChangeEvent) {
            break;
          }
        case "keydown":
        case "keyup":
          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
      }
    }
    function makePrefixMap(styleProp, eventName) {
      var prefixes2 = {};
      prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase();
      prefixes2["Webkit" + styleProp] = "webkit" + eventName;
      prefixes2["Moz" + styleProp] = "moz" + eventName;
      return prefixes2;
    }
    var vendorPrefixes = {
      animationend: makePrefixMap("Animation", "AnimationEnd"),
      animationiteration: makePrefixMap("Animation", "AnimationIteration"),
      animationstart: makePrefixMap("Animation", "AnimationStart"),
      transitionend: makePrefixMap("Transition", "TransitionEnd")
    };
    var prefixedEventNames = {};
    var style = {};
    if (canUseDOM) {
      style = document.createElement("div").style;
      if (!("AnimationEvent" in window)) {
        delete vendorPrefixes.animationend.animation;
        delete vendorPrefixes.animationiteration.animation;
        delete vendorPrefixes.animationstart.animation;
      }
      if (!("TransitionEvent" in window)) {
        delete vendorPrefixes.transitionend.transition;
      }
    }
    function getVendorPrefixedEventName(eventName) {
      if (prefixedEventNames[eventName]) {
        return prefixedEventNames[eventName];
      } else if (!vendorPrefixes[eventName]) {
        return eventName;
      }
      var prefixMap = vendorPrefixes[eventName];
      for (var styleProp in prefixMap) {
        if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
          return prefixedEventNames[eventName] = prefixMap[styleProp];
        }
      }
      return eventName;
    }
    var ANIMATION_END = getVendorPrefixedEventName("animationend");
    var ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration");
    var ANIMATION_START = getVendorPrefixedEventName("animationstart");
    var TRANSITION_END = getVendorPrefixedEventName("transitionend");
    var topLevelEventsToReactNames = /* @__PURE__ */ new Map();
    var simpleEventPluginEvents = ["abort", "auxClick", "cancel", "canPlay", "canPlayThrough", "click", "close", "contextMenu", "copy", "cut", "drag", "dragEnd", "dragEnter", "dragExit", "dragLeave", "dragOver", "dragStart", "drop", "durationChange", "emptied", "encrypted", "ended", "error", "gotPointerCapture", "input", "invalid", "keyDown", "keyPress", "keyUp", "load", "loadedData", "loadedMetadata", "loadStart", "lostPointerCapture", "mouseDown", "mouseMove", "mouseOut", "mouseOver", "mouseUp", "paste", "pause", "play", "playing", "pointerCancel", "pointerDown", "pointerMove", "pointerOut", "pointerOver", "pointerUp", "progress", "rateChange", "reset", "resize", "seeked", "seeking", "stalled", "submit", "suspend", "timeUpdate", "touchCancel", "touchEnd", "touchStart", "volumeChange", "scroll", "toggle", "touchMove", "waiting", "wheel"];
    function registerSimpleEvent(domEventName, reactName) {
      topLevelEventsToReactNames.set(domEventName, reactName);
      registerTwoPhaseEvent(reactName, [domEventName]);
    }
    function registerSimpleEvents() {
      for (var i = 0; i < simpleEventPluginEvents.length; i++) {
        var eventName = simpleEventPluginEvents[i];
        var domEventName = eventName.toLowerCase();
        var capitalizedEvent = eventName[0].toUpperCase() + eventName.slice(1);
        registerSimpleEvent(domEventName, "on" + capitalizedEvent);
      }
      registerSimpleEvent(ANIMATION_END, "onAnimationEnd");
      registerSimpleEvent(ANIMATION_ITERATION, "onAnimationIteration");
      registerSimpleEvent(ANIMATION_START, "onAnimationStart");
      registerSimpleEvent("dblclick", "onDoubleClick");
      registerSimpleEvent("focusin", "onFocus");
      registerSimpleEvent("focusout", "onBlur");
      registerSimpleEvent(TRANSITION_END, "onTransitionEnd");
    }
    function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
      var reactName = topLevelEventsToReactNames.get(domEventName);
      if (reactName === void 0) {
        return;
      }
      var SyntheticEventCtor = SyntheticEvent;
      var reactEventType = domEventName;
      switch (domEventName) {
        case "keypress":
          if (getEventCharCode(nativeEvent) === 0) {
            return;
          }
        case "keydown":
        case "keyup":
          SyntheticEventCtor = SyntheticKeyboardEvent;
          break;
        case "focusin":
          reactEventType = "focus";
          SyntheticEventCtor = SyntheticFocusEvent;
          break;
        case "focusout":
          reactEventType = "blur";
          SyntheticEventCtor = SyntheticFocusEvent;
          break;
        case "beforeblur":
        case "afterblur":
          SyntheticEventCtor = SyntheticFocusEvent;
          break;
        case "click":
          if (nativeEvent.button === 2) {
            return;
          }
        case "auxclick":
        case "dblclick":
        case "mousedown":
        case "mousemove":
        case "mouseup":
        case "mouseout":
        case "mouseover":
        case "contextmenu":
          SyntheticEventCtor = SyntheticMouseEvent;
          break;
        case "drag":
        case "dragend":
        case "dragenter":
        case "dragexit":
        case "dragleave":
        case "dragover":
        case "dragstart":
        case "drop":
          SyntheticEventCtor = SyntheticDragEvent;
          break;
        case "touchcancel":
        case "touchend":
        case "touchmove":
        case "touchstart":
          SyntheticEventCtor = SyntheticTouchEvent;
          break;
        case ANIMATION_END:
        case ANIMATION_ITERATION:
        case ANIMATION_START:
          SyntheticEventCtor = SyntheticAnimationEvent;
          break;
        case TRANSITION_END:
          SyntheticEventCtor = SyntheticTransitionEvent;
          break;
        case "scroll":
          SyntheticEventCtor = SyntheticUIEvent;
          break;
        case "wheel":
          SyntheticEventCtor = SyntheticWheelEvent;
          break;
        case "copy":
        case "cut":
        case "paste":
          SyntheticEventCtor = SyntheticClipboardEvent;
          break;
        case "gotpointercapture":
        case "lostpointercapture":
        case "pointercancel":
        case "pointerdown":
        case "pointermove":
        case "pointerout":
        case "pointerover":
        case "pointerup":
          SyntheticEventCtor = SyntheticPointerEvent;
          break;
      }
      var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
      {
        var accumulateTargetOnly = !inCapturePhase && // TODO: ideally, we'd eventually add all events from
        // nonDelegatedEvents list in DOMPluginEventSystem.
        // Then we can remove this special list.
        // This is a breaking change that can wait until React 18.
        domEventName === "scroll";
        var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
        if (_listeners.length > 0) {
          var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
          dispatchQueue.push({
            event: _event,
            listeners: _listeners
          });
        }
      }
    }
    registerSimpleEvents();
    registerEvents$2();
    registerEvents$1();
    registerEvents$3();
    registerEvents();
    function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
      extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
      var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
      if (shouldProcessPolyfillPlugins) {
        extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
        extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
        extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
        extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
      }
    }
    var mediaEventTypes = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "resize", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"];
    var nonDelegatedEvents = new Set(["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(mediaEventTypes));
    function executeDispatch(event, listener, currentTarget) {
      var type = event.type || "unknown-event";
      event.currentTarget = currentTarget;
      invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event);
      event.currentTarget = null;
    }
    function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
      var previousInstance;
      if (inCapturePhase) {
        for (var i = dispatchListeners.length - 1; i >= 0; i--) {
          var _dispatchListeners$i = dispatchListeners[i], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
          if (instance !== previousInstance && event.isPropagationStopped()) {
            return;
          }
          executeDispatch(event, listener, currentTarget);
          previousInstance = instance;
        }
      } else {
        for (var _i = 0; _i < dispatchListeners.length; _i++) {
          var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
          if (_instance !== previousInstance && event.isPropagationStopped()) {
            return;
          }
          executeDispatch(event, _listener, _currentTarget);
          previousInstance = _instance;
        }
      }
    }
    function processDispatchQueue(dispatchQueue, eventSystemFlags) {
      var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
      for (var i = 0; i < dispatchQueue.length; i++) {
        var _dispatchQueue$i = dispatchQueue[i], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
        processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);
      }
      rethrowCaughtError();
    }
    function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
      var nativeEventTarget = getEventTarget(nativeEvent);
      var dispatchQueue = [];
      extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
      processDispatchQueue(dispatchQueue, eventSystemFlags);
    }
    function listenToNonDelegatedEvent(domEventName, targetElement) {
      {
        if (!nonDelegatedEvents.has(domEventName)) {
          error('Did not expect a listenToNonDelegatedEvent() call for "%s". This is a bug in React. Please file an issue.', domEventName);
        }
      }
      var isCapturePhaseListener = false;
      var listenerSet = getEventListenerSet(targetElement);
      var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
      if (!listenerSet.has(listenerSetKey)) {
        addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
        listenerSet.add(listenerSetKey);
      }
    }
    function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
      {
        if (nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener) {
          error('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. This is a bug in React. Please file an issue.', domEventName);
        }
      }
      var eventSystemFlags = 0;
      if (isCapturePhaseListener) {
        eventSystemFlags |= IS_CAPTURE_PHASE;
      }
      addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
    }
    var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
    function listenToAllSupportedEvents(rootContainerElement) {
      if (!rootContainerElement[listeningMarker]) {
        rootContainerElement[listeningMarker] = true;
        allNativeEvents.forEach(function(domEventName) {
          if (domEventName !== "selectionchange") {
            if (!nonDelegatedEvents.has(domEventName)) {
              listenToNativeEvent(domEventName, false, rootContainerElement);
            }
            listenToNativeEvent(domEventName, true, rootContainerElement);
          }
        });
        var ownerDocument = rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
        if (ownerDocument !== null) {
          if (!ownerDocument[listeningMarker]) {
            ownerDocument[listeningMarker] = true;
            listenToNativeEvent("selectionchange", false, ownerDocument);
          }
        }
      }
    }
    function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
      var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags);
      var isPassiveListener = void 0;
      if (passiveBrowserEventsSupported) {
        if (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") {
          isPassiveListener = true;
        }
      }
      targetContainer = targetContainer;
      var unsubscribeListener;
      if (isCapturePhaseListener) {
        if (isPassiveListener !== void 0) {
          unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
        } else {
          unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);
        }
      } else {
        if (isPassiveListener !== void 0) {
          unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
        } else {
          unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
        }
      }
    }
    function isMatchingRootContainer(grandContainer, targetContainer) {
      return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
    }
    function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
      var ancestorInst = targetInst;
      if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
        var targetContainerNode = targetContainer;
        if (targetInst !== null) {
          var node = targetInst;
          mainLoop:
            while (true) {
              if (node === null) {
                return;
              }
              var nodeTag = node.tag;
              if (nodeTag === HostRoot || nodeTag === HostPortal) {
                var container = node.stateNode.containerInfo;
                if (isMatchingRootContainer(container, targetContainerNode)) {
                  break;
                }
                if (nodeTag === HostPortal) {
                  var grandNode = node.return;
                  while (grandNode !== null) {
                    var grandTag = grandNode.tag;
                    if (grandTag === HostRoot || grandTag === HostPortal) {
                      var grandContainer = grandNode.stateNode.containerInfo;
                      if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                        return;
                      }
                    }
                    grandNode = grandNode.return;
                  }
                }
                while (container !== null) {
                  var parentNode = getClosestInstanceFromNode(container);
                  if (parentNode === null) {
                    return;
                  }
                  var parentTag = parentNode.tag;
                  if (parentTag === HostComponent || parentTag === HostText) {
                    node = ancestorInst = parentNode;
                    continue mainLoop;
                  }
                  container = container.parentNode;
                }
              }
              node = node.return;
            }
        }
      }
      batchedUpdates(function() {
        return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
      });
    }
    function createDispatchListener(instance, listener, currentTarget) {
      return {
        instance,
        listener,
        currentTarget
      };
    }
    function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly, nativeEvent) {
      var captureName = reactName !== null ? reactName + "Capture" : null;
      var reactEventName = inCapturePhase ? captureName : reactName;
      var listeners = [];
      var instance = targetFiber;
      var lastHostComponent = null;
      while (instance !== null) {
        var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag;
        if (tag === HostComponent && stateNode !== null) {
          lastHostComponent = stateNode;
          if (reactEventName !== null) {
            var listener = getListener(instance, reactEventName);
            if (listener != null) {
              listeners.push(createDispatchListener(instance, listener, lastHostComponent));
            }
          }
        }
        if (accumulateTargetOnly) {
          break;
        }
        instance = instance.return;
      }
      return listeners;
    }
    function accumulateTwoPhaseListeners(targetFiber, reactName) {
      var captureName = reactName + "Capture";
      var listeners = [];
      var instance = targetFiber;
      while (instance !== null) {
        var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag;
        if (tag === HostComponent && stateNode !== null) {
          var currentTarget = stateNode;
          var captureListener = getListener(instance, captureName);
          if (captureListener != null) {
            listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
          }
          var bubbleListener = getListener(instance, reactName);
          if (bubbleListener != null) {
            listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
          }
        }
        instance = instance.return;
      }
      return listeners;
    }
    function getParent(inst) {
      if (inst === null) {
        return null;
      }
      do {
        inst = inst.return;
      } while (inst && inst.tag !== HostComponent);
      if (inst) {
        return inst;
      }
      return null;
    }
    function getLowestCommonAncestor(instA, instB) {
      var nodeA = instA;
      var nodeB = instB;
      var depthA = 0;
      for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {
        depthA++;
      }
      var depthB = 0;
      for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {
        depthB++;
      }
      while (depthA - depthB > 0) {
        nodeA = getParent(nodeA);
        depthA--;
      }
      while (depthB - depthA > 0) {
        nodeB = getParent(nodeB);
        depthB--;
      }
      var depth = depthA;
      while (depth--) {
        if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
          return nodeA;
        }
        nodeA = getParent(nodeA);
        nodeB = getParent(nodeB);
      }
      return null;
    }
    function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
      var registrationName = event._reactName;
      var listeners = [];
      var instance = target;
      while (instance !== null) {
        if (instance === common) {
          break;
        }
        var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
        if (alternate !== null && alternate === common) {
          break;
        }
        if (tag === HostComponent && stateNode !== null) {
          var currentTarget = stateNode;
          if (inCapturePhase) {
            var captureListener = getListener(instance, registrationName);
            if (captureListener != null) {
              listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
            }
          } else if (!inCapturePhase) {
            var bubbleListener = getListener(instance, registrationName);
            if (bubbleListener != null) {
              listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
            }
          }
        }
        instance = instance.return;
      }
      if (listeners.length !== 0) {
        dispatchQueue.push({
          event,
          listeners
        });
      }
    }
    function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {
      var common = from && to ? getLowestCommonAncestor(from, to) : null;
      if (from !== null) {
        accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);
      }
      if (to !== null && enterEvent !== null) {
        accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
      }
    }
    function getListenerSetKey(domEventName, capture) {
      return domEventName + "__" + (capture ? "capture" : "bubble");
    }
    var didWarnInvalidHydration = false;
    var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
    var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
    var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
    var AUTOFOCUS = "autoFocus";
    var CHILDREN = "children";
    var STYLE = "style";
    var HTML$1 = "__html";
    var warnedUnknownTags;
    var validatePropertiesInDevelopment;
    var warnForPropDifference;
    var warnForExtraAttributes;
    var warnForInvalidEventListener;
    var canDiffStyleForHydrationWarning;
    var normalizeHTML;
    {
      warnedUnknownTags = {
        // There are working polyfills for <dialog>. Let people use it.
        dialog: true,
        // Electron ships a custom <webview> tag to display external web content in
        // an isolated frame and process.
        // This tag is not present in non Electron environments such as JSDom which
        // is often used for testing purposes.
        // @see https://electronjs.org/docs/api/webview-tag
        webview: true
      };
      validatePropertiesInDevelopment = function(type, props) {
        validateProperties(type, props);
        validateProperties$1(type, props);
        validateProperties$2(type, props, {
          registrationNameDependencies,
          possibleRegistrationNames
        });
      };
      canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;
      warnForPropDifference = function(propName, serverValue, clientValue) {
        if (didWarnInvalidHydration) {
          return;
        }
        var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
        var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
        if (normalizedServerValue === normalizedClientValue) {
          return;
        }
        didWarnInvalidHydration = true;
        error("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
      };
      warnForExtraAttributes = function(attributeNames) {
        if (didWarnInvalidHydration) {
          return;
        }
        didWarnInvalidHydration = true;
        var names = [];
        attributeNames.forEach(function(name) {
          names.push(name);
        });
        error("Extra attributes from the server: %s", names);
      };
      warnForInvalidEventListener = function(registrationName, listener) {
        if (listener === false) {
          error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
        } else {
          error("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
        }
      };
      normalizeHTML = function(parent, html) {
        var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
        testElement.innerHTML = html;
        return testElement.innerHTML;
      };
    }
    var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
    var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
    function normalizeMarkupForTextOrAttribute(markup) {
      {
        checkHtmlStringCoercion(markup);
      }
      var markupString = typeof markup === "string" ? markup : "" + markup;
      return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
    }
    function checkForUnmatchedText(serverText, clientText, isConcurrentMode, shouldWarnDev) {
      var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
      var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
      if (normalizedServerText === normalizedClientText) {
        return;
      }
      if (shouldWarnDev) {
        {
          if (!didWarnInvalidHydration) {
            didWarnInvalidHydration = true;
            error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
          }
        }
      }
      if (isConcurrentMode && enableClientRenderFallbackOnTextMismatch) {
        throw new Error("Text content does not match server-rendered HTML.");
      }
    }
    function getOwnerDocumentFromRootContainer(rootContainerElement) {
      return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
    }
    function noop() {
    }
    function trapClickOnNonInteractiveElement(node) {
      node.onclick = noop;
    }
    function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
      for (var propKey in nextProps) {
        if (!nextProps.hasOwnProperty(propKey)) {
          continue;
        }
        var nextProp = nextProps[propKey];
        if (propKey === STYLE) {
          {
            if (nextProp) {
              Object.freeze(nextProp);
            }
          }
          setValueForStyles(domElement, nextProp);
        } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
          var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
          if (nextHtml != null) {
            setInnerHTML(domElement, nextHtml);
          }
        } else if (propKey === CHILDREN) {
          if (typeof nextProp === "string") {
            var canSetTextContent = tag !== "textarea" || nextProp !== "";
            if (canSetTextContent) {
              setTextContent(domElement, nextProp);
            }
          } else if (typeof nextProp === "number") {
            setTextContent(domElement, "" + nextProp);
          }
        } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
          ;
        else if (propKey === AUTOFOCUS)
          ;
        else if (registrationNameDependencies.hasOwnProperty(propKey)) {
          if (nextProp != null) {
            if (typeof nextProp !== "function") {
              warnForInvalidEventListener(propKey, nextProp);
            }
            if (propKey === "onScroll") {
              listenToNonDelegatedEvent("scroll", domElement);
            }
          }
        } else if (nextProp != null) {
          setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
        }
      }
    }
    function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
      for (var i = 0; i < updatePayload.length; i += 2) {
        var propKey = updatePayload[i];
        var propValue = updatePayload[i + 1];
        if (propKey === STYLE) {
          setValueForStyles(domElement, propValue);
        } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
          setInnerHTML(domElement, propValue);
        } else if (propKey === CHILDREN) {
          setTextContent(domElement, propValue);
        } else {
          setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
        }
      }
    }
    function createElement(type, props, rootContainerElement, parentNamespace) {
      var isCustomComponentTag;
      var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
      var domElement;
      var namespaceURI = parentNamespace;
      if (namespaceURI === HTML_NAMESPACE) {
        namespaceURI = getIntrinsicNamespace(type);
      }
      if (namespaceURI === HTML_NAMESPACE) {
        {
          isCustomComponentTag = isCustomComponent(type, props);
          if (!isCustomComponentTag && type !== type.toLowerCase()) {
            error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
          }
        }
        if (type === "script") {
          var div = ownerDocument.createElement("div");
          div.innerHTML = "<script><\/script>";
          var firstChild = div.firstChild;
          domElement = div.removeChild(firstChild);
        } else if (typeof props.is === "string") {
          domElement = ownerDocument.createElement(type, {
            is: props.is
          });
        } else {
          domElement = ownerDocument.createElement(type);
          if (type === "select") {
            var node = domElement;
            if (props.multiple) {
              node.multiple = true;
            } else if (props.size) {
              node.size = props.size;
            }
          }
        }
      } else {
        domElement = ownerDocument.createElementNS(namespaceURI, type);
      }
      {
        if (namespaceURI === HTML_NAMESPACE) {
          if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !hasOwnProperty.call(warnedUnknownTags, type)) {
            warnedUnknownTags[type] = true;
            error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
          }
        }
      }
      return domElement;
    }
    function createTextNode(text, rootContainerElement) {
      return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
    }
    function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
      var isCustomComponentTag = isCustomComponent(tag, rawProps);
      {
        validatePropertiesInDevelopment(tag, rawProps);
      }
      var props;
      switch (tag) {
        case "dialog":
          listenToNonDelegatedEvent("cancel", domElement);
          listenToNonDelegatedEvent("close", domElement);
          props = rawProps;
          break;
        case "iframe":
        case "object":
        case "embed":
          listenToNonDelegatedEvent("load", domElement);
          props = rawProps;
          break;
        case "video":
        case "audio":
          for (var i = 0; i < mediaEventTypes.length; i++) {
            listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
          }
          props = rawProps;
          break;
        case "source":
          listenToNonDelegatedEvent("error", domElement);
          props = rawProps;
          break;
        case "img":
        case "image":
        case "link":
          listenToNonDelegatedEvent("error", domElement);
          listenToNonDelegatedEvent("load", domElement);
          props = rawProps;
          break;
        case "details":
          listenToNonDelegatedEvent("toggle", domElement);
          props = rawProps;
          break;
        case "input":
          initWrapperState(domElement, rawProps);
          props = getHostProps(domElement, rawProps);
          listenToNonDelegatedEvent("invalid", domElement);
          break;
        case "option":
          validateProps(domElement, rawProps);
          props = rawProps;
          break;
        case "select":
          initWrapperState$1(domElement, rawProps);
          props = getHostProps$1(domElement, rawProps);
          listenToNonDelegatedEvent("invalid", domElement);
          break;
        case "textarea":
          initWrapperState$2(domElement, rawProps);
          props = getHostProps$2(domElement, rawProps);
          listenToNonDelegatedEvent("invalid", domElement);
          break;
        default:
          props = rawProps;
      }
      assertValidProps(tag, props);
      setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
      switch (tag) {
        case "input":
          track(domElement);
          postMountWrapper(domElement, rawProps, false);
          break;
        case "textarea":
          track(domElement);
          postMountWrapper$3(domElement);
          break;
        case "option":
          postMountWrapper$1(domElement, rawProps);
          break;
        case "select":
          postMountWrapper$2(domElement, rawProps);
          break;
        default:
          if (typeof props.onClick === "function") {
            trapClickOnNonInteractiveElement(domElement);
          }
          break;
      }
    }
    function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
      {
        validatePropertiesInDevelopment(tag, nextRawProps);
      }
      var updatePayload = null;
      var lastProps;
      var nextProps;
      switch (tag) {
        case "input":
          lastProps = getHostProps(domElement, lastRawProps);
          nextProps = getHostProps(domElement, nextRawProps);
          updatePayload = [];
          break;
        case "select":
          lastProps = getHostProps$1(domElement, lastRawProps);
          nextProps = getHostProps$1(domElement, nextRawProps);
          updatePayload = [];
          break;
        case "textarea":
          lastProps = getHostProps$2(domElement, lastRawProps);
          nextProps = getHostProps$2(domElement, nextRawProps);
          updatePayload = [];
          break;
        default:
          lastProps = lastRawProps;
          nextProps = nextRawProps;
          if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") {
            trapClickOnNonInteractiveElement(domElement);
          }
          break;
      }
      assertValidProps(tag, nextProps);
      var propKey;
      var styleName;
      var styleUpdates = null;
      for (propKey in lastProps) {
        if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
          continue;
        }
        if (propKey === STYLE) {
          var lastStyle = lastProps[propKey];
          for (styleName in lastStyle) {
            if (lastStyle.hasOwnProperty(styleName)) {
              if (!styleUpdates) {
                styleUpdates = {};
              }
              styleUpdates[styleName] = "";
            }
          }
        } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN)
          ;
        else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
          ;
        else if (propKey === AUTOFOCUS)
          ;
        else if (registrationNameDependencies.hasOwnProperty(propKey)) {
          if (!updatePayload) {
            updatePayload = [];
          }
        } else {
          (updatePayload = updatePayload || []).push(propKey, null);
        }
      }
      for (propKey in nextProps) {
        var nextProp = nextProps[propKey];
        var lastProp = lastProps != null ? lastProps[propKey] : void 0;
        if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
          continue;
        }
        if (propKey === STYLE) {
          {
            if (nextProp) {
              Object.freeze(nextProp);
            }
          }
          if (lastProp) {
            for (styleName in lastProp) {
              if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                if (!styleUpdates) {
                  styleUpdates = {};
                }
                styleUpdates[styleName] = "";
              }
            }
            for (styleName in nextProp) {
              if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                if (!styleUpdates) {
                  styleUpdates = {};
                }
                styleUpdates[styleName] = nextProp[styleName];
              }
            }
          } else {
            if (!styleUpdates) {
              if (!updatePayload) {
                updatePayload = [];
              }
              updatePayload.push(propKey, styleUpdates);
            }
            styleUpdates = nextProp;
          }
        } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
          var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
          var lastHtml = lastProp ? lastProp[HTML$1] : void 0;
          if (nextHtml != null) {
            if (lastHtml !== nextHtml) {
              (updatePayload = updatePayload || []).push(propKey, nextHtml);
            }
          }
        } else if (propKey === CHILDREN) {
          if (typeof nextProp === "string" || typeof nextProp === "number") {
            (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
          }
        } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
          ;
        else if (registrationNameDependencies.hasOwnProperty(propKey)) {
          if (nextProp != null) {
            if (typeof nextProp !== "function") {
              warnForInvalidEventListener(propKey, nextProp);
            }
            if (propKey === "onScroll") {
              listenToNonDelegatedEvent("scroll", domElement);
            }
          }
          if (!updatePayload && lastProp !== nextProp) {
            updatePayload = [];
          }
        } else {
          (updatePayload = updatePayload || []).push(propKey, nextProp);
        }
      }
      if (styleUpdates) {
        {
          validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
        }
        (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
      }
      return updatePayload;
    }
    function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
      if (tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) {
        updateChecked(domElement, nextRawProps);
      }
      var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
      var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
      updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
      switch (tag) {
        case "input":
          updateWrapper(domElement, nextRawProps);
          break;
        case "textarea":
          updateWrapper$1(domElement, nextRawProps);
          break;
        case "select":
          postUpdateWrapper(domElement, nextRawProps);
          break;
      }
    }
    function getPossibleStandardName(propName) {
      {
        var lowerCasedName = propName.toLowerCase();
        if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
          return null;
        }
        return possibleStandardNames[lowerCasedName] || null;
      }
    }
    function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement, isConcurrentMode, shouldWarnDev) {
      var isCustomComponentTag;
      var extraAttributeNames;
      {
        isCustomComponentTag = isCustomComponent(tag, rawProps);
        validatePropertiesInDevelopment(tag, rawProps);
      }
      switch (tag) {
        case "dialog":
          listenToNonDelegatedEvent("cancel", domElement);
          listenToNonDelegatedEvent("close", domElement);
          break;
        case "iframe":
        case "object":
        case "embed":
          listenToNonDelegatedEvent("load", domElement);
          break;
        case "video":
        case "audio":
          for (var i = 0; i < mediaEventTypes.length; i++) {
            listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
          }
          break;
        case "source":
          listenToNonDelegatedEvent("error", domElement);
          break;
        case "img":
        case "image":
        case "link":
          listenToNonDelegatedEvent("error", domElement);
          listenToNonDelegatedEvent("load", domElement);
          break;
        case "details":
          listenToNonDelegatedEvent("toggle", domElement);
          break;
        case "input":
          initWrapperState(domElement, rawProps);
          listenToNonDelegatedEvent("invalid", domElement);
          break;
        case "option":
          validateProps(domElement, rawProps);
          break;
        case "select":
          initWrapperState$1(domElement, rawProps);
          listenToNonDelegatedEvent("invalid", domElement);
          break;
        case "textarea":
          initWrapperState$2(domElement, rawProps);
          listenToNonDelegatedEvent("invalid", domElement);
          break;
      }
      assertValidProps(tag, rawProps);
      {
        extraAttributeNames = /* @__PURE__ */ new Set();
        var attributes = domElement.attributes;
        for (var _i = 0; _i < attributes.length; _i++) {
          var name = attributes[_i].name.toLowerCase();
          switch (name) {
            case "value":
              break;
            case "checked":
              break;
            case "selected":
              break;
            default:
              extraAttributeNames.add(attributes[_i].name);
          }
        }
      }
      var updatePayload = null;
      for (var propKey in rawProps) {
        if (!rawProps.hasOwnProperty(propKey)) {
          continue;
        }
        var nextProp = rawProps[propKey];
        if (propKey === CHILDREN) {
          if (typeof nextProp === "string") {
            if (domElement.textContent !== nextProp) {
              if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
              }
              updatePayload = [CHILDREN, nextProp];
            }
          } else if (typeof nextProp === "number") {
            if (domElement.textContent !== "" + nextProp) {
              if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
              }
              updatePayload = [CHILDREN, "" + nextProp];
            }
          }
        } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
          if (nextProp != null) {
            if (typeof nextProp !== "function") {
              warnForInvalidEventListener(propKey, nextProp);
            }
            if (propKey === "onScroll") {
              listenToNonDelegatedEvent("scroll", domElement);
            }
          }
        } else if (shouldWarnDev && true && // Convince Flow we've calculated it (it's DEV-only in this method.)
        typeof isCustomComponentTag === "boolean") {
          var serverValue = void 0;
          var propertyInfo = isCustomComponentTag && enableCustomElementPropertySupport ? null : getPropertyInfo(propKey);
          if (rawProps[SUPPRESS_HYDRATION_WARNING] === true)
            ;
          else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || // Controlled attributes are not validated
          // TODO: Only ignore them on controlled tags.
          propKey === "value" || propKey === "checked" || propKey === "selected")
            ;
          else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
            var serverHTML = domElement.innerHTML;
            var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
            if (nextHtml != null) {
              var expectedHTML = normalizeHTML(domElement, nextHtml);
              if (expectedHTML !== serverHTML) {
                warnForPropDifference(propKey, serverHTML, expectedHTML);
              }
            }
          } else if (propKey === STYLE) {
            extraAttributeNames.delete(propKey);
            if (canDiffStyleForHydrationWarning) {
              var expectedStyle = createDangerousStringForStyles(nextProp);
              serverValue = domElement.getAttribute("style");
              if (expectedStyle !== serverValue) {
                warnForPropDifference(propKey, serverValue, expectedStyle);
              }
            }
          } else if (isCustomComponentTag && !enableCustomElementPropertySupport) {
            extraAttributeNames.delete(propKey.toLowerCase());
            serverValue = getValueForAttribute(domElement, propKey, nextProp);
            if (nextProp !== serverValue) {
              warnForPropDifference(propKey, serverValue, nextProp);
            }
          } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
            var isMismatchDueToBadCasing = false;
            if (propertyInfo !== null) {
              extraAttributeNames.delete(propertyInfo.attributeName);
              serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
            } else {
              var ownNamespace = parentNamespace;
              if (ownNamespace === HTML_NAMESPACE) {
                ownNamespace = getIntrinsicNamespace(tag);
              }
              if (ownNamespace === HTML_NAMESPACE) {
                extraAttributeNames.delete(propKey.toLowerCase());
              } else {
                var standardName = getPossibleStandardName(propKey);
                if (standardName !== null && standardName !== propKey) {
                  isMismatchDueToBadCasing = true;
                  extraAttributeNames.delete(standardName);
                }
                extraAttributeNames.delete(propKey);
              }
              serverValue = getValueForAttribute(domElement, propKey, nextProp);
            }
            var dontWarnCustomElement = enableCustomElementPropertySupport;
            if (!dontWarnCustomElement && nextProp !== serverValue && !isMismatchDueToBadCasing) {
              warnForPropDifference(propKey, serverValue, nextProp);
            }
          }
        }
      }
      {
        if (shouldWarnDev) {
          if (
            // $FlowFixMe - Should be inferred as not undefined.
            extraAttributeNames.size > 0 && rawProps[SUPPRESS_HYDRATION_WARNING] !== true
          ) {
            warnForExtraAttributes(extraAttributeNames);
          }
        }
      }
      switch (tag) {
        case "input":
          track(domElement);
          postMountWrapper(domElement, rawProps, true);
          break;
        case "textarea":
          track(domElement);
          postMountWrapper$3(domElement);
          break;
        case "select":
        case "option":
          break;
        default:
          if (typeof rawProps.onClick === "function") {
            trapClickOnNonInteractiveElement(domElement);
          }
          break;
      }
      return updatePayload;
    }
    function diffHydratedText(textNode, text, isConcurrentMode) {
      var isDifferent = textNode.nodeValue !== text;
      return isDifferent;
    }
    function warnForDeletedHydratableElement(parentNode, child) {
      {
        if (didWarnInvalidHydration) {
          return;
        }
        didWarnInvalidHydration = true;
        error("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
      }
    }
    function warnForDeletedHydratableText(parentNode, child) {
      {
        if (didWarnInvalidHydration) {
          return;
        }
        didWarnInvalidHydration = true;
        error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
      }
    }
    function warnForInsertedHydratedElement(parentNode, tag, props) {
      {
        if (didWarnInvalidHydration) {
          return;
        }
        didWarnInvalidHydration = true;
        error("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
      }
    }
    function warnForInsertedHydratedText(parentNode, text) {
      {
        if (text === "") {
          return;
        }
        if (didWarnInvalidHydration) {
          return;
        }
        didWarnInvalidHydration = true;
        error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
      }
    }
    function restoreControlledState$3(domElement, tag, props) {
      switch (tag) {
        case "input":
          restoreControlledState(domElement, props);
          return;
        case "textarea":
          restoreControlledState$2(domElement, props);
          return;
        case "select":
          restoreControlledState$1(domElement, props);
          return;
      }
    }
    var validateDOMNesting = function() {
    };
    var updatedAncestorInfo = function() {
    };
    {
      var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"];
      var inScopeTags = [
        "applet",
        "caption",
        "html",
        "table",
        "td",
        "th",
        "marquee",
        "object",
        "template",
        // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
        // TODO: Distinguish by namespace here -- for <title>, including it here
        // errs on the side of fewer warnings
        "foreignObject",
        "desc",
        "title"
      ];
      var buttonScopeTags = inScopeTags.concat(["button"]);
      var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
      var emptyAncestorInfo = {
        current: null,
        formTag: null,
        aTagInScope: null,
        buttonTagInScope: null,
        nobrTagInScope: null,
        pTagInButtonScope: null,
        listItemTagAutoclosing: null,
        dlItemTagAutoclosing: null
      };
      updatedAncestorInfo = function(oldInfo, tag) {
        var ancestorInfo = assign({}, oldInfo || emptyAncestorInfo);
        var info = {
          tag
        };
        if (inScopeTags.indexOf(tag) !== -1) {
          ancestorInfo.aTagInScope = null;
          ancestorInfo.buttonTagInScope = null;
          ancestorInfo.nobrTagInScope = null;
        }
        if (buttonScopeTags.indexOf(tag) !== -1) {
          ancestorInfo.pTagInButtonScope = null;
        }
        if (specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p") {
          ancestorInfo.listItemTagAutoclosing = null;
          ancestorInfo.dlItemTagAutoclosing = null;
        }
        ancestorInfo.current = info;
        if (tag === "form") {
          ancestorInfo.formTag = info;
        }
        if (tag === "a") {
          ancestorInfo.aTagInScope = info;
        }
        if (tag === "button") {
          ancestorInfo.buttonTagInScope = info;
        }
        if (tag === "nobr") {
          ancestorInfo.nobrTagInScope = info;
        }
        if (tag === "p") {
          ancestorInfo.pTagInButtonScope = info;
        }
        if (tag === "li") {
          ancestorInfo.listItemTagAutoclosing = info;
        }
        if (tag === "dd" || tag === "dt") {
          ancestorInfo.dlItemTagAutoclosing = info;
        }
        return ancestorInfo;
      };
      var isTagValidWithParent = function(tag, parentTag) {
        switch (parentTag) {
          case "select":
            return tag === "option" || tag === "optgroup" || tag === "#text";
          case "optgroup":
            return tag === "option" || tag === "#text";
          case "option":
            return tag === "#text";
          case "tr":
            return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
          case "tbody":
          case "thead":
          case "tfoot":
            return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
          case "colgroup":
            return tag === "col" || tag === "template";
          case "table":
            return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
          case "head":
            return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
          case "html":
            return tag === "head" || tag === "body" || tag === "frameset";
          case "frameset":
            return tag === "frame";
          case "#document":
            return tag === "html";
        }
        switch (tag) {
          case "h1":
          case "h2":
          case "h3":
          case "h4":
          case "h5":
          case "h6":
            return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
          case "rp":
          case "rt":
            return impliedEndTags.indexOf(parentTag) === -1;
          case "body":
          case "caption":
          case "col":
          case "colgroup":
          case "frameset":
          case "frame":
          case "head":
          case "html":
          case "tbody":
          case "td":
          case "tfoot":
          case "th":
          case "thead":
          case "tr":
            return parentTag == null;
        }
        return true;
      };
      var findInvalidAncestorForTag = function(tag, ancestorInfo) {
        switch (tag) {
          case "address":
          case "article":
          case "aside":
          case "blockquote":
          case "center":
          case "details":
          case "dialog":
          case "dir":
          case "div":
          case "dl":
          case "fieldset":
          case "figcaption":
          case "figure":
          case "footer":
          case "header":
          case "hgroup":
          case "main":
          case "menu":
          case "nav":
          case "ol":
          case "p":
          case "section":
          case "summary":
          case "ul":
          case "pre":
          case "listing":
          case "table":
          case "hr":
          case "xmp":
          case "h1":
          case "h2":
          case "h3":
          case "h4":
          case "h5":
          case "h6":
            return ancestorInfo.pTagInButtonScope;
          case "form":
            return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
          case "li":
            return ancestorInfo.listItemTagAutoclosing;
          case "dd":
          case "dt":
            return ancestorInfo.dlItemTagAutoclosing;
          case "button":
            return ancestorInfo.buttonTagInScope;
          case "a":
            return ancestorInfo.aTagInScope;
          case "nobr":
            return ancestorInfo.nobrTagInScope;
        }
        return null;
      };
      var didWarn$1 = {};
      validateDOMNesting = function(childTag, childText, ancestorInfo) {
        ancestorInfo = ancestorInfo || emptyAncestorInfo;
        var parentInfo = ancestorInfo.current;
        var parentTag = parentInfo && parentInfo.tag;
        if (childText != null) {
          if (childTag != null) {
            error("validateDOMNesting: when childText is passed, childTag should be null");
          }
          childTag = "#text";
        }
        var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
        var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
        var invalidParentOrAncestor = invalidParent || invalidAncestor;
        if (!invalidParentOrAncestor) {
          return;
        }
        var ancestorTag = invalidParentOrAncestor.tag;
        var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
        if (didWarn$1[warnKey]) {
          return;
        }
        didWarn$1[warnKey] = true;
        var tagDisplayName = childTag;
        var whitespaceInfo = "";
        if (childTag === "#text") {
          if (/\S/.test(childText)) {
            tagDisplayName = "Text nodes";
          } else {
            tagDisplayName = "Whitespace text nodes";
            whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
          }
        } else {
          tagDisplayName = "<" + childTag + ">";
        }
        if (invalidParent) {
          var info = "";
          if (ancestorTag === "table" && childTag === "tr") {
            info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
          }
          error("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info);
        } else {
          error("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
        }
      };
    }
    var SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
    var SUSPENSE_START_DATA = "$";
    var SUSPENSE_END_DATA = "/$";
    var SUSPENSE_PENDING_START_DATA = "$?";
    var SUSPENSE_FALLBACK_START_DATA = "$!";
    var STYLE$1 = "style";
    var eventsEnabled = null;
    var selectionInformation = null;
    function getRootHostContext(rootContainerInstance) {
      var type;
      var namespace;
      var nodeType = rootContainerInstance.nodeType;
      switch (nodeType) {
        case DOCUMENT_NODE:
        case DOCUMENT_FRAGMENT_NODE: {
          type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
          var root2 = rootContainerInstance.documentElement;
          namespace = root2 ? root2.namespaceURI : getChildNamespace(null, "");
          break;
        }
        default: {
          var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
          var ownNamespace = container.namespaceURI || null;
          type = container.tagName;
          namespace = getChildNamespace(ownNamespace, type);
          break;
        }
      }
      {
        var validatedTag = type.toLowerCase();
        var ancestorInfo = updatedAncestorInfo(null, validatedTag);
        return {
          namespace,
          ancestorInfo
        };
      }
    }
    function getChildHostContext(parentHostContext, type, rootContainerInstance) {
      {
        var parentHostContextDev = parentHostContext;
        var namespace = getChildNamespace(parentHostContextDev.namespace, type);
        var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
        return {
          namespace,
          ancestorInfo
        };
      }
    }
    function getPublicInstance(instance) {
      return instance;
    }
    function prepareForCommit(containerInfo) {
      eventsEnabled = isEnabled();
      selectionInformation = getSelectionInformation();
      var activeInstance = null;
      setEnabled(false);
      return activeInstance;
    }
    function resetAfterCommit(containerInfo) {
      restoreSelection(selectionInformation);
      setEnabled(eventsEnabled);
      eventsEnabled = null;
      selectionInformation = null;
    }
    function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
      var parentNamespace;
      {
        var hostContextDev = hostContext;
        validateDOMNesting(type, null, hostContextDev.ancestorInfo);
        if (typeof props.children === "string" || typeof props.children === "number") {
          var string = "" + props.children;
          var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
          validateDOMNesting(null, string, ownAncestorInfo);
        }
        parentNamespace = hostContextDev.namespace;
      }
      var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
      precacheFiberNode(internalInstanceHandle, domElement);
      updateFiberProps(domElement, props);
      return domElement;
    }
    function appendInitialChild(parentInstance, child) {
      parentInstance.appendChild(child);
    }
    function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
      setInitialProperties(domElement, type, props, rootContainerInstance);
      switch (type) {
        case "button":
        case "input":
        case "select":
        case "textarea":
          return !!props.autoFocus;
        case "img":
          return true;
        default:
          return false;
      }
    }
    function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
      {
        var hostContextDev = hostContext;
        if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
          var string = "" + newProps.children;
          var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
          validateDOMNesting(null, string, ownAncestorInfo);
        }
      }
      return diffProperties(domElement, type, oldProps, newProps);
    }
    function shouldSetTextContent(type, props) {
      return type === "textarea" || type === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
    }
    function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
      {
        var hostContextDev = hostContext;
        validateDOMNesting(null, text, hostContextDev.ancestorInfo);
      }
      var textNode = createTextNode(text, rootContainerInstance);
      precacheFiberNode(internalInstanceHandle, textNode);
      return textNode;
    }
    function getCurrentEventPriority() {
      var currentEvent = window.event;
      if (currentEvent === void 0) {
        return DefaultEventPriority;
      }
      return getEventPriority(currentEvent.type);
    }
    var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : void 0;
    var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : void 0;
    var noTimeout = -1;
    var localPromise = typeof Promise === "function" ? Promise : void 0;
    var scheduleMicrotask = typeof queueMicrotask === "function" ? queueMicrotask : typeof localPromise !== "undefined" ? function(callback) {
      return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
    } : scheduleTimeout;
    function handleErrorInNextTick(error2) {
      setTimeout(function() {
        throw error2;
      });
    }
    function commitMount(domElement, type, newProps, internalInstanceHandle) {
      switch (type) {
        case "button":
        case "input":
        case "select":
        case "textarea":
          if (newProps.autoFocus) {
            domElement.focus();
          }
          return;
        case "img": {
          if (newProps.src) {
            domElement.src = newProps.src;
          }
          return;
        }
      }
    }
    function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
      updateProperties(domElement, updatePayload, type, oldProps, newProps);
      updateFiberProps(domElement, newProps);
    }
    function resetTextContent(domElement) {
      setTextContent(domElement, "");
    }
    function commitTextUpdate(textInstance, oldText, newText) {
      textInstance.nodeValue = newText;
    }
    function appendChild(parentInstance, child) {
      parentInstance.appendChild(child);
    }
    function appendChildToContainer(container, child) {
      var parentNode;
      if (container.nodeType === COMMENT_NODE) {
        parentNode = container.parentNode;
        parentNode.insertBefore(child, container);
      } else {
        parentNode = container;
        parentNode.appendChild(child);
      }
      var reactRootContainer = container._reactRootContainer;
      if ((reactRootContainer === null || reactRootContainer === void 0) && parentNode.onclick === null) {
        trapClickOnNonInteractiveElement(parentNode);
      }
    }
    function insertBefore(parentInstance, child, beforeChild) {
      parentInstance.insertBefore(child, beforeChild);
    }
    function insertInContainerBefore(container, child, beforeChild) {
      if (container.nodeType === COMMENT_NODE) {
        container.parentNode.insertBefore(child, beforeChild);
      } else {
        container.insertBefore(child, beforeChild);
      }
    }
    function removeChild(parentInstance, child) {
      parentInstance.removeChild(child);
    }
    function removeChildFromContainer(container, child) {
      if (container.nodeType === COMMENT_NODE) {
        container.parentNode.removeChild(child);
      } else {
        container.removeChild(child);
      }
    }
    function clearSuspenseBoundary(parentInstance, suspenseInstance) {
      var node = suspenseInstance;
      var depth = 0;
      do {
        var nextNode = node.nextSibling;
        parentInstance.removeChild(node);
        if (nextNode && nextNode.nodeType === COMMENT_NODE) {
          var data = nextNode.data;
          if (data === SUSPENSE_END_DATA) {
            if (depth === 0) {
              parentInstance.removeChild(nextNode);
              retryIfBlockedOn(suspenseInstance);
              return;
            } else {
              depth--;
            }
          } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_PENDING_START_DATA || data === SUSPENSE_FALLBACK_START_DATA) {
            depth++;
          }
        }
        node = nextNode;
      } while (node);
      retryIfBlockedOn(suspenseInstance);
    }
    function clearSuspenseBoundaryFromContainer(container, suspenseInstance) {
      if (container.nodeType === COMMENT_NODE) {
        clearSuspenseBoundary(container.parentNode, suspenseInstance);
      } else if (container.nodeType === ELEMENT_NODE) {
        clearSuspenseBoundary(container, suspenseInstance);
      }
      retryIfBlockedOn(container);
    }
    function hideInstance(instance) {
      instance = instance;
      var style2 = instance.style;
      if (typeof style2.setProperty === "function") {
        style2.setProperty("display", "none", "important");
      } else {
        style2.display = "none";
      }
    }
    function hideTextInstance(textInstance) {
      textInstance.nodeValue = "";
    }
    function unhideInstance(instance, props) {
      instance = instance;
      var styleProp = props[STYLE$1];
      var display = styleProp !== void 0 && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
      instance.style.display = dangerousStyleValue("display", display);
    }
    function unhideTextInstance(textInstance, text) {
      textInstance.nodeValue = text;
    }
    function clearContainer(container) {
      if (container.nodeType === ELEMENT_NODE) {
        container.textContent = "";
      } else if (container.nodeType === DOCUMENT_NODE) {
        if (container.documentElement) {
          container.removeChild(container.documentElement);
        }
      }
    }
    function canHydrateInstance(instance, type, props) {
      if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
        return null;
      }
      return instance;
    }
    function canHydrateTextInstance(instance, text) {
      if (text === "" || instance.nodeType !== TEXT_NODE) {
        return null;
      }
      return instance;
    }
    function canHydrateSuspenseInstance(instance) {
      if (instance.nodeType !== COMMENT_NODE) {
        return null;
      }
      return instance;
    }
    function isSuspenseInstancePending(instance) {
      return instance.data === SUSPENSE_PENDING_START_DATA;
    }
    function isSuspenseInstanceFallback(instance) {
      return instance.data === SUSPENSE_FALLBACK_START_DATA;
    }
    function getSuspenseInstanceFallbackErrorDetails(instance) {
      var dataset = instance.nextSibling && instance.nextSibling.dataset;
      var digest, message, stack;
      if (dataset) {
        digest = dataset.dgst;
        {
          message = dataset.msg;
          stack = dataset.stck;
        }
      }
      {
        return {
          message,
          digest,
          stack
        };
      }
    }
    function registerSuspenseInstanceRetry(instance, callback) {
      instance._reactRetry = callback;
    }
    function getNextHydratable(node) {
      for (; node != null; node = node.nextSibling) {
        var nodeType = node.nodeType;
        if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
          break;
        }
        if (nodeType === COMMENT_NODE) {
          var nodeData = node.data;
          if (nodeData === SUSPENSE_START_DATA || nodeData === SUSPENSE_FALLBACK_START_DATA || nodeData === SUSPENSE_PENDING_START_DATA) {
            break;
          }
          if (nodeData === SUSPENSE_END_DATA) {
            return null;
          }
        }
      }
      return node;
    }
    function getNextHydratableSibling(instance) {
      return getNextHydratable(instance.nextSibling);
    }
    function getFirstHydratableChild(parentInstance) {
      return getNextHydratable(parentInstance.firstChild);
    }
    function getFirstHydratableChildWithinContainer(parentContainer) {
      return getNextHydratable(parentContainer.firstChild);
    }
    function getFirstHydratableChildWithinSuspenseInstance(parentInstance) {
      return getNextHydratable(parentInstance.nextSibling);
    }
    function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle, shouldWarnDev) {
      precacheFiberNode(internalInstanceHandle, instance);
      updateFiberProps(instance, props);
      var parentNamespace;
      {
        var hostContextDev = hostContext;
        parentNamespace = hostContextDev.namespace;
      }
      var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
      return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance, isConcurrentMode, shouldWarnDev);
    }
    function hydrateTextInstance(textInstance, text, internalInstanceHandle, shouldWarnDev) {
      precacheFiberNode(internalInstanceHandle, textInstance);
      var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
      return diffHydratedText(textInstance, text);
    }
    function hydrateSuspenseInstance(suspenseInstance, internalInstanceHandle) {
      precacheFiberNode(internalInstanceHandle, suspenseInstance);
    }
    function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
      var node = suspenseInstance.nextSibling;
      var depth = 0;
      while (node) {
        if (node.nodeType === COMMENT_NODE) {
          var data = node.data;
          if (data === SUSPENSE_END_DATA) {
            if (depth === 0) {
              return getNextHydratableSibling(node);
            } else {
              depth--;
            }
          } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
            depth++;
          }
        }
        node = node.nextSibling;
      }
      return null;
    }
    function getParentSuspenseInstance(targetInstance) {
      var node = targetInstance.previousSibling;
      var depth = 0;
      while (node) {
        if (node.nodeType === COMMENT_NODE) {
          var data = node.data;
          if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
            if (depth === 0) {
              return node;
            } else {
              depth--;
            }
          } else if (data === SUSPENSE_END_DATA) {
            depth++;
          }
        }
        node = node.previousSibling;
      }
      return null;
    }
    function commitHydratedContainer(container) {
      retryIfBlockedOn(container);
    }
    function commitHydratedSuspenseInstance(suspenseInstance) {
      retryIfBlockedOn(suspenseInstance);
    }
    function shouldDeleteUnhydratedTailInstances(parentType) {
      return parentType !== "head" && parentType !== "body";
    }
    function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text, isConcurrentMode) {
      var shouldWarnDev = true;
      checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
    }
    function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text, isConcurrentMode) {
      if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
        var shouldWarnDev = true;
        checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
      }
    }
    function didNotHydrateInstanceWithinContainer(parentContainer, instance) {
      {
        if (instance.nodeType === ELEMENT_NODE) {
          warnForDeletedHydratableElement(parentContainer, instance);
        } else if (instance.nodeType === COMMENT_NODE)
          ;
        else {
          warnForDeletedHydratableText(parentContainer, instance);
        }
      }
    }
    function didNotHydrateInstanceWithinSuspenseInstance(parentInstance, instance) {
      {
        var parentNode = parentInstance.parentNode;
        if (parentNode !== null) {
          if (instance.nodeType === ELEMENT_NODE) {
            warnForDeletedHydratableElement(parentNode, instance);
          } else if (instance.nodeType === COMMENT_NODE)
            ;
          else {
            warnForDeletedHydratableText(parentNode, instance);
          }
        }
      }
    }
    function didNotHydrateInstance(parentType, parentProps, parentInstance, instance, isConcurrentMode) {
      {
        if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
          if (instance.nodeType === ELEMENT_NODE) {
            warnForDeletedHydratableElement(parentInstance, instance);
          } else if (instance.nodeType === COMMENT_NODE)
            ;
          else {
            warnForDeletedHydratableText(parentInstance, instance);
          }
        }
      }
    }
    function didNotFindHydratableInstanceWithinContainer(parentContainer, type, props) {
      {
        warnForInsertedHydratedElement(parentContainer, type);
      }
    }
    function didNotFindHydratableTextInstanceWithinContainer(parentContainer, text) {
      {
        warnForInsertedHydratedText(parentContainer, text);
      }
    }
    function didNotFindHydratableInstanceWithinSuspenseInstance(parentInstance, type, props) {
      {
        var parentNode = parentInstance.parentNode;
        if (parentNode !== null)
          warnForInsertedHydratedElement(parentNode, type);
      }
    }
    function didNotFindHydratableTextInstanceWithinSuspenseInstance(parentInstance, text) {
      {
        var parentNode = parentInstance.parentNode;
        if (parentNode !== null)
          warnForInsertedHydratedText(parentNode, text);
      }
    }
    function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props, isConcurrentMode) {
      {
        if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
          warnForInsertedHydratedElement(parentInstance, type);
        }
      }
    }
    function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text, isConcurrentMode) {
      {
        if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
          warnForInsertedHydratedText(parentInstance, text);
        }
      }
    }
    function errorHydratingContainer(parentContainer) {
      {
        error("An error occurred during hydration. The server HTML was replaced with client content in <%s>.", parentContainer.nodeName.toLowerCase());
      }
    }
    function preparePortalMount(portalInstance) {
      listenToAllSupportedEvents(portalInstance);
    }
    var randomKey = Math.random().toString(36).slice(2);
    var internalInstanceKey = "__reactFiber$" + randomKey;
    var internalPropsKey = "__reactProps$" + randomKey;
    var internalContainerInstanceKey = "__reactContainer$" + randomKey;
    var internalEventHandlersKey = "__reactEvents$" + randomKey;
    var internalEventHandlerListenersKey = "__reactListeners$" + randomKey;
    var internalEventHandlesSetKey = "__reactHandles$" + randomKey;
    function detachDeletedInstance(node) {
      delete node[internalInstanceKey];
      delete node[internalPropsKey];
      delete node[internalEventHandlersKey];
      delete node[internalEventHandlerListenersKey];
      delete node[internalEventHandlesSetKey];
    }
    function precacheFiberNode(hostInst, node) {
      node[internalInstanceKey] = hostInst;
    }
    function markContainerAsRoot(hostRoot, node) {
      node[internalContainerInstanceKey] = hostRoot;
    }
    function unmarkContainerAsRoot(node) {
      node[internalContainerInstanceKey] = null;
    }
    function isContainerMarkedAsRoot(node) {
      return !!node[internalContainerInstanceKey];
    }
    function getClosestInstanceFromNode(targetNode) {
      var targetInst = targetNode[internalInstanceKey];
      if (targetInst) {
        return targetInst;
      }
      var parentNode = targetNode.parentNode;
      while (parentNode) {
        targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
        if (targetInst) {
          var alternate = targetInst.alternate;
          if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
            var suspenseInstance = getParentSuspenseInstance(targetNode);
            while (suspenseInstance !== null) {
              var targetSuspenseInst = suspenseInstance[internalInstanceKey];
              if (targetSuspenseInst) {
                return targetSuspenseInst;
              }
              suspenseInstance = getParentSuspenseInstance(suspenseInstance);
            }
          }
          return targetInst;
        }
        targetNode = parentNode;
        parentNode = targetNode.parentNode;
      }
      return null;
    }
    function getInstanceFromNode(node) {
      var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];
      if (inst) {
        if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
          return inst;
        } else {
          return null;
        }
      }
      return null;
    }
    function getNodeFromInstance(inst) {
      if (inst.tag === HostComponent || inst.tag === HostText) {
        return inst.stateNode;
      }
      throw new Error("getNodeFromInstance: Invalid argument.");
    }
    function getFiberCurrentPropsFromNode(node) {
      return node[internalPropsKey] || null;
    }
    function updateFiberProps(node, props) {
      node[internalPropsKey] = props;
    }
    function getEventListenerSet(node) {
      var elementListenerSet = node[internalEventHandlersKey];
      if (elementListenerSet === void 0) {
        elementListenerSet = node[internalEventHandlersKey] = /* @__PURE__ */ new Set();
      }
      return elementListenerSet;
    }
    var loggedTypeFailures = {};
    var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
    function setCurrentlyValidatingElement(element) {
      {
        if (element) {
          var owner = element._owner;
          var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
          ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
        } else {
          ReactDebugCurrentFrame$1.setExtraStackFrame(null);
        }
      }
    }
    function checkPropTypes(typeSpecs, values, location, componentName, element) {
      {
        var has2 = Function.call.bind(hasOwnProperty);
        for (var typeSpecName in typeSpecs) {
          if (has2(typeSpecs, typeSpecName)) {
            var error$1 = void 0;
            try {
              if (typeof typeSpecs[typeSpecName] !== "function") {
                var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                err.name = "Invariant Violation";
                throw err;
              }
              error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
            } catch (ex) {
              error$1 = ex;
            }
            if (error$1 && !(error$1 instanceof Error)) {
              setCurrentlyValidatingElement(element);
              error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
              setCurrentlyValidatingElement(null);
            }
            if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
              loggedTypeFailures[error$1.message] = true;
              setCurrentlyValidatingElement(element);
              error("Failed %s type: %s", location, error$1.message);
              setCurrentlyValidatingElement(null);
            }
          }
        }
      }
    }
    var valueStack = [];
    var fiberStack;
    {
      fiberStack = [];
    }
    var index = -1;
    function createCursor(defaultValue) {
      return {
        current: defaultValue
      };
    }
    function pop(cursor, fiber) {
      if (index < 0) {
        {
          error("Unexpected pop.");
        }
        return;
      }
      {
        if (fiber !== fiberStack[index]) {
          error("Unexpected Fiber popped.");
        }
      }
      cursor.current = valueStack[index];
      valueStack[index] = null;
      {
        fiberStack[index] = null;
      }
      index--;
    }
    function push(cursor, value, fiber) {
      index++;
      valueStack[index] = cursor.current;
      {
        fiberStack[index] = fiber;
      }
      cursor.current = value;
    }
    var warnedAboutMissingGetChildContext;
    {
      warnedAboutMissingGetChildContext = {};
    }
    var emptyContextObject = {};
    {
      Object.freeze(emptyContextObject);
    }
    var contextStackCursor = createCursor(emptyContextObject);
    var didPerformWorkStackCursor = createCursor(false);
    var previousContext = emptyContextObject;
    function getUnmaskedContext(workInProgress2, Component, didPushOwnContextIfProvider) {
      {
        if (didPushOwnContextIfProvider && isContextProvider(Component)) {
          return previousContext;
        }
        return contextStackCursor.current;
      }
    }
    function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
      {
        var instance = workInProgress2.stateNode;
        instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
        instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
      }
    }
    function getMaskedContext(workInProgress2, unmaskedContext) {
      {
        var type = workInProgress2.type;
        var contextTypes = type.contextTypes;
        if (!contextTypes) {
          return emptyContextObject;
        }
        var instance = workInProgress2.stateNode;
        if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
          return instance.__reactInternalMemoizedMaskedChildContext;
        }
        var context = {};
        for (var key in contextTypes) {
          context[key] = unmaskedContext[key];
        }
        {
          var name = getComponentNameFromFiber(workInProgress2) || "Unknown";
          checkPropTypes(contextTypes, context, "context", name);
        }
        if (instance) {
          cacheContext(workInProgress2, unmaskedContext, context);
        }
        return context;
      }
    }
    function hasContextChanged() {
      {
        return didPerformWorkStackCursor.current;
      }
    }
    function isContextProvider(type) {
      {
        var childContextTypes = type.childContextTypes;
        return childContextTypes !== null && childContextTypes !== void 0;
      }
    }
    function popContext(fiber) {
      {
        pop(didPerformWorkStackCursor, fiber);
        pop(contextStackCursor, fiber);
      }
    }
    function popTopLevelContextObject(fiber) {
      {
        pop(didPerformWorkStackCursor, fiber);
        pop(contextStackCursor, fiber);
      }
    }
    function pushTopLevelContextObject(fiber, context, didChange) {
      {
        if (contextStackCursor.current !== emptyContextObject) {
          throw new Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
        }
        push(contextStackCursor, context, fiber);
        push(didPerformWorkStackCursor, didChange, fiber);
      }
    }
    function processChildContext(fiber, type, parentContext) {
      {
        var instance = fiber.stateNode;
        var childContextTypes = type.childContextTypes;
        if (typeof instance.getChildContext !== "function") {
          {
            var componentName = getComponentNameFromFiber(fiber) || "Unknown";
            if (!warnedAboutMissingGetChildContext[componentName]) {
              warnedAboutMissingGetChildContext[componentName] = true;
              error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
            }
          }
          return parentContext;
        }
        var childContext = instance.getChildContext();
        for (var contextKey in childContext) {
          if (!(contextKey in childContextTypes)) {
            throw new Error((getComponentNameFromFiber(fiber) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
          }
        }
        {
          var name = getComponentNameFromFiber(fiber) || "Unknown";
          checkPropTypes(childContextTypes, childContext, "child context", name);
        }
        return assign({}, parentContext, childContext);
      }
    }
    function pushContextProvider(workInProgress2) {
      {
        var instance = workInProgress2.stateNode;
        var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
        previousContext = contextStackCursor.current;
        push(contextStackCursor, memoizedMergedChildContext, workInProgress2);
        push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
        return true;
      }
    }
    function invalidateContextProvider(workInProgress2, type, didChange) {
      {
        var instance = workInProgress2.stateNode;
        if (!instance) {
          throw new Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
        }
        if (didChange) {
          var mergedContext = processChildContext(workInProgress2, type, previousContext);
          instance.__reactInternalMemoizedMergedChildContext = mergedContext;
          pop(didPerformWorkStackCursor, workInProgress2);
          pop(contextStackCursor, workInProgress2);
          push(contextStackCursor, mergedContext, workInProgress2);
          push(didPerformWorkStackCursor, didChange, workInProgress2);
        } else {
          pop(didPerformWorkStackCursor, workInProgress2);
          push(didPerformWorkStackCursor, didChange, workInProgress2);
        }
      }
    }
    function findCurrentUnmaskedContext(fiber) {
      {
        if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {
          throw new Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
        }
        var node = fiber;
        do {
          switch (node.tag) {
            case HostRoot:
              return node.stateNode.context;
            case ClassComponent: {
              var Component = node.type;
              if (isContextProvider(Component)) {
                return node.stateNode.__reactInternalMemoizedMergedChildContext;
              }
              break;
            }
          }
          node = node.return;
        } while (node !== null);
        throw new Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
      }
    }
    var LegacyRoot = 0;
    var ConcurrentRoot = 1;
    var syncQueue = null;
    var includesLegacySyncCallbacks = false;
    var isFlushingSyncQueue = false;
    function scheduleSyncCallback(callback) {
      if (syncQueue === null) {
        syncQueue = [callback];
      } else {
        syncQueue.push(callback);
      }
    }
    function scheduleLegacySyncCallback(callback) {
      includesLegacySyncCallbacks = true;
      scheduleSyncCallback(callback);
    }
    function flushSyncCallbacksOnlyInLegacyMode() {
      if (includesLegacySyncCallbacks) {
        flushSyncCallbacks();
      }
    }
    function flushSyncCallbacks() {
      if (!isFlushingSyncQueue && syncQueue !== null) {
        isFlushingSyncQueue = true;
        var i = 0;
        var previousUpdatePriority = getCurrentUpdatePriority();
        try {
          var isSync = true;
          var queue = syncQueue;
          setCurrentUpdatePriority(DiscreteEventPriority);
          for (; i < queue.length; i++) {
            var callback = queue[i];
            do {
              callback = callback(isSync);
            } while (callback !== null);
          }
          syncQueue = null;
          includesLegacySyncCallbacks = false;
        } catch (error2) {
          if (syncQueue !== null) {
            syncQueue = syncQueue.slice(i + 1);
          }
          scheduleCallback(ImmediatePriority, flushSyncCallbacks);
          throw error2;
        } finally {
          setCurrentUpdatePriority(previousUpdatePriority);
          isFlushingSyncQueue = false;
        }
      }
      return null;
    }
    var forkStack = [];
    var forkStackIndex = 0;
    var treeForkProvider = null;
    var treeForkCount = 0;
    var idStack = [];
    var idStackIndex = 0;
    var treeContextProvider = null;
    var treeContextId = 1;
    var treeContextOverflow = "";
    function isForkedChild(workInProgress2) {
      warnIfNotHydrating();
      return (workInProgress2.flags & Forked) !== NoFlags;
    }
    function getForksAtLevel(workInProgress2) {
      warnIfNotHydrating();
      return treeForkCount;
    }
    function getTreeId() {
      var overflow = treeContextOverflow;
      var idWithLeadingBit = treeContextId;
      var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
      return id.toString(32) + overflow;
    }
    function pushTreeFork(workInProgress2, totalChildren) {
      warnIfNotHydrating();
      forkStack[forkStackIndex++] = treeForkCount;
      forkStack[forkStackIndex++] = treeForkProvider;
      treeForkProvider = workInProgress2;
      treeForkCount = totalChildren;
    }
    function pushTreeId(workInProgress2, totalChildren, index2) {
      warnIfNotHydrating();
      idStack[idStackIndex++] = treeContextId;
      idStack[idStackIndex++] = treeContextOverflow;
      idStack[idStackIndex++] = treeContextProvider;
      treeContextProvider = workInProgress2;
      var baseIdWithLeadingBit = treeContextId;
      var baseOverflow = treeContextOverflow;
      var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
      var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
      var slot = index2 + 1;
      var length = getBitLength(totalChildren) + baseLength;
      if (length > 30) {
        var numberOfOverflowBits = baseLength - baseLength % 5;
        var newOverflowBits = (1 << numberOfOverflowBits) - 1;
        var newOverflow = (baseId & newOverflowBits).toString(32);
        var restOfBaseId = baseId >> numberOfOverflowBits;
        var restOfBaseLength = baseLength - numberOfOverflowBits;
        var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
        var restOfNewBits = slot << restOfBaseLength;
        var id = restOfNewBits | restOfBaseId;
        var overflow = newOverflow + baseOverflow;
        treeContextId = 1 << restOfLength | id;
        treeContextOverflow = overflow;
      } else {
        var newBits = slot << baseLength;
        var _id = newBits | baseId;
        var _overflow = baseOverflow;
        treeContextId = 1 << length | _id;
        treeContextOverflow = _overflow;
      }
    }
    function pushMaterializedTreeId(workInProgress2) {
      warnIfNotHydrating();
      var returnFiber = workInProgress2.return;
      if (returnFiber !== null) {
        var numberOfForks = 1;
        var slotIndex = 0;
        pushTreeFork(workInProgress2, numberOfForks);
        pushTreeId(workInProgress2, numberOfForks, slotIndex);
      }
    }
    function getBitLength(number) {
      return 32 - clz32(number);
    }
    function getLeadingBit(id) {
      return 1 << getBitLength(id) - 1;
    }
    function popTreeContext(workInProgress2) {
      while (workInProgress2 === treeForkProvider) {
        treeForkProvider = forkStack[--forkStackIndex];
        forkStack[forkStackIndex] = null;
        treeForkCount = forkStack[--forkStackIndex];
        forkStack[forkStackIndex] = null;
      }
      while (workInProgress2 === treeContextProvider) {
        treeContextProvider = idStack[--idStackIndex];
        idStack[idStackIndex] = null;
        treeContextOverflow = idStack[--idStackIndex];
        idStack[idStackIndex] = null;
        treeContextId = idStack[--idStackIndex];
        idStack[idStackIndex] = null;
      }
    }
    function getSuspendedTreeContext() {
      warnIfNotHydrating();
      if (treeContextProvider !== null) {
        return {
          id: treeContextId,
          overflow: treeContextOverflow
        };
      } else {
        return null;
      }
    }
    function restoreSuspendedTreeContext(workInProgress2, suspendedContext) {
      warnIfNotHydrating();
      idStack[idStackIndex++] = treeContextId;
      idStack[idStackIndex++] = treeContextOverflow;
      idStack[idStackIndex++] = treeContextProvider;
      treeContextId = suspendedContext.id;
      treeContextOverflow = suspendedContext.overflow;
      treeContextProvider = workInProgress2;
    }
    function warnIfNotHydrating() {
      {
        if (!getIsHydrating()) {
          error("Expected to be hydrating. This is a bug in React. Please file an issue.");
        }
      }
    }
    var hydrationParentFiber = null;
    var nextHydratableInstance = null;
    var isHydrating = false;
    var didSuspendOrErrorDEV = false;
    var hydrationErrors = null;
    function warnIfHydrating() {
      {
        if (isHydrating) {
          error("We should not be hydrating here. This is a bug in React. Please file a bug.");
        }
      }
    }
    function markDidThrowWhileHydratingDEV() {
      {
        didSuspendOrErrorDEV = true;
      }
    }
    function didSuspendOrErrorWhileHydratingDEV() {
      {
        return didSuspendOrErrorDEV;
      }
    }
    function enterHydrationState(fiber) {
      var parentInstance = fiber.stateNode.containerInfo;
      nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);
      hydrationParentFiber = fiber;
      isHydrating = true;
      hydrationErrors = null;
      didSuspendOrErrorDEV = false;
      return true;
    }
    function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {
      nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);
      hydrationParentFiber = fiber;
      isHydrating = true;
      hydrationErrors = null;
      didSuspendOrErrorDEV = false;
      if (treeContext !== null) {
        restoreSuspendedTreeContext(fiber, treeContext);
      }
      return true;
    }
    function warnUnhydratedInstance(returnFiber, instance) {
      {
        switch (returnFiber.tag) {
          case HostRoot: {
            didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance);
            break;
          }
          case HostComponent: {
            var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
            didNotHydrateInstance(
              returnFiber.type,
              returnFiber.memoizedProps,
              returnFiber.stateNode,
              instance,
              // TODO: Delete this argument when we remove the legacy root API.
              isConcurrentMode
            );
            break;
          }
          case SuspenseComponent: {
            var suspenseState = returnFiber.memoizedState;
            if (suspenseState.dehydrated !== null)
              didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance);
            break;
          }
        }
      }
    }
    function deleteHydratableInstance(returnFiber, instance) {
      warnUnhydratedInstance(returnFiber, instance);
      var childToDelete = createFiberFromHostInstanceForDeletion();
      childToDelete.stateNode = instance;
      childToDelete.return = returnFiber;
      var deletions = returnFiber.deletions;
      if (deletions === null) {
        returnFiber.deletions = [childToDelete];
        returnFiber.flags |= ChildDeletion;
      } else {
        deletions.push(childToDelete);
      }
    }
    function warnNonhydratedInstance(returnFiber, fiber) {
      {
        if (didSuspendOrErrorDEV) {
          return;
        }
        switch (returnFiber.tag) {
          case HostRoot: {
            var parentContainer = returnFiber.stateNode.containerInfo;
            switch (fiber.tag) {
              case HostComponent:
                var type = fiber.type;
                var props = fiber.pendingProps;
                didNotFindHydratableInstanceWithinContainer(parentContainer, type);
                break;
              case HostText:
                var text = fiber.pendingProps;
                didNotFindHydratableTextInstanceWithinContainer(parentContainer, text);
                break;
            }
            break;
          }
          case HostComponent: {
            var parentType = returnFiber.type;
            var parentProps = returnFiber.memoizedProps;
            var parentInstance = returnFiber.stateNode;
            switch (fiber.tag) {
              case HostComponent: {
                var _type = fiber.type;
                var _props = fiber.pendingProps;
                var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                didNotFindHydratableInstance(
                  parentType,
                  parentProps,
                  parentInstance,
                  _type,
                  _props,
                  // TODO: Delete this argument when we remove the legacy root API.
                  isConcurrentMode
                );
                break;
              }
              case HostText: {
                var _text = fiber.pendingProps;
                var _isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                didNotFindHydratableTextInstance(
                  parentType,
                  parentProps,
                  parentInstance,
                  _text,
                  // TODO: Delete this argument when we remove the legacy root API.
                  _isConcurrentMode
                );
                break;
              }
            }
            break;
          }
          case SuspenseComponent: {
            var suspenseState = returnFiber.memoizedState;
            var _parentInstance = suspenseState.dehydrated;
            if (_parentInstance !== null)
              switch (fiber.tag) {
                case HostComponent:
                  var _type2 = fiber.type;
                  var _props2 = fiber.pendingProps;
                  didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2);
                  break;
                case HostText:
                  var _text2 = fiber.pendingProps;
                  didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);
                  break;
              }
            break;
          }
          default:
            return;
        }
      }
    }
    function insertNonHydratedInstance(returnFiber, fiber) {
      fiber.flags = fiber.flags & ~Hydrating | Placement;
      warnNonhydratedInstance(returnFiber, fiber);
    }
    function tryHydrate(fiber, nextInstance) {
      switch (fiber.tag) {
        case HostComponent: {
          var type = fiber.type;
          var props = fiber.pendingProps;
          var instance = canHydrateInstance(nextInstance, type);
          if (instance !== null) {
            fiber.stateNode = instance;
            hydrationParentFiber = fiber;
            nextHydratableInstance = getFirstHydratableChild(instance);
            return true;
          }
          return false;
        }
        case HostText: {
          var text = fiber.pendingProps;
          var textInstance = canHydrateTextInstance(nextInstance, text);
          if (textInstance !== null) {
            fiber.stateNode = textInstance;
            hydrationParentFiber = fiber;
            nextHydratableInstance = null;
            return true;
          }
          return false;
        }
        case SuspenseComponent: {
          var suspenseInstance = canHydrateSuspenseInstance(nextInstance);
          if (suspenseInstance !== null) {
            var suspenseState = {
              dehydrated: suspenseInstance,
              treeContext: getSuspendedTreeContext(),
              retryLane: OffscreenLane
            };
            fiber.memoizedState = suspenseState;
            var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);
            dehydratedFragment.return = fiber;
            fiber.child = dehydratedFragment;
            hydrationParentFiber = fiber;
            nextHydratableInstance = null;
            return true;
          }
          return false;
        }
        default:
          return false;
      }
    }
    function shouldClientRenderOnMismatch(fiber) {
      return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;
    }
    function throwOnHydrationMismatch(fiber) {
      throw new Error("Hydration failed because the initial UI does not match what was rendered on the server.");
    }
    function tryToClaimNextHydratableInstance(fiber) {
      if (!isHydrating) {
        return;
      }
      var nextInstance = nextHydratableInstance;
      if (!nextInstance) {
        if (shouldClientRenderOnMismatch(fiber)) {
          warnNonhydratedInstance(hydrationParentFiber, fiber);
          throwOnHydrationMismatch();
        }
        insertNonHydratedInstance(hydrationParentFiber, fiber);
        isHydrating = false;
        hydrationParentFiber = fiber;
        return;
      }
      var firstAttemptedInstance = nextInstance;
      if (!tryHydrate(fiber, nextInstance)) {
        if (shouldClientRenderOnMismatch(fiber)) {
          warnNonhydratedInstance(hydrationParentFiber, fiber);
          throwOnHydrationMismatch();
        }
        nextInstance = getNextHydratableSibling(firstAttemptedInstance);
        var prevHydrationParentFiber = hydrationParentFiber;
        if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
          insertNonHydratedInstance(hydrationParentFiber, fiber);
          isHydrating = false;
          hydrationParentFiber = fiber;
          return;
        }
        deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);
      }
    }
    function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
      var instance = fiber.stateNode;
      var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
      var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev);
      fiber.updateQueue = updatePayload;
      if (updatePayload !== null) {
        return true;
      }
      return false;
    }
    function prepareToHydrateHostTextInstance(fiber) {
      var textInstance = fiber.stateNode;
      var textContent = fiber.memoizedProps;
      var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
      if (shouldUpdate) {
        var returnFiber = hydrationParentFiber;
        if (returnFiber !== null) {
          switch (returnFiber.tag) {
            case HostRoot: {
              var parentContainer = returnFiber.stateNode.containerInfo;
              var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
              didNotMatchHydratedContainerTextInstance(
                parentContainer,
                textInstance,
                textContent,
                // TODO: Delete this argument when we remove the legacy root API.
                isConcurrentMode
              );
              break;
            }
            case HostComponent: {
              var parentType = returnFiber.type;
              var parentProps = returnFiber.memoizedProps;
              var parentInstance = returnFiber.stateNode;
              var _isConcurrentMode2 = (returnFiber.mode & ConcurrentMode) !== NoMode;
              didNotMatchHydratedTextInstance(
                parentType,
                parentProps,
                parentInstance,
                textInstance,
                textContent,
                // TODO: Delete this argument when we remove the legacy root API.
                _isConcurrentMode2
              );
              break;
            }
          }
        }
      }
      return shouldUpdate;
    }
    function prepareToHydrateHostSuspenseInstance(fiber) {
      var suspenseState = fiber.memoizedState;
      var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
      if (!suspenseInstance) {
        throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
      }
      hydrateSuspenseInstance(suspenseInstance, fiber);
    }
    function skipPastDehydratedSuspenseInstance(fiber) {
      var suspenseState = fiber.memoizedState;
      var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
      if (!suspenseInstance) {
        throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
      }
      return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
    }
    function popToNextHostParent(fiber) {
      var parent = fiber.return;
      while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
        parent = parent.return;
      }
      hydrationParentFiber = parent;
    }
    function popHydrationState(fiber) {
      if (fiber !== hydrationParentFiber) {
        return false;
      }
      if (!isHydrating) {
        popToNextHostParent(fiber);
        isHydrating = true;
        return false;
      }
      if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {
        var nextInstance = nextHydratableInstance;
        if (nextInstance) {
          if (shouldClientRenderOnMismatch(fiber)) {
            warnIfUnhydratedTailNodes(fiber);
            throwOnHydrationMismatch();
          } else {
            while (nextInstance) {
              deleteHydratableInstance(fiber, nextInstance);
              nextInstance = getNextHydratableSibling(nextInstance);
            }
          }
        }
      }
      popToNextHostParent(fiber);
      if (fiber.tag === SuspenseComponent) {
        nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
      } else {
        nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
      }
      return true;
    }
    function hasUnhydratedTailNodes() {
      return isHydrating && nextHydratableInstance !== null;
    }
    function warnIfUnhydratedTailNodes(fiber) {
      var nextInstance = nextHydratableInstance;
      while (nextInstance) {
        warnUnhydratedInstance(fiber, nextInstance);
        nextInstance = getNextHydratableSibling(nextInstance);
      }
    }
    function resetHydrationState() {
      hydrationParentFiber = null;
      nextHydratableInstance = null;
      isHydrating = false;
      didSuspendOrErrorDEV = false;
    }
    function upgradeHydrationErrorsToRecoverable() {
      if (hydrationErrors !== null) {
        queueRecoverableErrors(hydrationErrors);
        hydrationErrors = null;
      }
    }
    function getIsHydrating() {
      return isHydrating;
    }
    function queueHydrationError(error2) {
      if (hydrationErrors === null) {
        hydrationErrors = [error2];
      } else {
        hydrationErrors.push(error2);
      }
    }
    var ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
    var NoTransition = null;
    function requestCurrentTransition() {
      return ReactCurrentBatchConfig$1.transition;
    }
    var ReactStrictModeWarnings = {
      recordUnsafeLifecycleWarnings: function(fiber, instance) {
      },
      flushPendingUnsafeLifecycleWarnings: function() {
      },
      recordLegacyContextWarning: function(fiber, instance) {
      },
      flushLegacyContextWarning: function() {
      },
      discardPendingWarnings: function() {
      }
    };
    {
      var findStrictRoot = function(fiber) {
        var maybeStrictRoot = null;
        var node = fiber;
        while (node !== null) {
          if (node.mode & StrictLegacyMode) {
            maybeStrictRoot = node;
          }
          node = node.return;
        }
        return maybeStrictRoot;
      };
      var setToSortedString = function(set2) {
        var array = [];
        set2.forEach(function(value) {
          array.push(value);
        });
        return array.sort().join(", ");
      };
      var pendingComponentWillMountWarnings = [];
      var pendingUNSAFE_ComponentWillMountWarnings = [];
      var pendingComponentWillReceivePropsWarnings = [];
      var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
      var pendingComponentWillUpdateWarnings = [];
      var pendingUNSAFE_ComponentWillUpdateWarnings = [];
      var didWarnAboutUnsafeLifecycles = /* @__PURE__ */ new Set();
      ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
        if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
          return;
        }
        if (typeof instance.componentWillMount === "function" && // Don't warn about react-lifecycles-compat polyfilled components.
        instance.componentWillMount.__suppressDeprecationWarning !== true) {
          pendingComponentWillMountWarnings.push(fiber);
        }
        if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === "function") {
          pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
        }
        if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
          pendingComponentWillReceivePropsWarnings.push(fiber);
        }
        if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
          pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
        }
        if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
          pendingComponentWillUpdateWarnings.push(fiber);
        }
        if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
          pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
        }
      };
      ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
        var componentWillMountUniqueNames = /* @__PURE__ */ new Set();
        if (pendingComponentWillMountWarnings.length > 0) {
          pendingComponentWillMountWarnings.forEach(function(fiber) {
            componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
            didWarnAboutUnsafeLifecycles.add(fiber.type);
          });
          pendingComponentWillMountWarnings = [];
        }
        var UNSAFE_componentWillMountUniqueNames = /* @__PURE__ */ new Set();
        if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
          pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
            UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
            didWarnAboutUnsafeLifecycles.add(fiber.type);
          });
          pendingUNSAFE_ComponentWillMountWarnings = [];
        }
        var componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
        if (pendingComponentWillReceivePropsWarnings.length > 0) {
          pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
            componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
            didWarnAboutUnsafeLifecycles.add(fiber.type);
          });
          pendingComponentWillReceivePropsWarnings = [];
        }
        var UNSAFE_componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
        if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
          pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
            UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
            didWarnAboutUnsafeLifecycles.add(fiber.type);
          });
          pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
        }
        var componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
        if (pendingComponentWillUpdateWarnings.length > 0) {
          pendingComponentWillUpdateWarnings.forEach(function(fiber) {
            componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
            didWarnAboutUnsafeLifecycles.add(fiber.type);
          });
          pendingComponentWillUpdateWarnings = [];
        }
        var UNSAFE_componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
        if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
          pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
            UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
            didWarnAboutUnsafeLifecycles.add(fiber.type);
          });
          pendingUNSAFE_ComponentWillUpdateWarnings = [];
        }
        if (UNSAFE_componentWillMountUniqueNames.size > 0) {
          var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
          error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
        }
        if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
          var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
          error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
        }
        if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
          var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
          error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
        }
        if (componentWillMountUniqueNames.size > 0) {
          var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
          warn("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
        }
        if (componentWillReceivePropsUniqueNames.size > 0) {
          var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
          warn("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
        }
        if (componentWillUpdateUniqueNames.size > 0) {
          var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
          warn("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
        }
      };
      var pendingLegacyContextWarning = /* @__PURE__ */ new Map();
      var didWarnAboutLegacyContext = /* @__PURE__ */ new Set();
      ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
        var strictRoot = findStrictRoot(fiber);
        if (strictRoot === null) {
          error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
          return;
        }
        if (didWarnAboutLegacyContext.has(fiber.type)) {
          return;
        }
        var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
        if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
          if (warningsForRoot === void 0) {
            warningsForRoot = [];
            pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
          }
          warningsForRoot.push(fiber);
        }
      };
      ReactStrictModeWarnings.flushLegacyContextWarning = function() {
        pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
          if (fiberArray.length === 0) {
            return;
          }
          var firstFiber = fiberArray[0];
          var uniqueNames = /* @__PURE__ */ new Set();
          fiberArray.forEach(function(fiber) {
            uniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
            didWarnAboutLegacyContext.add(fiber.type);
          });
          var sortedNames = setToSortedString(uniqueNames);
          try {
            setCurrentFiber(firstFiber);
            error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
          } finally {
            resetCurrentFiber();
          }
        });
      };
      ReactStrictModeWarnings.discardPendingWarnings = function() {
        pendingComponentWillMountWarnings = [];
        pendingUNSAFE_ComponentWillMountWarnings = [];
        pendingComponentWillReceivePropsWarnings = [];
        pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
        pendingComponentWillUpdateWarnings = [];
        pendingUNSAFE_ComponentWillUpdateWarnings = [];
        pendingLegacyContextWarning = /* @__PURE__ */ new Map();
      };
    }
    function resolveDefaultProps(Component, baseProps) {
      if (Component && Component.defaultProps) {
        var props = assign({}, baseProps);
        var defaultProps = Component.defaultProps;
        for (var propName in defaultProps) {
          if (props[propName] === void 0) {
            props[propName] = defaultProps[propName];
          }
        }
        return props;
      }
      return baseProps;
    }
    var valueCursor = createCursor(null);
    var rendererSigil;
    {
      rendererSigil = {};
    }
    var currentlyRenderingFiber = null;
    var lastContextDependency = null;
    var lastFullyObservedContext = null;
    var isDisallowedContextReadInDEV = false;
    function resetContextDependencies() {
      currentlyRenderingFiber = null;
      lastContextDependency = null;
      lastFullyObservedContext = null;
      {
        isDisallowedContextReadInDEV = false;
      }
    }
    function enterDisallowedContextReadInDEV() {
      {
        isDisallowedContextReadInDEV = true;
      }
    }
    function exitDisallowedContextReadInDEV() {
      {
        isDisallowedContextReadInDEV = false;
      }
    }
    function pushProvider(providerFiber, context, nextValue) {
      {
        push(valueCursor, context._currentValue, providerFiber);
        context._currentValue = nextValue;
        {
          if (context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
            error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
          }
          context._currentRenderer = rendererSigil;
        }
      }
    }
    function popProvider(context, providerFiber) {
      var currentValue = valueCursor.current;
      pop(valueCursor, providerFiber);
      {
        {
          context._currentValue = currentValue;
        }
      }
    }
    function scheduleContextWorkOnParentPath(parent, renderLanes2, propagationRoot) {
      var node = parent;
      while (node !== null) {
        var alternate = node.alternate;
        if (!isSubsetOfLanes(node.childLanes, renderLanes2)) {
          node.childLanes = mergeLanes(node.childLanes, renderLanes2);
          if (alternate !== null) {
            alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
          }
        } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2)) {
          alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
        }
        if (node === propagationRoot) {
          break;
        }
        node = node.return;
      }
      {
        if (node !== propagationRoot) {
          error("Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue.");
        }
      }
    }
    function propagateContextChange(workInProgress2, context, renderLanes2) {
      {
        propagateContextChange_eager(workInProgress2, context, renderLanes2);
      }
    }
    function propagateContextChange_eager(workInProgress2, context, renderLanes2) {
      var fiber = workInProgress2.child;
      if (fiber !== null) {
        fiber.return = workInProgress2;
      }
      while (fiber !== null) {
        var nextFiber = void 0;
        var list = fiber.dependencies;
        if (list !== null) {
          nextFiber = fiber.child;
          var dependency = list.firstContext;
          while (dependency !== null) {
            if (dependency.context === context) {
              if (fiber.tag === ClassComponent) {
                var lane = pickArbitraryLane(renderLanes2);
                var update = createUpdate(NoTimestamp, lane);
                update.tag = ForceUpdate;
                var updateQueue = fiber.updateQueue;
                if (updateQueue === null)
                  ;
                else {
                  var sharedQueue = updateQueue.shared;
                  var pending = sharedQueue.pending;
                  if (pending === null) {
                    update.next = update;
                  } else {
                    update.next = pending.next;
                    pending.next = update;
                  }
                  sharedQueue.pending = update;
                }
              }
              fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
              var alternate = fiber.alternate;
              if (alternate !== null) {
                alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
              }
              scheduleContextWorkOnParentPath(fiber.return, renderLanes2, workInProgress2);
              list.lanes = mergeLanes(list.lanes, renderLanes2);
              break;
            }
            dependency = dependency.next;
          }
        } else if (fiber.tag === ContextProvider) {
          nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
        } else if (fiber.tag === DehydratedFragment) {
          var parentSuspense = fiber.return;
          if (parentSuspense === null) {
            throw new Error("We just came from a parent so we must have had a parent. This is a bug in React.");
          }
          parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes2);
          var _alternate = parentSuspense.alternate;
          if (_alternate !== null) {
            _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes2);
          }
          scheduleContextWorkOnParentPath(parentSuspense, renderLanes2, workInProgress2);
          nextFiber = fiber.sibling;
        } else {
          nextFiber = fiber.child;
        }
        if (nextFiber !== null) {
          nextFiber.return = fiber;
        } else {
          nextFiber = fiber;
          while (nextFiber !== null) {
            if (nextFiber === workInProgress2) {
              nextFiber = null;
              break;
            }
            var sibling = nextFiber.sibling;
            if (sibling !== null) {
              sibling.return = nextFiber.return;
              nextFiber = sibling;
              break;
            }
            nextFiber = nextFiber.return;
          }
        }
        fiber = nextFiber;
      }
    }
    function prepareToReadContext(workInProgress2, renderLanes2) {
      currentlyRenderingFiber = workInProgress2;
      lastContextDependency = null;
      lastFullyObservedContext = null;
      var dependencies = workInProgress2.dependencies;
      if (dependencies !== null) {
        {
          var firstContext = dependencies.firstContext;
          if (firstContext !== null) {
            if (includesSomeLane(dependencies.lanes, renderLanes2)) {
              markWorkInProgressReceivedUpdate();
            }
            dependencies.firstContext = null;
          }
        }
      }
    }
    function readContext(context) {
      {
        if (isDisallowedContextReadInDEV) {
          error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
        }
      }
      var value = context._currentValue;
      if (lastFullyObservedContext === context)
        ;
      else {
        var contextItem = {
          context,
          memoizedValue: value,
          next: null
        };
        if (lastContextDependency === null) {
          if (currentlyRenderingFiber === null) {
            throw new Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
          }
          lastContextDependency = contextItem;
          currentlyRenderingFiber.dependencies = {
            lanes: NoLanes,
            firstContext: contextItem
          };
        } else {
          lastContextDependency = lastContextDependency.next = contextItem;
        }
      }
      return value;
    }
    var concurrentQueues = null;
    function pushConcurrentUpdateQueue(queue) {
      if (concurrentQueues === null) {
        concurrentQueues = [queue];
      } else {
        concurrentQueues.push(queue);
      }
    }
    function finishQueueingConcurrentUpdates() {
      if (concurrentQueues !== null) {
        for (var i = 0; i < concurrentQueues.length; i++) {
          var queue = concurrentQueues[i];
          var lastInterleavedUpdate = queue.interleaved;
          if (lastInterleavedUpdate !== null) {
            queue.interleaved = null;
            var firstInterleavedUpdate = lastInterleavedUpdate.next;
            var lastPendingUpdate = queue.pending;
            if (lastPendingUpdate !== null) {
              var firstPendingUpdate = lastPendingUpdate.next;
              lastPendingUpdate.next = firstInterleavedUpdate;
              lastInterleavedUpdate.next = firstPendingUpdate;
            }
            queue.pending = lastInterleavedUpdate;
          }
        }
        concurrentQueues = null;
      }
    }
    function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
      var interleaved = queue.interleaved;
      if (interleaved === null) {
        update.next = update;
        pushConcurrentUpdateQueue(queue);
      } else {
        update.next = interleaved.next;
        interleaved.next = update;
      }
      queue.interleaved = update;
      return markUpdateLaneFromFiberToRoot(fiber, lane);
    }
    function enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane) {
      var interleaved = queue.interleaved;
      if (interleaved === null) {
        update.next = update;
        pushConcurrentUpdateQueue(queue);
      } else {
        update.next = interleaved.next;
        interleaved.next = update;
      }
      queue.interleaved = update;
    }
    function enqueueConcurrentClassUpdate(fiber, queue, update, lane) {
      var interleaved = queue.interleaved;
      if (interleaved === null) {
        update.next = update;
        pushConcurrentUpdateQueue(queue);
      } else {
        update.next = interleaved.next;
        interleaved.next = update;
      }
      queue.interleaved = update;
      return markUpdateLaneFromFiberToRoot(fiber, lane);
    }
    function enqueueConcurrentRenderForLane(fiber, lane) {
      return markUpdateLaneFromFiberToRoot(fiber, lane);
    }
    var unsafe_markUpdateLaneFromFiberToRoot = markUpdateLaneFromFiberToRoot;
    function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
      sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
      var alternate = sourceFiber.alternate;
      if (alternate !== null) {
        alternate.lanes = mergeLanes(alternate.lanes, lane);
      }
      {
        if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
          warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
        }
      }
      var node = sourceFiber;
      var parent = sourceFiber.return;
      while (parent !== null) {
        parent.childLanes = mergeLanes(parent.childLanes, lane);
        alternate = parent.alternate;
        if (alternate !== null) {
          alternate.childLanes = mergeLanes(alternate.childLanes, lane);
        } else {
          {
            if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
              warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
            }
          }
        }
        node = parent;
        parent = parent.return;
      }
      if (node.tag === HostRoot) {
        var root2 = node.stateNode;
        return root2;
      } else {
        return null;
      }
    }
    var UpdateState = 0;
    var ReplaceState = 1;
    var ForceUpdate = 2;
    var CaptureUpdate = 3;
    var hasForceUpdate = false;
    var didWarnUpdateInsideUpdate;
    var currentlyProcessingQueue;
    {
      didWarnUpdateInsideUpdate = false;
      currentlyProcessingQueue = null;
    }
    function initializeUpdateQueue(fiber) {
      var queue = {
        baseState: fiber.memoizedState,
        firstBaseUpdate: null,
        lastBaseUpdate: null,
        shared: {
          pending: null,
          interleaved: null,
          lanes: NoLanes
        },
        effects: null
      };
      fiber.updateQueue = queue;
    }
    function cloneUpdateQueue(current2, workInProgress2) {
      var queue = workInProgress2.updateQueue;
      var currentQueue = current2.updateQueue;
      if (queue === currentQueue) {
        var clone = {
          baseState: currentQueue.baseState,
          firstBaseUpdate: currentQueue.firstBaseUpdate,
          lastBaseUpdate: currentQueue.lastBaseUpdate,
          shared: currentQueue.shared,
          effects: currentQueue.effects
        };
        workInProgress2.updateQueue = clone;
      }
    }
    function createUpdate(eventTime, lane) {
      var update = {
        eventTime,
        lane,
        tag: UpdateState,
        payload: null,
        callback: null,
        next: null
      };
      return update;
    }
    function enqueueUpdate(fiber, update, lane) {
      var updateQueue = fiber.updateQueue;
      if (updateQueue === null) {
        return null;
      }
      var sharedQueue = updateQueue.shared;
      {
        if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
          error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
          didWarnUpdateInsideUpdate = true;
        }
      }
      if (isUnsafeClassRenderPhaseUpdate()) {
        var pending = sharedQueue.pending;
        if (pending === null) {
          update.next = update;
        } else {
          update.next = pending.next;
          pending.next = update;
        }
        sharedQueue.pending = update;
        return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);
      } else {
        return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane);
      }
    }
    function entangleTransitions(root2, fiber, lane) {
      var updateQueue = fiber.updateQueue;
      if (updateQueue === null) {
        return;
      }
      var sharedQueue = updateQueue.shared;
      if (isTransitionLane(lane)) {
        var queueLanes = sharedQueue.lanes;
        queueLanes = intersectLanes(queueLanes, root2.pendingLanes);
        var newQueueLanes = mergeLanes(queueLanes, lane);
        sharedQueue.lanes = newQueueLanes;
        markRootEntangled(root2, newQueueLanes);
      }
    }
    function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
      var queue = workInProgress2.updateQueue;
      var current2 = workInProgress2.alternate;
      if (current2 !== null) {
        var currentQueue = current2.updateQueue;
        if (queue === currentQueue) {
          var newFirst = null;
          var newLast = null;
          var firstBaseUpdate = queue.firstBaseUpdate;
          if (firstBaseUpdate !== null) {
            var update = firstBaseUpdate;
            do {
              var clone = {
                eventTime: update.eventTime,
                lane: update.lane,
                tag: update.tag,
                payload: update.payload,
                callback: update.callback,
                next: null
              };
              if (newLast === null) {
                newFirst = newLast = clone;
              } else {
                newLast.next = clone;
                newLast = clone;
              }
              update = update.next;
            } while (update !== null);
            if (newLast === null) {
              newFirst = newLast = capturedUpdate;
            } else {
              newLast.next = capturedUpdate;
              newLast = capturedUpdate;
            }
          } else {
            newFirst = newLast = capturedUpdate;
          }
          queue = {
            baseState: currentQueue.baseState,
            firstBaseUpdate: newFirst,
            lastBaseUpdate: newLast,
            shared: currentQueue.shared,
            effects: currentQueue.effects
          };
          workInProgress2.updateQueue = queue;
          return;
        }
      }
      var lastBaseUpdate = queue.lastBaseUpdate;
      if (lastBaseUpdate === null) {
        queue.firstBaseUpdate = capturedUpdate;
      } else {
        lastBaseUpdate.next = capturedUpdate;
      }
      queue.lastBaseUpdate = capturedUpdate;
    }
    function getStateFromUpdate(workInProgress2, queue, update, prevState, nextProps, instance) {
      switch (update.tag) {
        case ReplaceState: {
          var payload = update.payload;
          if (typeof payload === "function") {
            {
              enterDisallowedContextReadInDEV();
            }
            var nextState = payload.call(instance, prevState, nextProps);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  payload.call(instance, prevState, nextProps);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              exitDisallowedContextReadInDEV();
            }
            return nextState;
          }
          return payload;
        }
        case CaptureUpdate: {
          workInProgress2.flags = workInProgress2.flags & ~ShouldCapture | DidCapture;
        }
        case UpdateState: {
          var _payload = update.payload;
          var partialState;
          if (typeof _payload === "function") {
            {
              enterDisallowedContextReadInDEV();
            }
            partialState = _payload.call(instance, prevState, nextProps);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  _payload.call(instance, prevState, nextProps);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              exitDisallowedContextReadInDEV();
            }
          } else {
            partialState = _payload;
          }
          if (partialState === null || partialState === void 0) {
            return prevState;
          }
          return assign({}, prevState, partialState);
        }
        case ForceUpdate: {
          hasForceUpdate = true;
          return prevState;
        }
      }
      return prevState;
    }
    function processUpdateQueue(workInProgress2, props, instance, renderLanes2) {
      var queue = workInProgress2.updateQueue;
      hasForceUpdate = false;
      {
        currentlyProcessingQueue = queue.shared;
      }
      var firstBaseUpdate = queue.firstBaseUpdate;
      var lastBaseUpdate = queue.lastBaseUpdate;
      var pendingQueue = queue.shared.pending;
      if (pendingQueue !== null) {
        queue.shared.pending = null;
        var lastPendingUpdate = pendingQueue;
        var firstPendingUpdate = lastPendingUpdate.next;
        lastPendingUpdate.next = null;
        if (lastBaseUpdate === null) {
          firstBaseUpdate = firstPendingUpdate;
        } else {
          lastBaseUpdate.next = firstPendingUpdate;
        }
        lastBaseUpdate = lastPendingUpdate;
        var current2 = workInProgress2.alternate;
        if (current2 !== null) {
          var currentQueue = current2.updateQueue;
          var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
          if (currentLastBaseUpdate !== lastBaseUpdate) {
            if (currentLastBaseUpdate === null) {
              currentQueue.firstBaseUpdate = firstPendingUpdate;
            } else {
              currentLastBaseUpdate.next = firstPendingUpdate;
            }
            currentQueue.lastBaseUpdate = lastPendingUpdate;
          }
        }
      }
      if (firstBaseUpdate !== null) {
        var newState = queue.baseState;
        var newLanes = NoLanes;
        var newBaseState = null;
        var newFirstBaseUpdate = null;
        var newLastBaseUpdate = null;
        var update = firstBaseUpdate;
        do {
          var updateLane = update.lane;
          var updateEventTime = update.eventTime;
          if (!isSubsetOfLanes(renderLanes2, updateLane)) {
            var clone = {
              eventTime: updateEventTime,
              lane: updateLane,
              tag: update.tag,
              payload: update.payload,
              callback: update.callback,
              next: null
            };
            if (newLastBaseUpdate === null) {
              newFirstBaseUpdate = newLastBaseUpdate = clone;
              newBaseState = newState;
            } else {
              newLastBaseUpdate = newLastBaseUpdate.next = clone;
            }
            newLanes = mergeLanes(newLanes, updateLane);
          } else {
            if (newLastBaseUpdate !== null) {
              var _clone = {
                eventTime: updateEventTime,
                // This update is going to be committed so we never want uncommit
                // it. Using NoLane works because 0 is a subset of all bitmasks, so
                // this will never be skipped by the check above.
                lane: NoLane,
                tag: update.tag,
                payload: update.payload,
                callback: update.callback,
                next: null
              };
              newLastBaseUpdate = newLastBaseUpdate.next = _clone;
            }
            newState = getStateFromUpdate(workInProgress2, queue, update, newState, props, instance);
            var callback = update.callback;
            if (callback !== null && // If the update was already committed, we should not queue its
            // callback again.
            update.lane !== NoLane) {
              workInProgress2.flags |= Callback;
              var effects = queue.effects;
              if (effects === null) {
                queue.effects = [update];
              } else {
                effects.push(update);
              }
            }
          }
          update = update.next;
          if (update === null) {
            pendingQueue = queue.shared.pending;
            if (pendingQueue === null) {
              break;
            } else {
              var _lastPendingUpdate = pendingQueue;
              var _firstPendingUpdate = _lastPendingUpdate.next;
              _lastPendingUpdate.next = null;
              update = _firstPendingUpdate;
              queue.lastBaseUpdate = _lastPendingUpdate;
              queue.shared.pending = null;
            }
          }
        } while (true);
        if (newLastBaseUpdate === null) {
          newBaseState = newState;
        }
        queue.baseState = newBaseState;
        queue.firstBaseUpdate = newFirstBaseUpdate;
        queue.lastBaseUpdate = newLastBaseUpdate;
        var lastInterleaved = queue.shared.interleaved;
        if (lastInterleaved !== null) {
          var interleaved = lastInterleaved;
          do {
            newLanes = mergeLanes(newLanes, interleaved.lane);
            interleaved = interleaved.next;
          } while (interleaved !== lastInterleaved);
        } else if (firstBaseUpdate === null) {
          queue.shared.lanes = NoLanes;
        }
        markSkippedUpdateLanes(newLanes);
        workInProgress2.lanes = newLanes;
        workInProgress2.memoizedState = newState;
      }
      {
        currentlyProcessingQueue = null;
      }
    }
    function callCallback(callback, context) {
      if (typeof callback !== "function") {
        throw new Error("Invalid argument passed as callback. Expected a function. Instead " + ("received: " + callback));
      }
      callback.call(context);
    }
    function resetHasForceUpdateBeforeProcessing() {
      hasForceUpdate = false;
    }
    function checkHasForceUpdateAfterProcessing() {
      return hasForceUpdate;
    }
    function commitUpdateQueue(finishedWork, finishedQueue, instance) {
      var effects = finishedQueue.effects;
      finishedQueue.effects = null;
      if (effects !== null) {
        for (var i = 0; i < effects.length; i++) {
          var effect = effects[i];
          var callback = effect.callback;
          if (callback !== null) {
            effect.callback = null;
            callCallback(callback, instance);
          }
        }
      }
    }
    var fakeInternalInstance = {};
    var emptyRefsObject = new React.Component().refs;
    var didWarnAboutStateAssignmentForComponent;
    var didWarnAboutUninitializedState;
    var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
    var didWarnAboutLegacyLifecyclesAndDerivedState;
    var didWarnAboutUndefinedDerivedState;
    var warnOnUndefinedDerivedState;
    var warnOnInvalidCallback;
    var didWarnAboutDirectlyAssigningPropsToState;
    var didWarnAboutContextTypeAndContextTypes;
    var didWarnAboutInvalidateContextType;
    {
      didWarnAboutStateAssignmentForComponent = /* @__PURE__ */ new Set();
      didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
      didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set();
      didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set();
      didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set();
      didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
      didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set();
      didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
      var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
      warnOnInvalidCallback = function(callback, callerName) {
        if (callback === null || typeof callback === "function") {
          return;
        }
        var key = callerName + "_" + callback;
        if (!didWarnOnInvalidCallback.has(key)) {
          didWarnOnInvalidCallback.add(key);
          error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
        }
      };
      warnOnUndefinedDerivedState = function(type, partialState) {
        if (partialState === void 0) {
          var componentName = getComponentNameFromType(type) || "Component";
          if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
            didWarnAboutUndefinedDerivedState.add(componentName);
            error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
          }
        }
      };
      Object.defineProperty(fakeInternalInstance, "_processChildContext", {
        enumerable: false,
        value: function() {
          throw new Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
        }
      });
      Object.freeze(fakeInternalInstance);
    }
    function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
      var prevState = workInProgress2.memoizedState;
      var partialState = getDerivedStateFromProps(nextProps, prevState);
      {
        if (workInProgress2.mode & StrictLegacyMode) {
          setIsStrictModeForDevtools(true);
          try {
            partialState = getDerivedStateFromProps(nextProps, prevState);
          } finally {
            setIsStrictModeForDevtools(false);
          }
        }
        warnOnUndefinedDerivedState(ctor, partialState);
      }
      var memoizedState = partialState === null || partialState === void 0 ? prevState : assign({}, prevState, partialState);
      workInProgress2.memoizedState = memoizedState;
      if (workInProgress2.lanes === NoLanes) {
        var updateQueue = workInProgress2.updateQueue;
        updateQueue.baseState = memoizedState;
      }
    }
    var classComponentUpdater = {
      isMounted,
      enqueueSetState: function(inst, payload, callback) {
        var fiber = get(inst);
        var eventTime = requestEventTime();
        var lane = requestUpdateLane(fiber);
        var update = createUpdate(eventTime, lane);
        update.payload = payload;
        if (callback !== void 0 && callback !== null) {
          {
            warnOnInvalidCallback(callback, "setState");
          }
          update.callback = callback;
        }
        var root2 = enqueueUpdate(fiber, update, lane);
        if (root2 !== null) {
          scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
          entangleTransitions(root2, fiber, lane);
        }
        {
          markStateUpdateScheduled(fiber, lane);
        }
      },
      enqueueReplaceState: function(inst, payload, callback) {
        var fiber = get(inst);
        var eventTime = requestEventTime();
        var lane = requestUpdateLane(fiber);
        var update = createUpdate(eventTime, lane);
        update.tag = ReplaceState;
        update.payload = payload;
        if (callback !== void 0 && callback !== null) {
          {
            warnOnInvalidCallback(callback, "replaceState");
          }
          update.callback = callback;
        }
        var root2 = enqueueUpdate(fiber, update, lane);
        if (root2 !== null) {
          scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
          entangleTransitions(root2, fiber, lane);
        }
        {
          markStateUpdateScheduled(fiber, lane);
        }
      },
      enqueueForceUpdate: function(inst, callback) {
        var fiber = get(inst);
        var eventTime = requestEventTime();
        var lane = requestUpdateLane(fiber);
        var update = createUpdate(eventTime, lane);
        update.tag = ForceUpdate;
        if (callback !== void 0 && callback !== null) {
          {
            warnOnInvalidCallback(callback, "forceUpdate");
          }
          update.callback = callback;
        }
        var root2 = enqueueUpdate(fiber, update, lane);
        if (root2 !== null) {
          scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
          entangleTransitions(root2, fiber, lane);
        }
        {
          markForceUpdateScheduled(fiber, lane);
        }
      }
    };
    function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
      var instance = workInProgress2.stateNode;
      if (typeof instance.shouldComponentUpdate === "function") {
        var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
        {
          if (workInProgress2.mode & StrictLegacyMode) {
            setIsStrictModeForDevtools(true);
            try {
              shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
            } finally {
              setIsStrictModeForDevtools(false);
            }
          }
          if (shouldUpdate === void 0) {
            error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentNameFromType(ctor) || "Component");
          }
        }
        return shouldUpdate;
      }
      if (ctor.prototype && ctor.prototype.isPureReactComponent) {
        return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
      }
      return true;
    }
    function checkClassInstance(workInProgress2, ctor, newProps) {
      var instance = workInProgress2.stateNode;
      {
        var name = getComponentNameFromType(ctor) || "Component";
        var renderPresent = instance.render;
        if (!renderPresent) {
          if (ctor.prototype && typeof ctor.prototype.render === "function") {
            error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
          } else {
            error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
          }
        }
        if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
          error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
        }
        if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
          error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
        }
        if (instance.propTypes) {
          error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
        }
        if (instance.contextType) {
          error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
        }
        {
          if (instance.contextTypes) {
            error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
          }
          if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
            didWarnAboutContextTypeAndContextTypes.add(ctor);
            error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
          }
        }
        if (typeof instance.componentShouldUpdate === "function") {
          error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
        }
        if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
          error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component");
        }
        if (typeof instance.componentDidUnmount === "function") {
          error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
        }
        if (typeof instance.componentDidReceiveProps === "function") {
          error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
        }
        if (typeof instance.componentWillRecieveProps === "function") {
          error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
        }
        if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
          error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
        }
        var hasMutatedProps = instance.props !== newProps;
        if (instance.props !== void 0 && hasMutatedProps) {
          error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
        }
        if (instance.defaultProps) {
          error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
        }
        if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
          didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
          error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor));
        }
        if (typeof instance.getDerivedStateFromProps === "function") {
          error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
        }
        if (typeof instance.getDerivedStateFromError === "function") {
          error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
        }
        if (typeof ctor.getSnapshotBeforeUpdate === "function") {
          error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
        }
        var _state = instance.state;
        if (_state && (typeof _state !== "object" || isArray(_state))) {
          error("%s.state: must be set to an object or null", name);
        }
        if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
          error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
        }
      }
    }
    function adoptClassInstance(workInProgress2, instance) {
      instance.updater = classComponentUpdater;
      workInProgress2.stateNode = instance;
      set(instance, workInProgress2);
      {
        instance._reactInternalInstance = fakeInternalInstance;
      }
    }
    function constructClassInstance(workInProgress2, ctor, props) {
      var isLegacyContextConsumer = false;
      var unmaskedContext = emptyContextObject;
      var context = emptyContextObject;
      var contextType = ctor.contextType;
      {
        if ("contextType" in ctor) {
          var isValid = (
            // Allow null for conditional declaration
            contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0
          );
          if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
            didWarnAboutInvalidateContextType.add(ctor);
            var addendum = "";
            if (contextType === void 0) {
              addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
            } else if (typeof contextType !== "object") {
              addendum = " However, it is set to a " + typeof contextType + ".";
            } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
              addendum = " Did you accidentally pass the Context.Provider instead?";
            } else if (contextType._context !== void 0) {
              addendum = " Did you accidentally pass the Context.Consumer instead?";
            } else {
              addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
            }
            error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
          }
        }
      }
      if (typeof contextType === "object" && contextType !== null) {
        context = readContext(contextType);
      } else {
        unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
        var contextTypes = ctor.contextTypes;
        isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0;
        context = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
      }
      var instance = new ctor(props, context);
      {
        if (workInProgress2.mode & StrictLegacyMode) {
          setIsStrictModeForDevtools(true);
          try {
            instance = new ctor(props, context);
          } finally {
            setIsStrictModeForDevtools(false);
          }
        }
      }
      var state = workInProgress2.memoizedState = instance.state !== null && instance.state !== void 0 ? instance.state : null;
      adoptClassInstance(workInProgress2, instance);
      {
        if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
          var componentName = getComponentNameFromType(ctor) || "Component";
          if (!didWarnAboutUninitializedState.has(componentName)) {
            didWarnAboutUninitializedState.add(componentName);
            error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
          }
        }
        if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
          var foundWillMountName = null;
          var foundWillReceivePropsName = null;
          var foundWillUpdateName = null;
          if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
            foundWillMountName = "componentWillMount";
          } else if (typeof instance.UNSAFE_componentWillMount === "function") {
            foundWillMountName = "UNSAFE_componentWillMount";
          }
          if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
            foundWillReceivePropsName = "componentWillReceiveProps";
          } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
            foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
          }
          if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
            foundWillUpdateName = "componentWillUpdate";
          } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
            foundWillUpdateName = "UNSAFE_componentWillUpdate";
          }
          if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
            var _componentName = getComponentNameFromType(ctor) || "Component";
            var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
            if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
              didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
              error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
            }
          }
        }
      }
      if (isLegacyContextConsumer) {
        cacheContext(workInProgress2, unmaskedContext, context);
      }
      return instance;
    }
    function callComponentWillMount(workInProgress2, instance) {
      var oldState = instance.state;
      if (typeof instance.componentWillMount === "function") {
        instance.componentWillMount();
      }
      if (typeof instance.UNSAFE_componentWillMount === "function") {
        instance.UNSAFE_componentWillMount();
      }
      if (oldState !== instance.state) {
        {
          error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromFiber(workInProgress2) || "Component");
        }
        classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
      }
    }
    function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
      var oldState = instance.state;
      if (typeof instance.componentWillReceiveProps === "function") {
        instance.componentWillReceiveProps(newProps, nextContext);
      }
      if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
        instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
      }
      if (instance.state !== oldState) {
        {
          var componentName = getComponentNameFromFiber(workInProgress2) || "Component";
          if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
            didWarnAboutStateAssignmentForComponent.add(componentName);
            error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
          }
        }
        classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
      }
    }
    function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
      {
        checkClassInstance(workInProgress2, ctor, newProps);
      }
      var instance = workInProgress2.stateNode;
      instance.props = newProps;
      instance.state = workInProgress2.memoizedState;
      instance.refs = emptyRefsObject;
      initializeUpdateQueue(workInProgress2);
      var contextType = ctor.contextType;
      if (typeof contextType === "object" && contextType !== null) {
        instance.context = readContext(contextType);
      } else {
        var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
        instance.context = getMaskedContext(workInProgress2, unmaskedContext);
      }
      {
        if (instance.state === newProps) {
          var componentName = getComponentNameFromType(ctor) || "Component";
          if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
            didWarnAboutDirectlyAssigningPropsToState.add(componentName);
            error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
          }
        }
        if (workInProgress2.mode & StrictLegacyMode) {
          ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance);
        }
        {
          ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
        }
      }
      instance.state = workInProgress2.memoizedState;
      var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
      if (typeof getDerivedStateFromProps === "function") {
        applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
        instance.state = workInProgress2.memoizedState;
      }
      if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
        callComponentWillMount(workInProgress2, instance);
        processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
        instance.state = workInProgress2.memoizedState;
      }
      if (typeof instance.componentDidMount === "function") {
        var fiberFlags = Update;
        {
          fiberFlags |= LayoutStatic;
        }
        if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
          fiberFlags |= MountLayoutDev;
        }
        workInProgress2.flags |= fiberFlags;
      }
    }
    function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
      var instance = workInProgress2.stateNode;
      var oldProps = workInProgress2.memoizedProps;
      instance.props = oldProps;
      var oldContext = instance.context;
      var contextType = ctor.contextType;
      var nextContext = emptyContextObject;
      if (typeof contextType === "object" && contextType !== null) {
        nextContext = readContext(contextType);
      } else {
        var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
        nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
      }
      var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
      var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
      if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
        if (oldProps !== newProps || oldContext !== nextContext) {
          callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
        }
      }
      resetHasForceUpdateBeforeProcessing();
      var oldState = workInProgress2.memoizedState;
      var newState = instance.state = oldState;
      processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
      newState = workInProgress2.memoizedState;
      if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
        if (typeof instance.componentDidMount === "function") {
          var fiberFlags = Update;
          {
            fiberFlags |= LayoutStatic;
          }
          if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
            fiberFlags |= MountLayoutDev;
          }
          workInProgress2.flags |= fiberFlags;
        }
        return false;
      }
      if (typeof getDerivedStateFromProps === "function") {
        applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
        newState = workInProgress2.memoizedState;
      }
      var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
      if (shouldUpdate) {
        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
          if (typeof instance.componentWillMount === "function") {
            instance.componentWillMount();
          }
          if (typeof instance.UNSAFE_componentWillMount === "function") {
            instance.UNSAFE_componentWillMount();
          }
        }
        if (typeof instance.componentDidMount === "function") {
          var _fiberFlags = Update;
          {
            _fiberFlags |= LayoutStatic;
          }
          if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
            _fiberFlags |= MountLayoutDev;
          }
          workInProgress2.flags |= _fiberFlags;
        }
      } else {
        if (typeof instance.componentDidMount === "function") {
          var _fiberFlags2 = Update;
          {
            _fiberFlags2 |= LayoutStatic;
          }
          if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
            _fiberFlags2 |= MountLayoutDev;
          }
          workInProgress2.flags |= _fiberFlags2;
        }
        workInProgress2.memoizedProps = newProps;
        workInProgress2.memoizedState = newState;
      }
      instance.props = newProps;
      instance.state = newState;
      instance.context = nextContext;
      return shouldUpdate;
    }
    function updateClassInstance(current2, workInProgress2, ctor, newProps, renderLanes2) {
      var instance = workInProgress2.stateNode;
      cloneUpdateQueue(current2, workInProgress2);
      var unresolvedOldProps = workInProgress2.memoizedProps;
      var oldProps = workInProgress2.type === workInProgress2.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
      instance.props = oldProps;
      var unresolvedNewProps = workInProgress2.pendingProps;
      var oldContext = instance.context;
      var contextType = ctor.contextType;
      var nextContext = emptyContextObject;
      if (typeof contextType === "object" && contextType !== null) {
        nextContext = readContext(contextType);
      } else {
        var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
        nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
      }
      var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
      var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
      if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
        if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
          callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
        }
      }
      resetHasForceUpdateBeforeProcessing();
      var oldState = workInProgress2.memoizedState;
      var newState = instance.state = oldState;
      processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
      newState = workInProgress2.memoizedState;
      if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !enableLazyContextPropagation) {
        if (typeof instance.componentDidUpdate === "function") {
          if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
            workInProgress2.flags |= Update;
          }
        }
        if (typeof instance.getSnapshotBeforeUpdate === "function") {
          if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
            workInProgress2.flags |= Snapshot;
          }
        }
        return false;
      }
      if (typeof getDerivedStateFromProps === "function") {
        applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
        newState = workInProgress2.memoizedState;
      }
      var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) || // TODO: In some cases, we'll end up checking if context has changed twice,
      // both before and after `shouldComponentUpdate` has been called. Not ideal,
      // but I'm loath to refactor this function. This only happens for memoized
      // components so it's not that common.
      enableLazyContextPropagation;
      if (shouldUpdate) {
        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
          if (typeof instance.componentWillUpdate === "function") {
            instance.componentWillUpdate(newProps, newState, nextContext);
          }
          if (typeof instance.UNSAFE_componentWillUpdate === "function") {
            instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
          }
        }
        if (typeof instance.componentDidUpdate === "function") {
          workInProgress2.flags |= Update;
        }
        if (typeof instance.getSnapshotBeforeUpdate === "function") {
          workInProgress2.flags |= Snapshot;
        }
      } else {
        if (typeof instance.componentDidUpdate === "function") {
          if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
            workInProgress2.flags |= Update;
          }
        }
        if (typeof instance.getSnapshotBeforeUpdate === "function") {
          if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
            workInProgress2.flags |= Snapshot;
          }
        }
        workInProgress2.memoizedProps = newProps;
        workInProgress2.memoizedState = newState;
      }
      instance.props = newProps;
      instance.state = newState;
      instance.context = nextContext;
      return shouldUpdate;
    }
    var didWarnAboutMaps;
    var didWarnAboutGenerators;
    var didWarnAboutStringRefs;
    var ownerHasKeyUseWarning;
    var ownerHasFunctionTypeWarning;
    var warnForMissingKey = function(child, returnFiber) {
    };
    {
      didWarnAboutMaps = false;
      didWarnAboutGenerators = false;
      didWarnAboutStringRefs = {};
      ownerHasKeyUseWarning = {};
      ownerHasFunctionTypeWarning = {};
      warnForMissingKey = function(child, returnFiber) {
        if (child === null || typeof child !== "object") {
          return;
        }
        if (!child._store || child._store.validated || child.key != null) {
          return;
        }
        if (typeof child._store !== "object") {
          throw new Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
        }
        child._store.validated = true;
        var componentName = getComponentNameFromFiber(returnFiber) || "Component";
        if (ownerHasKeyUseWarning[componentName]) {
          return;
        }
        ownerHasKeyUseWarning[componentName] = true;
        error('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.');
      };
    }
    function coerceRef(returnFiber, current2, element) {
      var mixedRef = element.ref;
      if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
        {
          if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && // We warn in ReactElement.js if owner and self are equal for string refs
          // because these cannot be automatically converted to an arrow function
          // using a codemod. Therefore, we don't have to warn about string refs again.
          !(element._owner && element._self && element._owner.stateNode !== element._self)) {
            var componentName = getComponentNameFromFiber(returnFiber) || "Component";
            if (!didWarnAboutStringRefs[componentName]) {
              {
                error('A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', mixedRef);
              }
              didWarnAboutStringRefs[componentName] = true;
            }
          }
        }
        if (element._owner) {
          var owner = element._owner;
          var inst;
          if (owner) {
            var ownerFiber = owner;
            if (ownerFiber.tag !== ClassComponent) {
              throw new Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
            }
            inst = ownerFiber.stateNode;
          }
          if (!inst) {
            throw new Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
          }
          var resolvedInst = inst;
          {
            checkPropStringCoercion(mixedRef, "ref");
          }
          var stringRef = "" + mixedRef;
          if (current2 !== null && current2.ref !== null && typeof current2.ref === "function" && current2.ref._stringRef === stringRef) {
            return current2.ref;
          }
          var ref = function(value) {
            var refs = resolvedInst.refs;
            if (refs === emptyRefsObject) {
              refs = resolvedInst.refs = {};
            }
            if (value === null) {
              delete refs[stringRef];
            } else {
              refs[stringRef] = value;
            }
          };
          ref._stringRef = stringRef;
          return ref;
        } else {
          if (typeof mixedRef !== "string") {
            throw new Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
          }
          if (!element._owner) {
            throw new Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
          }
        }
      }
      return mixedRef;
    }
    function throwOnInvalidObjectType(returnFiber, newChild) {
      var childString = Object.prototype.toString.call(newChild);
      throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
    }
    function warnOnFunctionType(returnFiber) {
      {
        var componentName = getComponentNameFromFiber(returnFiber) || "Component";
        if (ownerHasFunctionTypeWarning[componentName]) {
          return;
        }
        ownerHasFunctionTypeWarning[componentName] = true;
        error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
      }
    }
    function resolveLazy(lazyType) {
      var payload = lazyType._payload;
      var init = lazyType._init;
      return init(payload);
    }
    function ChildReconciler(shouldTrackSideEffects) {
      function deleteChild(returnFiber, childToDelete) {
        if (!shouldTrackSideEffects) {
          return;
        }
        var deletions = returnFiber.deletions;
        if (deletions === null) {
          returnFiber.deletions = [childToDelete];
          returnFiber.flags |= ChildDeletion;
        } else {
          deletions.push(childToDelete);
        }
      }
      function deleteRemainingChildren(returnFiber, currentFirstChild) {
        if (!shouldTrackSideEffects) {
          return null;
        }
        var childToDelete = currentFirstChild;
        while (childToDelete !== null) {
          deleteChild(returnFiber, childToDelete);
          childToDelete = childToDelete.sibling;
        }
        return null;
      }
      function mapRemainingChildren(returnFiber, currentFirstChild) {
        var existingChildren = /* @__PURE__ */ new Map();
        var existingChild = currentFirstChild;
        while (existingChild !== null) {
          if (existingChild.key !== null) {
            existingChildren.set(existingChild.key, existingChild);
          } else {
            existingChildren.set(existingChild.index, existingChild);
          }
          existingChild = existingChild.sibling;
        }
        return existingChildren;
      }
      function useFiber(fiber, pendingProps) {
        var clone = createWorkInProgress(fiber, pendingProps);
        clone.index = 0;
        clone.sibling = null;
        return clone;
      }
      function placeChild(newFiber, lastPlacedIndex, newIndex) {
        newFiber.index = newIndex;
        if (!shouldTrackSideEffects) {
          newFiber.flags |= Forked;
          return lastPlacedIndex;
        }
        var current2 = newFiber.alternate;
        if (current2 !== null) {
          var oldIndex = current2.index;
          if (oldIndex < lastPlacedIndex) {
            newFiber.flags |= Placement;
            return lastPlacedIndex;
          } else {
            return oldIndex;
          }
        } else {
          newFiber.flags |= Placement;
          return lastPlacedIndex;
        }
      }
      function placeSingleChild(newFiber) {
        if (shouldTrackSideEffects && newFiber.alternate === null) {
          newFiber.flags |= Placement;
        }
        return newFiber;
      }
      function updateTextNode(returnFiber, current2, textContent, lanes) {
        if (current2 === null || current2.tag !== HostText) {
          var created = createFiberFromText(textContent, returnFiber.mode, lanes);
          created.return = returnFiber;
          return created;
        } else {
          var existing = useFiber(current2, textContent);
          existing.return = returnFiber;
          return existing;
        }
      }
      function updateElement(returnFiber, current2, element, lanes) {
        var elementType = element.type;
        if (elementType === REACT_FRAGMENT_TYPE) {
          return updateFragment2(returnFiber, current2, element.props.children, lanes, element.key);
        }
        if (current2 !== null) {
          if (current2.elementType === elementType || // Keep this check inline so it only runs on the false path:
          isCompatibleFamilyForHotReloading(current2, element) || // Lazy types should reconcile their resolved type.
          // We need to do this after the Hot Reloading check above,
          // because hot reloading has different semantics than prod because
          // it doesn't resuspend. So we can't let the call below suspend.
          typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current2.type) {
            var existing = useFiber(current2, element.props);
            existing.ref = coerceRef(returnFiber, current2, element);
            existing.return = returnFiber;
            {
              existing._debugSource = element._source;
              existing._debugOwner = element._owner;
            }
            return existing;
          }
        }
        var created = createFiberFromElement(element, returnFiber.mode, lanes);
        created.ref = coerceRef(returnFiber, current2, element);
        created.return = returnFiber;
        return created;
      }
      function updatePortal(returnFiber, current2, portal, lanes) {
        if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation) {
          var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
          created.return = returnFiber;
          return created;
        } else {
          var existing = useFiber(current2, portal.children || []);
          existing.return = returnFiber;
          return existing;
        }
      }
      function updateFragment2(returnFiber, current2, fragment, lanes, key) {
        if (current2 === null || current2.tag !== Fragment) {
          var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
          created.return = returnFiber;
          return created;
        } else {
          var existing = useFiber(current2, fragment);
          existing.return = returnFiber;
          return existing;
        }
      }
      function createChild(returnFiber, newChild, lanes) {
        if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
          var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
          created.return = returnFiber;
          return created;
        }
        if (typeof newChild === "object" && newChild !== null) {
          switch (newChild.$$typeof) {
            case REACT_ELEMENT_TYPE: {
              var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
              _created.ref = coerceRef(returnFiber, null, newChild);
              _created.return = returnFiber;
              return _created;
            }
            case REACT_PORTAL_TYPE: {
              var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
              _created2.return = returnFiber;
              return _created2;
            }
            case REACT_LAZY_TYPE: {
              var payload = newChild._payload;
              var init = newChild._init;
              return createChild(returnFiber, init(payload), lanes);
            }
          }
          if (isArray(newChild) || getIteratorFn(newChild)) {
            var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
            _created3.return = returnFiber;
            return _created3;
          }
          throwOnInvalidObjectType(returnFiber, newChild);
        }
        {
          if (typeof newChild === "function") {
            warnOnFunctionType(returnFiber);
          }
        }
        return null;
      }
      function updateSlot(returnFiber, oldFiber, newChild, lanes) {
        var key = oldFiber !== null ? oldFiber.key : null;
        if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
          if (key !== null) {
            return null;
          }
          return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
        }
        if (typeof newChild === "object" && newChild !== null) {
          switch (newChild.$$typeof) {
            case REACT_ELEMENT_TYPE: {
              if (newChild.key === key) {
                return updateElement(returnFiber, oldFiber, newChild, lanes);
              } else {
                return null;
              }
            }
            case REACT_PORTAL_TYPE: {
              if (newChild.key === key) {
                return updatePortal(returnFiber, oldFiber, newChild, lanes);
              } else {
                return null;
              }
            }
            case REACT_LAZY_TYPE: {
              var payload = newChild._payload;
              var init = newChild._init;
              return updateSlot(returnFiber, oldFiber, init(payload), lanes);
            }
          }
          if (isArray(newChild) || getIteratorFn(newChild)) {
            if (key !== null) {
              return null;
            }
            return updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
          }
          throwOnInvalidObjectType(returnFiber, newChild);
        }
        {
          if (typeof newChild === "function") {
            warnOnFunctionType(returnFiber);
          }
        }
        return null;
      }
      function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
        if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
          var matchedFiber = existingChildren.get(newIdx) || null;
          return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
        }
        if (typeof newChild === "object" && newChild !== null) {
          switch (newChild.$$typeof) {
            case REACT_ELEMENT_TYPE: {
              var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
              return updateElement(returnFiber, _matchedFiber, newChild, lanes);
            }
            case REACT_PORTAL_TYPE: {
              var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
              return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
            }
            case REACT_LAZY_TYPE:
              var payload = newChild._payload;
              var init = newChild._init;
              return updateFromMap(existingChildren, returnFiber, newIdx, init(payload), lanes);
          }
          if (isArray(newChild) || getIteratorFn(newChild)) {
            var _matchedFiber3 = existingChildren.get(newIdx) || null;
            return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
          }
          throwOnInvalidObjectType(returnFiber, newChild);
        }
        {
          if (typeof newChild === "function") {
            warnOnFunctionType(returnFiber);
          }
        }
        return null;
      }
      function warnOnInvalidKey(child, knownKeys, returnFiber) {
        {
          if (typeof child !== "object" || child === null) {
            return knownKeys;
          }
          switch (child.$$typeof) {
            case REACT_ELEMENT_TYPE:
            case REACT_PORTAL_TYPE:
              warnForMissingKey(child, returnFiber);
              var key = child.key;
              if (typeof key !== "string") {
                break;
              }
              if (knownKeys === null) {
                knownKeys = /* @__PURE__ */ new Set();
                knownKeys.add(key);
                break;
              }
              if (!knownKeys.has(key)) {
                knownKeys.add(key);
                break;
              }
              error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.", key);
              break;
            case REACT_LAZY_TYPE:
              var payload = child._payload;
              var init = child._init;
              warnOnInvalidKey(init(payload), knownKeys, returnFiber);
              break;
          }
        }
        return knownKeys;
      }
      function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
        {
          var knownKeys = null;
          for (var i = 0; i < newChildren.length; i++) {
            var child = newChildren[i];
            knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
          }
        }
        var resultingFirstChild = null;
        var previousNewFiber = null;
        var oldFiber = currentFirstChild;
        var lastPlacedIndex = 0;
        var newIdx = 0;
        var nextOldFiber = null;
        for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
          if (oldFiber.index > newIdx) {
            nextOldFiber = oldFiber;
            oldFiber = null;
          } else {
            nextOldFiber = oldFiber.sibling;
          }
          var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
          if (newFiber === null) {
            if (oldFiber === null) {
              oldFiber = nextOldFiber;
            }
            break;
          }
          if (shouldTrackSideEffects) {
            if (oldFiber && newFiber.alternate === null) {
              deleteChild(returnFiber, oldFiber);
            }
          }
          lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
          if (previousNewFiber === null) {
            resultingFirstChild = newFiber;
          } else {
            previousNewFiber.sibling = newFiber;
          }
          previousNewFiber = newFiber;
          oldFiber = nextOldFiber;
        }
        if (newIdx === newChildren.length) {
          deleteRemainingChildren(returnFiber, oldFiber);
          if (getIsHydrating()) {
            var numberOfForks = newIdx;
            pushTreeFork(returnFiber, numberOfForks);
          }
          return resultingFirstChild;
        }
        if (oldFiber === null) {
          for (; newIdx < newChildren.length; newIdx++) {
            var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
            if (_newFiber === null) {
              continue;
            }
            lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
            if (previousNewFiber === null) {
              resultingFirstChild = _newFiber;
            } else {
              previousNewFiber.sibling = _newFiber;
            }
            previousNewFiber = _newFiber;
          }
          if (getIsHydrating()) {
            var _numberOfForks = newIdx;
            pushTreeFork(returnFiber, _numberOfForks);
          }
          return resultingFirstChild;
        }
        var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
        for (; newIdx < newChildren.length; newIdx++) {
          var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
          if (_newFiber2 !== null) {
            if (shouldTrackSideEffects) {
              if (_newFiber2.alternate !== null) {
                existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
              }
            }
            lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
            if (previousNewFiber === null) {
              resultingFirstChild = _newFiber2;
            } else {
              previousNewFiber.sibling = _newFiber2;
            }
            previousNewFiber = _newFiber2;
          }
        }
        if (shouldTrackSideEffects) {
          existingChildren.forEach(function(child2) {
            return deleteChild(returnFiber, child2);
          });
        }
        if (getIsHydrating()) {
          var _numberOfForks2 = newIdx;
          pushTreeFork(returnFiber, _numberOfForks2);
        }
        return resultingFirstChild;
      }
      function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
        var iteratorFn = getIteratorFn(newChildrenIterable);
        if (typeof iteratorFn !== "function") {
          throw new Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
        }
        {
          if (typeof Symbol === "function" && // $FlowFixMe Flow doesn't know about toStringTag
          newChildrenIterable[Symbol.toStringTag] === "Generator") {
            if (!didWarnAboutGenerators) {
              error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
            }
            didWarnAboutGenerators = true;
          }
          if (newChildrenIterable.entries === iteratorFn) {
            if (!didWarnAboutMaps) {
              error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
            }
            didWarnAboutMaps = true;
          }
          var _newChildren = iteratorFn.call(newChildrenIterable);
          if (_newChildren) {
            var knownKeys = null;
            var _step = _newChildren.next();
            for (; !_step.done; _step = _newChildren.next()) {
              var child = _step.value;
              knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
            }
          }
        }
        var newChildren = iteratorFn.call(newChildrenIterable);
        if (newChildren == null) {
          throw new Error("An iterable object provided no iterator.");
        }
        var resultingFirstChild = null;
        var previousNewFiber = null;
        var oldFiber = currentFirstChild;
        var lastPlacedIndex = 0;
        var newIdx = 0;
        var nextOldFiber = null;
        var step = newChildren.next();
        for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
          if (oldFiber.index > newIdx) {
            nextOldFiber = oldFiber;
            oldFiber = null;
          } else {
            nextOldFiber = oldFiber.sibling;
          }
          var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
          if (newFiber === null) {
            if (oldFiber === null) {
              oldFiber = nextOldFiber;
            }
            break;
          }
          if (shouldTrackSideEffects) {
            if (oldFiber && newFiber.alternate === null) {
              deleteChild(returnFiber, oldFiber);
            }
          }
          lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
          if (previousNewFiber === null) {
            resultingFirstChild = newFiber;
          } else {
            previousNewFiber.sibling = newFiber;
          }
          previousNewFiber = newFiber;
          oldFiber = nextOldFiber;
        }
        if (step.done) {
          deleteRemainingChildren(returnFiber, oldFiber);
          if (getIsHydrating()) {
            var numberOfForks = newIdx;
            pushTreeFork(returnFiber, numberOfForks);
          }
          return resultingFirstChild;
        }
        if (oldFiber === null) {
          for (; !step.done; newIdx++, step = newChildren.next()) {
            var _newFiber3 = createChild(returnFiber, step.value, lanes);
            if (_newFiber3 === null) {
              continue;
            }
            lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
            if (previousNewFiber === null) {
              resultingFirstChild = _newFiber3;
            } else {
              previousNewFiber.sibling = _newFiber3;
            }
            previousNewFiber = _newFiber3;
          }
          if (getIsHydrating()) {
            var _numberOfForks3 = newIdx;
            pushTreeFork(returnFiber, _numberOfForks3);
          }
          return resultingFirstChild;
        }
        var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
        for (; !step.done; newIdx++, step = newChildren.next()) {
          var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
          if (_newFiber4 !== null) {
            if (shouldTrackSideEffects) {
              if (_newFiber4.alternate !== null) {
                existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
              }
            }
            lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
            if (previousNewFiber === null) {
              resultingFirstChild = _newFiber4;
            } else {
              previousNewFiber.sibling = _newFiber4;
            }
            previousNewFiber = _newFiber4;
          }
        }
        if (shouldTrackSideEffects) {
          existingChildren.forEach(function(child2) {
            return deleteChild(returnFiber, child2);
          });
        }
        if (getIsHydrating()) {
          var _numberOfForks4 = newIdx;
          pushTreeFork(returnFiber, _numberOfForks4);
        }
        return resultingFirstChild;
      }
      function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
        if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
          deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
          var existing = useFiber(currentFirstChild, textContent);
          existing.return = returnFiber;
          return existing;
        }
        deleteRemainingChildren(returnFiber, currentFirstChild);
        var created = createFiberFromText(textContent, returnFiber.mode, lanes);
        created.return = returnFiber;
        return created;
      }
      function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
        var key = element.key;
        var child = currentFirstChild;
        while (child !== null) {
          if (child.key === key) {
            var elementType = element.type;
            if (elementType === REACT_FRAGMENT_TYPE) {
              if (child.tag === Fragment) {
                deleteRemainingChildren(returnFiber, child.sibling);
                var existing = useFiber(child, element.props.children);
                existing.return = returnFiber;
                {
                  existing._debugSource = element._source;
                  existing._debugOwner = element._owner;
                }
                return existing;
              }
            } else {
              if (child.elementType === elementType || // Keep this check inline so it only runs on the false path:
              isCompatibleFamilyForHotReloading(child, element) || // Lazy types should reconcile their resolved type.
              // We need to do this after the Hot Reloading check above,
              // because hot reloading has different semantics than prod because
              // it doesn't resuspend. So we can't let the call below suspend.
              typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {
                deleteRemainingChildren(returnFiber, child.sibling);
                var _existing = useFiber(child, element.props);
                _existing.ref = coerceRef(returnFiber, child, element);
                _existing.return = returnFiber;
                {
                  _existing._debugSource = element._source;
                  _existing._debugOwner = element._owner;
                }
                return _existing;
              }
            }
            deleteRemainingChildren(returnFiber, child);
            break;
          } else {
            deleteChild(returnFiber, child);
          }
          child = child.sibling;
        }
        if (element.type === REACT_FRAGMENT_TYPE) {
          var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
          created.return = returnFiber;
          return created;
        } else {
          var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
          _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
          _created4.return = returnFiber;
          return _created4;
        }
      }
      function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
        var key = portal.key;
        var child = currentFirstChild;
        while (child !== null) {
          if (child.key === key) {
            if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
              deleteRemainingChildren(returnFiber, child.sibling);
              var existing = useFiber(child, portal.children || []);
              existing.return = returnFiber;
              return existing;
            } else {
              deleteRemainingChildren(returnFiber, child);
              break;
            }
          } else {
            deleteChild(returnFiber, child);
          }
          child = child.sibling;
        }
        var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
        created.return = returnFiber;
        return created;
      }
      function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
        var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
        if (isUnkeyedTopLevelFragment) {
          newChild = newChild.props.children;
        }
        if (typeof newChild === "object" && newChild !== null) {
          switch (newChild.$$typeof) {
            case REACT_ELEMENT_TYPE:
              return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
            case REACT_PORTAL_TYPE:
              return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
            case REACT_LAZY_TYPE:
              var payload = newChild._payload;
              var init = newChild._init;
              return reconcileChildFibers2(returnFiber, currentFirstChild, init(payload), lanes);
          }
          if (isArray(newChild)) {
            return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
          }
          if (getIteratorFn(newChild)) {
            return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
          }
          throwOnInvalidObjectType(returnFiber, newChild);
        }
        if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
          return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
        }
        {
          if (typeof newChild === "function") {
            warnOnFunctionType(returnFiber);
          }
        }
        return deleteRemainingChildren(returnFiber, currentFirstChild);
      }
      return reconcileChildFibers2;
    }
    var reconcileChildFibers = ChildReconciler(true);
    var mountChildFibers = ChildReconciler(false);
    function cloneChildFibers(current2, workInProgress2) {
      if (current2 !== null && workInProgress2.child !== current2.child) {
        throw new Error("Resuming work not yet implemented.");
      }
      if (workInProgress2.child === null) {
        return;
      }
      var currentChild = workInProgress2.child;
      var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
      workInProgress2.child = newChild;
      newChild.return = workInProgress2;
      while (currentChild.sibling !== null) {
        currentChild = currentChild.sibling;
        newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
        newChild.return = workInProgress2;
      }
      newChild.sibling = null;
    }
    function resetChildFibers(workInProgress2, lanes) {
      var child = workInProgress2.child;
      while (child !== null) {
        resetWorkInProgress(child, lanes);
        child = child.sibling;
      }
    }
    var NO_CONTEXT = {};
    var contextStackCursor$1 = createCursor(NO_CONTEXT);
    var contextFiberStackCursor = createCursor(NO_CONTEXT);
    var rootInstanceStackCursor = createCursor(NO_CONTEXT);
    function requiredContext(c) {
      if (c === NO_CONTEXT) {
        throw new Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
      }
      return c;
    }
    function getRootHostContainer() {
      var rootInstance = requiredContext(rootInstanceStackCursor.current);
      return rootInstance;
    }
    function pushHostContainer(fiber, nextRootInstance) {
      push(rootInstanceStackCursor, nextRootInstance, fiber);
      push(contextFiberStackCursor, fiber, fiber);
      push(contextStackCursor$1, NO_CONTEXT, fiber);
      var nextRootContext = getRootHostContext(nextRootInstance);
      pop(contextStackCursor$1, fiber);
      push(contextStackCursor$1, nextRootContext, fiber);
    }
    function popHostContainer(fiber) {
      pop(contextStackCursor$1, fiber);
      pop(contextFiberStackCursor, fiber);
      pop(rootInstanceStackCursor, fiber);
    }
    function getHostContext() {
      var context = requiredContext(contextStackCursor$1.current);
      return context;
    }
    function pushHostContext(fiber) {
      var rootInstance = requiredContext(rootInstanceStackCursor.current);
      var context = requiredContext(contextStackCursor$1.current);
      var nextContext = getChildHostContext(context, fiber.type);
      if (context === nextContext) {
        return;
      }
      push(contextFiberStackCursor, fiber, fiber);
      push(contextStackCursor$1, nextContext, fiber);
    }
    function popHostContext(fiber) {
      if (contextFiberStackCursor.current !== fiber) {
        return;
      }
      pop(contextStackCursor$1, fiber);
      pop(contextFiberStackCursor, fiber);
    }
    var DefaultSuspenseContext = 0;
    var SubtreeSuspenseContextMask = 1;
    var InvisibleParentSuspenseContext = 1;
    var ForceSuspenseFallback = 2;
    var suspenseStackCursor = createCursor(DefaultSuspenseContext);
    function hasSuspenseContext(parentContext, flag) {
      return (parentContext & flag) !== 0;
    }
    function setDefaultShallowSuspenseContext(parentContext) {
      return parentContext & SubtreeSuspenseContextMask;
    }
    function setShallowSuspenseContext(parentContext, shallowContext) {
      return parentContext & SubtreeSuspenseContextMask | shallowContext;
    }
    function addSubtreeSuspenseContext(parentContext, subtreeContext) {
      return parentContext | subtreeContext;
    }
    function pushSuspenseContext(fiber, newContext) {
      push(suspenseStackCursor, newContext, fiber);
    }
    function popSuspenseContext(fiber) {
      pop(suspenseStackCursor, fiber);
    }
    function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
      var nextState = workInProgress2.memoizedState;
      if (nextState !== null) {
        if (nextState.dehydrated !== null) {
          return true;
        }
        return false;
      }
      var props = workInProgress2.memoizedProps;
      {
        return true;
      }
    }
    function findFirstSuspended(row) {
      var node = row;
      while (node !== null) {
        if (node.tag === SuspenseComponent) {
          var state = node.memoizedState;
          if (state !== null) {
            var dehydrated = state.dehydrated;
            if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
              return node;
            }
          }
        } else if (node.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't
        // keep track of whether it suspended or not.
        node.memoizedProps.revealOrder !== void 0) {
          var didSuspend = (node.flags & DidCapture) !== NoFlags;
          if (didSuspend) {
            return node;
          }
        } else if (node.child !== null) {
          node.child.return = node;
          node = node.child;
          continue;
        }
        if (node === row) {
          return null;
        }
        while (node.sibling === null) {
          if (node.return === null || node.return === row) {
            return null;
          }
          node = node.return;
        }
        node.sibling.return = node.return;
        node = node.sibling;
      }
      return null;
    }
    var NoFlags$1 = (
      /*   */
      0
    );
    var HasEffect = (
      /* */
      1
    );
    var Insertion = (
      /*  */
      2
    );
    var Layout = (
      /*    */
      4
    );
    var Passive$1 = (
      /*   */
      8
    );
    var workInProgressSources = [];
    function resetWorkInProgressVersions() {
      for (var i = 0; i < workInProgressSources.length; i++) {
        var mutableSource = workInProgressSources[i];
        {
          mutableSource._workInProgressVersionPrimary = null;
        }
      }
      workInProgressSources.length = 0;
    }
    function registerMutableSourceForHydration(root2, mutableSource) {
      var getVersion = mutableSource._getVersion;
      var version = getVersion(mutableSource._source);
      if (root2.mutableSourceEagerHydrationData == null) {
        root2.mutableSourceEagerHydrationData = [mutableSource, version];
      } else {
        root2.mutableSourceEagerHydrationData.push(mutableSource, version);
      }
    }
    var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig;
    var didWarnAboutMismatchedHooksForComponent;
    var didWarnUncachedGetSnapshot;
    {
      didWarnAboutMismatchedHooksForComponent = /* @__PURE__ */ new Set();
    }
    var renderLanes = NoLanes;
    var currentlyRenderingFiber$1 = null;
    var currentHook = null;
    var workInProgressHook = null;
    var didScheduleRenderPhaseUpdate = false;
    var didScheduleRenderPhaseUpdateDuringThisPass = false;
    var localIdCounter = 0;
    var globalClientIdCounter = 0;
    var RE_RENDER_LIMIT = 25;
    var currentHookNameInDev = null;
    var hookTypesDev = null;
    var hookTypesUpdateIndexDev = -1;
    var ignorePreviousDependencies = false;
    function mountHookTypesDev() {
      {
        var hookName = currentHookNameInDev;
        if (hookTypesDev === null) {
          hookTypesDev = [hookName];
        } else {
          hookTypesDev.push(hookName);
        }
      }
    }
    function updateHookTypesDev() {
      {
        var hookName = currentHookNameInDev;
        if (hookTypesDev !== null) {
          hookTypesUpdateIndexDev++;
          if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
            warnOnHookMismatchInDev(hookName);
          }
        }
      }
    }
    function checkDepsAreArrayDev(deps) {
      {
        if (deps !== void 0 && deps !== null && !isArray(deps)) {
          error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
        }
      }
    }
    function warnOnHookMismatchInDev(currentHookName) {
      {
        var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);
        if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
          didWarnAboutMismatchedHooksForComponent.add(componentName);
          if (hookTypesDev !== null) {
            var table = "";
            var secondColumnStart = 30;
            for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
              var oldHookName = hookTypesDev[i];
              var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
              var row = i + 1 + ". " + oldHookName;
              while (row.length < secondColumnStart) {
                row += " ";
              }
              row += newHookName + "\n";
              table += row;
            }
            error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
          }
        }
      }
    }
    function throwInvalidHookError() {
      throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
    }
    function areHookInputsEqual(nextDeps, prevDeps) {
      {
        if (ignorePreviousDependencies) {
          return false;
        }
      }
      if (prevDeps === null) {
        {
          error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
        }
        return false;
      }
      {
        if (nextDeps.length !== prevDeps.length) {
          error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
        }
      }
      for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
        if (objectIs(nextDeps[i], prevDeps[i])) {
          continue;
        }
        return false;
      }
      return true;
    }
    function renderWithHooks(current2, workInProgress2, Component, props, secondArg, nextRenderLanes) {
      renderLanes = nextRenderLanes;
      currentlyRenderingFiber$1 = workInProgress2;
      {
        hookTypesDev = current2 !== null ? current2._debugHookTypes : null;
        hookTypesUpdateIndexDev = -1;
        ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type;
      }
      workInProgress2.memoizedState = null;
      workInProgress2.updateQueue = null;
      workInProgress2.lanes = NoLanes;
      {
        if (current2 !== null && current2.memoizedState !== null) {
          ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
        } else if (hookTypesDev !== null) {
          ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
        } else {
          ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
        }
      }
      var children = Component(props, secondArg);
      if (didScheduleRenderPhaseUpdateDuringThisPass) {
        var numberOfReRenders = 0;
        do {
          didScheduleRenderPhaseUpdateDuringThisPass = false;
          localIdCounter = 0;
          if (numberOfReRenders >= RE_RENDER_LIMIT) {
            throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
          }
          numberOfReRenders += 1;
          {
            ignorePreviousDependencies = false;
          }
          currentHook = null;
          workInProgressHook = null;
          workInProgress2.updateQueue = null;
          {
            hookTypesUpdateIndexDev = -1;
          }
          ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
          children = Component(props, secondArg);
        } while (didScheduleRenderPhaseUpdateDuringThisPass);
      }
      ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
      {
        workInProgress2._debugHookTypes = hookTypesDev;
      }
      var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
      renderLanes = NoLanes;
      currentlyRenderingFiber$1 = null;
      currentHook = null;
      workInProgressHook = null;
      {
        currentHookNameInDev = null;
        hookTypesDev = null;
        hookTypesUpdateIndexDev = -1;
        if (current2 !== null && (current2.flags & StaticMask) !== (workInProgress2.flags & StaticMask) && // Disable this warning in legacy mode, because legacy Suspense is weird
        // and creates false positives. To make this work in legacy mode, we'd
        // need to mark fibers that commit in an incomplete state, somehow. For
        // now I'll disable the warning that most of the bugs that would trigger
        // it are either exclusive to concurrent mode or exist in both.
        (current2.mode & ConcurrentMode) !== NoMode) {
          error("Internal React error: Expected static flag was missing. Please notify the React team.");
        }
      }
      didScheduleRenderPhaseUpdate = false;
      if (didRenderTooFewHooks) {
        throw new Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
      }
      return children;
    }
    function checkDidRenderIdHook() {
      var didRenderIdHook = localIdCounter !== 0;
      localIdCounter = 0;
      return didRenderIdHook;
    }
    function bailoutHooks(current2, workInProgress2, lanes) {
      workInProgress2.updateQueue = current2.updateQueue;
      if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
        workInProgress2.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update);
      } else {
        workInProgress2.flags &= ~(Passive | Update);
      }
      current2.lanes = removeLanes(current2.lanes, lanes);
    }
    function resetHooksAfterThrow() {
      ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
      if (didScheduleRenderPhaseUpdate) {
        var hook = currentlyRenderingFiber$1.memoizedState;
        while (hook !== null) {
          var queue = hook.queue;
          if (queue !== null) {
            queue.pending = null;
          }
          hook = hook.next;
        }
        didScheduleRenderPhaseUpdate = false;
      }
      renderLanes = NoLanes;
      currentlyRenderingFiber$1 = null;
      currentHook = null;
      workInProgressHook = null;
      {
        hookTypesDev = null;
        hookTypesUpdateIndexDev = -1;
        currentHookNameInDev = null;
        isUpdatingOpaqueValueInRenderPhase = false;
      }
      didScheduleRenderPhaseUpdateDuringThisPass = false;
      localIdCounter = 0;
    }
    function mountWorkInProgressHook() {
      var hook = {
        memoizedState: null,
        baseState: null,
        baseQueue: null,
        queue: null,
        next: null
      };
      if (workInProgressHook === null) {
        currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
      } else {
        workInProgressHook = workInProgressHook.next = hook;
      }
      return workInProgressHook;
    }
    function updateWorkInProgressHook() {
      var nextCurrentHook;
      if (currentHook === null) {
        var current2 = currentlyRenderingFiber$1.alternate;
        if (current2 !== null) {
          nextCurrentHook = current2.memoizedState;
        } else {
          nextCurrentHook = null;
        }
      } else {
        nextCurrentHook = currentHook.next;
      }
      var nextWorkInProgressHook;
      if (workInProgressHook === null) {
        nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
      } else {
        nextWorkInProgressHook = workInProgressHook.next;
      }
      if (nextWorkInProgressHook !== null) {
        workInProgressHook = nextWorkInProgressHook;
        nextWorkInProgressHook = workInProgressHook.next;
        currentHook = nextCurrentHook;
      } else {
        if (nextCurrentHook === null) {
          throw new Error("Rendered more hooks than during the previous render.");
        }
        currentHook = nextCurrentHook;
        var newHook = {
          memoizedState: currentHook.memoizedState,
          baseState: currentHook.baseState,
          baseQueue: currentHook.baseQueue,
          queue: currentHook.queue,
          next: null
        };
        if (workInProgressHook === null) {
          currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
        } else {
          workInProgressHook = workInProgressHook.next = newHook;
        }
      }
      return workInProgressHook;
    }
    function createFunctionComponentUpdateQueue() {
      return {
        lastEffect: null,
        stores: null
      };
    }
    function basicStateReducer(state, action) {
      return typeof action === "function" ? action(state) : action;
    }
    function mountReducer(reducer, initialArg, init) {
      var hook = mountWorkInProgressHook();
      var initialState;
      if (init !== void 0) {
        initialState = init(initialArg);
      } else {
        initialState = initialArg;
      }
      hook.memoizedState = hook.baseState = initialState;
      var queue = {
        pending: null,
        interleaved: null,
        lanes: NoLanes,
        dispatch: null,
        lastRenderedReducer: reducer,
        lastRenderedState: initialState
      };
      hook.queue = queue;
      var dispatch = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);
      return [hook.memoizedState, dispatch];
    }
    function updateReducer(reducer, initialArg, init) {
      var hook = updateWorkInProgressHook();
      var queue = hook.queue;
      if (queue === null) {
        throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
      }
      queue.lastRenderedReducer = reducer;
      var current2 = currentHook;
      var baseQueue = current2.baseQueue;
      var pendingQueue = queue.pending;
      if (pendingQueue !== null) {
        if (baseQueue !== null) {
          var baseFirst = baseQueue.next;
          var pendingFirst = pendingQueue.next;
          baseQueue.next = pendingFirst;
          pendingQueue.next = baseFirst;
        }
        {
          if (current2.baseQueue !== baseQueue) {
            error("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
          }
        }
        current2.baseQueue = baseQueue = pendingQueue;
        queue.pending = null;
      }
      if (baseQueue !== null) {
        var first = baseQueue.next;
        var newState = current2.baseState;
        var newBaseState = null;
        var newBaseQueueFirst = null;
        var newBaseQueueLast = null;
        var update = first;
        do {
          var updateLane = update.lane;
          if (!isSubsetOfLanes(renderLanes, updateLane)) {
            var clone = {
              lane: updateLane,
              action: update.action,
              hasEagerState: update.hasEagerState,
              eagerState: update.eagerState,
              next: null
            };
            if (newBaseQueueLast === null) {
              newBaseQueueFirst = newBaseQueueLast = clone;
              newBaseState = newState;
            } else {
              newBaseQueueLast = newBaseQueueLast.next = clone;
            }
            currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
            markSkippedUpdateLanes(updateLane);
          } else {
            if (newBaseQueueLast !== null) {
              var _clone = {
                // This update is going to be committed so we never want uncommit
                // it. Using NoLane works because 0 is a subset of all bitmasks, so
                // this will never be skipped by the check above.
                lane: NoLane,
                action: update.action,
                hasEagerState: update.hasEagerState,
                eagerState: update.eagerState,
                next: null
              };
              newBaseQueueLast = newBaseQueueLast.next = _clone;
            }
            if (update.hasEagerState) {
              newState = update.eagerState;
            } else {
              var action = update.action;
              newState = reducer(newState, action);
            }
          }
          update = update.next;
        } while (update !== null && update !== first);
        if (newBaseQueueLast === null) {
          newBaseState = newState;
        } else {
          newBaseQueueLast.next = newBaseQueueFirst;
        }
        if (!objectIs(newState, hook.memoizedState)) {
          markWorkInProgressReceivedUpdate();
        }
        hook.memoizedState = newState;
        hook.baseState = newBaseState;
        hook.baseQueue = newBaseQueueLast;
        queue.lastRenderedState = newState;
      }
      var lastInterleaved = queue.interleaved;
      if (lastInterleaved !== null) {
        var interleaved = lastInterleaved;
        do {
          var interleavedLane = interleaved.lane;
          currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane);
          markSkippedUpdateLanes(interleavedLane);
          interleaved = interleaved.next;
        } while (interleaved !== lastInterleaved);
      } else if (baseQueue === null) {
        queue.lanes = NoLanes;
      }
      var dispatch = queue.dispatch;
      return [hook.memoizedState, dispatch];
    }
    function rerenderReducer(reducer, initialArg, init) {
      var hook = updateWorkInProgressHook();
      var queue = hook.queue;
      if (queue === null) {
        throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
      }
      queue.lastRenderedReducer = reducer;
      var dispatch = queue.dispatch;
      var lastRenderPhaseUpdate = queue.pending;
      var newState = hook.memoizedState;
      if (lastRenderPhaseUpdate !== null) {
        queue.pending = null;
        var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
        var update = firstRenderPhaseUpdate;
        do {
          var action = update.action;
          newState = reducer(newState, action);
          update = update.next;
        } while (update !== firstRenderPhaseUpdate);
        if (!objectIs(newState, hook.memoizedState)) {
          markWorkInProgressReceivedUpdate();
        }
        hook.memoizedState = newState;
        if (hook.baseQueue === null) {
          hook.baseState = newState;
        }
        queue.lastRenderedState = newState;
      }
      return [newState, dispatch];
    }
    function mountMutableSource(source, getSnapshot, subscribe) {
      {
        return void 0;
      }
    }
    function updateMutableSource(source, getSnapshot, subscribe) {
      {
        return void 0;
      }
    }
    function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
      var fiber = currentlyRenderingFiber$1;
      var hook = mountWorkInProgressHook();
      var nextSnapshot;
      var isHydrating2 = getIsHydrating();
      if (isHydrating2) {
        if (getServerSnapshot === void 0) {
          throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
        }
        nextSnapshot = getServerSnapshot();
        {
          if (!didWarnUncachedGetSnapshot) {
            if (nextSnapshot !== getServerSnapshot()) {
              error("The result of getServerSnapshot should be cached to avoid an infinite loop");
              didWarnUncachedGetSnapshot = true;
            }
          }
        }
      } else {
        nextSnapshot = getSnapshot();
        {
          if (!didWarnUncachedGetSnapshot) {
            var cachedSnapshot = getSnapshot();
            if (!objectIs(nextSnapshot, cachedSnapshot)) {
              error("The result of getSnapshot should be cached to avoid an infinite loop");
              didWarnUncachedGetSnapshot = true;
            }
          }
        }
        var root2 = getWorkInProgressRoot();
        if (root2 === null) {
          throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
        }
        if (!includesBlockingLane(root2, renderLanes)) {
          pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
        }
      }
      hook.memoizedState = nextSnapshot;
      var inst = {
        value: nextSnapshot,
        getSnapshot
      };
      hook.queue = inst;
      mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
      fiber.flags |= Passive;
      pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
      return nextSnapshot;
    }
    function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
      var fiber = currentlyRenderingFiber$1;
      var hook = updateWorkInProgressHook();
      var nextSnapshot = getSnapshot();
      {
        if (!didWarnUncachedGetSnapshot) {
          var cachedSnapshot = getSnapshot();
          if (!objectIs(nextSnapshot, cachedSnapshot)) {
            error("The result of getSnapshot should be cached to avoid an infinite loop");
            didWarnUncachedGetSnapshot = true;
          }
        }
      }
      var prevSnapshot = hook.memoizedState;
      var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);
      if (snapshotChanged) {
        hook.memoizedState = nextSnapshot;
        markWorkInProgressReceivedUpdate();
      }
      var inst = hook.queue;
      updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
      if (inst.getSnapshot !== getSnapshot || snapshotChanged || // Check if the susbcribe function changed. We can save some memory by
      // checking whether we scheduled a subscription effect above.
      workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {
        fiber.flags |= Passive;
        pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
        var root2 = getWorkInProgressRoot();
        if (root2 === null) {
          throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
        }
        if (!includesBlockingLane(root2, renderLanes)) {
          pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
        }
      }
      return nextSnapshot;
    }
    function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
      fiber.flags |= StoreConsistency;
      var check = {
        getSnapshot,
        value: renderedSnapshot
      };
      var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
      if (componentUpdateQueue === null) {
        componentUpdateQueue = createFunctionComponentUpdateQueue();
        currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
        componentUpdateQueue.stores = [check];
      } else {
        var stores = componentUpdateQueue.stores;
        if (stores === null) {
          componentUpdateQueue.stores = [check];
        } else {
          stores.push(check);
        }
      }
    }
    function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
      inst.value = nextSnapshot;
      inst.getSnapshot = getSnapshot;
      if (checkIfSnapshotChanged(inst)) {
        forceStoreRerender(fiber);
      }
    }
    function subscribeToStore(fiber, inst, subscribe) {
      var handleStoreChange = function() {
        if (checkIfSnapshotChanged(inst)) {
          forceStoreRerender(fiber);
        }
      };
      return subscribe(handleStoreChange);
    }
    function checkIfSnapshotChanged(inst) {
      var latestGetSnapshot = inst.getSnapshot;
      var prevValue = inst.value;
      try {
        var nextValue = latestGetSnapshot();
        return !objectIs(prevValue, nextValue);
      } catch (error2) {
        return true;
      }
    }
    function forceStoreRerender(fiber) {
      var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
      if (root2 !== null) {
        scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
      }
    }
    function mountState(initialState) {
      var hook = mountWorkInProgressHook();
      if (typeof initialState === "function") {
        initialState = initialState();
      }
      hook.memoizedState = hook.baseState = initialState;
      var queue = {
        pending: null,
        interleaved: null,
        lanes: NoLanes,
        dispatch: null,
        lastRenderedReducer: basicStateReducer,
        lastRenderedState: initialState
      };
      hook.queue = queue;
      var dispatch = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);
      return [hook.memoizedState, dispatch];
    }
    function updateState(initialState) {
      return updateReducer(basicStateReducer);
    }
    function rerenderState(initialState) {
      return rerenderReducer(basicStateReducer);
    }
    function pushEffect(tag, create, destroy, deps) {
      var effect = {
        tag,
        create,
        destroy,
        deps,
        // Circular
        next: null
      };
      var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
      if (componentUpdateQueue === null) {
        componentUpdateQueue = createFunctionComponentUpdateQueue();
        currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
        componentUpdateQueue.lastEffect = effect.next = effect;
      } else {
        var lastEffect = componentUpdateQueue.lastEffect;
        if (lastEffect === null) {
          componentUpdateQueue.lastEffect = effect.next = effect;
        } else {
          var firstEffect = lastEffect.next;
          lastEffect.next = effect;
          effect.next = firstEffect;
          componentUpdateQueue.lastEffect = effect;
        }
      }
      return effect;
    }
    function mountRef(initialValue) {
      var hook = mountWorkInProgressHook();
      {
        var _ref2 = {
          current: initialValue
        };
        hook.memoizedState = _ref2;
        return _ref2;
      }
    }
    function updateRef(initialValue) {
      var hook = updateWorkInProgressHook();
      return hook.memoizedState;
    }
    function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
      var hook = mountWorkInProgressHook();
      var nextDeps = deps === void 0 ? null : deps;
      currentlyRenderingFiber$1.flags |= fiberFlags;
      hook.memoizedState = pushEffect(HasEffect | hookFlags, create, void 0, nextDeps);
    }
    function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
      var hook = updateWorkInProgressHook();
      var nextDeps = deps === void 0 ? null : deps;
      var destroy = void 0;
      if (currentHook !== null) {
        var prevEffect = currentHook.memoizedState;
        destroy = prevEffect.destroy;
        if (nextDeps !== null) {
          var prevDeps = prevEffect.deps;
          if (areHookInputsEqual(nextDeps, prevDeps)) {
            hook.memoizedState = pushEffect(hookFlags, create, destroy, nextDeps);
            return;
          }
        }
      }
      currentlyRenderingFiber$1.flags |= fiberFlags;
      hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
    }
    function mountEffect(create, deps) {
      if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
        return mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create, deps);
      } else {
        return mountEffectImpl(Passive | PassiveStatic, Passive$1, create, deps);
      }
    }
    function updateEffect(create, deps) {
      return updateEffectImpl(Passive, Passive$1, create, deps);
    }
    function mountInsertionEffect(create, deps) {
      return mountEffectImpl(Update, Insertion, create, deps);
    }
    function updateInsertionEffect(create, deps) {
      return updateEffectImpl(Update, Insertion, create, deps);
    }
    function mountLayoutEffect(create, deps) {
      var fiberFlags = Update;
      {
        fiberFlags |= LayoutStatic;
      }
      if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
        fiberFlags |= MountLayoutDev;
      }
      return mountEffectImpl(fiberFlags, Layout, create, deps);
    }
    function updateLayoutEffect(create, deps) {
      return updateEffectImpl(Update, Layout, create, deps);
    }
    function imperativeHandleEffect(create, ref) {
      if (typeof ref === "function") {
        var refCallback = ref;
        var _inst = create();
        refCallback(_inst);
        return function() {
          refCallback(null);
        };
      } else if (ref !== null && ref !== void 0) {
        var refObject = ref;
        {
          if (!refObject.hasOwnProperty("current")) {
            error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
          }
        }
        var _inst2 = create();
        refObject.current = _inst2;
        return function() {
          refObject.current = null;
        };
      }
    }
    function mountImperativeHandle(ref, create, deps) {
      {
        if (typeof create !== "function") {
          error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
        }
      }
      var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
      var fiberFlags = Update;
      {
        fiberFlags |= LayoutStatic;
      }
      if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
        fiberFlags |= MountLayoutDev;
      }
      return mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
    }
    function updateImperativeHandle(ref, create, deps) {
      {
        if (typeof create !== "function") {
          error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
        }
      }
      var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
      return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
    }
    function mountDebugValue(value, formatterFn) {
    }
    var updateDebugValue = mountDebugValue;
    function mountCallback(callback, deps) {
      var hook = mountWorkInProgressHook();
      var nextDeps = deps === void 0 ? null : deps;
      hook.memoizedState = [callback, nextDeps];
      return callback;
    }
    function updateCallback(callback, deps) {
      var hook = updateWorkInProgressHook();
      var nextDeps = deps === void 0 ? null : deps;
      var prevState = hook.memoizedState;
      if (prevState !== null) {
        if (nextDeps !== null) {
          var prevDeps = prevState[1];
          if (areHookInputsEqual(nextDeps, prevDeps)) {
            return prevState[0];
          }
        }
      }
      hook.memoizedState = [callback, nextDeps];
      return callback;
    }
    function mountMemo(nextCreate, deps) {
      var hook = mountWorkInProgressHook();
      var nextDeps = deps === void 0 ? null : deps;
      var nextValue = nextCreate();
      hook.memoizedState = [nextValue, nextDeps];
      return nextValue;
    }
    function updateMemo(nextCreate, deps) {
      var hook = updateWorkInProgressHook();
      var nextDeps = deps === void 0 ? null : deps;
      var prevState = hook.memoizedState;
      if (prevState !== null) {
        if (nextDeps !== null) {
          var prevDeps = prevState[1];
          if (areHookInputsEqual(nextDeps, prevDeps)) {
            return prevState[0];
          }
        }
      }
      var nextValue = nextCreate();
      hook.memoizedState = [nextValue, nextDeps];
      return nextValue;
    }
    function mountDeferredValue(value) {
      var hook = mountWorkInProgressHook();
      hook.memoizedState = value;
      return value;
    }
    function updateDeferredValue(value) {
      var hook = updateWorkInProgressHook();
      var resolvedCurrentHook = currentHook;
      var prevValue = resolvedCurrentHook.memoizedState;
      return updateDeferredValueImpl(hook, prevValue, value);
    }
    function rerenderDeferredValue(value) {
      var hook = updateWorkInProgressHook();
      if (currentHook === null) {
        hook.memoizedState = value;
        return value;
      } else {
        var prevValue = currentHook.memoizedState;
        return updateDeferredValueImpl(hook, prevValue, value);
      }
    }
    function updateDeferredValueImpl(hook, prevValue, value) {
      var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);
      if (shouldDeferValue) {
        if (!objectIs(value, prevValue)) {
          var deferredLane = claimNextTransitionLane();
          currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane);
          markSkippedUpdateLanes(deferredLane);
          hook.baseState = true;
        }
        return prevValue;
      } else {
        if (hook.baseState) {
          hook.baseState = false;
          markWorkInProgressReceivedUpdate();
        }
        hook.memoizedState = value;
        return value;
      }
    }
    function startTransition(setPending, callback, options2) {
      var previousPriority = getCurrentUpdatePriority();
      setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));
      setPending(true);
      var prevTransition = ReactCurrentBatchConfig$2.transition;
      ReactCurrentBatchConfig$2.transition = {};
      var currentTransition = ReactCurrentBatchConfig$2.transition;
      {
        ReactCurrentBatchConfig$2.transition._updatedFibers = /* @__PURE__ */ new Set();
      }
      try {
        setPending(false);
        callback();
      } finally {
        setCurrentUpdatePriority(previousPriority);
        ReactCurrentBatchConfig$2.transition = prevTransition;
        {
          if (prevTransition === null && currentTransition._updatedFibers) {
            var updatedFibersCount = currentTransition._updatedFibers.size;
            if (updatedFibersCount > 10) {
              warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
            }
            currentTransition._updatedFibers.clear();
          }
        }
      }
    }
    function mountTransition() {
      var _mountState = mountState(false), isPending = _mountState[0], setPending = _mountState[1];
      var start = startTransition.bind(null, setPending);
      var hook = mountWorkInProgressHook();
      hook.memoizedState = start;
      return [isPending, start];
    }
    function updateTransition() {
      var _updateState = updateState(), isPending = _updateState[0];
      var hook = updateWorkInProgressHook();
      var start = hook.memoizedState;
      return [isPending, start];
    }
    function rerenderTransition() {
      var _rerenderState = rerenderState(), isPending = _rerenderState[0];
      var hook = updateWorkInProgressHook();
      var start = hook.memoizedState;
      return [isPending, start];
    }
    var isUpdatingOpaqueValueInRenderPhase = false;
    function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
      {
        return isUpdatingOpaqueValueInRenderPhase;
      }
    }
    function mountId() {
      var hook = mountWorkInProgressHook();
      var root2 = getWorkInProgressRoot();
      var identifierPrefix = root2.identifierPrefix;
      var id;
      if (getIsHydrating()) {
        var treeId = getTreeId();
        id = ":" + identifierPrefix + "R" + treeId;
        var localId = localIdCounter++;
        if (localId > 0) {
          id += "H" + localId.toString(32);
        }
        id += ":";
      } else {
        var globalClientId = globalClientIdCounter++;
        id = ":" + identifierPrefix + "r" + globalClientId.toString(32) + ":";
      }
      hook.memoizedState = id;
      return id;
    }
    function updateId() {
      var hook = updateWorkInProgressHook();
      var id = hook.memoizedState;
      return id;
    }
    function dispatchReducerAction(fiber, queue, action) {
      {
        if (typeof arguments[3] === "function") {
          error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
        }
      }
      var lane = requestUpdateLane(fiber);
      var update = {
        lane,
        action,
        hasEagerState: false,
        eagerState: null,
        next: null
      };
      if (isRenderPhaseUpdate(fiber)) {
        enqueueRenderPhaseUpdate(queue, update);
      } else {
        var root2 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
        if (root2 !== null) {
          var eventTime = requestEventTime();
          scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
          entangleTransitionUpdate(root2, queue, lane);
        }
      }
      markUpdateInDevTools(fiber, lane);
    }
    function dispatchSetState(fiber, queue, action) {
      {
        if (typeof arguments[3] === "function") {
          error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
        }
      }
      var lane = requestUpdateLane(fiber);
      var update = {
        lane,
        action,
        hasEagerState: false,
        eagerState: null,
        next: null
      };
      if (isRenderPhaseUpdate(fiber)) {
        enqueueRenderPhaseUpdate(queue, update);
      } else {
        var alternate = fiber.alternate;
        if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
          var lastRenderedReducer = queue.lastRenderedReducer;
          if (lastRenderedReducer !== null) {
            var prevDispatcher;
            {
              prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            }
            try {
              var currentState = queue.lastRenderedState;
              var eagerState = lastRenderedReducer(currentState, action);
              update.hasEagerState = true;
              update.eagerState = eagerState;
              if (objectIs(eagerState, currentState)) {
                enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane);
                return;
              }
            } catch (error2) {
            } finally {
              {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            }
          }
        }
        var root2 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
        if (root2 !== null) {
          var eventTime = requestEventTime();
          scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
          entangleTransitionUpdate(root2, queue, lane);
        }
      }
      markUpdateInDevTools(fiber, lane);
    }
    function isRenderPhaseUpdate(fiber) {
      var alternate = fiber.alternate;
      return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;
    }
    function enqueueRenderPhaseUpdate(queue, update) {
      didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
      var pending = queue.pending;
      if (pending === null) {
        update.next = update;
      } else {
        update.next = pending.next;
        pending.next = update;
      }
      queue.pending = update;
    }
    function entangleTransitionUpdate(root2, queue, lane) {
      if (isTransitionLane(lane)) {
        var queueLanes = queue.lanes;
        queueLanes = intersectLanes(queueLanes, root2.pendingLanes);
        var newQueueLanes = mergeLanes(queueLanes, lane);
        queue.lanes = newQueueLanes;
        markRootEntangled(root2, newQueueLanes);
      }
    }
    function markUpdateInDevTools(fiber, lane, action) {
      {
        markStateUpdateScheduled(fiber, lane);
      }
    }
    var ContextOnlyDispatcher = {
      readContext,
      useCallback: throwInvalidHookError,
      useContext: throwInvalidHookError,
      useEffect: throwInvalidHookError,
      useImperativeHandle: throwInvalidHookError,
      useInsertionEffect: throwInvalidHookError,
      useLayoutEffect: throwInvalidHookError,
      useMemo: throwInvalidHookError,
      useReducer: throwInvalidHookError,
      useRef: throwInvalidHookError,
      useState: throwInvalidHookError,
      useDebugValue: throwInvalidHookError,
      useDeferredValue: throwInvalidHookError,
      useTransition: throwInvalidHookError,
      useMutableSource: throwInvalidHookError,
      useSyncExternalStore: throwInvalidHookError,
      useId: throwInvalidHookError,
      unstable_isNewReconciler: enableNewReconciler
    };
    var HooksDispatcherOnMountInDEV = null;
    var HooksDispatcherOnMountWithHookTypesInDEV = null;
    var HooksDispatcherOnUpdateInDEV = null;
    var HooksDispatcherOnRerenderInDEV = null;
    var InvalidNestedHooksDispatcherOnMountInDEV = null;
    var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
    var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
    {
      var warnInvalidContextAccess = function() {
        error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
      };
      var warnInvalidHookAccess = function() {
        error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
      };
      HooksDispatcherOnMountInDEV = {
        readContext: function(context) {
          return readContext(context);
        },
        useCallback: function(callback, deps) {
          currentHookNameInDev = "useCallback";
          mountHookTypesDev();
          checkDepsAreArrayDev(deps);
          return mountCallback(callback, deps);
        },
        useContext: function(context) {
          currentHookNameInDev = "useContext";
          mountHookTypesDev();
          return readContext(context);
        },
        useEffect: function(create, deps) {
          currentHookNameInDev = "useEffect";
          mountHookTypesDev();
          checkDepsAreArrayDev(deps);
          return mountEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
          currentHookNameInDev = "useImperativeHandle";
          mountHookTypesDev();
          checkDepsAreArrayDev(deps);
          return mountImperativeHandle(ref, create, deps);
        },
        useInsertionEffect: function(create, deps) {
          currentHookNameInDev = "useInsertionEffect";
          mountHookTypesDev();
          checkDepsAreArrayDev(deps);
          return mountInsertionEffect(create, deps);
        },
        useLayoutEffect: function(create, deps) {
          currentHookNameInDev = "useLayoutEffect";
          mountHookTypesDev();
          checkDepsAreArrayDev(deps);
          return mountLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
          currentHookNameInDev = "useMemo";
          mountHookTypesDev();
          checkDepsAreArrayDev(deps);
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
          try {
            return mountMemo(create, deps);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useReducer: function(reducer, initialArg, init) {
          currentHookNameInDev = "useReducer";
          mountHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
          try {
            return mountReducer(reducer, initialArg, init);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useRef: function(initialValue) {
          currentHookNameInDev = "useRef";
          mountHookTypesDev();
          return mountRef(initialValue);
        },
        useState: function(initialState) {
          currentHookNameInDev = "useState";
          mountHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
          try {
            return mountState(initialState);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useDebugValue: function(value, formatterFn) {
          currentHookNameInDev = "useDebugValue";
          mountHookTypesDev();
          return mountDebugValue();
        },
        useDeferredValue: function(value) {
          currentHookNameInDev = "useDeferredValue";
          mountHookTypesDev();
          return mountDeferredValue(value);
        },
        useTransition: function() {
          currentHookNameInDev = "useTransition";
          mountHookTypesDev();
          return mountTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
          currentHookNameInDev = "useMutableSource";
          mountHookTypesDev();
          return mountMutableSource();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
          currentHookNameInDev = "useSyncExternalStore";
          mountHookTypesDev();
          return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
        },
        useId: function() {
          currentHookNameInDev = "useId";
          mountHookTypesDev();
          return mountId();
        },
        unstable_isNewReconciler: enableNewReconciler
      };
      HooksDispatcherOnMountWithHookTypesInDEV = {
        readContext: function(context) {
          return readContext(context);
        },
        useCallback: function(callback, deps) {
          currentHookNameInDev = "useCallback";
          updateHookTypesDev();
          return mountCallback(callback, deps);
        },
        useContext: function(context) {
          currentHookNameInDev = "useContext";
          updateHookTypesDev();
          return readContext(context);
        },
        useEffect: function(create, deps) {
          currentHookNameInDev = "useEffect";
          updateHookTypesDev();
          return mountEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
          currentHookNameInDev = "useImperativeHandle";
          updateHookTypesDev();
          return mountImperativeHandle(ref, create, deps);
        },
        useInsertionEffect: function(create, deps) {
          currentHookNameInDev = "useInsertionEffect";
          updateHookTypesDev();
          return mountInsertionEffect(create, deps);
        },
        useLayoutEffect: function(create, deps) {
          currentHookNameInDev = "useLayoutEffect";
          updateHookTypesDev();
          return mountLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
          currentHookNameInDev = "useMemo";
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
          try {
            return mountMemo(create, deps);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useReducer: function(reducer, initialArg, init) {
          currentHookNameInDev = "useReducer";
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
          try {
            return mountReducer(reducer, initialArg, init);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useRef: function(initialValue) {
          currentHookNameInDev = "useRef";
          updateHookTypesDev();
          return mountRef(initialValue);
        },
        useState: function(initialState) {
          currentHookNameInDev = "useState";
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
          try {
            return mountState(initialState);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useDebugValue: function(value, formatterFn) {
          currentHookNameInDev = "useDebugValue";
          updateHookTypesDev();
          return mountDebugValue();
        },
        useDeferredValue: function(value) {
          currentHookNameInDev = "useDeferredValue";
          updateHookTypesDev();
          return mountDeferredValue(value);
        },
        useTransition: function() {
          currentHookNameInDev = "useTransition";
          updateHookTypesDev();
          return mountTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
          currentHookNameInDev = "useMutableSource";
          updateHookTypesDev();
          return mountMutableSource();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
          currentHookNameInDev = "useSyncExternalStore";
          updateHookTypesDev();
          return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
        },
        useId: function() {
          currentHookNameInDev = "useId";
          updateHookTypesDev();
          return mountId();
        },
        unstable_isNewReconciler: enableNewReconciler
      };
      HooksDispatcherOnUpdateInDEV = {
        readContext: function(context) {
          return readContext(context);
        },
        useCallback: function(callback, deps) {
          currentHookNameInDev = "useCallback";
          updateHookTypesDev();
          return updateCallback(callback, deps);
        },
        useContext: function(context) {
          currentHookNameInDev = "useContext";
          updateHookTypesDev();
          return readContext(context);
        },
        useEffect: function(create, deps) {
          currentHookNameInDev = "useEffect";
          updateHookTypesDev();
          return updateEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
          currentHookNameInDev = "useImperativeHandle";
          updateHookTypesDev();
          return updateImperativeHandle(ref, create, deps);
        },
        useInsertionEffect: function(create, deps) {
          currentHookNameInDev = "useInsertionEffect";
          updateHookTypesDev();
          return updateInsertionEffect(create, deps);
        },
        useLayoutEffect: function(create, deps) {
          currentHookNameInDev = "useLayoutEffect";
          updateHookTypesDev();
          return updateLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
          currentHookNameInDev = "useMemo";
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
          try {
            return updateMemo(create, deps);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useReducer: function(reducer, initialArg, init) {
          currentHookNameInDev = "useReducer";
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
          try {
            return updateReducer(reducer, initialArg, init);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useRef: function(initialValue) {
          currentHookNameInDev = "useRef";
          updateHookTypesDev();
          return updateRef();
        },
        useState: function(initialState) {
          currentHookNameInDev = "useState";
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
          try {
            return updateState(initialState);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useDebugValue: function(value, formatterFn) {
          currentHookNameInDev = "useDebugValue";
          updateHookTypesDev();
          return updateDebugValue();
        },
        useDeferredValue: function(value) {
          currentHookNameInDev = "useDeferredValue";
          updateHookTypesDev();
          return updateDeferredValue(value);
        },
        useTransition: function() {
          currentHookNameInDev = "useTransition";
          updateHookTypesDev();
          return updateTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
          currentHookNameInDev = "useMutableSource";
          updateHookTypesDev();
          return updateMutableSource();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
          currentHookNameInDev = "useSyncExternalStore";
          updateHookTypesDev();
          return updateSyncExternalStore(subscribe, getSnapshot);
        },
        useId: function() {
          currentHookNameInDev = "useId";
          updateHookTypesDev();
          return updateId();
        },
        unstable_isNewReconciler: enableNewReconciler
      };
      HooksDispatcherOnRerenderInDEV = {
        readContext: function(context) {
          return readContext(context);
        },
        useCallback: function(callback, deps) {
          currentHookNameInDev = "useCallback";
          updateHookTypesDev();
          return updateCallback(callback, deps);
        },
        useContext: function(context) {
          currentHookNameInDev = "useContext";
          updateHookTypesDev();
          return readContext(context);
        },
        useEffect: function(create, deps) {
          currentHookNameInDev = "useEffect";
          updateHookTypesDev();
          return updateEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
          currentHookNameInDev = "useImperativeHandle";
          updateHookTypesDev();
          return updateImperativeHandle(ref, create, deps);
        },
        useInsertionEffect: function(create, deps) {
          currentHookNameInDev = "useInsertionEffect";
          updateHookTypesDev();
          return updateInsertionEffect(create, deps);
        },
        useLayoutEffect: function(create, deps) {
          currentHookNameInDev = "useLayoutEffect";
          updateHookTypesDev();
          return updateLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
          currentHookNameInDev = "useMemo";
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
          try {
            return updateMemo(create, deps);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useReducer: function(reducer, initialArg, init) {
          currentHookNameInDev = "useReducer";
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
          try {
            return rerenderReducer(reducer, initialArg, init);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useRef: function(initialValue) {
          currentHookNameInDev = "useRef";
          updateHookTypesDev();
          return updateRef();
        },
        useState: function(initialState) {
          currentHookNameInDev = "useState";
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
          try {
            return rerenderState(initialState);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useDebugValue: function(value, formatterFn) {
          currentHookNameInDev = "useDebugValue";
          updateHookTypesDev();
          return updateDebugValue();
        },
        useDeferredValue: function(value) {
          currentHookNameInDev = "useDeferredValue";
          updateHookTypesDev();
          return rerenderDeferredValue(value);
        },
        useTransition: function() {
          currentHookNameInDev = "useTransition";
          updateHookTypesDev();
          return rerenderTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
          currentHookNameInDev = "useMutableSource";
          updateHookTypesDev();
          return updateMutableSource();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
          currentHookNameInDev = "useSyncExternalStore";
          updateHookTypesDev();
          return updateSyncExternalStore(subscribe, getSnapshot);
        },
        useId: function() {
          currentHookNameInDev = "useId";
          updateHookTypesDev();
          return updateId();
        },
        unstable_isNewReconciler: enableNewReconciler
      };
      InvalidNestedHooksDispatcherOnMountInDEV = {
        readContext: function(context) {
          warnInvalidContextAccess();
          return readContext(context);
        },
        useCallback: function(callback, deps) {
          currentHookNameInDev = "useCallback";
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountCallback(callback, deps);
        },
        useContext: function(context) {
          currentHookNameInDev = "useContext";
          warnInvalidHookAccess();
          mountHookTypesDev();
          return readContext(context);
        },
        useEffect: function(create, deps) {
          currentHookNameInDev = "useEffect";
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
          currentHookNameInDev = "useImperativeHandle";
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountImperativeHandle(ref, create, deps);
        },
        useInsertionEffect: function(create, deps) {
          currentHookNameInDev = "useInsertionEffect";
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountInsertionEffect(create, deps);
        },
        useLayoutEffect: function(create, deps) {
          currentHookNameInDev = "useLayoutEffect";
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
          currentHookNameInDev = "useMemo";
          warnInvalidHookAccess();
          mountHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
          try {
            return mountMemo(create, deps);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useReducer: function(reducer, initialArg, init) {
          currentHookNameInDev = "useReducer";
          warnInvalidHookAccess();
          mountHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
          try {
            return mountReducer(reducer, initialArg, init);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useRef: function(initialValue) {
          currentHookNameInDev = "useRef";
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountRef(initialValue);
        },
        useState: function(initialState) {
          currentHookNameInDev = "useState";
          warnInvalidHookAccess();
          mountHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
          try {
            return mountState(initialState);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useDebugValue: function(value, formatterFn) {
          currentHookNameInDev = "useDebugValue";
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountDebugValue();
        },
        useDeferredValue: function(value) {
          currentHookNameInDev = "useDeferredValue";
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountDeferredValue(value);
        },
        useTransition: function() {
          currentHookNameInDev = "useTransition";
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
          currentHookNameInDev = "useMutableSource";
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountMutableSource();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
          currentHookNameInDev = "useSyncExternalStore";
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
        },
        useId: function() {
          currentHookNameInDev = "useId";
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountId();
        },
        unstable_isNewReconciler: enableNewReconciler
      };
      InvalidNestedHooksDispatcherOnUpdateInDEV = {
        readContext: function(context) {
          warnInvalidContextAccess();
          return readContext(context);
        },
        useCallback: function(callback, deps) {
          currentHookNameInDev = "useCallback";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateCallback(callback, deps);
        },
        useContext: function(context) {
          currentHookNameInDev = "useContext";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return readContext(context);
        },
        useEffect: function(create, deps) {
          currentHookNameInDev = "useEffect";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
          currentHookNameInDev = "useImperativeHandle";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateImperativeHandle(ref, create, deps);
        },
        useInsertionEffect: function(create, deps) {
          currentHookNameInDev = "useInsertionEffect";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateInsertionEffect(create, deps);
        },
        useLayoutEffect: function(create, deps) {
          currentHookNameInDev = "useLayoutEffect";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
          currentHookNameInDev = "useMemo";
          warnInvalidHookAccess();
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
          try {
            return updateMemo(create, deps);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useReducer: function(reducer, initialArg, init) {
          currentHookNameInDev = "useReducer";
          warnInvalidHookAccess();
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
          try {
            return updateReducer(reducer, initialArg, init);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useRef: function(initialValue) {
          currentHookNameInDev = "useRef";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateRef();
        },
        useState: function(initialState) {
          currentHookNameInDev = "useState";
          warnInvalidHookAccess();
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
          try {
            return updateState(initialState);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useDebugValue: function(value, formatterFn) {
          currentHookNameInDev = "useDebugValue";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateDebugValue();
        },
        useDeferredValue: function(value) {
          currentHookNameInDev = "useDeferredValue";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateDeferredValue(value);
        },
        useTransition: function() {
          currentHookNameInDev = "useTransition";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
          currentHookNameInDev = "useMutableSource";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateMutableSource();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
          currentHookNameInDev = "useSyncExternalStore";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateSyncExternalStore(subscribe, getSnapshot);
        },
        useId: function() {
          currentHookNameInDev = "useId";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateId();
        },
        unstable_isNewReconciler: enableNewReconciler
      };
      InvalidNestedHooksDispatcherOnRerenderInDEV = {
        readContext: function(context) {
          warnInvalidContextAccess();
          return readContext(context);
        },
        useCallback: function(callback, deps) {
          currentHookNameInDev = "useCallback";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateCallback(callback, deps);
        },
        useContext: function(context) {
          currentHookNameInDev = "useContext";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return readContext(context);
        },
        useEffect: function(create, deps) {
          currentHookNameInDev = "useEffect";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
          currentHookNameInDev = "useImperativeHandle";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateImperativeHandle(ref, create, deps);
        },
        useInsertionEffect: function(create, deps) {
          currentHookNameInDev = "useInsertionEffect";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateInsertionEffect(create, deps);
        },
        useLayoutEffect: function(create, deps) {
          currentHookNameInDev = "useLayoutEffect";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
          currentHookNameInDev = "useMemo";
          warnInvalidHookAccess();
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
          try {
            return updateMemo(create, deps);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useReducer: function(reducer, initialArg, init) {
          currentHookNameInDev = "useReducer";
          warnInvalidHookAccess();
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
          try {
            return rerenderReducer(reducer, initialArg, init);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useRef: function(initialValue) {
          currentHookNameInDev = "useRef";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateRef();
        },
        useState: function(initialState) {
          currentHookNameInDev = "useState";
          warnInvalidHookAccess();
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
          try {
            return rerenderState(initialState);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useDebugValue: function(value, formatterFn) {
          currentHookNameInDev = "useDebugValue";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateDebugValue();
        },
        useDeferredValue: function(value) {
          currentHookNameInDev = "useDeferredValue";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return rerenderDeferredValue(value);
        },
        useTransition: function() {
          currentHookNameInDev = "useTransition";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return rerenderTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
          currentHookNameInDev = "useMutableSource";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateMutableSource();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
          currentHookNameInDev = "useSyncExternalStore";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateSyncExternalStore(subscribe, getSnapshot);
        },
        useId: function() {
          currentHookNameInDev = "useId";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateId();
        },
        unstable_isNewReconciler: enableNewReconciler
      };
    }
    var now$1 = Scheduler.unstable_now;
    var commitTime = 0;
    var layoutEffectStartTime = -1;
    var profilerStartTime = -1;
    var passiveEffectStartTime = -1;
    var currentUpdateIsNested = false;
    var nestedUpdateScheduled = false;
    function isCurrentUpdateNested() {
      return currentUpdateIsNested;
    }
    function markNestedUpdateScheduled() {
      {
        nestedUpdateScheduled = true;
      }
    }
    function resetNestedUpdateFlag() {
      {
        currentUpdateIsNested = false;
        nestedUpdateScheduled = false;
      }
    }
    function syncNestedUpdateFlag() {
      {
        currentUpdateIsNested = nestedUpdateScheduled;
        nestedUpdateScheduled = false;
      }
    }
    function getCommitTime() {
      return commitTime;
    }
    function recordCommitTime() {
      commitTime = now$1();
    }
    function startProfilerTimer(fiber) {
      profilerStartTime = now$1();
      if (fiber.actualStartTime < 0) {
        fiber.actualStartTime = now$1();
      }
    }
    function stopProfilerTimerIfRunning(fiber) {
      profilerStartTime = -1;
    }
    function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
      if (profilerStartTime >= 0) {
        var elapsedTime = now$1() - profilerStartTime;
        fiber.actualDuration += elapsedTime;
        if (overrideBaseTime) {
          fiber.selfBaseDuration = elapsedTime;
        }
        profilerStartTime = -1;
      }
    }
    function recordLayoutEffectDuration(fiber) {
      if (layoutEffectStartTime >= 0) {
        var elapsedTime = now$1() - layoutEffectStartTime;
        layoutEffectStartTime = -1;
        var parentFiber = fiber.return;
        while (parentFiber !== null) {
          switch (parentFiber.tag) {
            case HostRoot:
              var root2 = parentFiber.stateNode;
              root2.effectDuration += elapsedTime;
              return;
            case Profiler:
              var parentStateNode = parentFiber.stateNode;
              parentStateNode.effectDuration += elapsedTime;
              return;
          }
          parentFiber = parentFiber.return;
        }
      }
    }
    function recordPassiveEffectDuration(fiber) {
      if (passiveEffectStartTime >= 0) {
        var elapsedTime = now$1() - passiveEffectStartTime;
        passiveEffectStartTime = -1;
        var parentFiber = fiber.return;
        while (parentFiber !== null) {
          switch (parentFiber.tag) {
            case HostRoot:
              var root2 = parentFiber.stateNode;
              if (root2 !== null) {
                root2.passiveEffectDuration += elapsedTime;
              }
              return;
            case Profiler:
              var parentStateNode = parentFiber.stateNode;
              if (parentStateNode !== null) {
                parentStateNode.passiveEffectDuration += elapsedTime;
              }
              return;
          }
          parentFiber = parentFiber.return;
        }
      }
    }
    function startLayoutEffectTimer() {
      layoutEffectStartTime = now$1();
    }
    function startPassiveEffectTimer() {
      passiveEffectStartTime = now$1();
    }
    function transferActualDuration(fiber) {
      var child = fiber.child;
      while (child) {
        fiber.actualDuration += child.actualDuration;
        child = child.sibling;
      }
    }
    function createCapturedValueAtFiber(value, source) {
      return {
        value,
        source,
        stack: getStackByFiberInDevAndProd(source),
        digest: null
      };
    }
    function createCapturedValue(value, digest, stack) {
      return {
        value,
        source: null,
        stack: stack != null ? stack : null,
        digest: digest != null ? digest : null
      };
    }
    function showErrorDialog(boundary, errorInfo) {
      return true;
    }
    function logCapturedError(boundary, errorInfo) {
      try {
        var logError = showErrorDialog(boundary, errorInfo);
        if (logError === false) {
          return;
        }
        var error2 = errorInfo.value;
        if (true) {
          var source = errorInfo.source;
          var stack = errorInfo.stack;
          var componentStack = stack !== null ? stack : "";
          if (error2 != null && error2._suppressLogging) {
            if (boundary.tag === ClassComponent) {
              return;
            }
            console["error"](error2);
          }
          var componentName = source ? getComponentNameFromFiber(source) : null;
          var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
          var errorBoundaryMessage;
          if (boundary.tag === HostRoot) {
            errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
          } else {
            var errorBoundaryName = getComponentNameFromFiber(boundary) || "Anonymous";
            errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
          }
          var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage);
          console["error"](combinedMessage);
        } else {
          console["error"](error2);
        }
      } catch (e) {
        setTimeout(function() {
          throw e;
        });
      }
    }
    var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
    function createRootErrorUpdate(fiber, errorInfo, lane) {
      var update = createUpdate(NoTimestamp, lane);
      update.tag = CaptureUpdate;
      update.payload = {
        element: null
      };
      var error2 = errorInfo.value;
      update.callback = function() {
        onUncaughtError(error2);
        logCapturedError(fiber, errorInfo);
      };
      return update;
    }
    function createClassErrorUpdate(fiber, errorInfo, lane) {
      var update = createUpdate(NoTimestamp, lane);
      update.tag = CaptureUpdate;
      var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
      if (typeof getDerivedStateFromError === "function") {
        var error$1 = errorInfo.value;
        update.payload = function() {
          return getDerivedStateFromError(error$1);
        };
        update.callback = function() {
          {
            markFailedErrorBoundaryForHotReloading(fiber);
          }
          logCapturedError(fiber, errorInfo);
        };
      }
      var inst = fiber.stateNode;
      if (inst !== null && typeof inst.componentDidCatch === "function") {
        update.callback = function callback() {
          {
            markFailedErrorBoundaryForHotReloading(fiber);
          }
          logCapturedError(fiber, errorInfo);
          if (typeof getDerivedStateFromError !== "function") {
            markLegacyErrorBoundaryAsFailed(this);
          }
          var error$12 = errorInfo.value;
          var stack = errorInfo.stack;
          this.componentDidCatch(error$12, {
            componentStack: stack !== null ? stack : ""
          });
          {
            if (typeof getDerivedStateFromError !== "function") {
              if (!includesSomeLane(fiber.lanes, SyncLane)) {
                error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentNameFromFiber(fiber) || "Unknown");
              }
            }
          }
        };
      }
      return update;
    }
    function attachPingListener(root2, wakeable, lanes) {
      var pingCache = root2.pingCache;
      var threadIDs;
      if (pingCache === null) {
        pingCache = root2.pingCache = new PossiblyWeakMap$1();
        threadIDs = /* @__PURE__ */ new Set();
        pingCache.set(wakeable, threadIDs);
      } else {
        threadIDs = pingCache.get(wakeable);
        if (threadIDs === void 0) {
          threadIDs = /* @__PURE__ */ new Set();
          pingCache.set(wakeable, threadIDs);
        }
      }
      if (!threadIDs.has(lanes)) {
        threadIDs.add(lanes);
        var ping = pingSuspendedRoot.bind(null, root2, wakeable, lanes);
        {
          if (isDevToolsPresent) {
            restorePendingUpdaters(root2, lanes);
          }
        }
        wakeable.then(ping, ping);
      }
    }
    function attachRetryListener(suspenseBoundary, root2, wakeable, lanes) {
      var wakeables = suspenseBoundary.updateQueue;
      if (wakeables === null) {
        var updateQueue = /* @__PURE__ */ new Set();
        updateQueue.add(wakeable);
        suspenseBoundary.updateQueue = updateQueue;
      } else {
        wakeables.add(wakeable);
      }
    }
    function resetSuspendedComponent(sourceFiber, rootRenderLanes) {
      var tag = sourceFiber.tag;
      if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef || tag === SimpleMemoComponent)) {
        var currentSource = sourceFiber.alternate;
        if (currentSource) {
          sourceFiber.updateQueue = currentSource.updateQueue;
          sourceFiber.memoizedState = currentSource.memoizedState;
          sourceFiber.lanes = currentSource.lanes;
        } else {
          sourceFiber.updateQueue = null;
          sourceFiber.memoizedState = null;
        }
      }
    }
    function getNearestSuspenseBoundaryToCapture(returnFiber) {
      var node = returnFiber;
      do {
        if (node.tag === SuspenseComponent && shouldCaptureSuspense(node)) {
          return node;
        }
        node = node.return;
      } while (node !== null);
      return null;
    }
    function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes) {
      if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {
        if (suspenseBoundary === returnFiber) {
          suspenseBoundary.flags |= ShouldCapture;
        } else {
          suspenseBoundary.flags |= DidCapture;
          sourceFiber.flags |= ForceUpdateForLegacySuspense;
          sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
          if (sourceFiber.tag === ClassComponent) {
            var currentSourceFiber = sourceFiber.alternate;
            if (currentSourceFiber === null) {
              sourceFiber.tag = IncompleteClassComponent;
            } else {
              var update = createUpdate(NoTimestamp, SyncLane);
              update.tag = ForceUpdate;
              enqueueUpdate(sourceFiber, update, SyncLane);
            }
          }
          sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
        }
        return suspenseBoundary;
      }
      suspenseBoundary.flags |= ShouldCapture;
      suspenseBoundary.lanes = rootRenderLanes;
      return suspenseBoundary;
    }
    function throwException(root2, returnFiber, sourceFiber, value, rootRenderLanes) {
      sourceFiber.flags |= Incomplete;
      {
        if (isDevToolsPresent) {
          restorePendingUpdaters(root2, rootRenderLanes);
        }
      }
      if (value !== null && typeof value === "object" && typeof value.then === "function") {
        var wakeable = value;
        resetSuspendedComponent(sourceFiber);
        {
          if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
            markDidThrowWhileHydratingDEV();
          }
        }
        var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
        if (suspenseBoundary !== null) {
          suspenseBoundary.flags &= ~ForceClientRender;
          markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes);
          if (suspenseBoundary.mode & ConcurrentMode) {
            attachPingListener(root2, wakeable, rootRenderLanes);
          }
          attachRetryListener(suspenseBoundary, root2, wakeable);
          return;
        } else {
          if (!includesSyncLane(rootRenderLanes)) {
            attachPingListener(root2, wakeable, rootRenderLanes);
            renderDidSuspendDelayIfPossible();
            return;
          }
          var uncaughtSuspenseError = new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
          value = uncaughtSuspenseError;
        }
      } else {
        if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
          markDidThrowWhileHydratingDEV();
          var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
          if (_suspenseBoundary !== null) {
            if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags) {
              _suspenseBoundary.flags |= ForceClientRender;
            }
            markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes);
            queueHydrationError(createCapturedValueAtFiber(value, sourceFiber));
            return;
          }
        }
      }
      value = createCapturedValueAtFiber(value, sourceFiber);
      renderDidError(value);
      var workInProgress2 = returnFiber;
      do {
        switch (workInProgress2.tag) {
          case HostRoot: {
            var _errorInfo = value;
            workInProgress2.flags |= ShouldCapture;
            var lane = pickArbitraryLane(rootRenderLanes);
            workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
            var update = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
            enqueueCapturedUpdate(workInProgress2, update);
            return;
          }
          case ClassComponent:
            var errorInfo = value;
            var ctor = workInProgress2.type;
            var instance = workInProgress2.stateNode;
            if ((workInProgress2.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
              workInProgress2.flags |= ShouldCapture;
              var _lane = pickArbitraryLane(rootRenderLanes);
              workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
              var _update = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
              enqueueCapturedUpdate(workInProgress2, _update);
              return;
            }
            break;
        }
        workInProgress2 = workInProgress2.return;
      } while (workInProgress2 !== null);
    }
    function getSuspendedCache() {
      {
        return null;
      }
    }
    var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
    var didReceiveUpdate = false;
    var didWarnAboutBadClass;
    var didWarnAboutModulePatternComponent;
    var didWarnAboutContextTypeOnFunctionComponent;
    var didWarnAboutGetDerivedStateOnFunctionComponent;
    var didWarnAboutFunctionRefs;
    var didWarnAboutReassigningProps;
    var didWarnAboutRevealOrder;
    var didWarnAboutTailOptions;
    {
      didWarnAboutBadClass = {};
      didWarnAboutModulePatternComponent = {};
      didWarnAboutContextTypeOnFunctionComponent = {};
      didWarnAboutGetDerivedStateOnFunctionComponent = {};
      didWarnAboutFunctionRefs = {};
      didWarnAboutReassigningProps = false;
      didWarnAboutRevealOrder = {};
      didWarnAboutTailOptions = {};
    }
    function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
      if (current2 === null) {
        workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
      } else {
        workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderLanes2);
      }
    }
    function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) {
      workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
      workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
    }
    function updateForwardRef(current2, workInProgress2, Component, nextProps, renderLanes2) {
      {
        if (workInProgress2.type !== workInProgress2.elementType) {
          var innerPropTypes = Component.propTypes;
          if (innerPropTypes) {
            checkPropTypes(
              innerPropTypes,
              nextProps,
              // Resolved props
              "prop",
              getComponentNameFromType(Component)
            );
          }
        }
      }
      var render2 = Component.render;
      var ref = workInProgress2.ref;
      var nextChildren;
      var hasId;
      prepareToReadContext(workInProgress2, renderLanes2);
      {
        markComponentRenderStarted(workInProgress2);
      }
      {
        ReactCurrentOwner$1.current = workInProgress2;
        setIsRendering(true);
        nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
        hasId = checkDidRenderIdHook();
        if (workInProgress2.mode & StrictLegacyMode) {
          setIsStrictModeForDevtools(true);
          try {
            nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
            hasId = checkDidRenderIdHook();
          } finally {
            setIsStrictModeForDevtools(false);
          }
        }
        setIsRendering(false);
      }
      {
        markComponentRenderStopped();
      }
      if (current2 !== null && !didReceiveUpdate) {
        bailoutHooks(current2, workInProgress2, renderLanes2);
        return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
      }
      if (getIsHydrating() && hasId) {
        pushMaterializedTreeId(workInProgress2);
      }
      workInProgress2.flags |= PerformedWork;
      reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
      return workInProgress2.child;
    }
    function updateMemoComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
      if (current2 === null) {
        var type = Component.type;
        if (isSimpleFunctionComponent(type) && Component.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.
        Component.defaultProps === void 0) {
          var resolvedType = type;
          {
            resolvedType = resolveFunctionForHotReloading(type);
          }
          workInProgress2.tag = SimpleMemoComponent;
          workInProgress2.type = resolvedType;
          {
            validateFunctionComponentInDev(workInProgress2, type);
          }
          return updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, renderLanes2);
        }
        {
          var innerPropTypes = type.propTypes;
          if (innerPropTypes) {
            checkPropTypes(
              innerPropTypes,
              nextProps,
              // Resolved props
              "prop",
              getComponentNameFromType(type)
            );
          }
        }
        var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
        child.ref = workInProgress2.ref;
        child.return = workInProgress2;
        workInProgress2.child = child;
        return child;
      }
      {
        var _type = Component.type;
        var _innerPropTypes = _type.propTypes;
        if (_innerPropTypes) {
          checkPropTypes(
            _innerPropTypes,
            nextProps,
            // Resolved props
            "prop",
            getComponentNameFromType(_type)
          );
        }
      }
      var currentChild = current2.child;
      var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
      if (!hasScheduledUpdateOrContext) {
        var prevProps = currentChild.memoizedProps;
        var compare = Component.compare;
        compare = compare !== null ? compare : shallowEqual;
        if (compare(prevProps, nextProps) && current2.ref === workInProgress2.ref) {
          return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
        }
      }
      workInProgress2.flags |= PerformedWork;
      var newChild = createWorkInProgress(currentChild, nextProps);
      newChild.ref = workInProgress2.ref;
      newChild.return = workInProgress2;
      workInProgress2.child = newChild;
      return newChild;
    }
    function updateSimpleMemoComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
      {
        if (workInProgress2.type !== workInProgress2.elementType) {
          var outerMemoType = workInProgress2.elementType;
          if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
            var lazyComponent = outerMemoType;
            var payload = lazyComponent._payload;
            var init = lazyComponent._init;
            try {
              outerMemoType = init(payload);
            } catch (x) {
              outerMemoType = null;
            }
            var outerPropTypes = outerMemoType && outerMemoType.propTypes;
            if (outerPropTypes) {
              checkPropTypes(
                outerPropTypes,
                nextProps,
                // Resolved (SimpleMemoComponent has no defaultProps)
                "prop",
                getComponentNameFromType(outerMemoType)
              );
            }
          }
        }
      }
      if (current2 !== null) {
        var prevProps = current2.memoizedProps;
        if (shallowEqual(prevProps, nextProps) && current2.ref === workInProgress2.ref && // Prevent bailout if the implementation changed due to hot reload.
        workInProgress2.type === current2.type) {
          didReceiveUpdate = false;
          workInProgress2.pendingProps = nextProps = prevProps;
          if (!checkScheduledUpdateOrContext(current2, renderLanes2)) {
            workInProgress2.lanes = current2.lanes;
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          } else if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
            didReceiveUpdate = true;
          }
        }
      }
      return updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2);
    }
    function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
      var nextProps = workInProgress2.pendingProps;
      var nextChildren = nextProps.children;
      var prevState = current2 !== null ? current2.memoizedState : null;
      if (nextProps.mode === "hidden" || enableLegacyHidden) {
        if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
          var nextState = {
            baseLanes: NoLanes,
            cachePool: null,
            transitions: null
          };
          workInProgress2.memoizedState = nextState;
          pushRenderLanes(workInProgress2, renderLanes2);
        } else if (!includesSomeLane(renderLanes2, OffscreenLane)) {
          var spawnedCachePool = null;
          var nextBaseLanes;
          if (prevState !== null) {
            var prevBaseLanes = prevState.baseLanes;
            nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2);
          } else {
            nextBaseLanes = renderLanes2;
          }
          workInProgress2.lanes = workInProgress2.childLanes = laneToLanes(OffscreenLane);
          var _nextState = {
            baseLanes: nextBaseLanes,
            cachePool: spawnedCachePool,
            transitions: null
          };
          workInProgress2.memoizedState = _nextState;
          workInProgress2.updateQueue = null;
          pushRenderLanes(workInProgress2, nextBaseLanes);
          return null;
        } else {
          var _nextState2 = {
            baseLanes: NoLanes,
            cachePool: null,
            transitions: null
          };
          workInProgress2.memoizedState = _nextState2;
          var subtreeRenderLanes2 = prevState !== null ? prevState.baseLanes : renderLanes2;
          pushRenderLanes(workInProgress2, subtreeRenderLanes2);
        }
      } else {
        var _subtreeRenderLanes;
        if (prevState !== null) {
          _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes2);
          workInProgress2.memoizedState = null;
        } else {
          _subtreeRenderLanes = renderLanes2;
        }
        pushRenderLanes(workInProgress2, _subtreeRenderLanes);
      }
      reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
      return workInProgress2.child;
    }
    function updateFragment(current2, workInProgress2, renderLanes2) {
      var nextChildren = workInProgress2.pendingProps;
      reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
      return workInProgress2.child;
    }
    function updateMode(current2, workInProgress2, renderLanes2) {
      var nextChildren = workInProgress2.pendingProps.children;
      reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
      return workInProgress2.child;
    }
    function updateProfiler(current2, workInProgress2, renderLanes2) {
      {
        workInProgress2.flags |= Update;
        {
          var stateNode = workInProgress2.stateNode;
          stateNode.effectDuration = 0;
          stateNode.passiveEffectDuration = 0;
        }
      }
      var nextProps = workInProgress2.pendingProps;
      var nextChildren = nextProps.children;
      reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
      return workInProgress2.child;
    }
    function markRef(current2, workInProgress2) {
      var ref = workInProgress2.ref;
      if (current2 === null && ref !== null || current2 !== null && current2.ref !== ref) {
        workInProgress2.flags |= Ref;
        {
          workInProgress2.flags |= RefStatic;
        }
      }
    }
    function updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
      {
        if (workInProgress2.type !== workInProgress2.elementType) {
          var innerPropTypes = Component.propTypes;
          if (innerPropTypes) {
            checkPropTypes(
              innerPropTypes,
              nextProps,
              // Resolved props
              "prop",
              getComponentNameFromType(Component)
            );
          }
        }
      }
      var context;
      {
        var unmaskedContext = getUnmaskedContext(workInProgress2, Component, true);
        context = getMaskedContext(workInProgress2, unmaskedContext);
      }
      var nextChildren;
      var hasId;
      prepareToReadContext(workInProgress2, renderLanes2);
      {
        markComponentRenderStarted(workInProgress2);
      }
      {
        ReactCurrentOwner$1.current = workInProgress2;
        setIsRendering(true);
        nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderLanes2);
        hasId = checkDidRenderIdHook();
        if (workInProgress2.mode & StrictLegacyMode) {
          setIsStrictModeForDevtools(true);
          try {
            nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderLanes2);
            hasId = checkDidRenderIdHook();
          } finally {
            setIsStrictModeForDevtools(false);
          }
        }
        setIsRendering(false);
      }
      {
        markComponentRenderStopped();
      }
      if (current2 !== null && !didReceiveUpdate) {
        bailoutHooks(current2, workInProgress2, renderLanes2);
        return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
      }
      if (getIsHydrating() && hasId) {
        pushMaterializedTreeId(workInProgress2);
      }
      workInProgress2.flags |= PerformedWork;
      reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
      return workInProgress2.child;
    }
    function updateClassComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
      {
        switch (shouldError(workInProgress2)) {
          case false: {
            var _instance = workInProgress2.stateNode;
            var ctor = workInProgress2.type;
            var tempInstance = new ctor(workInProgress2.memoizedProps, _instance.context);
            var state = tempInstance.state;
            _instance.updater.enqueueSetState(_instance, state, null);
            break;
          }
          case true: {
            workInProgress2.flags |= DidCapture;
            workInProgress2.flags |= ShouldCapture;
            var error$1 = new Error("Simulated error coming from DevTools");
            var lane = pickArbitraryLane(renderLanes2);
            workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
            var update = createClassErrorUpdate(workInProgress2, createCapturedValueAtFiber(error$1, workInProgress2), lane);
            enqueueCapturedUpdate(workInProgress2, update);
            break;
          }
        }
        if (workInProgress2.type !== workInProgress2.elementType) {
          var innerPropTypes = Component.propTypes;
          if (innerPropTypes) {
            checkPropTypes(
              innerPropTypes,
              nextProps,
              // Resolved props
              "prop",
              getComponentNameFromType(Component)
            );
          }
        }
      }
      var hasContext;
      if (isContextProvider(Component)) {
        hasContext = true;
        pushContextProvider(workInProgress2);
      } else {
        hasContext = false;
      }
      prepareToReadContext(workInProgress2, renderLanes2);
      var instance = workInProgress2.stateNode;
      var shouldUpdate;
      if (instance === null) {
        resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2);
        constructClassInstance(workInProgress2, Component, nextProps);
        mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
        shouldUpdate = true;
      } else if (current2 === null) {
        shouldUpdate = resumeMountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
      } else {
        shouldUpdate = updateClassInstance(current2, workInProgress2, Component, nextProps, renderLanes2);
      }
      var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2);
      {
        var inst = workInProgress2.stateNode;
        if (shouldUpdate && inst.props !== nextProps) {
          if (!didWarnAboutReassigningProps) {
            error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromFiber(workInProgress2) || "a component");
          }
          didWarnAboutReassigningProps = true;
        }
      }
      return nextUnitOfWork;
    }
    function finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2) {
      markRef(current2, workInProgress2);
      var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags;
      if (!shouldUpdate && !didCaptureError) {
        if (hasContext) {
          invalidateContextProvider(workInProgress2, Component, false);
        }
        return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
      }
      var instance = workInProgress2.stateNode;
      ReactCurrentOwner$1.current = workInProgress2;
      var nextChildren;
      if (didCaptureError && typeof Component.getDerivedStateFromError !== "function") {
        nextChildren = null;
        {
          stopProfilerTimerIfRunning();
        }
      } else {
        {
          markComponentRenderStarted(workInProgress2);
        }
        {
          setIsRendering(true);
          nextChildren = instance.render();
          if (workInProgress2.mode & StrictLegacyMode) {
            setIsStrictModeForDevtools(true);
            try {
              instance.render();
            } finally {
              setIsStrictModeForDevtools(false);
            }
          }
          setIsRendering(false);
        }
        {
          markComponentRenderStopped();
        }
      }
      workInProgress2.flags |= PerformedWork;
      if (current2 !== null && didCaptureError) {
        forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2);
      } else {
        reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
      }
      workInProgress2.memoizedState = instance.state;
      if (hasContext) {
        invalidateContextProvider(workInProgress2, Component, true);
      }
      return workInProgress2.child;
    }
    function pushHostRootContext(workInProgress2) {
      var root2 = workInProgress2.stateNode;
      if (root2.pendingContext) {
        pushTopLevelContextObject(workInProgress2, root2.pendingContext, root2.pendingContext !== root2.context);
      } else if (root2.context) {
        pushTopLevelContextObject(workInProgress2, root2.context, false);
      }
      pushHostContainer(workInProgress2, root2.containerInfo);
    }
    function updateHostRoot(current2, workInProgress2, renderLanes2) {
      pushHostRootContext(workInProgress2);
      if (current2 === null) {
        throw new Error("Should have a current fiber. This is a bug in React.");
      }
      var nextProps = workInProgress2.pendingProps;
      var prevState = workInProgress2.memoizedState;
      var prevChildren = prevState.element;
      cloneUpdateQueue(current2, workInProgress2);
      processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
      var nextState = workInProgress2.memoizedState;
      var root2 = workInProgress2.stateNode;
      var nextChildren = nextState.element;
      if (prevState.isDehydrated) {
        var overrideState = {
          element: nextChildren,
          isDehydrated: false,
          cache: nextState.cache,
          pendingSuspenseBoundaries: nextState.pendingSuspenseBoundaries,
          transitions: nextState.transitions
        };
        var updateQueue = workInProgress2.updateQueue;
        updateQueue.baseState = overrideState;
        workInProgress2.memoizedState = overrideState;
        if (workInProgress2.flags & ForceClientRender) {
          var recoverableError = createCapturedValueAtFiber(new Error("There was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root will switch to client rendering."), workInProgress2);
          return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError);
        } else if (nextChildren !== prevChildren) {
          var _recoverableError = createCapturedValueAtFiber(new Error("This root received an early update, before anything was able hydrate. Switched the entire root to client rendering."), workInProgress2);
          return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, _recoverableError);
        } else {
          enterHydrationState(workInProgress2);
          var child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          workInProgress2.child = child;
          var node = child;
          while (node) {
            node.flags = node.flags & ~Placement | Hydrating;
            node = node.sibling;
          }
        }
      } else {
        resetHydrationState();
        if (nextChildren === prevChildren) {
          return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
        }
        reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
      }
      return workInProgress2.child;
    }
    function mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError) {
      resetHydrationState();
      queueHydrationError(recoverableError);
      workInProgress2.flags |= ForceClientRender;
      reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
      return workInProgress2.child;
    }
    function updateHostComponent(current2, workInProgress2, renderLanes2) {
      pushHostContext(workInProgress2);
      if (current2 === null) {
        tryToClaimNextHydratableInstance(workInProgress2);
      }
      var type = workInProgress2.type;
      var nextProps = workInProgress2.pendingProps;
      var prevProps = current2 !== null ? current2.memoizedProps : null;
      var nextChildren = nextProps.children;
      var isDirectTextChild = shouldSetTextContent(type, nextProps);
      if (isDirectTextChild) {
        nextChildren = null;
      } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
        workInProgress2.flags |= ContentReset;
      }
      markRef(current2, workInProgress2);
      reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
      return workInProgress2.child;
    }
    function updateHostText(current2, workInProgress2) {
      if (current2 === null) {
        tryToClaimNextHydratableInstance(workInProgress2);
      }
      return null;
    }
    function mountLazyComponent(_current, workInProgress2, elementType, renderLanes2) {
      resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
      var props = workInProgress2.pendingProps;
      var lazyComponent = elementType;
      var payload = lazyComponent._payload;
      var init = lazyComponent._init;
      var Component = init(payload);
      workInProgress2.type = Component;
      var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component);
      var resolvedProps = resolveDefaultProps(Component, props);
      var child;
      switch (resolvedTag) {
        case FunctionComponent: {
          {
            validateFunctionComponentInDev(workInProgress2, Component);
            workInProgress2.type = Component = resolveFunctionForHotReloading(Component);
          }
          child = updateFunctionComponent(null, workInProgress2, Component, resolvedProps, renderLanes2);
          return child;
        }
        case ClassComponent: {
          {
            workInProgress2.type = Component = resolveClassForHotReloading(Component);
          }
          child = updateClassComponent(null, workInProgress2, Component, resolvedProps, renderLanes2);
          return child;
        }
        case ForwardRef: {
          {
            workInProgress2.type = Component = resolveForwardRefForHotReloading(Component);
          }
          child = updateForwardRef(null, workInProgress2, Component, resolvedProps, renderLanes2);
          return child;
        }
        case MemoComponent: {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var outerPropTypes = Component.propTypes;
              if (outerPropTypes) {
                checkPropTypes(
                  outerPropTypes,
                  resolvedProps,
                  // Resolved for outer only
                  "prop",
                  getComponentNameFromType(Component)
                );
              }
            }
          }
          child = updateMemoComponent(
            null,
            workInProgress2,
            Component,
            resolveDefaultProps(Component.type, resolvedProps),
            // The inner type can have defaults too
            renderLanes2
          );
          return child;
        }
      }
      var hint = "";
      {
        if (Component !== null && typeof Component === "object" && Component.$$typeof === REACT_LAZY_TYPE) {
          hint = " Did you wrap a component in React.lazy() more than once?";
        }
      }
      throw new Error("Element type is invalid. Received a promise that resolves to: " + Component + ". " + ("Lazy element type must resolve to a class or function." + hint));
    }
    function mountIncompleteClassComponent(_current, workInProgress2, Component, nextProps, renderLanes2) {
      resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
      workInProgress2.tag = ClassComponent;
      var hasContext;
      if (isContextProvider(Component)) {
        hasContext = true;
        pushContextProvider(workInProgress2);
      } else {
        hasContext = false;
      }
      prepareToReadContext(workInProgress2, renderLanes2);
      constructClassInstance(workInProgress2, Component, nextProps);
      mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
      return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderLanes2);
    }
    function mountIndeterminateComponent(_current, workInProgress2, Component, renderLanes2) {
      resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
      var props = workInProgress2.pendingProps;
      var context;
      {
        var unmaskedContext = getUnmaskedContext(workInProgress2, Component, false);
        context = getMaskedContext(workInProgress2, unmaskedContext);
      }
      prepareToReadContext(workInProgress2, renderLanes2);
      var value;
      var hasId;
      {
        markComponentRenderStarted(workInProgress2);
      }
      {
        if (Component.prototype && typeof Component.prototype.render === "function") {
          var componentName = getComponentNameFromType(Component) || "Unknown";
          if (!didWarnAboutBadClass[componentName]) {
            error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
            didWarnAboutBadClass[componentName] = true;
          }
        }
        if (workInProgress2.mode & StrictLegacyMode) {
          ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
        }
        setIsRendering(true);
        ReactCurrentOwner$1.current = workInProgress2;
        value = renderWithHooks(null, workInProgress2, Component, props, context, renderLanes2);
        hasId = checkDidRenderIdHook();
        setIsRendering(false);
      }
      {
        markComponentRenderStopped();
      }
      workInProgress2.flags |= PerformedWork;
      {
        if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
          var _componentName = getComponentNameFromType(Component) || "Unknown";
          if (!didWarnAboutModulePatternComponent[_componentName]) {
            error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
            didWarnAboutModulePatternComponent[_componentName] = true;
          }
        }
      }
      if (
        // Run these checks in production only if the flag is off.
        // Eventually we'll delete this branch altogether.
        typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0
      ) {
        {
          var _componentName2 = getComponentNameFromType(Component) || "Unknown";
          if (!didWarnAboutModulePatternComponent[_componentName2]) {
            error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
            didWarnAboutModulePatternComponent[_componentName2] = true;
          }
        }
        workInProgress2.tag = ClassComponent;
        workInProgress2.memoizedState = null;
        workInProgress2.updateQueue = null;
        var hasContext = false;
        if (isContextProvider(Component)) {
          hasContext = true;
          pushContextProvider(workInProgress2);
        } else {
          hasContext = false;
        }
        workInProgress2.memoizedState = value.state !== null && value.state !== void 0 ? value.state : null;
        initializeUpdateQueue(workInProgress2);
        adoptClassInstance(workInProgress2, value);
        mountClassInstance(workInProgress2, Component, props, renderLanes2);
        return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderLanes2);
      } else {
        workInProgress2.tag = FunctionComponent;
        {
          if (workInProgress2.mode & StrictLegacyMode) {
            setIsStrictModeForDevtools(true);
            try {
              value = renderWithHooks(null, workInProgress2, Component, props, context, renderLanes2);
              hasId = checkDidRenderIdHook();
            } finally {
              setIsStrictModeForDevtools(false);
            }
          }
        }
        if (getIsHydrating() && hasId) {
          pushMaterializedTreeId(workInProgress2);
        }
        reconcileChildren(null, workInProgress2, value, renderLanes2);
        {
          validateFunctionComponentInDev(workInProgress2, Component);
        }
        return workInProgress2.child;
      }
    }
    function validateFunctionComponentInDev(workInProgress2, Component) {
      {
        if (Component) {
          if (Component.childContextTypes) {
            error("%s(...): childContextTypes cannot be defined on a function component.", Component.displayName || Component.name || "Component");
          }
        }
        if (workInProgress2.ref !== null) {
          var info = "";
          var ownerName = getCurrentFiberOwnerNameInDevOrNull();
          if (ownerName) {
            info += "\n\nCheck the render method of `" + ownerName + "`.";
          }
          var warningKey = ownerName || "";
          var debugSource = workInProgress2._debugSource;
          if (debugSource) {
            warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
          }
          if (!didWarnAboutFunctionRefs[warningKey]) {
            didWarnAboutFunctionRefs[warningKey] = true;
            error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
          }
        }
        if (typeof Component.getDerivedStateFromProps === "function") {
          var _componentName3 = getComponentNameFromType(Component) || "Unknown";
          if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
            error("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
            didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
          }
        }
        if (typeof Component.contextType === "object" && Component.contextType !== null) {
          var _componentName4 = getComponentNameFromType(Component) || "Unknown";
          if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
            error("%s: Function components do not support contextType.", _componentName4);
            didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
          }
        }
      }
    }
    var SUSPENDED_MARKER = {
      dehydrated: null,
      treeContext: null,
      retryLane: NoLane
    };
    function mountSuspenseOffscreenState(renderLanes2) {
      return {
        baseLanes: renderLanes2,
        cachePool: getSuspendedCache(),
        transitions: null
      };
    }
    function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
      var cachePool = null;
      return {
        baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2),
        cachePool,
        transitions: prevOffscreenState.transitions
      };
    }
    function shouldRemainOnFallback(suspenseContext, current2, workInProgress2, renderLanes2) {
      if (current2 !== null) {
        var suspenseState = current2.memoizedState;
        if (suspenseState === null) {
          return false;
        }
      }
      return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
    }
    function getRemainingWorkInPrimaryTree(current2, renderLanes2) {
      return removeLanes(current2.childLanes, renderLanes2);
    }
    function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
      var nextProps = workInProgress2.pendingProps;
      {
        if (shouldSuspend(workInProgress2)) {
          workInProgress2.flags |= DidCapture;
        }
      }
      var suspenseContext = suspenseStackCursor.current;
      var showFallback = false;
      var didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags;
      if (didSuspend || shouldRemainOnFallback(suspenseContext, current2)) {
        showFallback = true;
        workInProgress2.flags &= ~DidCapture;
      } else {
        if (current2 === null || current2.memoizedState !== null) {
          {
            suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
          }
        }
      }
      suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
      pushSuspenseContext(workInProgress2, suspenseContext);
      if (current2 === null) {
        tryToClaimNextHydratableInstance(workInProgress2);
        var suspenseState = workInProgress2.memoizedState;
        if (suspenseState !== null) {
          var dehydrated = suspenseState.dehydrated;
          if (dehydrated !== null) {
            return mountDehydratedSuspenseComponent(workInProgress2, dehydrated);
          }
        }
        var nextPrimaryChildren = nextProps.children;
        var nextFallbackChildren = nextProps.fallback;
        if (showFallback) {
          var fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
          var primaryChildFragment = workInProgress2.child;
          primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
          workInProgress2.memoizedState = SUSPENDED_MARKER;
          return fallbackFragment;
        } else {
          return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren);
        }
      } else {
        var prevState = current2.memoizedState;
        if (prevState !== null) {
          var _dehydrated = prevState.dehydrated;
          if (_dehydrated !== null) {
            return updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, _dehydrated, prevState, renderLanes2);
          }
        }
        if (showFallback) {
          var _nextFallbackChildren = nextProps.fallback;
          var _nextPrimaryChildren = nextProps.children;
          var fallbackChildFragment = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren, _nextFallbackChildren, renderLanes2);
          var _primaryChildFragment2 = workInProgress2.child;
          var prevOffscreenState = current2.child.memoizedState;
          _primaryChildFragment2.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2);
          _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
          workInProgress2.memoizedState = SUSPENDED_MARKER;
          return fallbackChildFragment;
        } else {
          var _nextPrimaryChildren2 = nextProps.children;
          var _primaryChildFragment3 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren2, renderLanes2);
          workInProgress2.memoizedState = null;
          return _primaryChildFragment3;
        }
      }
    }
    function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
      var mode = workInProgress2.mode;
      var primaryChildProps = {
        mode: "visible",
        children: primaryChildren
      };
      var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
      primaryChildFragment.return = workInProgress2;
      workInProgress2.child = primaryChildFragment;
      return primaryChildFragment;
    }
    function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
      var mode = workInProgress2.mode;
      var progressedPrimaryFragment = workInProgress2.child;
      var primaryChildProps = {
        mode: "hidden",
        children: primaryChildren
      };
      var primaryChildFragment;
      var fallbackChildFragment;
      if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {
        primaryChildFragment = progressedPrimaryFragment;
        primaryChildFragment.childLanes = NoLanes;
        primaryChildFragment.pendingProps = primaryChildProps;
        if (workInProgress2.mode & ProfileMode) {
          primaryChildFragment.actualDuration = 0;
          primaryChildFragment.actualStartTime = -1;
          primaryChildFragment.selfBaseDuration = 0;
          primaryChildFragment.treeBaseDuration = 0;
        }
        fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
      } else {
        primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
        fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
      }
      primaryChildFragment.return = workInProgress2;
      fallbackChildFragment.return = workInProgress2;
      primaryChildFragment.sibling = fallbackChildFragment;
      workInProgress2.child = primaryChildFragment;
      return fallbackChildFragment;
    }
    function mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes2) {
      return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);
    }
    function updateWorkInProgressOffscreenFiber(current2, offscreenProps) {
      return createWorkInProgress(current2, offscreenProps);
    }
    function updateSuspensePrimaryChildren(current2, workInProgress2, primaryChildren, renderLanes2) {
      var currentPrimaryChildFragment = current2.child;
      var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
      var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
        mode: "visible",
        children: primaryChildren
      });
      if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
        primaryChildFragment.lanes = renderLanes2;
      }
      primaryChildFragment.return = workInProgress2;
      primaryChildFragment.sibling = null;
      if (currentFallbackChildFragment !== null) {
        var deletions = workInProgress2.deletions;
        if (deletions === null) {
          workInProgress2.deletions = [currentFallbackChildFragment];
          workInProgress2.flags |= ChildDeletion;
        } else {
          deletions.push(currentFallbackChildFragment);
        }
      }
      workInProgress2.child = primaryChildFragment;
      return primaryChildFragment;
    }
    function updateSuspenseFallbackChildren(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
      var mode = workInProgress2.mode;
      var currentPrimaryChildFragment = current2.child;
      var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
      var primaryChildProps = {
        mode: "hidden",
        children: primaryChildren
      };
      var primaryChildFragment;
      if (
        // In legacy mode, we commit the primary tree as if it successfully
        // completed, even though it's in an inconsistent state.
        (mode & ConcurrentMode) === NoMode && // Make sure we're on the second pass, i.e. the primary child fragment was
        // already cloned. In legacy mode, the only case where this isn't true is
        // when DevTools forces us to display a fallback; we skip the first render
        // pass entirely and go straight to rendering the fallback. (In Concurrent
        // Mode, SuspenseList can also trigger this scenario, but this is a legacy-
        // only codepath.)
        workInProgress2.child !== currentPrimaryChildFragment
      ) {
        var progressedPrimaryFragment = workInProgress2.child;
        primaryChildFragment = progressedPrimaryFragment;
        primaryChildFragment.childLanes = NoLanes;
        primaryChildFragment.pendingProps = primaryChildProps;
        if (workInProgress2.mode & ProfileMode) {
          primaryChildFragment.actualDuration = 0;
          primaryChildFragment.actualStartTime = -1;
          primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
          primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
        }
        workInProgress2.deletions = null;
      } else {
        primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
        primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;
      }
      var fallbackChildFragment;
      if (currentFallbackChildFragment !== null) {
        fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
      } else {
        fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
        fallbackChildFragment.flags |= Placement;
      }
      fallbackChildFragment.return = workInProgress2;
      primaryChildFragment.return = workInProgress2;
      primaryChildFragment.sibling = fallbackChildFragment;
      workInProgress2.child = primaryChildFragment;
      return fallbackChildFragment;
    }
    function retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, recoverableError) {
      if (recoverableError !== null) {
        queueHydrationError(recoverableError);
      }
      reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
      var nextProps = workInProgress2.pendingProps;
      var primaryChildren = nextProps.children;
      var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
      primaryChildFragment.flags |= Placement;
      workInProgress2.memoizedState = null;
      return primaryChildFragment;
    }
    function mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
      var fiberMode = workInProgress2.mode;
      var primaryChildProps = {
        mode: "visible",
        children: primaryChildren
      };
      var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);
      var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes2, null);
      fallbackChildFragment.flags |= Placement;
      primaryChildFragment.return = workInProgress2;
      fallbackChildFragment.return = workInProgress2;
      primaryChildFragment.sibling = fallbackChildFragment;
      workInProgress2.child = primaryChildFragment;
      if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
        reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
      }
      return fallbackChildFragment;
    }
    function mountDehydratedSuspenseComponent(workInProgress2, suspenseInstance, renderLanes2) {
      if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
        {
          error("Cannot hydrate Suspense in legacy mode. Switch from ReactDOM.hydrate(element, container) to ReactDOMClient.hydrateRoot(container, <App />).render(element) or remove the Suspense components from the server rendered components.");
        }
        workInProgress2.lanes = laneToLanes(SyncLane);
      } else if (isSuspenseInstanceFallback(suspenseInstance)) {
        workInProgress2.lanes = laneToLanes(DefaultHydrationLane);
      } else {
        workInProgress2.lanes = laneToLanes(OffscreenLane);
      }
      return null;
    }
    function updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, suspenseInstance, suspenseState, renderLanes2) {
      if (!didSuspend) {
        warnIfHydrating();
        if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
          return retrySuspenseComponentWithoutHydrating(
            current2,
            workInProgress2,
            renderLanes2,
            // TODO: When we delete legacy mode, we should make this error argument
            // required — every concurrent mode path that causes hydration to
            // de-opt to client rendering should have an error message.
            null
          );
        }
        if (isSuspenseInstanceFallback(suspenseInstance)) {
          var digest, message, stack;
          {
            var _getSuspenseInstanceF = getSuspenseInstanceFallbackErrorDetails(suspenseInstance);
            digest = _getSuspenseInstanceF.digest;
            message = _getSuspenseInstanceF.message;
            stack = _getSuspenseInstanceF.stack;
          }
          var error2;
          if (message) {
            error2 = new Error(message);
          } else {
            error2 = new Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering.");
          }
          var capturedValue = createCapturedValue(error2, digest, stack);
          return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, capturedValue);
        }
        var hasContextChanged2 = includesSomeLane(renderLanes2, current2.childLanes);
        if (didReceiveUpdate || hasContextChanged2) {
          var root2 = getWorkInProgressRoot();
          if (root2 !== null) {
            var attemptHydrationAtLane = getBumpedLaneForHydration(root2, renderLanes2);
            if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {
              suspenseState.retryLane = attemptHydrationAtLane;
              var eventTime = NoTimestamp;
              enqueueConcurrentRenderForLane(current2, attemptHydrationAtLane);
              scheduleUpdateOnFiber(root2, current2, attemptHydrationAtLane, eventTime);
            }
          }
          renderDidSuspendDelayIfPossible();
          var _capturedValue = createCapturedValue(new Error("This Suspense boundary received an update before it finished hydrating. This caused the boundary to switch to client rendering. The usual way to fix this is to wrap the original update in startTransition."));
          return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue);
        } else if (isSuspenseInstancePending(suspenseInstance)) {
          workInProgress2.flags |= DidCapture;
          workInProgress2.child = current2.child;
          var retry = retryDehydratedSuspenseBoundary.bind(null, current2);
          registerSuspenseInstanceRetry(suspenseInstance, retry);
          return null;
        } else {
          reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress2, suspenseInstance, suspenseState.treeContext);
          var primaryChildren = nextProps.children;
          var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
          primaryChildFragment.flags |= Hydrating;
          return primaryChildFragment;
        }
      } else {
        if (workInProgress2.flags & ForceClientRender) {
          workInProgress2.flags &= ~ForceClientRender;
          var _capturedValue2 = createCapturedValue(new Error("There was an error while hydrating this Suspense boundary. Switched to client rendering."));
          return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue2);
        } else if (workInProgress2.memoizedState !== null) {
          workInProgress2.child = current2.child;
          workInProgress2.flags |= DidCapture;
          return null;
        } else {
          var nextPrimaryChildren = nextProps.children;
          var nextFallbackChildren = nextProps.fallback;
          var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
          var _primaryChildFragment4 = workInProgress2.child;
          _primaryChildFragment4.memoizedState = mountSuspenseOffscreenState(renderLanes2);
          workInProgress2.memoizedState = SUSPENDED_MARKER;
          return fallbackChildFragment;
        }
      }
    }
    function scheduleSuspenseWorkOnFiber(fiber, renderLanes2, propagationRoot) {
      fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
      var alternate = fiber.alternate;
      if (alternate !== null) {
        alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
      }
      scheduleContextWorkOnParentPath(fiber.return, renderLanes2, propagationRoot);
    }
    function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
      var node = firstChild;
      while (node !== null) {
        if (node.tag === SuspenseComponent) {
          var state = node.memoizedState;
          if (state !== null) {
            scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
          }
        } else if (node.tag === SuspenseListComponent) {
          scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
        } else if (node.child !== null) {
          node.child.return = node;
          node = node.child;
          continue;
        }
        if (node === workInProgress2) {
          return;
        }
        while (node.sibling === null) {
          if (node.return === null || node.return === workInProgress2) {
            return;
          }
          node = node.return;
        }
        node.sibling.return = node.return;
        node = node.sibling;
      }
    }
    function findLastContentRow(firstChild) {
      var row = firstChild;
      var lastContentRow = null;
      while (row !== null) {
        var currentRow = row.alternate;
        if (currentRow !== null && findFirstSuspended(currentRow) === null) {
          lastContentRow = row;
        }
        row = row.sibling;
      }
      return lastContentRow;
    }
    function validateRevealOrder(revealOrder) {
      {
        if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
          didWarnAboutRevealOrder[revealOrder] = true;
          if (typeof revealOrder === "string") {
            switch (revealOrder.toLowerCase()) {
              case "together":
              case "forwards":
              case "backwards": {
                error('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                break;
              }
              case "forward":
              case "backward": {
                error('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                break;
              }
              default:
                error('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                break;
            }
          } else {
            error('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
          }
        }
      }
    }
    function validateTailOptions(tailMode, revealOrder) {
      {
        if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
          if (tailMode !== "collapsed" && tailMode !== "hidden") {
            didWarnAboutTailOptions[tailMode] = true;
            error('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
          } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
            didWarnAboutTailOptions[tailMode] = true;
            error('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
          }
        }
      }
    }
    function validateSuspenseListNestedChild(childSlot, index2) {
      {
        var isAnArray = isArray(childSlot);
        var isIterable = !isAnArray && typeof getIteratorFn(childSlot) === "function";
        if (isAnArray || isIterable) {
          var type = isAnArray ? "array" : "iterable";
          error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index2, type);
          return false;
        }
      }
      return true;
    }
    function validateSuspenseListChildren(children, revealOrder) {
      {
        if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== void 0 && children !== null && children !== false) {
          if (isArray(children)) {
            for (var i = 0; i < children.length; i++) {
              if (!validateSuspenseListNestedChild(children[i], i)) {
                return;
              }
            }
          } else {
            var iteratorFn = getIteratorFn(children);
            if (typeof iteratorFn === "function") {
              var childrenIterator = iteratorFn.call(children);
              if (childrenIterator) {
                var step = childrenIterator.next();
                var _i = 0;
                for (; !step.done; step = childrenIterator.next()) {
                  if (!validateSuspenseListNestedChild(step.value, _i)) {
                    return;
                  }
                  _i++;
                }
              }
            } else {
              error('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
            }
          }
        }
      }
    }
    function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode) {
      var renderState = workInProgress2.memoizedState;
      if (renderState === null) {
        workInProgress2.memoizedState = {
          isBackwards,
          rendering: null,
          renderingStartTime: 0,
          last: lastContentRow,
          tail,
          tailMode
        };
      } else {
        renderState.isBackwards = isBackwards;
        renderState.rendering = null;
        renderState.renderingStartTime = 0;
        renderState.last = lastContentRow;
        renderState.tail = tail;
        renderState.tailMode = tailMode;
      }
    }
    function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
      var nextProps = workInProgress2.pendingProps;
      var revealOrder = nextProps.revealOrder;
      var tailMode = nextProps.tail;
      var newChildren = nextProps.children;
      validateRevealOrder(revealOrder);
      validateTailOptions(tailMode, revealOrder);
      validateSuspenseListChildren(newChildren, revealOrder);
      reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
      var suspenseContext = suspenseStackCursor.current;
      var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
      if (shouldForceFallback) {
        suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
        workInProgress2.flags |= DidCapture;
      } else {
        var didSuspendBefore = current2 !== null && (current2.flags & DidCapture) !== NoFlags;
        if (didSuspendBefore) {
          propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2);
        }
        suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
      }
      pushSuspenseContext(workInProgress2, suspenseContext);
      if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
        workInProgress2.memoizedState = null;
      } else {
        switch (revealOrder) {
          case "forwards": {
            var lastContentRow = findLastContentRow(workInProgress2.child);
            var tail;
            if (lastContentRow === null) {
              tail = workInProgress2.child;
              workInProgress2.child = null;
            } else {
              tail = lastContentRow.sibling;
              lastContentRow.sibling = null;
            }
            initSuspenseListRenderState(
              workInProgress2,
              false,
              // isBackwards
              tail,
              lastContentRow,
              tailMode
            );
            break;
          }
          case "backwards": {
            var _tail = null;
            var row = workInProgress2.child;
            workInProgress2.child = null;
            while (row !== null) {
              var currentRow = row.alternate;
              if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                workInProgress2.child = row;
                break;
              }
              var nextRow = row.sibling;
              row.sibling = _tail;
              _tail = row;
              row = nextRow;
            }
            initSuspenseListRenderState(
              workInProgress2,
              true,
              // isBackwards
              _tail,
              null,
              // last
              tailMode
            );
            break;
          }
          case "together": {
            initSuspenseListRenderState(
              workInProgress2,
              false,
              // isBackwards
              null,
              // tail
              null,
              // last
              void 0
            );
            break;
          }
          default: {
            workInProgress2.memoizedState = null;
          }
        }
      }
      return workInProgress2.child;
    }
    function updatePortalComponent(current2, workInProgress2, renderLanes2) {
      pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
      var nextChildren = workInProgress2.pendingProps;
      if (current2 === null) {
        workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
      } else {
        reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
      }
      return workInProgress2.child;
    }
    var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
    function updateContextProvider(current2, workInProgress2, renderLanes2) {
      var providerType = workInProgress2.type;
      var context = providerType._context;
      var newProps = workInProgress2.pendingProps;
      var oldProps = workInProgress2.memoizedProps;
      var newValue = newProps.value;
      {
        if (!("value" in newProps)) {
          if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
            hasWarnedAboutUsingNoValuePropOnContextProvider = true;
            error("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
          }
        }
        var providerPropTypes = workInProgress2.type.propTypes;
        if (providerPropTypes) {
          checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
        }
      }
      pushProvider(workInProgress2, context, newValue);
      {
        if (oldProps !== null) {
          var oldValue = oldProps.value;
          if (objectIs(oldValue, newValue)) {
            if (oldProps.children === newProps.children && !hasContextChanged()) {
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
          } else {
            propagateContextChange(workInProgress2, context, renderLanes2);
          }
        }
      }
      var newChildren = newProps.children;
      reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
      return workInProgress2.child;
    }
    var hasWarnedAboutUsingContextAsConsumer = false;
    function updateContextConsumer(current2, workInProgress2, renderLanes2) {
      var context = workInProgress2.type;
      {
        if (context._context === void 0) {
          if (context !== context.Consumer) {
            if (!hasWarnedAboutUsingContextAsConsumer) {
              hasWarnedAboutUsingContextAsConsumer = true;
              error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
            }
          }
        } else {
          context = context._context;
        }
      }
      var newProps = workInProgress2.pendingProps;
      var render2 = newProps.children;
      {
        if (typeof render2 !== "function") {
          error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
        }
      }
      prepareToReadContext(workInProgress2, renderLanes2);
      var newValue = readContext(context);
      {
        markComponentRenderStarted(workInProgress2);
      }
      var newChildren;
      {
        ReactCurrentOwner$1.current = workInProgress2;
        setIsRendering(true);
        newChildren = render2(newValue);
        setIsRendering(false);
      }
      {
        markComponentRenderStopped();
      }
      workInProgress2.flags |= PerformedWork;
      reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
      return workInProgress2.child;
    }
    function markWorkInProgressReceivedUpdate() {
      didReceiveUpdate = true;
    }
    function resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2) {
      if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
        if (current2 !== null) {
          current2.alternate = null;
          workInProgress2.alternate = null;
          workInProgress2.flags |= Placement;
        }
      }
    }
    function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
      if (current2 !== null) {
        workInProgress2.dependencies = current2.dependencies;
      }
      {
        stopProfilerTimerIfRunning();
      }
      markSkippedUpdateLanes(workInProgress2.lanes);
      if (!includesSomeLane(renderLanes2, workInProgress2.childLanes)) {
        {
          return null;
        }
      }
      cloneChildFibers(current2, workInProgress2);
      return workInProgress2.child;
    }
    function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
      {
        var returnFiber = oldWorkInProgress.return;
        if (returnFiber === null) {
          throw new Error("Cannot swap the root fiber.");
        }
        current2.alternate = null;
        oldWorkInProgress.alternate = null;
        newWorkInProgress.index = oldWorkInProgress.index;
        newWorkInProgress.sibling = oldWorkInProgress.sibling;
        newWorkInProgress.return = oldWorkInProgress.return;
        newWorkInProgress.ref = oldWorkInProgress.ref;
        if (oldWorkInProgress === returnFiber.child) {
          returnFiber.child = newWorkInProgress;
        } else {
          var prevSibling = returnFiber.child;
          if (prevSibling === null) {
            throw new Error("Expected parent to have a child.");
          }
          while (prevSibling.sibling !== oldWorkInProgress) {
            prevSibling = prevSibling.sibling;
            if (prevSibling === null) {
              throw new Error("Expected to find the previous sibling.");
            }
          }
          prevSibling.sibling = newWorkInProgress;
        }
        var deletions = returnFiber.deletions;
        if (deletions === null) {
          returnFiber.deletions = [current2];
          returnFiber.flags |= ChildDeletion;
        } else {
          deletions.push(current2);
        }
        newWorkInProgress.flags |= Placement;
        return newWorkInProgress;
      }
    }
    function checkScheduledUpdateOrContext(current2, renderLanes2) {
      var updateLanes = current2.lanes;
      if (includesSomeLane(updateLanes, renderLanes2)) {
        return true;
      }
      return false;
    }
    function attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2) {
      switch (workInProgress2.tag) {
        case HostRoot:
          pushHostRootContext(workInProgress2);
          var root2 = workInProgress2.stateNode;
          resetHydrationState();
          break;
        case HostComponent:
          pushHostContext(workInProgress2);
          break;
        case ClassComponent: {
          var Component = workInProgress2.type;
          if (isContextProvider(Component)) {
            pushContextProvider(workInProgress2);
          }
          break;
        }
        case HostPortal:
          pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
          break;
        case ContextProvider: {
          var newValue = workInProgress2.memoizedProps.value;
          var context = workInProgress2.type._context;
          pushProvider(workInProgress2, context, newValue);
          break;
        }
        case Profiler:
          {
            var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
            if (hasChildWork) {
              workInProgress2.flags |= Update;
            }
            {
              var stateNode = workInProgress2.stateNode;
              stateNode.effectDuration = 0;
              stateNode.passiveEffectDuration = 0;
            }
          }
          break;
        case SuspenseComponent: {
          var state = workInProgress2.memoizedState;
          if (state !== null) {
            if (state.dehydrated !== null) {
              pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
              workInProgress2.flags |= DidCapture;
              return null;
            }
            var primaryChildFragment = workInProgress2.child;
            var primaryChildLanes = primaryChildFragment.childLanes;
            if (includesSomeLane(renderLanes2, primaryChildLanes)) {
              return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
            } else {
              pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
              var child = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              if (child !== null) {
                return child.sibling;
              } else {
                return null;
              }
            }
          } else {
            pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
          }
          break;
        }
        case SuspenseListComponent: {
          var didSuspendBefore = (current2.flags & DidCapture) !== NoFlags;
          var _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
          if (didSuspendBefore) {
            if (_hasChildWork) {
              return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
            }
            workInProgress2.flags |= DidCapture;
          }
          var renderState = workInProgress2.memoizedState;
          if (renderState !== null) {
            renderState.rendering = null;
            renderState.tail = null;
            renderState.lastEffect = null;
          }
          pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
          if (_hasChildWork) {
            break;
          } else {
            return null;
          }
        }
        case OffscreenComponent:
        case LegacyHiddenComponent: {
          workInProgress2.lanes = NoLanes;
          return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
        }
      }
      return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
    }
    function beginWork(current2, workInProgress2, renderLanes2) {
      {
        if (workInProgress2._debugNeedsRemount && current2 !== null) {
          return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.lanes));
        }
      }
      if (current2 !== null) {
        var oldProps = current2.memoizedProps;
        var newProps = workInProgress2.pendingProps;
        if (oldProps !== newProps || hasContextChanged() || // Force a re-render if the implementation changed due to hot reload:
        workInProgress2.type !== current2.type) {
          didReceiveUpdate = true;
        } else {
          var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
          if (!hasScheduledUpdateOrContext && // If this is the second pass of an error or suspense boundary, there
          // may not be work scheduled on `current`, so we check for this flag.
          (workInProgress2.flags & DidCapture) === NoFlags) {
            didReceiveUpdate = false;
            return attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2);
          }
          if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
            didReceiveUpdate = true;
          } else {
            didReceiveUpdate = false;
          }
        }
      } else {
        didReceiveUpdate = false;
        if (getIsHydrating() && isForkedChild(workInProgress2)) {
          var slotIndex = workInProgress2.index;
          var numberOfForks = getForksAtLevel();
          pushTreeId(workInProgress2, numberOfForks, slotIndex);
        }
      }
      workInProgress2.lanes = NoLanes;
      switch (workInProgress2.tag) {
        case IndeterminateComponent: {
          return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderLanes2);
        }
        case LazyComponent: {
          var elementType = workInProgress2.elementType;
          return mountLazyComponent(current2, workInProgress2, elementType, renderLanes2);
        }
        case FunctionComponent: {
          var Component = workInProgress2.type;
          var unresolvedProps = workInProgress2.pendingProps;
          var resolvedProps = workInProgress2.elementType === Component ? unresolvedProps : resolveDefaultProps(Component, unresolvedProps);
          return updateFunctionComponent(current2, workInProgress2, Component, resolvedProps, renderLanes2);
        }
        case ClassComponent: {
          var _Component = workInProgress2.type;
          var _unresolvedProps = workInProgress2.pendingProps;
          var _resolvedProps = workInProgress2.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);
          return updateClassComponent(current2, workInProgress2, _Component, _resolvedProps, renderLanes2);
        }
        case HostRoot:
          return updateHostRoot(current2, workInProgress2, renderLanes2);
        case HostComponent:
          return updateHostComponent(current2, workInProgress2, renderLanes2);
        case HostText:
          return updateHostText(current2, workInProgress2);
        case SuspenseComponent:
          return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
        case HostPortal:
          return updatePortalComponent(current2, workInProgress2, renderLanes2);
        case ForwardRef: {
          var type = workInProgress2.type;
          var _unresolvedProps2 = workInProgress2.pendingProps;
          var _resolvedProps2 = workInProgress2.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
          return updateForwardRef(current2, workInProgress2, type, _resolvedProps2, renderLanes2);
        }
        case Fragment:
          return updateFragment(current2, workInProgress2, renderLanes2);
        case Mode:
          return updateMode(current2, workInProgress2, renderLanes2);
        case Profiler:
          return updateProfiler(current2, workInProgress2, renderLanes2);
        case ContextProvider:
          return updateContextProvider(current2, workInProgress2, renderLanes2);
        case ContextConsumer:
          return updateContextConsumer(current2, workInProgress2, renderLanes2);
        case MemoComponent: {
          var _type2 = workInProgress2.type;
          var _unresolvedProps3 = workInProgress2.pendingProps;
          var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var outerPropTypes = _type2.propTypes;
              if (outerPropTypes) {
                checkPropTypes(
                  outerPropTypes,
                  _resolvedProps3,
                  // Resolved for outer only
                  "prop",
                  getComponentNameFromType(_type2)
                );
              }
            }
          }
          _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
          return updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, renderLanes2);
        }
        case SimpleMemoComponent: {
          return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, renderLanes2);
        }
        case IncompleteClassComponent: {
          var _Component2 = workInProgress2.type;
          var _unresolvedProps4 = workInProgress2.pendingProps;
          var _resolvedProps4 = workInProgress2.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);
          return mountIncompleteClassComponent(current2, workInProgress2, _Component2, _resolvedProps4, renderLanes2);
        }
        case SuspenseListComponent: {
          return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
        }
        case ScopeComponent: {
          break;
        }
        case OffscreenComponent: {
          return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
        }
      }
      throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
    }
    function markUpdate(workInProgress2) {
      workInProgress2.flags |= Update;
    }
    function markRef$1(workInProgress2) {
      workInProgress2.flags |= Ref;
      {
        workInProgress2.flags |= RefStatic;
      }
    }
    var appendAllChildren;
    var updateHostContainer;
    var updateHostComponent$1;
    var updateHostText$1;
    {
      appendAllChildren = function(parent, workInProgress2, needsVisibilityToggle, isHidden) {
        var node = workInProgress2.child;
        while (node !== null) {
          if (node.tag === HostComponent || node.tag === HostText) {
            appendInitialChild(parent, node.stateNode);
          } else if (node.tag === HostPortal)
            ;
          else if (node.child !== null) {
            node.child.return = node;
            node = node.child;
            continue;
          }
          if (node === workInProgress2) {
            return;
          }
          while (node.sibling === null) {
            if (node.return === null || node.return === workInProgress2) {
              return;
            }
            node = node.return;
          }
          node.sibling.return = node.return;
          node = node.sibling;
        }
      };
      updateHostContainer = function(current2, workInProgress2) {
      };
      updateHostComponent$1 = function(current2, workInProgress2, type, newProps, rootContainerInstance) {
        var oldProps = current2.memoizedProps;
        if (oldProps === newProps) {
          return;
        }
        var instance = workInProgress2.stateNode;
        var currentHostContext = getHostContext();
        var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
        workInProgress2.updateQueue = updatePayload;
        if (updatePayload) {
          markUpdate(workInProgress2);
        }
      };
      updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
        if (oldText !== newText) {
          markUpdate(workInProgress2);
        }
      };
    }
    function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
      if (getIsHydrating()) {
        return;
      }
      switch (renderState.tailMode) {
        case "hidden": {
          var tailNode = renderState.tail;
          var lastTailNode = null;
          while (tailNode !== null) {
            if (tailNode.alternate !== null) {
              lastTailNode = tailNode;
            }
            tailNode = tailNode.sibling;
          }
          if (lastTailNode === null) {
            renderState.tail = null;
          } else {
            lastTailNode.sibling = null;
          }
          break;
        }
        case "collapsed": {
          var _tailNode = renderState.tail;
          var _lastTailNode = null;
          while (_tailNode !== null) {
            if (_tailNode.alternate !== null) {
              _lastTailNode = _tailNode;
            }
            _tailNode = _tailNode.sibling;
          }
          if (_lastTailNode === null) {
            if (!hasRenderedATailFallback && renderState.tail !== null) {
              renderState.tail.sibling = null;
            } else {
              renderState.tail = null;
            }
          } else {
            _lastTailNode.sibling = null;
          }
          break;
        }
      }
    }
    function bubbleProperties(completedWork) {
      var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;
      var newChildLanes = NoLanes;
      var subtreeFlags = NoFlags;
      if (!didBailout) {
        if ((completedWork.mode & ProfileMode) !== NoMode) {
          var actualDuration = completedWork.actualDuration;
          var treeBaseDuration = completedWork.selfBaseDuration;
          var child = completedWork.child;
          while (child !== null) {
            newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
            subtreeFlags |= child.subtreeFlags;
            subtreeFlags |= child.flags;
            actualDuration += child.actualDuration;
            treeBaseDuration += child.treeBaseDuration;
            child = child.sibling;
          }
          completedWork.actualDuration = actualDuration;
          completedWork.treeBaseDuration = treeBaseDuration;
        } else {
          var _child = completedWork.child;
          while (_child !== null) {
            newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
            subtreeFlags |= _child.subtreeFlags;
            subtreeFlags |= _child.flags;
            _child.return = completedWork;
            _child = _child.sibling;
          }
        }
        completedWork.subtreeFlags |= subtreeFlags;
      } else {
        if ((completedWork.mode & ProfileMode) !== NoMode) {
          var _treeBaseDuration = completedWork.selfBaseDuration;
          var _child2 = completedWork.child;
          while (_child2 !== null) {
            newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes));
            subtreeFlags |= _child2.subtreeFlags & StaticMask;
            subtreeFlags |= _child2.flags & StaticMask;
            _treeBaseDuration += _child2.treeBaseDuration;
            _child2 = _child2.sibling;
          }
          completedWork.treeBaseDuration = _treeBaseDuration;
        } else {
          var _child3 = completedWork.child;
          while (_child3 !== null) {
            newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes));
            subtreeFlags |= _child3.subtreeFlags & StaticMask;
            subtreeFlags |= _child3.flags & StaticMask;
            _child3.return = completedWork;
            _child3 = _child3.sibling;
          }
        }
        completedWork.subtreeFlags |= subtreeFlags;
      }
      completedWork.childLanes = newChildLanes;
      return didBailout;
    }
    function completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState) {
      if (hasUnhydratedTailNodes() && (workInProgress2.mode & ConcurrentMode) !== NoMode && (workInProgress2.flags & DidCapture) === NoFlags) {
        warnIfUnhydratedTailNodes(workInProgress2);
        resetHydrationState();
        workInProgress2.flags |= ForceClientRender | Incomplete | ShouldCapture;
        return false;
      }
      var wasHydrated = popHydrationState(workInProgress2);
      if (nextState !== null && nextState.dehydrated !== null) {
        if (current2 === null) {
          if (!wasHydrated) {
            throw new Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
          }
          prepareToHydrateHostSuspenseInstance(workInProgress2);
          bubbleProperties(workInProgress2);
          {
            if ((workInProgress2.mode & ProfileMode) !== NoMode) {
              var isTimedOutSuspense = nextState !== null;
              if (isTimedOutSuspense) {
                var primaryChildFragment = workInProgress2.child;
                if (primaryChildFragment !== null) {
                  workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                }
              }
            }
          }
          return false;
        } else {
          resetHydrationState();
          if ((workInProgress2.flags & DidCapture) === NoFlags) {
            workInProgress2.memoizedState = null;
          }
          workInProgress2.flags |= Update;
          bubbleProperties(workInProgress2);
          {
            if ((workInProgress2.mode & ProfileMode) !== NoMode) {
              var _isTimedOutSuspense = nextState !== null;
              if (_isTimedOutSuspense) {
                var _primaryChildFragment = workInProgress2.child;
                if (_primaryChildFragment !== null) {
                  workInProgress2.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;
                }
              }
            }
          }
          return false;
        }
      } else {
        upgradeHydrationErrorsToRecoverable();
        return true;
      }
    }
    function completeWork(current2, workInProgress2, renderLanes2) {
      var newProps = workInProgress2.pendingProps;
      popTreeContext(workInProgress2);
      switch (workInProgress2.tag) {
        case IndeterminateComponent:
        case LazyComponent:
        case SimpleMemoComponent:
        case FunctionComponent:
        case ForwardRef:
        case Fragment:
        case Mode:
        case Profiler:
        case ContextConsumer:
        case MemoComponent:
          bubbleProperties(workInProgress2);
          return null;
        case ClassComponent: {
          var Component = workInProgress2.type;
          if (isContextProvider(Component)) {
            popContext(workInProgress2);
          }
          bubbleProperties(workInProgress2);
          return null;
        }
        case HostRoot: {
          var fiberRoot = workInProgress2.stateNode;
          popHostContainer(workInProgress2);
          popTopLevelContextObject(workInProgress2);
          resetWorkInProgressVersions();
          if (fiberRoot.pendingContext) {
            fiberRoot.context = fiberRoot.pendingContext;
            fiberRoot.pendingContext = null;
          }
          if (current2 === null || current2.child === null) {
            var wasHydrated = popHydrationState(workInProgress2);
            if (wasHydrated) {
              markUpdate(workInProgress2);
            } else {
              if (current2 !== null) {
                var prevState = current2.memoizedState;
                if (
                  // Check if this is a client root
                  !prevState.isDehydrated || // Check if we reverted to client rendering (e.g. due to an error)
                  (workInProgress2.flags & ForceClientRender) !== NoFlags
                ) {
                  workInProgress2.flags |= Snapshot;
                  upgradeHydrationErrorsToRecoverable();
                }
              }
            }
          }
          updateHostContainer(current2, workInProgress2);
          bubbleProperties(workInProgress2);
          return null;
        }
        case HostComponent: {
          popHostContext(workInProgress2);
          var rootContainerInstance = getRootHostContainer();
          var type = workInProgress2.type;
          if (current2 !== null && workInProgress2.stateNode != null) {
            updateHostComponent$1(current2, workInProgress2, type, newProps, rootContainerInstance);
            if (current2.ref !== workInProgress2.ref) {
              markRef$1(workInProgress2);
            }
          } else {
            if (!newProps) {
              if (workInProgress2.stateNode === null) {
                throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
              }
              bubbleProperties(workInProgress2);
              return null;
            }
            var currentHostContext = getHostContext();
            var _wasHydrated = popHydrationState(workInProgress2);
            if (_wasHydrated) {
              if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                markUpdate(workInProgress2);
              }
            } else {
              var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress2);
              appendAllChildren(instance, workInProgress2, false, false);
              workInProgress2.stateNode = instance;
              if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
                markUpdate(workInProgress2);
              }
            }
            if (workInProgress2.ref !== null) {
              markRef$1(workInProgress2);
            }
          }
          bubbleProperties(workInProgress2);
          return null;
        }
        case HostText: {
          var newText = newProps;
          if (current2 && workInProgress2.stateNode != null) {
            var oldText = current2.memoizedProps;
            updateHostText$1(current2, workInProgress2, oldText, newText);
          } else {
            if (typeof newText !== "string") {
              if (workInProgress2.stateNode === null) {
                throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            var _rootContainerInstance = getRootHostContainer();
            var _currentHostContext = getHostContext();
            var _wasHydrated2 = popHydrationState(workInProgress2);
            if (_wasHydrated2) {
              if (prepareToHydrateHostTextInstance(workInProgress2)) {
                markUpdate(workInProgress2);
              }
            } else {
              workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
            }
          }
          bubbleProperties(workInProgress2);
          return null;
        }
        case SuspenseComponent: {
          popSuspenseContext(workInProgress2);
          var nextState = workInProgress2.memoizedState;
          if (current2 === null || current2.memoizedState !== null && current2.memoizedState.dehydrated !== null) {
            var fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState);
            if (!fallthroughToNormalSuspensePath) {
              if (workInProgress2.flags & ShouldCapture) {
                return workInProgress2;
              } else {
                return null;
              }
            }
          }
          if ((workInProgress2.flags & DidCapture) !== NoFlags) {
            workInProgress2.lanes = renderLanes2;
            if ((workInProgress2.mode & ProfileMode) !== NoMode) {
              transferActualDuration(workInProgress2);
            }
            return workInProgress2;
          }
          var nextDidTimeout = nextState !== null;
          var prevDidTimeout = current2 !== null && current2.memoizedState !== null;
          if (nextDidTimeout !== prevDidTimeout) {
            if (nextDidTimeout) {
              var _offscreenFiber2 = workInProgress2.child;
              _offscreenFiber2.flags |= Visibility;
              if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
                var hasInvisibleChildContext = current2 === null && (workInProgress2.memoizedProps.unstable_avoidThisFallback !== true || !enableSuspenseAvoidThisFallback);
                if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                  renderDidSuspend();
                } else {
                  renderDidSuspendDelayIfPossible();
                }
              }
            }
          }
          var wakeables = workInProgress2.updateQueue;
          if (wakeables !== null) {
            workInProgress2.flags |= Update;
          }
          bubbleProperties(workInProgress2);
          {
            if ((workInProgress2.mode & ProfileMode) !== NoMode) {
              if (nextDidTimeout) {
                var primaryChildFragment = workInProgress2.child;
                if (primaryChildFragment !== null) {
                  workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                }
              }
            }
          }
          return null;
        }
        case HostPortal:
          popHostContainer(workInProgress2);
          updateHostContainer(current2, workInProgress2);
          if (current2 === null) {
            preparePortalMount(workInProgress2.stateNode.containerInfo);
          }
          bubbleProperties(workInProgress2);
          return null;
        case ContextProvider:
          var context = workInProgress2.type._context;
          popProvider(context, workInProgress2);
          bubbleProperties(workInProgress2);
          return null;
        case IncompleteClassComponent: {
          var _Component = workInProgress2.type;
          if (isContextProvider(_Component)) {
            popContext(workInProgress2);
          }
          bubbleProperties(workInProgress2);
          return null;
        }
        case SuspenseListComponent: {
          popSuspenseContext(workInProgress2);
          var renderState = workInProgress2.memoizedState;
          if (renderState === null) {
            bubbleProperties(workInProgress2);
            return null;
          }
          var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags;
          var renderedTail = renderState.rendering;
          if (renderedTail === null) {
            if (!didSuspendAlready) {
              var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.flags & DidCapture) === NoFlags);
              if (!cannotBeSuspended) {
                var row = workInProgress2.child;
                while (row !== null) {
                  var suspended = findFirstSuspended(row);
                  if (suspended !== null) {
                    didSuspendAlready = true;
                    workInProgress2.flags |= DidCapture;
                    cutOffTailIfNeeded(renderState, false);
                    var newThenables = suspended.updateQueue;
                    if (newThenables !== null) {
                      workInProgress2.updateQueue = newThenables;
                      workInProgress2.flags |= Update;
                    }
                    workInProgress2.subtreeFlags = NoFlags;
                    resetChildFibers(workInProgress2, renderLanes2);
                    pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                    return workInProgress2.child;
                  }
                  row = row.sibling;
                }
              }
              if (renderState.tail !== null && now() > getRenderTargetTime()) {
                workInProgress2.flags |= DidCapture;
                didSuspendAlready = true;
                cutOffTailIfNeeded(renderState, false);
                workInProgress2.lanes = SomeRetryLane;
              }
            } else {
              cutOffTailIfNeeded(renderState, false);
            }
          } else {
            if (!didSuspendAlready) {
              var _suspended = findFirstSuspended(renderedTail);
              if (_suspended !== null) {
                workInProgress2.flags |= DidCapture;
                didSuspendAlready = true;
                var _newThenables = _suspended.updateQueue;
                if (_newThenables !== null) {
                  workInProgress2.updateQueue = _newThenables;
                  workInProgress2.flags |= Update;
                }
                cutOffTailIfNeeded(renderState, true);
                if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating()) {
                  bubbleProperties(workInProgress2);
                  return null;
                }
              } else if (
                // The time it took to render last row is greater than the remaining
                // time we have to render. So rendering one more row would likely
                // exceed it.
                now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes2 !== OffscreenLane
              ) {
                workInProgress2.flags |= DidCapture;
                didSuspendAlready = true;
                cutOffTailIfNeeded(renderState, false);
                workInProgress2.lanes = SomeRetryLane;
              }
            }
            if (renderState.isBackwards) {
              renderedTail.sibling = workInProgress2.child;
              workInProgress2.child = renderedTail;
            } else {
              var previousSibling = renderState.last;
              if (previousSibling !== null) {
                previousSibling.sibling = renderedTail;
              } else {
                workInProgress2.child = renderedTail;
              }
              renderState.last = renderedTail;
            }
          }
          if (renderState.tail !== null) {
            var next = renderState.tail;
            renderState.rendering = next;
            renderState.tail = next.sibling;
            renderState.renderingStartTime = now();
            next.sibling = null;
            var suspenseContext = suspenseStackCursor.current;
            if (didSuspendAlready) {
              suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
            } else {
              suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            }
            pushSuspenseContext(workInProgress2, suspenseContext);
            return next;
          }
          bubbleProperties(workInProgress2);
          return null;
        }
        case ScopeComponent: {
          break;
        }
        case OffscreenComponent:
        case LegacyHiddenComponent: {
          popRenderLanes(workInProgress2);
          var _nextState = workInProgress2.memoizedState;
          var nextIsHidden = _nextState !== null;
          if (current2 !== null) {
            var _prevState = current2.memoizedState;
            var prevIsHidden = _prevState !== null;
            if (prevIsHidden !== nextIsHidden && // LegacyHidden doesn't do any hiding — it only pre-renders.
            !enableLegacyHidden) {
              workInProgress2.flags |= Visibility;
            }
          }
          if (!nextIsHidden || (workInProgress2.mode & ConcurrentMode) === NoMode) {
            bubbleProperties(workInProgress2);
          } else {
            if (includesSomeLane(subtreeRenderLanes, OffscreenLane)) {
              bubbleProperties(workInProgress2);
              {
                if (workInProgress2.subtreeFlags & (Placement | Update)) {
                  workInProgress2.flags |= Visibility;
                }
              }
            }
          }
          return null;
        }
        case CacheComponent: {
          return null;
        }
        case TracingMarkerComponent: {
          return null;
        }
      }
      throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
    }
    function unwindWork(current2, workInProgress2, renderLanes2) {
      popTreeContext(workInProgress2);
      switch (workInProgress2.tag) {
        case ClassComponent: {
          var Component = workInProgress2.type;
          if (isContextProvider(Component)) {
            popContext(workInProgress2);
          }
          var flags = workInProgress2.flags;
          if (flags & ShouldCapture) {
            workInProgress2.flags = flags & ~ShouldCapture | DidCapture;
            if ((workInProgress2.mode & ProfileMode) !== NoMode) {
              transferActualDuration(workInProgress2);
            }
            return workInProgress2;
          }
          return null;
        }
        case HostRoot: {
          var root2 = workInProgress2.stateNode;
          popHostContainer(workInProgress2);
          popTopLevelContextObject(workInProgress2);
          resetWorkInProgressVersions();
          var _flags = workInProgress2.flags;
          if ((_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags) {
            workInProgress2.flags = _flags & ~ShouldCapture | DidCapture;
            return workInProgress2;
          }
          return null;
        }
        case HostComponent: {
          popHostContext(workInProgress2);
          return null;
        }
        case SuspenseComponent: {
          popSuspenseContext(workInProgress2);
          var suspenseState = workInProgress2.memoizedState;
          if (suspenseState !== null && suspenseState.dehydrated !== null) {
            if (workInProgress2.alternate === null) {
              throw new Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
            }
            resetHydrationState();
          }
          var _flags2 = workInProgress2.flags;
          if (_flags2 & ShouldCapture) {
            workInProgress2.flags = _flags2 & ~ShouldCapture | DidCapture;
            if ((workInProgress2.mode & ProfileMode) !== NoMode) {
              transferActualDuration(workInProgress2);
            }
            return workInProgress2;
          }
          return null;
        }
        case SuspenseListComponent: {
          popSuspenseContext(workInProgress2);
          return null;
        }
        case HostPortal:
          popHostContainer(workInProgress2);
          return null;
        case ContextProvider:
          var context = workInProgress2.type._context;
          popProvider(context, workInProgress2);
          return null;
        case OffscreenComponent:
        case LegacyHiddenComponent:
          popRenderLanes(workInProgress2);
          return null;
        case CacheComponent:
          return null;
        default:
          return null;
      }
    }
    function unwindInterruptedWork(current2, interruptedWork, renderLanes2) {
      popTreeContext(interruptedWork);
      switch (interruptedWork.tag) {
        case ClassComponent: {
          var childContextTypes = interruptedWork.type.childContextTypes;
          if (childContextTypes !== null && childContextTypes !== void 0) {
            popContext(interruptedWork);
          }
          break;
        }
        case HostRoot: {
          var root2 = interruptedWork.stateNode;
          popHostContainer(interruptedWork);
          popTopLevelContextObject(interruptedWork);
          resetWorkInProgressVersions();
          break;
        }
        case HostComponent: {
          popHostContext(interruptedWork);
          break;
        }
        case HostPortal:
          popHostContainer(interruptedWork);
          break;
        case SuspenseComponent:
          popSuspenseContext(interruptedWork);
          break;
        case SuspenseListComponent:
          popSuspenseContext(interruptedWork);
          break;
        case ContextProvider:
          var context = interruptedWork.type._context;
          popProvider(context, interruptedWork);
          break;
        case OffscreenComponent:
        case LegacyHiddenComponent:
          popRenderLanes(interruptedWork);
          break;
      }
    }
    var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
    {
      didWarnAboutUndefinedSnapshotBeforeUpdate = /* @__PURE__ */ new Set();
    }
    var offscreenSubtreeIsHidden = false;
    var offscreenSubtreeWasHidden = false;
    var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
    var nextEffect = null;
    var inProgressLanes = null;
    var inProgressRoot = null;
    function reportUncaughtErrorInDEV(error2) {
      {
        invokeGuardedCallback(null, function() {
          throw error2;
        });
        clearCaughtError();
      }
    }
    var callComponentWillUnmountWithTimer = function(current2, instance) {
      instance.props = current2.memoizedProps;
      instance.state = current2.memoizedState;
      if (current2.mode & ProfileMode) {
        try {
          startLayoutEffectTimer();
          instance.componentWillUnmount();
        } finally {
          recordLayoutEffectDuration(current2);
        }
      } else {
        instance.componentWillUnmount();
      }
    };
    function safelyCallCommitHookLayoutEffectListMount(current2, nearestMountedAncestor) {
      try {
        commitHookEffectListMount(Layout, current2);
      } catch (error2) {
        captureCommitPhaseError(current2, nearestMountedAncestor, error2);
      }
    }
    function safelyCallComponentWillUnmount(current2, nearestMountedAncestor, instance) {
      try {
        callComponentWillUnmountWithTimer(current2, instance);
      } catch (error2) {
        captureCommitPhaseError(current2, nearestMountedAncestor, error2);
      }
    }
    function safelyCallComponentDidMount(current2, nearestMountedAncestor, instance) {
      try {
        instance.componentDidMount();
      } catch (error2) {
        captureCommitPhaseError(current2, nearestMountedAncestor, error2);
      }
    }
    function safelyAttachRef(current2, nearestMountedAncestor) {
      try {
        commitAttachRef(current2);
      } catch (error2) {
        captureCommitPhaseError(current2, nearestMountedAncestor, error2);
      }
    }
    function safelyDetachRef(current2, nearestMountedAncestor) {
      var ref = current2.ref;
      if (ref !== null) {
        if (typeof ref === "function") {
          var retVal;
          try {
            if (enableProfilerTimer && enableProfilerCommitHooks && current2.mode & ProfileMode) {
              try {
                startLayoutEffectTimer();
                retVal = ref(null);
              } finally {
                recordLayoutEffectDuration(current2);
              }
            } else {
              retVal = ref(null);
            }
          } catch (error2) {
            captureCommitPhaseError(current2, nearestMountedAncestor, error2);
          }
          {
            if (typeof retVal === "function") {
              error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(current2));
            }
          }
        } else {
          ref.current = null;
        }
      }
    }
    function safelyCallDestroy(current2, nearestMountedAncestor, destroy) {
      try {
        destroy();
      } catch (error2) {
        captureCommitPhaseError(current2, nearestMountedAncestor, error2);
      }
    }
    var focusedInstanceHandle = null;
    var shouldFireAfterActiveInstanceBlur = false;
    function commitBeforeMutationEffects(root2, firstChild) {
      focusedInstanceHandle = prepareForCommit(root2.containerInfo);
      nextEffect = firstChild;
      commitBeforeMutationEffects_begin();
      var shouldFire = shouldFireAfterActiveInstanceBlur;
      shouldFireAfterActiveInstanceBlur = false;
      focusedInstanceHandle = null;
      return shouldFire;
    }
    function commitBeforeMutationEffects_begin() {
      while (nextEffect !== null) {
        var fiber = nextEffect;
        var child = fiber.child;
        if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null) {
          child.return = fiber;
          nextEffect = child;
        } else {
          commitBeforeMutationEffects_complete();
        }
      }
    }
    function commitBeforeMutationEffects_complete() {
      while (nextEffect !== null) {
        var fiber = nextEffect;
        setCurrentFiber(fiber);
        try {
          commitBeforeMutationEffectsOnFiber(fiber);
        } catch (error2) {
          captureCommitPhaseError(fiber, fiber.return, error2);
        }
        resetCurrentFiber();
        var sibling = fiber.sibling;
        if (sibling !== null) {
          sibling.return = fiber.return;
          nextEffect = sibling;
          return;
        }
        nextEffect = fiber.return;
      }
    }
    function commitBeforeMutationEffectsOnFiber(finishedWork) {
      var current2 = finishedWork.alternate;
      var flags = finishedWork.flags;
      if ((flags & Snapshot) !== NoFlags) {
        setCurrentFiber(finishedWork);
        switch (finishedWork.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent: {
            break;
          }
          case ClassComponent: {
            if (current2 !== null) {
              var prevProps = current2.memoizedProps;
              var prevState = current2.memoizedState;
              var instance = finishedWork.stateNode;
              {
                if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                  if (instance.props !== finishedWork.memoizedProps) {
                    error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                  }
                  if (instance.state !== finishedWork.memoizedState) {
                    error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                  }
                }
              }
              var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
              {
                var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                if (snapshot === void 0 && !didWarnSet.has(finishedWork.type)) {
                  didWarnSet.add(finishedWork.type);
                  error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentNameFromFiber(finishedWork));
                }
              }
              instance.__reactInternalSnapshotBeforeUpdate = snapshot;
            }
            break;
          }
          case HostRoot: {
            {
              var root2 = finishedWork.stateNode;
              clearContainer(root2.containerInfo);
            }
            break;
          }
          case HostComponent:
          case HostText:
          case HostPortal:
          case IncompleteClassComponent:
            break;
          default: {
            throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        resetCurrentFiber();
      }
    }
    function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {
      var updateQueue = finishedWork.updateQueue;
      var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
      if (lastEffect !== null) {
        var firstEffect = lastEffect.next;
        var effect = firstEffect;
        do {
          if ((effect.tag & flags) === flags) {
            var destroy = effect.destroy;
            effect.destroy = void 0;
            if (destroy !== void 0) {
              {
                if ((flags & Passive$1) !== NoFlags$1) {
                  markComponentPassiveEffectUnmountStarted(finishedWork);
                } else if ((flags & Layout) !== NoFlags$1) {
                  markComponentLayoutEffectUnmountStarted(finishedWork);
                }
              }
              {
                if ((flags & Insertion) !== NoFlags$1) {
                  setIsRunningInsertionEffect(true);
                }
              }
              safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);
              {
                if ((flags & Insertion) !== NoFlags$1) {
                  setIsRunningInsertionEffect(false);
                }
              }
              {
                if ((flags & Passive$1) !== NoFlags$1) {
                  markComponentPassiveEffectUnmountStopped();
                } else if ((flags & Layout) !== NoFlags$1) {
                  markComponentLayoutEffectUnmountStopped();
                }
              }
            }
          }
          effect = effect.next;
        } while (effect !== firstEffect);
      }
    }
    function commitHookEffectListMount(flags, finishedWork) {
      var updateQueue = finishedWork.updateQueue;
      var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
      if (lastEffect !== null) {
        var firstEffect = lastEffect.next;
        var effect = firstEffect;
        do {
          if ((effect.tag & flags) === flags) {
            {
              if ((flags & Passive$1) !== NoFlags$1) {
                markComponentPassiveEffectMountStarted(finishedWork);
              } else if ((flags & Layout) !== NoFlags$1) {
                markComponentLayoutEffectMountStarted(finishedWork);
              }
            }
            var create = effect.create;
            {
              if ((flags & Insertion) !== NoFlags$1) {
                setIsRunningInsertionEffect(true);
              }
            }
            effect.destroy = create();
            {
              if ((flags & Insertion) !== NoFlags$1) {
                setIsRunningInsertionEffect(false);
              }
            }
            {
              if ((flags & Passive$1) !== NoFlags$1) {
                markComponentPassiveEffectMountStopped();
              } else if ((flags & Layout) !== NoFlags$1) {
                markComponentLayoutEffectMountStopped();
              }
            }
            {
              var destroy = effect.destroy;
              if (destroy !== void 0 && typeof destroy !== "function") {
                var hookName = void 0;
                if ((effect.tag & Layout) !== NoFlags) {
                  hookName = "useLayoutEffect";
                } else if ((effect.tag & Insertion) !== NoFlags) {
                  hookName = "useInsertionEffect";
                } else {
                  hookName = "useEffect";
                }
                var addendum = void 0;
                if (destroy === null) {
                  addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                } else if (typeof destroy.then === "function") {
                  addendum = "\n\nIt looks like you wrote " + hookName + "(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\n" + hookName + "(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                } else {
                  addendum = " You returned: " + destroy;
                }
                error("%s must not return anything besides a function, which is used for clean-up.%s", hookName, addendum);
              }
            }
          }
          effect = effect.next;
        } while (effect !== firstEffect);
      }
    }
    function commitPassiveEffectDurations(finishedRoot, finishedWork) {
      {
        if ((finishedWork.flags & Update) !== NoFlags) {
          switch (finishedWork.tag) {
            case Profiler: {
              var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;
              var _finishedWork$memoize = finishedWork.memoizedProps, id = _finishedWork$memoize.id, onPostCommit = _finishedWork$memoize.onPostCommit;
              var commitTime2 = getCommitTime();
              var phase = finishedWork.alternate === null ? "mount" : "update";
              {
                if (isCurrentUpdateNested()) {
                  phase = "nested-update";
                }
              }
              if (typeof onPostCommit === "function") {
                onPostCommit(id, phase, passiveEffectDuration, commitTime2);
              }
              var parentFiber = finishedWork.return;
              outer:
                while (parentFiber !== null) {
                  switch (parentFiber.tag) {
                    case HostRoot:
                      var root2 = parentFiber.stateNode;
                      root2.passiveEffectDuration += passiveEffectDuration;
                      break outer;
                    case Profiler:
                      var parentStateNode = parentFiber.stateNode;
                      parentStateNode.passiveEffectDuration += passiveEffectDuration;
                      break outer;
                  }
                  parentFiber = parentFiber.return;
                }
              break;
            }
          }
        }
      }
    }
    function commitLayoutEffectOnFiber(finishedRoot, current2, finishedWork, committedLanes) {
      if ((finishedWork.flags & LayoutMask) !== NoFlags) {
        switch (finishedWork.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent: {
            if (!offscreenSubtreeWasHidden) {
              if (finishedWork.mode & ProfileMode) {
                try {
                  startLayoutEffectTimer();
                  commitHookEffectListMount(Layout | HasEffect, finishedWork);
                } finally {
                  recordLayoutEffectDuration(finishedWork);
                }
              } else {
                commitHookEffectListMount(Layout | HasEffect, finishedWork);
              }
            }
            break;
          }
          case ClassComponent: {
            var instance = finishedWork.stateNode;
            if (finishedWork.flags & Update) {
              if (!offscreenSubtreeWasHidden) {
                if (current2 === null) {
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance.props !== finishedWork.memoizedProps) {
                        error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                      }
                      if (instance.state !== finishedWork.memoizedState) {
                        error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                      }
                    }
                  }
                  if (finishedWork.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      instance.componentDidMount();
                    } finally {
                      recordLayoutEffectDuration(finishedWork);
                    }
                  } else {
                    instance.componentDidMount();
                  }
                } else {
                  var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps);
                  var prevState = current2.memoizedState;
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance.props !== finishedWork.memoizedProps) {
                        error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                      }
                      if (instance.state !== finishedWork.memoizedState) {
                        error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                      }
                    }
                  }
                  if (finishedWork.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                    } finally {
                      recordLayoutEffectDuration(finishedWork);
                    }
                  } else {
                    instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                  }
                }
              }
            }
            var updateQueue = finishedWork.updateQueue;
            if (updateQueue !== null) {
              {
                if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                  if (instance.props !== finishedWork.memoizedProps) {
                    error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                  }
                  if (instance.state !== finishedWork.memoizedState) {
                    error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                  }
                }
              }
              commitUpdateQueue(finishedWork, updateQueue, instance);
            }
            break;
          }
          case HostRoot: {
            var _updateQueue = finishedWork.updateQueue;
            if (_updateQueue !== null) {
              var _instance = null;
              if (finishedWork.child !== null) {
                switch (finishedWork.child.tag) {
                  case HostComponent:
                    _instance = getPublicInstance(finishedWork.child.stateNode);
                    break;
                  case ClassComponent:
                    _instance = finishedWork.child.stateNode;
                    break;
                }
              }
              commitUpdateQueue(finishedWork, _updateQueue, _instance);
            }
            break;
          }
          case HostComponent: {
            var _instance2 = finishedWork.stateNode;
            if (current2 === null && finishedWork.flags & Update) {
              var type = finishedWork.type;
              var props = finishedWork.memoizedProps;
              commitMount(_instance2, type, props);
            }
            break;
          }
          case HostText: {
            break;
          }
          case HostPortal: {
            break;
          }
          case Profiler: {
            {
              var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
              var effectDuration = finishedWork.stateNode.effectDuration;
              var commitTime2 = getCommitTime();
              var phase = current2 === null ? "mount" : "update";
              {
                if (isCurrentUpdateNested()) {
                  phase = "nested-update";
                }
              }
              if (typeof onRender === "function") {
                onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime2);
              }
              {
                if (typeof onCommit === "function") {
                  onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime2);
                }
                enqueuePendingPassiveProfilerEffect(finishedWork);
                var parentFiber = finishedWork.return;
                outer:
                  while (parentFiber !== null) {
                    switch (parentFiber.tag) {
                      case HostRoot:
                        var root2 = parentFiber.stateNode;
                        root2.effectDuration += effectDuration;
                        break outer;
                      case Profiler:
                        var parentStateNode = parentFiber.stateNode;
                        parentStateNode.effectDuration += effectDuration;
                        break outer;
                    }
                    parentFiber = parentFiber.return;
                  }
              }
            }
            break;
          }
          case SuspenseComponent: {
            commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
            break;
          }
          case SuspenseListComponent:
          case IncompleteClassComponent:
          case ScopeComponent:
          case OffscreenComponent:
          case LegacyHiddenComponent:
          case TracingMarkerComponent: {
            break;
          }
          default:
            throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
        }
      }
      if (!offscreenSubtreeWasHidden) {
        {
          if (finishedWork.flags & Ref) {
            commitAttachRef(finishedWork);
          }
        }
      }
    }
    function reappearLayoutEffectsOnFiber(node) {
      switch (node.tag) {
        case FunctionComponent:
        case ForwardRef:
        case SimpleMemoComponent: {
          if (node.mode & ProfileMode) {
            try {
              startLayoutEffectTimer();
              safelyCallCommitHookLayoutEffectListMount(node, node.return);
            } finally {
              recordLayoutEffectDuration(node);
            }
          } else {
            safelyCallCommitHookLayoutEffectListMount(node, node.return);
          }
          break;
        }
        case ClassComponent: {
          var instance = node.stateNode;
          if (typeof instance.componentDidMount === "function") {
            safelyCallComponentDidMount(node, node.return, instance);
          }
          safelyAttachRef(node, node.return);
          break;
        }
        case HostComponent: {
          safelyAttachRef(node, node.return);
          break;
        }
      }
    }
    function hideOrUnhideAllChildren(finishedWork, isHidden) {
      var hostSubtreeRoot = null;
      {
        var node = finishedWork;
        while (true) {
          if (node.tag === HostComponent) {
            if (hostSubtreeRoot === null) {
              hostSubtreeRoot = node;
              try {
                var instance = node.stateNode;
                if (isHidden) {
                  hideInstance(instance);
                } else {
                  unhideInstance(node.stateNode, node.memoizedProps);
                }
              } catch (error2) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error2);
              }
            }
          } else if (node.tag === HostText) {
            if (hostSubtreeRoot === null) {
              try {
                var _instance3 = node.stateNode;
                if (isHidden) {
                  hideTextInstance(_instance3);
                } else {
                  unhideTextInstance(_instance3, node.memoizedProps);
                }
              } catch (error2) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error2);
              }
            }
          } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork)
            ;
          else if (node.child !== null) {
            node.child.return = node;
            node = node.child;
            continue;
          }
          if (node === finishedWork) {
            return;
          }
          while (node.sibling === null) {
            if (node.return === null || node.return === finishedWork) {
              return;
            }
            if (hostSubtreeRoot === node) {
              hostSubtreeRoot = null;
            }
            node = node.return;
          }
          if (hostSubtreeRoot === node) {
            hostSubtreeRoot = null;
          }
          node.sibling.return = node.return;
          node = node.sibling;
        }
      }
    }
    function commitAttachRef(finishedWork) {
      var ref = finishedWork.ref;
      if (ref !== null) {
        var instance = finishedWork.stateNode;
        var instanceToUse;
        switch (finishedWork.tag) {
          case HostComponent:
            instanceToUse = getPublicInstance(instance);
            break;
          default:
            instanceToUse = instance;
        }
        if (typeof ref === "function") {
          var retVal;
          if (finishedWork.mode & ProfileMode) {
            try {
              startLayoutEffectTimer();
              retVal = ref(instanceToUse);
            } finally {
              recordLayoutEffectDuration(finishedWork);
            }
          } else {
            retVal = ref(instanceToUse);
          }
          {
            if (typeof retVal === "function") {
              error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(finishedWork));
            }
          }
        } else {
          {
            if (!ref.hasOwnProperty("current")) {
              error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentNameFromFiber(finishedWork));
            }
          }
          ref.current = instanceToUse;
        }
      }
    }
    function detachFiberMutation(fiber) {
      var alternate = fiber.alternate;
      if (alternate !== null) {
        alternate.return = null;
      }
      fiber.return = null;
    }
    function detachFiberAfterEffects(fiber) {
      var alternate = fiber.alternate;
      if (alternate !== null) {
        fiber.alternate = null;
        detachFiberAfterEffects(alternate);
      }
      {
        fiber.child = null;
        fiber.deletions = null;
        fiber.sibling = null;
        if (fiber.tag === HostComponent) {
          var hostInstance = fiber.stateNode;
          if (hostInstance !== null) {
            detachDeletedInstance(hostInstance);
          }
        }
        fiber.stateNode = null;
        {
          fiber._debugOwner = null;
        }
        {
          fiber.return = null;
          fiber.dependencies = null;
          fiber.memoizedProps = null;
          fiber.memoizedState = null;
          fiber.pendingProps = null;
          fiber.stateNode = null;
          fiber.updateQueue = null;
        }
      }
    }
    function getHostParentFiber(fiber) {
      var parent = fiber.return;
      while (parent !== null) {
        if (isHostParent(parent)) {
          return parent;
        }
        parent = parent.return;
      }
      throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
    }
    function isHostParent(fiber) {
      return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
    }
    function getHostSibling(fiber) {
      var node = fiber;
      siblings:
        while (true) {
          while (node.sibling === null) {
            if (node.return === null || isHostParent(node.return)) {
              return null;
            }
            node = node.return;
          }
          node.sibling.return = node.return;
          node = node.sibling;
          while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
            if (node.flags & Placement) {
              continue siblings;
            }
            if (node.child === null || node.tag === HostPortal) {
              continue siblings;
            } else {
              node.child.return = node;
              node = node.child;
            }
          }
          if (!(node.flags & Placement)) {
            return node.stateNode;
          }
        }
    }
    function commitPlacement(finishedWork) {
      var parentFiber = getHostParentFiber(finishedWork);
      switch (parentFiber.tag) {
        case HostComponent: {
          var parent = parentFiber.stateNode;
          if (parentFiber.flags & ContentReset) {
            resetTextContent(parent);
            parentFiber.flags &= ~ContentReset;
          }
          var before = getHostSibling(finishedWork);
          insertOrAppendPlacementNode(finishedWork, before, parent);
          break;
        }
        case HostRoot:
        case HostPortal: {
          var _parent = parentFiber.stateNode.containerInfo;
          var _before = getHostSibling(finishedWork);
          insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);
          break;
        }
        default:
          throw new Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
      }
    }
    function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
      var tag = node.tag;
      var isHost = tag === HostComponent || tag === HostText;
      if (isHost) {
        var stateNode = node.stateNode;
        if (before) {
          insertInContainerBefore(parent, stateNode, before);
        } else {
          appendChildToContainer(parent, stateNode);
        }
      } else if (tag === HostPortal)
        ;
      else {
        var child = node.child;
        if (child !== null) {
          insertOrAppendPlacementNodeIntoContainer(child, before, parent);
          var sibling = child.sibling;
          while (sibling !== null) {
            insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
            sibling = sibling.sibling;
          }
        }
      }
    }
    function insertOrAppendPlacementNode(node, before, parent) {
      var tag = node.tag;
      var isHost = tag === HostComponent || tag === HostText;
      if (isHost) {
        var stateNode = node.stateNode;
        if (before) {
          insertBefore(parent, stateNode, before);
        } else {
          appendChild(parent, stateNode);
        }
      } else if (tag === HostPortal)
        ;
      else {
        var child = node.child;
        if (child !== null) {
          insertOrAppendPlacementNode(child, before, parent);
          var sibling = child.sibling;
          while (sibling !== null) {
            insertOrAppendPlacementNode(sibling, before, parent);
            sibling = sibling.sibling;
          }
        }
      }
    }
    var hostParent = null;
    var hostParentIsContainer = false;
    function commitDeletionEffects(root2, returnFiber, deletedFiber) {
      {
        var parent = returnFiber;
        findParent:
          while (parent !== null) {
            switch (parent.tag) {
              case HostComponent: {
                hostParent = parent.stateNode;
                hostParentIsContainer = false;
                break findParent;
              }
              case HostRoot: {
                hostParent = parent.stateNode.containerInfo;
                hostParentIsContainer = true;
                break findParent;
              }
              case HostPortal: {
                hostParent = parent.stateNode.containerInfo;
                hostParentIsContainer = true;
                break findParent;
              }
            }
            parent = parent.return;
          }
        if (hostParent === null) {
          throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
        }
        commitDeletionEffectsOnFiber(root2, returnFiber, deletedFiber);
        hostParent = null;
        hostParentIsContainer = false;
      }
      detachFiberMutation(deletedFiber);
    }
    function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
      var child = parent.child;
      while (child !== null) {
        commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);
        child = child.sibling;
      }
    }
    function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
      onCommitUnmount(deletedFiber);
      switch (deletedFiber.tag) {
        case HostComponent: {
          if (!offscreenSubtreeWasHidden) {
            safelyDetachRef(deletedFiber, nearestMountedAncestor);
          }
        }
        case HostText: {
          {
            var prevHostParent = hostParent;
            var prevHostParentIsContainer = hostParentIsContainer;
            hostParent = null;
            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
            hostParent = prevHostParent;
            hostParentIsContainer = prevHostParentIsContainer;
            if (hostParent !== null) {
              if (hostParentIsContainer) {
                removeChildFromContainer(hostParent, deletedFiber.stateNode);
              } else {
                removeChild(hostParent, deletedFiber.stateNode);
              }
            }
          }
          return;
        }
        case DehydratedFragment: {
          {
            if (hostParent !== null) {
              if (hostParentIsContainer) {
                clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode);
              } else {
                clearSuspenseBoundary(hostParent, deletedFiber.stateNode);
              }
            }
          }
          return;
        }
        case HostPortal: {
          {
            var _prevHostParent = hostParent;
            var _prevHostParentIsContainer = hostParentIsContainer;
            hostParent = deletedFiber.stateNode.containerInfo;
            hostParentIsContainer = true;
            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
            hostParent = _prevHostParent;
            hostParentIsContainer = _prevHostParentIsContainer;
          }
          return;
        }
        case FunctionComponent:
        case ForwardRef:
        case MemoComponent:
        case SimpleMemoComponent: {
          if (!offscreenSubtreeWasHidden) {
            var updateQueue = deletedFiber.updateQueue;
            if (updateQueue !== null) {
              var lastEffect = updateQueue.lastEffect;
              if (lastEffect !== null) {
                var firstEffect = lastEffect.next;
                var effect = firstEffect;
                do {
                  var _effect = effect, destroy = _effect.destroy, tag = _effect.tag;
                  if (destroy !== void 0) {
                    if ((tag & Insertion) !== NoFlags$1) {
                      safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                    } else if ((tag & Layout) !== NoFlags$1) {
                      {
                        markComponentLayoutEffectUnmountStarted(deletedFiber);
                      }
                      if (deletedFiber.mode & ProfileMode) {
                        startLayoutEffectTimer();
                        safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                        recordLayoutEffectDuration(deletedFiber);
                      } else {
                        safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                      }
                      {
                        markComponentLayoutEffectUnmountStopped();
                      }
                    }
                  }
                  effect = effect.next;
                } while (effect !== firstEffect);
              }
            }
          }
          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
          return;
        }
        case ClassComponent: {
          if (!offscreenSubtreeWasHidden) {
            safelyDetachRef(deletedFiber, nearestMountedAncestor);
            var instance = deletedFiber.stateNode;
            if (typeof instance.componentWillUnmount === "function") {
              safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);
            }
          }
          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
          return;
        }
        case ScopeComponent: {
          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
          return;
        }
        case OffscreenComponent: {
          if (
            // TODO: Remove this dead flag
            deletedFiber.mode & ConcurrentMode
          ) {
            var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
            offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;
            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
            offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
          } else {
            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
          }
          break;
        }
        default: {
          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
          return;
        }
      }
    }
    function commitSuspenseCallback(finishedWork) {
      var newState = finishedWork.memoizedState;
    }
    function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
      var newState = finishedWork.memoizedState;
      if (newState === null) {
        var current2 = finishedWork.alternate;
        if (current2 !== null) {
          var prevState = current2.memoizedState;
          if (prevState !== null) {
            var suspenseInstance = prevState.dehydrated;
            if (suspenseInstance !== null) {
              commitHydratedSuspenseInstance(suspenseInstance);
            }
          }
        }
      }
    }
    function attachSuspenseRetryListeners(finishedWork) {
      var wakeables = finishedWork.updateQueue;
      if (wakeables !== null) {
        finishedWork.updateQueue = null;
        var retryCache = finishedWork.stateNode;
        if (retryCache === null) {
          retryCache = finishedWork.stateNode = new PossiblyWeakSet();
        }
        wakeables.forEach(function(wakeable) {
          var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
          if (!retryCache.has(wakeable)) {
            retryCache.add(wakeable);
            {
              if (isDevToolsPresent) {
                if (inProgressLanes !== null && inProgressRoot !== null) {
                  restorePendingUpdaters(inProgressRoot, inProgressLanes);
                } else {
                  throw Error("Expected finished root and lanes to be set. This is a bug in React.");
                }
              }
            }
            wakeable.then(retry, retry);
          }
        });
      }
    }
    function commitMutationEffects(root2, finishedWork, committedLanes) {
      inProgressLanes = committedLanes;
      inProgressRoot = root2;
      setCurrentFiber(finishedWork);
      commitMutationEffectsOnFiber(finishedWork, root2);
      setCurrentFiber(finishedWork);
      inProgressLanes = null;
      inProgressRoot = null;
    }
    function recursivelyTraverseMutationEffects(root2, parentFiber, lanes) {
      var deletions = parentFiber.deletions;
      if (deletions !== null) {
        for (var i = 0; i < deletions.length; i++) {
          var childToDelete = deletions[i];
          try {
            commitDeletionEffects(root2, parentFiber, childToDelete);
          } catch (error2) {
            captureCommitPhaseError(childToDelete, parentFiber, error2);
          }
        }
      }
      var prevDebugFiber = getCurrentFiber();
      if (parentFiber.subtreeFlags & MutationMask) {
        var child = parentFiber.child;
        while (child !== null) {
          setCurrentFiber(child);
          commitMutationEffectsOnFiber(child, root2);
          child = child.sibling;
        }
      }
      setCurrentFiber(prevDebugFiber);
    }
    function commitMutationEffectsOnFiber(finishedWork, root2, lanes) {
      var current2 = finishedWork.alternate;
      var flags = finishedWork.flags;
      switch (finishedWork.tag) {
        case FunctionComponent:
        case ForwardRef:
        case MemoComponent:
        case SimpleMemoComponent: {
          recursivelyTraverseMutationEffects(root2, finishedWork);
          commitReconciliationEffects(finishedWork);
          if (flags & Update) {
            try {
              commitHookEffectListUnmount(Insertion | HasEffect, finishedWork, finishedWork.return);
              commitHookEffectListMount(Insertion | HasEffect, finishedWork);
            } catch (error2) {
              captureCommitPhaseError(finishedWork, finishedWork.return, error2);
            }
            if (finishedWork.mode & ProfileMode) {
              try {
                startLayoutEffectTimer();
                commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
              } catch (error2) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error2);
              }
              recordLayoutEffectDuration(finishedWork);
            } else {
              try {
                commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
              } catch (error2) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error2);
              }
            }
          }
          return;
        }
        case ClassComponent: {
          recursivelyTraverseMutationEffects(root2, finishedWork);
          commitReconciliationEffects(finishedWork);
          if (flags & Ref) {
            if (current2 !== null) {
              safelyDetachRef(current2, current2.return);
            }
          }
          return;
        }
        case HostComponent: {
          recursivelyTraverseMutationEffects(root2, finishedWork);
          commitReconciliationEffects(finishedWork);
          if (flags & Ref) {
            if (current2 !== null) {
              safelyDetachRef(current2, current2.return);
            }
          }
          {
            if (finishedWork.flags & ContentReset) {
              var instance = finishedWork.stateNode;
              try {
                resetTextContent(instance);
              } catch (error2) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error2);
              }
            }
            if (flags & Update) {
              var _instance4 = finishedWork.stateNode;
              if (_instance4 != null) {
                var newProps = finishedWork.memoizedProps;
                var oldProps = current2 !== null ? current2.memoizedProps : newProps;
                var type = finishedWork.type;
                var updatePayload = finishedWork.updateQueue;
                finishedWork.updateQueue = null;
                if (updatePayload !== null) {
                  try {
                    commitUpdate(_instance4, updatePayload, type, oldProps, newProps, finishedWork);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                }
              }
            }
          }
          return;
        }
        case HostText: {
          recursivelyTraverseMutationEffects(root2, finishedWork);
          commitReconciliationEffects(finishedWork);
          if (flags & Update) {
            {
              if (finishedWork.stateNode === null) {
                throw new Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
              }
              var textInstance = finishedWork.stateNode;
              var newText = finishedWork.memoizedProps;
              var oldText = current2 !== null ? current2.memoizedProps : newText;
              try {
                commitTextUpdate(textInstance, oldText, newText);
              } catch (error2) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error2);
              }
            }
          }
          return;
        }
        case HostRoot: {
          recursivelyTraverseMutationEffects(root2, finishedWork);
          commitReconciliationEffects(finishedWork);
          if (flags & Update) {
            {
              if (current2 !== null) {
                var prevRootState = current2.memoizedState;
                if (prevRootState.isDehydrated) {
                  try {
                    commitHydratedContainer(root2.containerInfo);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                }
              }
            }
          }
          return;
        }
        case HostPortal: {
          recursivelyTraverseMutationEffects(root2, finishedWork);
          commitReconciliationEffects(finishedWork);
          return;
        }
        case SuspenseComponent: {
          recursivelyTraverseMutationEffects(root2, finishedWork);
          commitReconciliationEffects(finishedWork);
          var offscreenFiber = finishedWork.child;
          if (offscreenFiber.flags & Visibility) {
            var offscreenInstance = offscreenFiber.stateNode;
            var newState = offscreenFiber.memoizedState;
            var isHidden = newState !== null;
            offscreenInstance.isHidden = isHidden;
            if (isHidden) {
              var wasHidden = offscreenFiber.alternate !== null && offscreenFiber.alternate.memoizedState !== null;
              if (!wasHidden) {
                markCommitTimeOfFallback();
              }
            }
          }
          if (flags & Update) {
            try {
              commitSuspenseCallback(finishedWork);
            } catch (error2) {
              captureCommitPhaseError(finishedWork, finishedWork.return, error2);
            }
            attachSuspenseRetryListeners(finishedWork);
          }
          return;
        }
        case OffscreenComponent: {
          var _wasHidden = current2 !== null && current2.memoizedState !== null;
          if (
            // TODO: Remove this dead flag
            finishedWork.mode & ConcurrentMode
          ) {
            var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
            offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || _wasHidden;
            recursivelyTraverseMutationEffects(root2, finishedWork);
            offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
          } else {
            recursivelyTraverseMutationEffects(root2, finishedWork);
          }
          commitReconciliationEffects(finishedWork);
          if (flags & Visibility) {
            var _offscreenInstance = finishedWork.stateNode;
            var _newState = finishedWork.memoizedState;
            var _isHidden = _newState !== null;
            var offscreenBoundary = finishedWork;
            _offscreenInstance.isHidden = _isHidden;
            {
              if (_isHidden) {
                if (!_wasHidden) {
                  if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {
                    nextEffect = offscreenBoundary;
                    var offscreenChild = offscreenBoundary.child;
                    while (offscreenChild !== null) {
                      nextEffect = offscreenChild;
                      disappearLayoutEffects_begin(offscreenChild);
                      offscreenChild = offscreenChild.sibling;
                    }
                  }
                }
              }
            }
            {
              hideOrUnhideAllChildren(offscreenBoundary, _isHidden);
            }
          }
          return;
        }
        case SuspenseListComponent: {
          recursivelyTraverseMutationEffects(root2, finishedWork);
          commitReconciliationEffects(finishedWork);
          if (flags & Update) {
            attachSuspenseRetryListeners(finishedWork);
          }
          return;
        }
        case ScopeComponent: {
          return;
        }
        default: {
          recursivelyTraverseMutationEffects(root2, finishedWork);
          commitReconciliationEffects(finishedWork);
          return;
        }
      }
    }
    function commitReconciliationEffects(finishedWork) {
      var flags = finishedWork.flags;
      if (flags & Placement) {
        try {
          commitPlacement(finishedWork);
        } catch (error2) {
          captureCommitPhaseError(finishedWork, finishedWork.return, error2);
        }
        finishedWork.flags &= ~Placement;
      }
      if (flags & Hydrating) {
        finishedWork.flags &= ~Hydrating;
      }
    }
    function commitLayoutEffects(finishedWork, root2, committedLanes) {
      inProgressLanes = committedLanes;
      inProgressRoot = root2;
      nextEffect = finishedWork;
      commitLayoutEffects_begin(finishedWork, root2, committedLanes);
      inProgressLanes = null;
      inProgressRoot = null;
    }
    function commitLayoutEffects_begin(subtreeRoot, root2, committedLanes) {
      var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;
      while (nextEffect !== null) {
        var fiber = nextEffect;
        var firstChild = fiber.child;
        if (fiber.tag === OffscreenComponent && isModernRoot) {
          var isHidden = fiber.memoizedState !== null;
          var newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;
          if (newOffscreenSubtreeIsHidden) {
            commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
            continue;
          } else {
            var current2 = fiber.alternate;
            var wasHidden = current2 !== null && current2.memoizedState !== null;
            var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;
            var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;
            var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
            offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;
            offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;
            if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {
              nextEffect = fiber;
              reappearLayoutEffects_begin(fiber);
            }
            var child = firstChild;
            while (child !== null) {
              nextEffect = child;
              commitLayoutEffects_begin(
                child,
                // New root; bubble back up to here and stop.
                root2,
                committedLanes
              );
              child = child.sibling;
            }
            nextEffect = fiber;
            offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
            offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
            commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
            continue;
          }
        }
        if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {
          firstChild.return = fiber;
          nextEffect = firstChild;
        } else {
          commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
        }
      }
    }
    function commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes) {
      while (nextEffect !== null) {
        var fiber = nextEffect;
        if ((fiber.flags & LayoutMask) !== NoFlags) {
          var current2 = fiber.alternate;
          setCurrentFiber(fiber);
          try {
            commitLayoutEffectOnFiber(root2, current2, fiber, committedLanes);
          } catch (error2) {
            captureCommitPhaseError(fiber, fiber.return, error2);
          }
          resetCurrentFiber();
        }
        if (fiber === subtreeRoot) {
          nextEffect = null;
          return;
        }
        var sibling = fiber.sibling;
        if (sibling !== null) {
          sibling.return = fiber.return;
          nextEffect = sibling;
          return;
        }
        nextEffect = fiber.return;
      }
    }
    function disappearLayoutEffects_begin(subtreeRoot) {
      while (nextEffect !== null) {
        var fiber = nextEffect;
        var firstChild = fiber.child;
        switch (fiber.tag) {
          case FunctionComponent:
          case ForwardRef:
          case MemoComponent:
          case SimpleMemoComponent: {
            if (fiber.mode & ProfileMode) {
              try {
                startLayoutEffectTimer();
                commitHookEffectListUnmount(Layout, fiber, fiber.return);
              } finally {
                recordLayoutEffectDuration(fiber);
              }
            } else {
              commitHookEffectListUnmount(Layout, fiber, fiber.return);
            }
            break;
          }
          case ClassComponent: {
            safelyDetachRef(fiber, fiber.return);
            var instance = fiber.stateNode;
            if (typeof instance.componentWillUnmount === "function") {
              safelyCallComponentWillUnmount(fiber, fiber.return, instance);
            }
            break;
          }
          case HostComponent: {
            safelyDetachRef(fiber, fiber.return);
            break;
          }
          case OffscreenComponent: {
            var isHidden = fiber.memoizedState !== null;
            if (isHidden) {
              disappearLayoutEffects_complete(subtreeRoot);
              continue;
            }
            break;
          }
        }
        if (firstChild !== null) {
          firstChild.return = fiber;
          nextEffect = firstChild;
        } else {
          disappearLayoutEffects_complete(subtreeRoot);
        }
      }
    }
    function disappearLayoutEffects_complete(subtreeRoot) {
      while (nextEffect !== null) {
        var fiber = nextEffect;
        if (fiber === subtreeRoot) {
          nextEffect = null;
          return;
        }
        var sibling = fiber.sibling;
        if (sibling !== null) {
          sibling.return = fiber.return;
          nextEffect = sibling;
          return;
        }
        nextEffect = fiber.return;
      }
    }
    function reappearLayoutEffects_begin(subtreeRoot) {
      while (nextEffect !== null) {
        var fiber = nextEffect;
        var firstChild = fiber.child;
        if (fiber.tag === OffscreenComponent) {
          var isHidden = fiber.memoizedState !== null;
          if (isHidden) {
            reappearLayoutEffects_complete(subtreeRoot);
            continue;
          }
        }
        if (firstChild !== null) {
          firstChild.return = fiber;
          nextEffect = firstChild;
        } else {
          reappearLayoutEffects_complete(subtreeRoot);
        }
      }
    }
    function reappearLayoutEffects_complete(subtreeRoot) {
      while (nextEffect !== null) {
        var fiber = nextEffect;
        setCurrentFiber(fiber);
        try {
          reappearLayoutEffectsOnFiber(fiber);
        } catch (error2) {
          captureCommitPhaseError(fiber, fiber.return, error2);
        }
        resetCurrentFiber();
        if (fiber === subtreeRoot) {
          nextEffect = null;
          return;
        }
        var sibling = fiber.sibling;
        if (sibling !== null) {
          sibling.return = fiber.return;
          nextEffect = sibling;
          return;
        }
        nextEffect = fiber.return;
      }
    }
    function commitPassiveMountEffects(root2, finishedWork, committedLanes, committedTransitions) {
      nextEffect = finishedWork;
      commitPassiveMountEffects_begin(finishedWork, root2, committedLanes, committedTransitions);
    }
    function commitPassiveMountEffects_begin(subtreeRoot, root2, committedLanes, committedTransitions) {
      while (nextEffect !== null) {
        var fiber = nextEffect;
        var firstChild = fiber.child;
        if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {
          firstChild.return = fiber;
          nextEffect = firstChild;
        } else {
          commitPassiveMountEffects_complete(subtreeRoot, root2, committedLanes, committedTransitions);
        }
      }
    }
    function commitPassiveMountEffects_complete(subtreeRoot, root2, committedLanes, committedTransitions) {
      while (nextEffect !== null) {
        var fiber = nextEffect;
        if ((fiber.flags & Passive) !== NoFlags) {
          setCurrentFiber(fiber);
          try {
            commitPassiveMountOnFiber(root2, fiber, committedLanes, committedTransitions);
          } catch (error2) {
            captureCommitPhaseError(fiber, fiber.return, error2);
          }
          resetCurrentFiber();
        }
        if (fiber === subtreeRoot) {
          nextEffect = null;
          return;
        }
        var sibling = fiber.sibling;
        if (sibling !== null) {
          sibling.return = fiber.return;
          nextEffect = sibling;
          return;
        }
        nextEffect = fiber.return;
      }
    }
    function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
      switch (finishedWork.tag) {
        case FunctionComponent:
        case ForwardRef:
        case SimpleMemoComponent: {
          if (finishedWork.mode & ProfileMode) {
            startPassiveEffectTimer();
            try {
              commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
            } finally {
              recordPassiveEffectDuration(finishedWork);
            }
          } else {
            commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
          }
          break;
        }
      }
    }
    function commitPassiveUnmountEffects(firstChild) {
      nextEffect = firstChild;
      commitPassiveUnmountEffects_begin();
    }
    function commitPassiveUnmountEffects_begin() {
      while (nextEffect !== null) {
        var fiber = nextEffect;
        var child = fiber.child;
        if ((nextEffect.flags & ChildDeletion) !== NoFlags) {
          var deletions = fiber.deletions;
          if (deletions !== null) {
            for (var i = 0; i < deletions.length; i++) {
              var fiberToDelete = deletions[i];
              nextEffect = fiberToDelete;
              commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);
            }
            {
              var previousFiber = fiber.alternate;
              if (previousFiber !== null) {
                var detachedChild = previousFiber.child;
                if (detachedChild !== null) {
                  previousFiber.child = null;
                  do {
                    var detachedSibling = detachedChild.sibling;
                    detachedChild.sibling = null;
                    detachedChild = detachedSibling;
                  } while (detachedChild !== null);
                }
              }
            }
            nextEffect = fiber;
          }
        }
        if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {
          child.return = fiber;
          nextEffect = child;
        } else {
          commitPassiveUnmountEffects_complete();
        }
      }
    }
    function commitPassiveUnmountEffects_complete() {
      while (nextEffect !== null) {
        var fiber = nextEffect;
        if ((fiber.flags & Passive) !== NoFlags) {
          setCurrentFiber(fiber);
          commitPassiveUnmountOnFiber(fiber);
          resetCurrentFiber();
        }
        var sibling = fiber.sibling;
        if (sibling !== null) {
          sibling.return = fiber.return;
          nextEffect = sibling;
          return;
        }
        nextEffect = fiber.return;
      }
    }
    function commitPassiveUnmountOnFiber(finishedWork) {
      switch (finishedWork.tag) {
        case FunctionComponent:
        case ForwardRef:
        case SimpleMemoComponent: {
          if (finishedWork.mode & ProfileMode) {
            startPassiveEffectTimer();
            commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
            recordPassiveEffectDuration(finishedWork);
          } else {
            commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
          }
          break;
        }
      }
    }
    function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
      while (nextEffect !== null) {
        var fiber = nextEffect;
        setCurrentFiber(fiber);
        commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);
        resetCurrentFiber();
        var child = fiber.child;
        if (child !== null) {
          child.return = fiber;
          nextEffect = child;
        } else {
          commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);
        }
      }
    }
    function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {
      while (nextEffect !== null) {
        var fiber = nextEffect;
        var sibling = fiber.sibling;
        var returnFiber = fiber.return;
        {
          detachFiberAfterEffects(fiber);
          if (fiber === deletedSubtreeRoot) {
            nextEffect = null;
            return;
          }
        }
        if (sibling !== null) {
          sibling.return = returnFiber;
          nextEffect = sibling;
          return;
        }
        nextEffect = returnFiber;
      }
    }
    function commitPassiveUnmountInsideDeletedTreeOnFiber(current2, nearestMountedAncestor) {
      switch (current2.tag) {
        case FunctionComponent:
        case ForwardRef:
        case SimpleMemoComponent: {
          if (current2.mode & ProfileMode) {
            startPassiveEffectTimer();
            commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
            recordPassiveEffectDuration(current2);
          } else {
            commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
          }
          break;
        }
      }
    }
    function invokeLayoutEffectMountInDEV(fiber) {
      {
        switch (fiber.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent: {
            try {
              commitHookEffectListMount(Layout | HasEffect, fiber);
            } catch (error2) {
              captureCommitPhaseError(fiber, fiber.return, error2);
            }
            break;
          }
          case ClassComponent: {
            var instance = fiber.stateNode;
            try {
              instance.componentDidMount();
            } catch (error2) {
              captureCommitPhaseError(fiber, fiber.return, error2);
            }
            break;
          }
        }
      }
    }
    function invokePassiveEffectMountInDEV(fiber) {
      {
        switch (fiber.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent: {
            try {
              commitHookEffectListMount(Passive$1 | HasEffect, fiber);
            } catch (error2) {
              captureCommitPhaseError(fiber, fiber.return, error2);
            }
            break;
          }
        }
      }
    }
    function invokeLayoutEffectUnmountInDEV(fiber) {
      {
        switch (fiber.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent: {
            try {
              commitHookEffectListUnmount(Layout | HasEffect, fiber, fiber.return);
            } catch (error2) {
              captureCommitPhaseError(fiber, fiber.return, error2);
            }
            break;
          }
          case ClassComponent: {
            var instance = fiber.stateNode;
            if (typeof instance.componentWillUnmount === "function") {
              safelyCallComponentWillUnmount(fiber, fiber.return, instance);
            }
            break;
          }
        }
      }
    }
    function invokePassiveEffectUnmountInDEV(fiber) {
      {
        switch (fiber.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent: {
            try {
              commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);
            } catch (error2) {
              captureCommitPhaseError(fiber, fiber.return, error2);
            }
          }
        }
      }
    }
    var COMPONENT_TYPE = 0;
    var HAS_PSEUDO_CLASS_TYPE = 1;
    var ROLE_TYPE = 2;
    var TEST_NAME_TYPE = 3;
    var TEXT_TYPE = 4;
    if (typeof Symbol === "function" && Symbol.for) {
      var symbolFor = Symbol.for;
      COMPONENT_TYPE = symbolFor("selector.component");
      HAS_PSEUDO_CLASS_TYPE = symbolFor("selector.has_pseudo_class");
      ROLE_TYPE = symbolFor("selector.role");
      TEST_NAME_TYPE = symbolFor("selector.test_id");
      TEXT_TYPE = symbolFor("selector.text");
    }
    var commitHooks = [];
    function onCommitRoot$1() {
      {
        commitHooks.forEach(function(commitHook) {
          return commitHook();
        });
      }
    }
    var ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;
    function isLegacyActEnvironment(fiber) {
      {
        var isReactActEnvironmentGlobal = (
          // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
          typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0
        );
        var jestIsDefined = typeof jest !== "undefined";
        return jestIsDefined && isReactActEnvironmentGlobal !== false;
      }
    }
    function isConcurrentActEnvironment() {
      {
        var isReactActEnvironmentGlobal = (
          // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
          typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0
        );
        if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) {
          error("The current testing environment is not configured to support act(...)");
        }
        return isReactActEnvironmentGlobal;
      }
    }
    var ceil = Math.ceil;
    var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, ReactCurrentBatchConfig$3 = ReactSharedInternals.ReactCurrentBatchConfig, ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;
    var NoContext = (
      /*             */
      0
    );
    var BatchedContext = (
      /*               */
      1
    );
    var RenderContext = (
      /*                */
      2
    );
    var CommitContext = (
      /*                */
      4
    );
    var RootInProgress = 0;
    var RootFatalErrored = 1;
    var RootErrored = 2;
    var RootSuspended = 3;
    var RootSuspendedWithDelay = 4;
    var RootCompleted = 5;
    var RootDidNotComplete = 6;
    var executionContext = NoContext;
    var workInProgressRoot = null;
    var workInProgress = null;
    var workInProgressRootRenderLanes = NoLanes;
    var subtreeRenderLanes = NoLanes;
    var subtreeRenderLanesCursor = createCursor(NoLanes);
    var workInProgressRootExitStatus = RootInProgress;
    var workInProgressRootFatalError = null;
    var workInProgressRootIncludedLanes = NoLanes;
    var workInProgressRootSkippedLanes = NoLanes;
    var workInProgressRootInterleavedUpdatedLanes = NoLanes;
    var workInProgressRootPingedLanes = NoLanes;
    var workInProgressRootConcurrentErrors = null;
    var workInProgressRootRecoverableErrors = null;
    var globalMostRecentFallbackTime = 0;
    var FALLBACK_THROTTLE_MS = 500;
    var workInProgressRootRenderTargetTime = Infinity;
    var RENDER_TIMEOUT_MS = 500;
    var workInProgressTransitions = null;
    function resetRenderTimer() {
      workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
    }
    function getRenderTargetTime() {
      return workInProgressRootRenderTargetTime;
    }
    var hasUncaughtError = false;
    var firstUncaughtError = null;
    var legacyErrorBoundariesThatAlreadyFailed = null;
    var rootDoesHavePassiveEffects = false;
    var rootWithPendingPassiveEffects = null;
    var pendingPassiveEffectsLanes = NoLanes;
    var pendingPassiveProfilerEffects = [];
    var pendingPassiveTransitions = null;
    var NESTED_UPDATE_LIMIT = 50;
    var nestedUpdateCount = 0;
    var rootWithNestedUpdates = null;
    var isFlushingPassiveEffects = false;
    var didScheduleUpdateDuringPassiveEffects = false;
    var NESTED_PASSIVE_UPDATE_LIMIT = 50;
    var nestedPassiveUpdateCount = 0;
    var rootWithPassiveNestedUpdates = null;
    var currentEventTime = NoTimestamp;
    var currentEventTransitionLane = NoLanes;
    var isRunningInsertionEffect = false;
    function getWorkInProgressRoot() {
      return workInProgressRoot;
    }
    function requestEventTime() {
      if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
        return now();
      }
      if (currentEventTime !== NoTimestamp) {
        return currentEventTime;
      }
      currentEventTime = now();
      return currentEventTime;
    }
    function requestUpdateLane(fiber) {
      var mode = fiber.mode;
      if ((mode & ConcurrentMode) === NoMode) {
        return SyncLane;
      } else if ((executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) {
        return pickArbitraryLane(workInProgressRootRenderLanes);
      }
      var isTransition = requestCurrentTransition() !== NoTransition;
      if (isTransition) {
        if (ReactCurrentBatchConfig$3.transition !== null) {
          var transition = ReactCurrentBatchConfig$3.transition;
          if (!transition._updatedFibers) {
            transition._updatedFibers = /* @__PURE__ */ new Set();
          }
          transition._updatedFibers.add(fiber);
        }
        if (currentEventTransitionLane === NoLane) {
          currentEventTransitionLane = claimNextTransitionLane();
        }
        return currentEventTransitionLane;
      }
      var updateLane = getCurrentUpdatePriority();
      if (updateLane !== NoLane) {
        return updateLane;
      }
      var eventLane = getCurrentEventPriority();
      return eventLane;
    }
    function requestRetryLane(fiber) {
      var mode = fiber.mode;
      if ((mode & ConcurrentMode) === NoMode) {
        return SyncLane;
      }
      return claimNextRetryLane();
    }
    function scheduleUpdateOnFiber(root2, fiber, lane, eventTime) {
      checkForNestedUpdates();
      {
        if (isRunningInsertionEffect) {
          error("useInsertionEffect must not schedule updates.");
        }
      }
      {
        if (isFlushingPassiveEffects) {
          didScheduleUpdateDuringPassiveEffects = true;
        }
      }
      markRootUpdated(root2, lane, eventTime);
      if ((executionContext & RenderContext) !== NoLanes && root2 === workInProgressRoot) {
        warnAboutRenderPhaseUpdatesInDEV(fiber);
      } else {
        {
          if (isDevToolsPresent) {
            addFiberToLanesMap(root2, fiber, lane);
          }
        }
        warnIfUpdatesNotWrappedWithActDEV(fiber);
        if (root2 === workInProgressRoot) {
          if ((executionContext & RenderContext) === NoContext) {
            workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);
          }
          if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
            markRootSuspended$1(root2, workInProgressRootRenderLanes);
          }
        }
        ensureRootIsScheduled(root2, eventTime);
        if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
        !ReactCurrentActQueue$1.isBatchingLegacy) {
          resetRenderTimer();
          flushSyncCallbacksOnlyInLegacyMode();
        }
      }
    }
    function scheduleInitialHydrationOnRoot(root2, lane, eventTime) {
      var current2 = root2.current;
      current2.lanes = lane;
      markRootUpdated(root2, lane, eventTime);
      ensureRootIsScheduled(root2, eventTime);
    }
    function isUnsafeClassRenderPhaseUpdate(fiber) {
      return (
        // TODO: Remove outdated deferRenderPhaseUpdateToNextBatch experiment. We
        // decided not to enable it.
        (executionContext & RenderContext) !== NoContext
      );
    }
    function ensureRootIsScheduled(root2, currentTime) {
      var existingCallbackNode = root2.callbackNode;
      markStarvedLanesAsExpired(root2, currentTime);
      var nextLanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
      if (nextLanes === NoLanes) {
        if (existingCallbackNode !== null) {
          cancelCallback$1(existingCallbackNode);
        }
        root2.callbackNode = null;
        root2.callbackPriority = NoLane;
        return;
      }
      var newCallbackPriority = getHighestPriorityLane(nextLanes);
      var existingCallbackPriority = root2.callbackPriority;
      if (existingCallbackPriority === newCallbackPriority && // Special case related to `act`. If the currently scheduled task is a
      // Scheduler task, rather than an `act` task, cancel it and re-scheduled
      // on the `act` queue.
      !(ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {
        {
          if (existingCallbackNode == null && existingCallbackPriority !== SyncLane) {
            error("Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        return;
      }
      if (existingCallbackNode != null) {
        cancelCallback$1(existingCallbackNode);
      }
      var newCallbackNode;
      if (newCallbackPriority === SyncLane) {
        if (root2.tag === LegacyRoot) {
          if (ReactCurrentActQueue$1.isBatchingLegacy !== null) {
            ReactCurrentActQueue$1.didScheduleLegacyUpdate = true;
          }
          scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root2));
        } else {
          scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root2));
        }
        {
          if (ReactCurrentActQueue$1.current !== null) {
            ReactCurrentActQueue$1.current.push(flushSyncCallbacks);
          } else {
            scheduleMicrotask(function() {
              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                flushSyncCallbacks();
              }
            });
          }
        }
        newCallbackNode = null;
      } else {
        var schedulerPriorityLevel;
        switch (lanesToEventPriority(nextLanes)) {
          case DiscreteEventPriority:
            schedulerPriorityLevel = ImmediatePriority;
            break;
          case ContinuousEventPriority:
            schedulerPriorityLevel = UserBlockingPriority;
            break;
          case DefaultEventPriority:
            schedulerPriorityLevel = NormalPriority;
            break;
          case IdleEventPriority:
            schedulerPriorityLevel = IdlePriority;
            break;
          default:
            schedulerPriorityLevel = NormalPriority;
            break;
        }
        newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root2));
      }
      root2.callbackPriority = newCallbackPriority;
      root2.callbackNode = newCallbackNode;
    }
    function performConcurrentWorkOnRoot(root2, didTimeout) {
      {
        resetNestedUpdateFlag();
      }
      currentEventTime = NoTimestamp;
      currentEventTransitionLane = NoLanes;
      if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
        throw new Error("Should not already be working.");
      }
      var originalCallbackNode = root2.callbackNode;
      var didFlushPassiveEffects = flushPassiveEffects();
      if (didFlushPassiveEffects) {
        if (root2.callbackNode !== originalCallbackNode) {
          return null;
        }
      }
      var lanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
      if (lanes === NoLanes) {
        return null;
      }
      var shouldTimeSlice = !includesBlockingLane(root2, lanes) && !includesExpiredLane(root2, lanes) && !didTimeout;
      var exitStatus = shouldTimeSlice ? renderRootConcurrent(root2, lanes) : renderRootSync(root2, lanes);
      if (exitStatus !== RootInProgress) {
        if (exitStatus === RootErrored) {
          var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
          if (errorRetryLanes !== NoLanes) {
            lanes = errorRetryLanes;
            exitStatus = recoverFromConcurrentError(root2, errorRetryLanes);
          }
        }
        if (exitStatus === RootFatalErrored) {
          var fatalError = workInProgressRootFatalError;
          prepareFreshStack(root2, NoLanes);
          markRootSuspended$1(root2, lanes);
          ensureRootIsScheduled(root2, now());
          throw fatalError;
        }
        if (exitStatus === RootDidNotComplete) {
          markRootSuspended$1(root2, lanes);
        } else {
          var renderWasConcurrent = !includesBlockingLane(root2, lanes);
          var finishedWork = root2.current.alternate;
          if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {
            exitStatus = renderRootSync(root2, lanes);
            if (exitStatus === RootErrored) {
              var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
              if (_errorRetryLanes !== NoLanes) {
                lanes = _errorRetryLanes;
                exitStatus = recoverFromConcurrentError(root2, _errorRetryLanes);
              }
            }
            if (exitStatus === RootFatalErrored) {
              var _fatalError = workInProgressRootFatalError;
              prepareFreshStack(root2, NoLanes);
              markRootSuspended$1(root2, lanes);
              ensureRootIsScheduled(root2, now());
              throw _fatalError;
            }
          }
          root2.finishedWork = finishedWork;
          root2.finishedLanes = lanes;
          finishConcurrentRender(root2, exitStatus, lanes);
        }
      }
      ensureRootIsScheduled(root2, now());
      if (root2.callbackNode === originalCallbackNode) {
        return performConcurrentWorkOnRoot.bind(null, root2);
      }
      return null;
    }
    function recoverFromConcurrentError(root2, errorRetryLanes) {
      var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;
      if (isRootDehydrated(root2)) {
        var rootWorkInProgress = prepareFreshStack(root2, errorRetryLanes);
        rootWorkInProgress.flags |= ForceClientRender;
        {
          errorHydratingContainer(root2.containerInfo);
        }
      }
      var exitStatus = renderRootSync(root2, errorRetryLanes);
      if (exitStatus !== RootErrored) {
        var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;
        workInProgressRootRecoverableErrors = errorsFromFirstAttempt;
        if (errorsFromSecondAttempt !== null) {
          queueRecoverableErrors(errorsFromSecondAttempt);
        }
      }
      return exitStatus;
    }
    function queueRecoverableErrors(errors) {
      if (workInProgressRootRecoverableErrors === null) {
        workInProgressRootRecoverableErrors = errors;
      } else {
        workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);
      }
    }
    function finishConcurrentRender(root2, exitStatus, lanes) {
      switch (exitStatus) {
        case RootInProgress:
        case RootFatalErrored: {
          throw new Error("Root did not complete. This is a bug in React.");
        }
        case RootErrored: {
          commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
          break;
        }
        case RootSuspended: {
          markRootSuspended$1(root2, lanes);
          if (includesOnlyRetries(lanes) && // do not delay if we're inside an act() scope
          !shouldForceFlushFallbacksInDEV()) {
            var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();
            if (msUntilTimeout > 10) {
              var nextLanes = getNextLanes(root2, NoLanes);
              if (nextLanes !== NoLanes) {
                break;
              }
              var suspendedLanes = root2.suspendedLanes;
              if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                var eventTime = requestEventTime();
                markRootPinged(root2, suspendedLanes);
                break;
              }
              root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2, workInProgressRootRecoverableErrors, workInProgressTransitions), msUntilTimeout);
              break;
            }
          }
          commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
          break;
        }
        case RootSuspendedWithDelay: {
          markRootSuspended$1(root2, lanes);
          if (includesOnlyTransitions(lanes)) {
            break;
          }
          if (!shouldForceFlushFallbacksInDEV()) {
            var mostRecentEventTime = getMostRecentEventTime(root2, lanes);
            var eventTimeMs = mostRecentEventTime;
            var timeElapsedMs = now() - eventTimeMs;
            var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
            if (_msUntilTimeout > 10) {
              root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2, workInProgressRootRecoverableErrors, workInProgressTransitions), _msUntilTimeout);
              break;
            }
          }
          commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
          break;
        }
        case RootCompleted: {
          commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
          break;
        }
        default: {
          throw new Error("Unknown root exit status.");
        }
      }
    }
    function isRenderConsistentWithExternalStores(finishedWork) {
      var node = finishedWork;
      while (true) {
        if (node.flags & StoreConsistency) {
          var updateQueue = node.updateQueue;
          if (updateQueue !== null) {
            var checks = updateQueue.stores;
            if (checks !== null) {
              for (var i = 0; i < checks.length; i++) {
                var check = checks[i];
                var getSnapshot = check.getSnapshot;
                var renderedValue = check.value;
                try {
                  if (!objectIs(getSnapshot(), renderedValue)) {
                    return false;
                  }
                } catch (error2) {
                  return false;
                }
              }
            }
          }
        }
        var child = node.child;
        if (node.subtreeFlags & StoreConsistency && child !== null) {
          child.return = node;
          node = child;
          continue;
        }
        if (node === finishedWork) {
          return true;
        }
        while (node.sibling === null) {
          if (node.return === null || node.return === finishedWork) {
            return true;
          }
          node = node.return;
        }
        node.sibling.return = node.return;
        node = node.sibling;
      }
      return true;
    }
    function markRootSuspended$1(root2, suspendedLanes) {
      suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
      suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);
      markRootSuspended(root2, suspendedLanes);
    }
    function performSyncWorkOnRoot(root2) {
      {
        syncNestedUpdateFlag();
      }
      if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
        throw new Error("Should not already be working.");
      }
      flushPassiveEffects();
      var lanes = getNextLanes(root2, NoLanes);
      if (!includesSomeLane(lanes, SyncLane)) {
        ensureRootIsScheduled(root2, now());
        return null;
      }
      var exitStatus = renderRootSync(root2, lanes);
      if (root2.tag !== LegacyRoot && exitStatus === RootErrored) {
        var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
        if (errorRetryLanes !== NoLanes) {
          lanes = errorRetryLanes;
          exitStatus = recoverFromConcurrentError(root2, errorRetryLanes);
        }
      }
      if (exitStatus === RootFatalErrored) {
        var fatalError = workInProgressRootFatalError;
        prepareFreshStack(root2, NoLanes);
        markRootSuspended$1(root2, lanes);
        ensureRootIsScheduled(root2, now());
        throw fatalError;
      }
      if (exitStatus === RootDidNotComplete) {
        throw new Error("Root did not complete. This is a bug in React.");
      }
      var finishedWork = root2.current.alternate;
      root2.finishedWork = finishedWork;
      root2.finishedLanes = lanes;
      commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
      ensureRootIsScheduled(root2, now());
      return null;
    }
    function flushRoot(root2, lanes) {
      if (lanes !== NoLanes) {
        markRootEntangled(root2, mergeLanes(lanes, SyncLane));
        ensureRootIsScheduled(root2, now());
        if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
          resetRenderTimer();
          flushSyncCallbacks();
        }
      }
    }
    function batchedUpdates$1(fn, a) {
      var prevExecutionContext = executionContext;
      executionContext |= BatchedContext;
      try {
        return fn(a);
      } finally {
        executionContext = prevExecutionContext;
        if (executionContext === NoContext && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
        !ReactCurrentActQueue$1.isBatchingLegacy) {
          resetRenderTimer();
          flushSyncCallbacksOnlyInLegacyMode();
        }
      }
    }
    function discreteUpdates(fn, a, b, c, d) {
      var previousPriority = getCurrentUpdatePriority();
      var prevTransition = ReactCurrentBatchConfig$3.transition;
      try {
        ReactCurrentBatchConfig$3.transition = null;
        setCurrentUpdatePriority(DiscreteEventPriority);
        return fn(a, b, c, d);
      } finally {
        setCurrentUpdatePriority(previousPriority);
        ReactCurrentBatchConfig$3.transition = prevTransition;
        if (executionContext === NoContext) {
          resetRenderTimer();
        }
      }
    }
    function flushSync(fn) {
      if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {
        flushPassiveEffects();
      }
      var prevExecutionContext = executionContext;
      executionContext |= BatchedContext;
      var prevTransition = ReactCurrentBatchConfig$3.transition;
      var previousPriority = getCurrentUpdatePriority();
      try {
        ReactCurrentBatchConfig$3.transition = null;
        setCurrentUpdatePriority(DiscreteEventPriority);
        if (fn) {
          return fn();
        } else {
          return void 0;
        }
      } finally {
        setCurrentUpdatePriority(previousPriority);
        ReactCurrentBatchConfig$3.transition = prevTransition;
        executionContext = prevExecutionContext;
        if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
          flushSyncCallbacks();
        }
      }
    }
    function isAlreadyRendering() {
      return (executionContext & (RenderContext | CommitContext)) !== NoContext;
    }
    function pushRenderLanes(fiber, lanes) {
      push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
      subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
      workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
    }
    function popRenderLanes(fiber) {
      subtreeRenderLanes = subtreeRenderLanesCursor.current;
      pop(subtreeRenderLanesCursor, fiber);
    }
    function prepareFreshStack(root2, lanes) {
      root2.finishedWork = null;
      root2.finishedLanes = NoLanes;
      var timeoutHandle = root2.timeoutHandle;
      if (timeoutHandle !== noTimeout) {
        root2.timeoutHandle = noTimeout;
        cancelTimeout(timeoutHandle);
      }
      if (workInProgress !== null) {
        var interruptedWork = workInProgress.return;
        while (interruptedWork !== null) {
          var current2 = interruptedWork.alternate;
          unwindInterruptedWork(current2, interruptedWork);
          interruptedWork = interruptedWork.return;
        }
      }
      workInProgressRoot = root2;
      var rootWorkInProgress = createWorkInProgress(root2.current, null);
      workInProgress = rootWorkInProgress;
      workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
      workInProgressRootExitStatus = RootInProgress;
      workInProgressRootFatalError = null;
      workInProgressRootSkippedLanes = NoLanes;
      workInProgressRootInterleavedUpdatedLanes = NoLanes;
      workInProgressRootPingedLanes = NoLanes;
      workInProgressRootConcurrentErrors = null;
      workInProgressRootRecoverableErrors = null;
      finishQueueingConcurrentUpdates();
      {
        ReactStrictModeWarnings.discardPendingWarnings();
      }
      return rootWorkInProgress;
    }
    function handleError(root2, thrownValue) {
      do {
        var erroredWork = workInProgress;
        try {
          resetContextDependencies();
          resetHooksAfterThrow();
          resetCurrentFiber();
          ReactCurrentOwner$2.current = null;
          if (erroredWork === null || erroredWork.return === null) {
            workInProgressRootExitStatus = RootFatalErrored;
            workInProgressRootFatalError = thrownValue;
            workInProgress = null;
            return;
          }
          if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
            stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
          }
          if (enableSchedulingProfiler) {
            markComponentRenderStopped();
            if (thrownValue !== null && typeof thrownValue === "object" && typeof thrownValue.then === "function") {
              var wakeable = thrownValue;
              markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);
            } else {
              markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);
            }
          }
          throwException(root2, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
          completeUnitOfWork(erroredWork);
        } catch (yetAnotherThrownValue) {
          thrownValue = yetAnotherThrownValue;
          if (workInProgress === erroredWork && erroredWork !== null) {
            erroredWork = erroredWork.return;
            workInProgress = erroredWork;
          } else {
            erroredWork = workInProgress;
          }
          continue;
        }
        return;
      } while (true);
    }
    function pushDispatcher() {
      var prevDispatcher = ReactCurrentDispatcher$2.current;
      ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
      if (prevDispatcher === null) {
        return ContextOnlyDispatcher;
      } else {
        return prevDispatcher;
      }
    }
    function popDispatcher(prevDispatcher) {
      ReactCurrentDispatcher$2.current = prevDispatcher;
    }
    function markCommitTimeOfFallback() {
      globalMostRecentFallbackTime = now();
    }
    function markSkippedUpdateLanes(lane) {
      workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
    }
    function renderDidSuspend() {
      if (workInProgressRootExitStatus === RootInProgress) {
        workInProgressRootExitStatus = RootSuspended;
      }
    }
    function renderDidSuspendDelayIfPossible() {
      if (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) {
        workInProgressRootExitStatus = RootSuspendedWithDelay;
      }
      if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))) {
        markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
      }
    }
    function renderDidError(error2) {
      if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {
        workInProgressRootExitStatus = RootErrored;
      }
      if (workInProgressRootConcurrentErrors === null) {
        workInProgressRootConcurrentErrors = [error2];
      } else {
        workInProgressRootConcurrentErrors.push(error2);
      }
    }
    function renderHasNotSuspendedYet() {
      return workInProgressRootExitStatus === RootInProgress;
    }
    function renderRootSync(root2, lanes) {
      var prevExecutionContext = executionContext;
      executionContext |= RenderContext;
      var prevDispatcher = pushDispatcher();
      if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
        {
          if (isDevToolsPresent) {
            var memoizedUpdaters = root2.memoizedUpdaters;
            if (memoizedUpdaters.size > 0) {
              restorePendingUpdaters(root2, workInProgressRootRenderLanes);
              memoizedUpdaters.clear();
            }
            movePendingFibersToMemoized(root2, lanes);
          }
        }
        workInProgressTransitions = getTransitionsForLanes();
        prepareFreshStack(root2, lanes);
      }
      {
        markRenderStarted(lanes);
      }
      do {
        try {
          workLoopSync();
          break;
        } catch (thrownValue) {
          handleError(root2, thrownValue);
        }
      } while (true);
      resetContextDependencies();
      executionContext = prevExecutionContext;
      popDispatcher(prevDispatcher);
      if (workInProgress !== null) {
        throw new Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
      }
      {
        markRenderStopped();
      }
      workInProgressRoot = null;
      workInProgressRootRenderLanes = NoLanes;
      return workInProgressRootExitStatus;
    }
    function workLoopSync() {
      while (workInProgress !== null) {
        performUnitOfWork(workInProgress);
      }
    }
    function renderRootConcurrent(root2, lanes) {
      var prevExecutionContext = executionContext;
      executionContext |= RenderContext;
      var prevDispatcher = pushDispatcher();
      if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
        {
          if (isDevToolsPresent) {
            var memoizedUpdaters = root2.memoizedUpdaters;
            if (memoizedUpdaters.size > 0) {
              restorePendingUpdaters(root2, workInProgressRootRenderLanes);
              memoizedUpdaters.clear();
            }
            movePendingFibersToMemoized(root2, lanes);
          }
        }
        workInProgressTransitions = getTransitionsForLanes();
        resetRenderTimer();
        prepareFreshStack(root2, lanes);
      }
      {
        markRenderStarted(lanes);
      }
      do {
        try {
          workLoopConcurrent();
          break;
        } catch (thrownValue) {
          handleError(root2, thrownValue);
        }
      } while (true);
      resetContextDependencies();
      popDispatcher(prevDispatcher);
      executionContext = prevExecutionContext;
      if (workInProgress !== null) {
        {
          markRenderYielded();
        }
        return RootInProgress;
      } else {
        {
          markRenderStopped();
        }
        workInProgressRoot = null;
        workInProgressRootRenderLanes = NoLanes;
        return workInProgressRootExitStatus;
      }
    }
    function workLoopConcurrent() {
      while (workInProgress !== null && !shouldYield()) {
        performUnitOfWork(workInProgress);
      }
    }
    function performUnitOfWork(unitOfWork) {
      var current2 = unitOfWork.alternate;
      setCurrentFiber(unitOfWork);
      var next;
      if ((unitOfWork.mode & ProfileMode) !== NoMode) {
        startProfilerTimer(unitOfWork);
        next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
        stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
      } else {
        next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
      }
      resetCurrentFiber();
      unitOfWork.memoizedProps = unitOfWork.pendingProps;
      if (next === null) {
        completeUnitOfWork(unitOfWork);
      } else {
        workInProgress = next;
      }
      ReactCurrentOwner$2.current = null;
    }
    function completeUnitOfWork(unitOfWork) {
      var completedWork = unitOfWork;
      do {
        var current2 = completedWork.alternate;
        var returnFiber = completedWork.return;
        if ((completedWork.flags & Incomplete) === NoFlags) {
          setCurrentFiber(completedWork);
          var next = void 0;
          if ((completedWork.mode & ProfileMode) === NoMode) {
            next = completeWork(current2, completedWork, subtreeRenderLanes);
          } else {
            startProfilerTimer(completedWork);
            next = completeWork(current2, completedWork, subtreeRenderLanes);
            stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
          }
          resetCurrentFiber();
          if (next !== null) {
            workInProgress = next;
            return;
          }
        } else {
          var _next = unwindWork(current2, completedWork);
          if (_next !== null) {
            _next.flags &= HostEffectMask;
            workInProgress = _next;
            return;
          }
          if ((completedWork.mode & ProfileMode) !== NoMode) {
            stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
            var actualDuration = completedWork.actualDuration;
            var child = completedWork.child;
            while (child !== null) {
              actualDuration += child.actualDuration;
              child = child.sibling;
            }
            completedWork.actualDuration = actualDuration;
          }
          if (returnFiber !== null) {
            returnFiber.flags |= Incomplete;
            returnFiber.subtreeFlags = NoFlags;
            returnFiber.deletions = null;
          } else {
            workInProgressRootExitStatus = RootDidNotComplete;
            workInProgress = null;
            return;
          }
        }
        var siblingFiber = completedWork.sibling;
        if (siblingFiber !== null) {
          workInProgress = siblingFiber;
          return;
        }
        completedWork = returnFiber;
        workInProgress = completedWork;
      } while (completedWork !== null);
      if (workInProgressRootExitStatus === RootInProgress) {
        workInProgressRootExitStatus = RootCompleted;
      }
    }
    function commitRoot(root2, recoverableErrors, transitions) {
      var previousUpdateLanePriority = getCurrentUpdatePriority();
      var prevTransition = ReactCurrentBatchConfig$3.transition;
      try {
        ReactCurrentBatchConfig$3.transition = null;
        setCurrentUpdatePriority(DiscreteEventPriority);
        commitRootImpl(root2, recoverableErrors, transitions, previousUpdateLanePriority);
      } finally {
        ReactCurrentBatchConfig$3.transition = prevTransition;
        setCurrentUpdatePriority(previousUpdateLanePriority);
      }
      return null;
    }
    function commitRootImpl(root2, recoverableErrors, transitions, renderPriorityLevel) {
      do {
        flushPassiveEffects();
      } while (rootWithPendingPassiveEffects !== null);
      flushRenderPhaseStrictModeWarningsInDEV();
      if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
        throw new Error("Should not already be working.");
      }
      var finishedWork = root2.finishedWork;
      var lanes = root2.finishedLanes;
      {
        markCommitStarted(lanes);
      }
      if (finishedWork === null) {
        {
          markCommitStopped();
        }
        return null;
      } else {
        {
          if (lanes === NoLanes) {
            error("root.finishedLanes should not be empty during a commit. This is a bug in React.");
          }
        }
      }
      root2.finishedWork = null;
      root2.finishedLanes = NoLanes;
      if (finishedWork === root2.current) {
        throw new Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
      }
      root2.callbackNode = null;
      root2.callbackPriority = NoLane;
      var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
      markRootFinished(root2, remainingLanes);
      if (root2 === workInProgressRoot) {
        workInProgressRoot = null;
        workInProgress = null;
        workInProgressRootRenderLanes = NoLanes;
      }
      if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) {
        if (!rootDoesHavePassiveEffects) {
          rootDoesHavePassiveEffects = true;
          pendingPassiveTransitions = transitions;
          scheduleCallback$1(NormalPriority, function() {
            flushPassiveEffects();
            return null;
          });
        }
      }
      var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
      var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
      if (subtreeHasEffects || rootHasEffect) {
        var prevTransition = ReactCurrentBatchConfig$3.transition;
        ReactCurrentBatchConfig$3.transition = null;
        var previousPriority = getCurrentUpdatePriority();
        setCurrentUpdatePriority(DiscreteEventPriority);
        var prevExecutionContext = executionContext;
        executionContext |= CommitContext;
        ReactCurrentOwner$2.current = null;
        var shouldFireAfterActiveInstanceBlur2 = commitBeforeMutationEffects(root2, finishedWork);
        {
          recordCommitTime();
        }
        commitMutationEffects(root2, finishedWork, lanes);
        resetAfterCommit(root2.containerInfo);
        root2.current = finishedWork;
        {
          markLayoutEffectsStarted(lanes);
        }
        commitLayoutEffects(finishedWork, root2, lanes);
        {
          markLayoutEffectsStopped();
        }
        requestPaint();
        executionContext = prevExecutionContext;
        setCurrentUpdatePriority(previousPriority);
        ReactCurrentBatchConfig$3.transition = prevTransition;
      } else {
        root2.current = finishedWork;
        {
          recordCommitTime();
        }
      }
      var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
      if (rootDoesHavePassiveEffects) {
        rootDoesHavePassiveEffects = false;
        rootWithPendingPassiveEffects = root2;
        pendingPassiveEffectsLanes = lanes;
      } else {
        {
          nestedPassiveUpdateCount = 0;
          rootWithPassiveNestedUpdates = null;
        }
      }
      remainingLanes = root2.pendingLanes;
      if (remainingLanes === NoLanes) {
        legacyErrorBoundariesThatAlreadyFailed = null;
      }
      {
        if (!rootDidHavePassiveEffects) {
          commitDoubleInvokeEffectsInDEV(root2.current, false);
        }
      }
      onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
      {
        if (isDevToolsPresent) {
          root2.memoizedUpdaters.clear();
        }
      }
      {
        onCommitRoot$1();
      }
      ensureRootIsScheduled(root2, now());
      if (recoverableErrors !== null) {
        var onRecoverableError = root2.onRecoverableError;
        for (var i = 0; i < recoverableErrors.length; i++) {
          var recoverableError = recoverableErrors[i];
          var componentStack = recoverableError.stack;
          var digest = recoverableError.digest;
          onRecoverableError(recoverableError.value, {
            componentStack,
            digest
          });
        }
      }
      if (hasUncaughtError) {
        hasUncaughtError = false;
        var error$1 = firstUncaughtError;
        firstUncaughtError = null;
        throw error$1;
      }
      if (includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root2.tag !== LegacyRoot) {
        flushPassiveEffects();
      }
      remainingLanes = root2.pendingLanes;
      if (includesSomeLane(remainingLanes, SyncLane)) {
        {
          markNestedUpdateScheduled();
        }
        if (root2 === rootWithNestedUpdates) {
          nestedUpdateCount++;
        } else {
          nestedUpdateCount = 0;
          rootWithNestedUpdates = root2;
        }
      } else {
        nestedUpdateCount = 0;
      }
      flushSyncCallbacks();
      {
        markCommitStopped();
      }
      return null;
    }
    function flushPassiveEffects() {
      if (rootWithPendingPassiveEffects !== null) {
        var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);
        var priority = lowerEventPriority(DefaultEventPriority, renderPriority);
        var prevTransition = ReactCurrentBatchConfig$3.transition;
        var previousPriority = getCurrentUpdatePriority();
        try {
          ReactCurrentBatchConfig$3.transition = null;
          setCurrentUpdatePriority(priority);
          return flushPassiveEffectsImpl();
        } finally {
          setCurrentUpdatePriority(previousPriority);
          ReactCurrentBatchConfig$3.transition = prevTransition;
        }
      }
      return false;
    }
    function enqueuePendingPassiveProfilerEffect(fiber) {
      {
        pendingPassiveProfilerEffects.push(fiber);
        if (!rootDoesHavePassiveEffects) {
          rootDoesHavePassiveEffects = true;
          scheduleCallback$1(NormalPriority, function() {
            flushPassiveEffects();
            return null;
          });
        }
      }
    }
    function flushPassiveEffectsImpl() {
      if (rootWithPendingPassiveEffects === null) {
        return false;
      }
      var transitions = pendingPassiveTransitions;
      pendingPassiveTransitions = null;
      var root2 = rootWithPendingPassiveEffects;
      var lanes = pendingPassiveEffectsLanes;
      rootWithPendingPassiveEffects = null;
      pendingPassiveEffectsLanes = NoLanes;
      if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
        throw new Error("Cannot flush passive effects while already rendering.");
      }
      {
        isFlushingPassiveEffects = true;
        didScheduleUpdateDuringPassiveEffects = false;
      }
      {
        markPassiveEffectsStarted(lanes);
      }
      var prevExecutionContext = executionContext;
      executionContext |= CommitContext;
      commitPassiveUnmountEffects(root2.current);
      commitPassiveMountEffects(root2, root2.current, lanes, transitions);
      {
        var profilerEffects = pendingPassiveProfilerEffects;
        pendingPassiveProfilerEffects = [];
        for (var i = 0; i < profilerEffects.length; i++) {
          var _fiber = profilerEffects[i];
          commitPassiveEffectDurations(root2, _fiber);
        }
      }
      {
        markPassiveEffectsStopped();
      }
      {
        commitDoubleInvokeEffectsInDEV(root2.current, true);
      }
      executionContext = prevExecutionContext;
      flushSyncCallbacks();
      {
        if (didScheduleUpdateDuringPassiveEffects) {
          if (root2 === rootWithPassiveNestedUpdates) {
            nestedPassiveUpdateCount++;
          } else {
            nestedPassiveUpdateCount = 0;
            rootWithPassiveNestedUpdates = root2;
          }
        } else {
          nestedPassiveUpdateCount = 0;
        }
        isFlushingPassiveEffects = false;
        didScheduleUpdateDuringPassiveEffects = false;
      }
      onPostCommitRoot(root2);
      {
        var stateNode = root2.current.stateNode;
        stateNode.effectDuration = 0;
        stateNode.passiveEffectDuration = 0;
      }
      return true;
    }
    function isAlreadyFailedLegacyErrorBoundary(instance) {
      return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
    }
    function markLegacyErrorBoundaryAsFailed(instance) {
      if (legacyErrorBoundariesThatAlreadyFailed === null) {
        legacyErrorBoundariesThatAlreadyFailed = /* @__PURE__ */ new Set([instance]);
      } else {
        legacyErrorBoundariesThatAlreadyFailed.add(instance);
      }
    }
    function prepareToThrowUncaughtError(error2) {
      if (!hasUncaughtError) {
        hasUncaughtError = true;
        firstUncaughtError = error2;
      }
    }
    var onUncaughtError = prepareToThrowUncaughtError;
    function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error2) {
      var errorInfo = createCapturedValueAtFiber(error2, sourceFiber);
      var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
      var root2 = enqueueUpdate(rootFiber, update, SyncLane);
      var eventTime = requestEventTime();
      if (root2 !== null) {
        markRootUpdated(root2, SyncLane, eventTime);
        ensureRootIsScheduled(root2, eventTime);
      }
    }
    function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {
      {
        reportUncaughtErrorInDEV(error$1);
        setIsRunningInsertionEffect(false);
      }
      if (sourceFiber.tag === HostRoot) {
        captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);
        return;
      }
      var fiber = null;
      {
        fiber = nearestMountedAncestor;
      }
      while (fiber !== null) {
        if (fiber.tag === HostRoot) {
          captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);
          return;
        } else if (fiber.tag === ClassComponent) {
          var ctor = fiber.type;
          var instance = fiber.stateNode;
          if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
            var errorInfo = createCapturedValueAtFiber(error$1, sourceFiber);
            var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
            var root2 = enqueueUpdate(fiber, update, SyncLane);
            var eventTime = requestEventTime();
            if (root2 !== null) {
              markRootUpdated(root2, SyncLane, eventTime);
              ensureRootIsScheduled(root2, eventTime);
            }
            return;
          }
        }
        fiber = fiber.return;
      }
      {
        error("Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Likely causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.\n\nError message:\n\n%s", error$1);
      }
    }
    function pingSuspendedRoot(root2, wakeable, pingedLanes) {
      var pingCache = root2.pingCache;
      if (pingCache !== null) {
        pingCache.delete(wakeable);
      }
      var eventTime = requestEventTime();
      markRootPinged(root2, pingedLanes);
      warnIfSuspenseResolutionNotWrappedWithActDEV(root2);
      if (workInProgressRoot === root2 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
        if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
          prepareFreshStack(root2, NoLanes);
        } else {
          workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
        }
      }
      ensureRootIsScheduled(root2, eventTime);
    }
    function retryTimedOutBoundary(boundaryFiber, retryLane) {
      if (retryLane === NoLane) {
        retryLane = requestRetryLane(boundaryFiber);
      }
      var eventTime = requestEventTime();
      var root2 = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
      if (root2 !== null) {
        markRootUpdated(root2, retryLane, eventTime);
        ensureRootIsScheduled(root2, eventTime);
      }
    }
    function retryDehydratedSuspenseBoundary(boundaryFiber) {
      var suspenseState = boundaryFiber.memoizedState;
      var retryLane = NoLane;
      if (suspenseState !== null) {
        retryLane = suspenseState.retryLane;
      }
      retryTimedOutBoundary(boundaryFiber, retryLane);
    }
    function resolveRetryWakeable(boundaryFiber, wakeable) {
      var retryLane = NoLane;
      var retryCache;
      switch (boundaryFiber.tag) {
        case SuspenseComponent:
          retryCache = boundaryFiber.stateNode;
          var suspenseState = boundaryFiber.memoizedState;
          if (suspenseState !== null) {
            retryLane = suspenseState.retryLane;
          }
          break;
        case SuspenseListComponent:
          retryCache = boundaryFiber.stateNode;
          break;
        default:
          throw new Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
      }
      if (retryCache !== null) {
        retryCache.delete(wakeable);
      }
      retryTimedOutBoundary(boundaryFiber, retryLane);
    }
    function jnd(timeElapsed) {
      return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
    }
    function checkForNestedUpdates() {
      if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
        nestedUpdateCount = 0;
        rootWithNestedUpdates = null;
        throw new Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
      }
      {
        if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
          nestedPassiveUpdateCount = 0;
          rootWithPassiveNestedUpdates = null;
          error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
        }
      }
    }
    function flushRenderPhaseStrictModeWarningsInDEV() {
      {
        ReactStrictModeWarnings.flushLegacyContextWarning();
        {
          ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
        }
      }
    }
    function commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {
      {
        setCurrentFiber(fiber);
        invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);
        if (hasPassiveEffects) {
          invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);
        }
        invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);
        if (hasPassiveEffects) {
          invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);
        }
        resetCurrentFiber();
      }
    }
    function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {
      {
        var current2 = firstChild;
        var subtreeRoot = null;
        while (current2 !== null) {
          var primarySubtreeFlag = current2.subtreeFlags & fiberFlags;
          if (current2 !== subtreeRoot && current2.child !== null && primarySubtreeFlag !== NoFlags) {
            current2 = current2.child;
          } else {
            if ((current2.flags & fiberFlags) !== NoFlags) {
              invokeEffectFn(current2);
            }
            if (current2.sibling !== null) {
              current2 = current2.sibling;
            } else {
              current2 = subtreeRoot = current2.return;
            }
          }
        }
      }
    }
    var didWarnStateUpdateForNotYetMountedComponent = null;
    function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
      {
        if ((executionContext & RenderContext) !== NoContext) {
          return;
        }
        if (!(fiber.mode & ConcurrentMode)) {
          return;
        }
        var tag = fiber.tag;
        if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent) {
          return;
        }
        var componentName = getComponentNameFromFiber(fiber) || "ReactComponent";
        if (didWarnStateUpdateForNotYetMountedComponent !== null) {
          if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
            return;
          }
          didWarnStateUpdateForNotYetMountedComponent.add(componentName);
        } else {
          didWarnStateUpdateForNotYetMountedComponent = /* @__PURE__ */ new Set([componentName]);
        }
        var previousFiber = current;
        try {
          setCurrentFiber(fiber);
          error("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
        } finally {
          if (previousFiber) {
            setCurrentFiber(fiber);
          } else {
            resetCurrentFiber();
          }
        }
      }
    }
    var beginWork$1;
    {
      var dummyFiber = null;
      beginWork$1 = function(current2, unitOfWork, lanes) {
        var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
        try {
          return beginWork(current2, unitOfWork, lanes);
        } catch (originalError) {
          if (didSuspendOrErrorWhileHydratingDEV() || originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
            throw originalError;
          }
          resetContextDependencies();
          resetHooksAfterThrow();
          unwindInterruptedWork(current2, unitOfWork);
          assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
          if (unitOfWork.mode & ProfileMode) {
            startProfilerTimer(unitOfWork);
          }
          invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, lanes);
          if (hasCaughtError()) {
            var replayError = clearCaughtError();
            if (typeof replayError === "object" && replayError !== null && replayError._suppressLogging && typeof originalError === "object" && originalError !== null && !originalError._suppressLogging) {
              originalError._suppressLogging = true;
            }
          }
          throw originalError;
        }
      };
    }
    var didWarnAboutUpdateInRender = false;
    var didWarnAboutUpdateInRenderForAnotherComponent;
    {
      didWarnAboutUpdateInRenderForAnotherComponent = /* @__PURE__ */ new Set();
    }
    function warnAboutRenderPhaseUpdatesInDEV(fiber) {
      {
        if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
          switch (fiber.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || "Unknown";
              var dedupeKey = renderingComponentName;
              if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                var setStateComponentName = getComponentNameFromFiber(fiber) || "Unknown";
                error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
              }
              break;
            }
            case ClassComponent: {
              if (!didWarnAboutUpdateInRender) {
                error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                didWarnAboutUpdateInRender = true;
              }
              break;
            }
          }
        }
      }
    }
    function restorePendingUpdaters(root2, lanes) {
      {
        if (isDevToolsPresent) {
          var memoizedUpdaters = root2.memoizedUpdaters;
          memoizedUpdaters.forEach(function(schedulingFiber) {
            addFiberToLanesMap(root2, schedulingFiber, lanes);
          });
        }
      }
    }
    var fakeActCallbackNode = {};
    function scheduleCallback$1(priorityLevel, callback) {
      {
        var actQueue = ReactCurrentActQueue$1.current;
        if (actQueue !== null) {
          actQueue.push(callback);
          return fakeActCallbackNode;
        } else {
          return scheduleCallback(priorityLevel, callback);
        }
      }
    }
    function cancelCallback$1(callbackNode) {
      if (callbackNode === fakeActCallbackNode) {
        return;
      }
      return cancelCallback(callbackNode);
    }
    function shouldForceFlushFallbacksInDEV() {
      return ReactCurrentActQueue$1.current !== null;
    }
    function warnIfUpdatesNotWrappedWithActDEV(fiber) {
      {
        if (fiber.mode & ConcurrentMode) {
          if (!isConcurrentActEnvironment()) {
            return;
          }
        } else {
          if (!isLegacyActEnvironment()) {
            return;
          }
          if (executionContext !== NoContext) {
            return;
          }
          if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef && fiber.tag !== SimpleMemoComponent) {
            return;
          }
        }
        if (ReactCurrentActQueue$1.current === null) {
          var previousFiber = current;
          try {
            setCurrentFiber(fiber);
            error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentNameFromFiber(fiber));
          } finally {
            if (previousFiber) {
              setCurrentFiber(fiber);
            } else {
              resetCurrentFiber();
            }
          }
        }
      }
    }
    function warnIfSuspenseResolutionNotWrappedWithActDEV(root2) {
      {
        if (root2.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null) {
          error("A suspended resource finished loading inside a test, but the event was not wrapped in act(...).\n\nWhen testing, code that resolves suspended data should be wrapped into act(...):\n\nact(() => {\n  /* finish loading suspended data */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act");
        }
      }
    }
    function setIsRunningInsertionEffect(isRunning) {
      {
        isRunningInsertionEffect = isRunning;
      }
    }
    var resolveFamily = null;
    var failedBoundaries = null;
    var setRefreshHandler = function(handler) {
      {
        resolveFamily = handler;
      }
    };
    function resolveFunctionForHotReloading(type) {
      {
        if (resolveFamily === null) {
          return type;
        }
        var family = resolveFamily(type);
        if (family === void 0) {
          return type;
        }
        return family.current;
      }
    }
    function resolveClassForHotReloading(type) {
      return resolveFunctionForHotReloading(type);
    }
    function resolveForwardRefForHotReloading(type) {
      {
        if (resolveFamily === null) {
          return type;
        }
        var family = resolveFamily(type);
        if (family === void 0) {
          if (type !== null && type !== void 0 && typeof type.render === "function") {
            var currentRender = resolveFunctionForHotReloading(type.render);
            if (type.render !== currentRender) {
              var syntheticType = {
                $$typeof: REACT_FORWARD_REF_TYPE,
                render: currentRender
              };
              if (type.displayName !== void 0) {
                syntheticType.displayName = type.displayName;
              }
              return syntheticType;
            }
          }
          return type;
        }
        return family.current;
      }
    }
    function isCompatibleFamilyForHotReloading(fiber, element) {
      {
        if (resolveFamily === null) {
          return false;
        }
        var prevType = fiber.elementType;
        var nextType = element.type;
        var needsCompareFamilies = false;
        var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
        switch (fiber.tag) {
          case ClassComponent: {
            if (typeof nextType === "function") {
              needsCompareFamilies = true;
            }
            break;
          }
          case FunctionComponent: {
            if (typeof nextType === "function") {
              needsCompareFamilies = true;
            } else if ($$typeofNextType === REACT_LAZY_TYPE) {
              needsCompareFamilies = true;
            }
            break;
          }
          case ForwardRef: {
            if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
              needsCompareFamilies = true;
            } else if ($$typeofNextType === REACT_LAZY_TYPE) {
              needsCompareFamilies = true;
            }
            break;
          }
          case MemoComponent:
          case SimpleMemoComponent: {
            if ($$typeofNextType === REACT_MEMO_TYPE) {
              needsCompareFamilies = true;
            } else if ($$typeofNextType === REACT_LAZY_TYPE) {
              needsCompareFamilies = true;
            }
            break;
          }
          default:
            return false;
        }
        if (needsCompareFamilies) {
          var prevFamily = resolveFamily(prevType);
          if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType)) {
            return true;
          }
        }
        return false;
      }
    }
    function markFailedErrorBoundaryForHotReloading(fiber) {
      {
        if (resolveFamily === null) {
          return;
        }
        if (typeof WeakSet !== "function") {
          return;
        }
        if (failedBoundaries === null) {
          failedBoundaries = /* @__PURE__ */ new WeakSet();
        }
        failedBoundaries.add(fiber);
      }
    }
    var scheduleRefresh = function(root2, update) {
      {
        if (resolveFamily === null) {
          return;
        }
        var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
        flushPassiveEffects();
        flushSync(function() {
          scheduleFibersWithFamiliesRecursively(root2.current, updatedFamilies, staleFamilies);
        });
      }
    };
    var scheduleRoot = function(root2, element) {
      {
        if (root2.context !== emptyContextObject) {
          return;
        }
        flushPassiveEffects();
        flushSync(function() {
          updateContainer(element, root2, null, null);
        });
      }
    };
    function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
      {
        var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
        var candidateType = null;
        switch (tag) {
          case FunctionComponent:
          case SimpleMemoComponent:
          case ClassComponent:
            candidateType = type;
            break;
          case ForwardRef:
            candidateType = type.render;
            break;
        }
        if (resolveFamily === null) {
          throw new Error("Expected resolveFamily to be set during hot reload.");
        }
        var needsRender = false;
        var needsRemount = false;
        if (candidateType !== null) {
          var family = resolveFamily(candidateType);
          if (family !== void 0) {
            if (staleFamilies.has(family)) {
              needsRemount = true;
            } else if (updatedFamilies.has(family)) {
              if (tag === ClassComponent) {
                needsRemount = true;
              } else {
                needsRender = true;
              }
            }
          }
        }
        if (failedBoundaries !== null) {
          if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
            needsRemount = true;
          }
        }
        if (needsRemount) {
          fiber._debugNeedsRemount = true;
        }
        if (needsRemount || needsRender) {
          var _root = enqueueConcurrentRenderForLane(fiber, SyncLane);
          if (_root !== null) {
            scheduleUpdateOnFiber(_root, fiber, SyncLane, NoTimestamp);
          }
        }
        if (child !== null && !needsRemount) {
          scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
        }
        if (sibling !== null) {
          scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
        }
      }
    }
    var findHostInstancesForRefresh = function(root2, families) {
      {
        var hostInstances = /* @__PURE__ */ new Set();
        var types = new Set(families.map(function(family) {
          return family.current;
        }));
        findHostInstancesForMatchingFibersRecursively(root2.current, types, hostInstances);
        return hostInstances;
      }
    };
    function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
      {
        var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
        var candidateType = null;
        switch (tag) {
          case FunctionComponent:
          case SimpleMemoComponent:
          case ClassComponent:
            candidateType = type;
            break;
          case ForwardRef:
            candidateType = type.render;
            break;
        }
        var didMatch = false;
        if (candidateType !== null) {
          if (types.has(candidateType)) {
            didMatch = true;
          }
        }
        if (didMatch) {
          findHostInstancesForFiberShallowly(fiber, hostInstances);
        } else {
          if (child !== null) {
            findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
          }
        }
        if (sibling !== null) {
          findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
        }
      }
    }
    function findHostInstancesForFiberShallowly(fiber, hostInstances) {
      {
        var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
        if (foundHostInstances) {
          return;
        }
        var node = fiber;
        while (true) {
          switch (node.tag) {
            case HostComponent:
              hostInstances.add(node.stateNode);
              return;
            case HostPortal:
              hostInstances.add(node.stateNode.containerInfo);
              return;
            case HostRoot:
              hostInstances.add(node.stateNode.containerInfo);
              return;
          }
          if (node.return === null) {
            throw new Error("Expected to reach root first.");
          }
          node = node.return;
        }
      }
    }
    function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
      {
        var node = fiber;
        var foundHostInstances = false;
        while (true) {
          if (node.tag === HostComponent) {
            foundHostInstances = true;
            hostInstances.add(node.stateNode);
          } else if (node.child !== null) {
            node.child.return = node;
            node = node.child;
            continue;
          }
          if (node === fiber) {
            return foundHostInstances;
          }
          while (node.sibling === null) {
            if (node.return === null || node.return === fiber) {
              return foundHostInstances;
            }
            node = node.return;
          }
          node.sibling.return = node.return;
          node = node.sibling;
        }
      }
      return false;
    }
    var hasBadMapPolyfill;
    {
      hasBadMapPolyfill = false;
      try {
        var nonExtensibleObject = Object.preventExtensions({});
        /* @__PURE__ */ new Map([[nonExtensibleObject, null]]);
        /* @__PURE__ */ new Set([nonExtensibleObject]);
      } catch (e) {
        hasBadMapPolyfill = true;
      }
    }
    function FiberNode(tag, pendingProps, key, mode) {
      this.tag = tag;
      this.key = key;
      this.elementType = null;
      this.type = null;
      this.stateNode = null;
      this.return = null;
      this.child = null;
      this.sibling = null;
      this.index = 0;
      this.ref = null;
      this.pendingProps = pendingProps;
      this.memoizedProps = null;
      this.updateQueue = null;
      this.memoizedState = null;
      this.dependencies = null;
      this.mode = mode;
      this.flags = NoFlags;
      this.subtreeFlags = NoFlags;
      this.deletions = null;
      this.lanes = NoLanes;
      this.childLanes = NoLanes;
      this.alternate = null;
      {
        this.actualDuration = Number.NaN;
        this.actualStartTime = Number.NaN;
        this.selfBaseDuration = Number.NaN;
        this.treeBaseDuration = Number.NaN;
        this.actualDuration = 0;
        this.actualStartTime = -1;
        this.selfBaseDuration = 0;
        this.treeBaseDuration = 0;
      }
      {
        this._debugSource = null;
        this._debugOwner = null;
        this._debugNeedsRemount = false;
        this._debugHookTypes = null;
        if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
          Object.preventExtensions(this);
        }
      }
    }
    var createFiber = function(tag, pendingProps, key, mode) {
      return new FiberNode(tag, pendingProps, key, mode);
    };
    function shouldConstruct$1(Component) {
      var prototype = Component.prototype;
      return !!(prototype && prototype.isReactComponent);
    }
    function isSimpleFunctionComponent(type) {
      return typeof type === "function" && !shouldConstruct$1(type) && type.defaultProps === void 0;
    }
    function resolveLazyComponentTag(Component) {
      if (typeof Component === "function") {
        return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;
      } else if (Component !== void 0 && Component !== null) {
        var $$typeof = Component.$$typeof;
        if ($$typeof === REACT_FORWARD_REF_TYPE) {
          return ForwardRef;
        }
        if ($$typeof === REACT_MEMO_TYPE) {
          return MemoComponent;
        }
      }
      return IndeterminateComponent;
    }
    function createWorkInProgress(current2, pendingProps) {
      var workInProgress2 = current2.alternate;
      if (workInProgress2 === null) {
        workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode);
        workInProgress2.elementType = current2.elementType;
        workInProgress2.type = current2.type;
        workInProgress2.stateNode = current2.stateNode;
        {
          workInProgress2._debugSource = current2._debugSource;
          workInProgress2._debugOwner = current2._debugOwner;
          workInProgress2._debugHookTypes = current2._debugHookTypes;
        }
        workInProgress2.alternate = current2;
        current2.alternate = workInProgress2;
      } else {
        workInProgress2.pendingProps = pendingProps;
        workInProgress2.type = current2.type;
        workInProgress2.flags = NoFlags;
        workInProgress2.subtreeFlags = NoFlags;
        workInProgress2.deletions = null;
        {
          workInProgress2.actualDuration = 0;
          workInProgress2.actualStartTime = -1;
        }
      }
      workInProgress2.flags = current2.flags & StaticMask;
      workInProgress2.childLanes = current2.childLanes;
      workInProgress2.lanes = current2.lanes;
      workInProgress2.child = current2.child;
      workInProgress2.memoizedProps = current2.memoizedProps;
      workInProgress2.memoizedState = current2.memoizedState;
      workInProgress2.updateQueue = current2.updateQueue;
      var currentDependencies = current2.dependencies;
      workInProgress2.dependencies = currentDependencies === null ? null : {
        lanes: currentDependencies.lanes,
        firstContext: currentDependencies.firstContext
      };
      workInProgress2.sibling = current2.sibling;
      workInProgress2.index = current2.index;
      workInProgress2.ref = current2.ref;
      {
        workInProgress2.selfBaseDuration = current2.selfBaseDuration;
        workInProgress2.treeBaseDuration = current2.treeBaseDuration;
      }
      {
        workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
        switch (workInProgress2.tag) {
          case IndeterminateComponent:
          case FunctionComponent:
          case SimpleMemoComponent:
            workInProgress2.type = resolveFunctionForHotReloading(current2.type);
            break;
          case ClassComponent:
            workInProgress2.type = resolveClassForHotReloading(current2.type);
            break;
          case ForwardRef:
            workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
            break;
        }
      }
      return workInProgress2;
    }
    function resetWorkInProgress(workInProgress2, renderLanes2) {
      workInProgress2.flags &= StaticMask | Placement;
      var current2 = workInProgress2.alternate;
      if (current2 === null) {
        workInProgress2.childLanes = NoLanes;
        workInProgress2.lanes = renderLanes2;
        workInProgress2.child = null;
        workInProgress2.subtreeFlags = NoFlags;
        workInProgress2.memoizedProps = null;
        workInProgress2.memoizedState = null;
        workInProgress2.updateQueue = null;
        workInProgress2.dependencies = null;
        workInProgress2.stateNode = null;
        {
          workInProgress2.selfBaseDuration = 0;
          workInProgress2.treeBaseDuration = 0;
        }
      } else {
        workInProgress2.childLanes = current2.childLanes;
        workInProgress2.lanes = current2.lanes;
        workInProgress2.child = current2.child;
        workInProgress2.subtreeFlags = NoFlags;
        workInProgress2.deletions = null;
        workInProgress2.memoizedProps = current2.memoizedProps;
        workInProgress2.memoizedState = current2.memoizedState;
        workInProgress2.updateQueue = current2.updateQueue;
        workInProgress2.type = current2.type;
        var currentDependencies = current2.dependencies;
        workInProgress2.dependencies = currentDependencies === null ? null : {
          lanes: currentDependencies.lanes,
          firstContext: currentDependencies.firstContext
        };
        {
          workInProgress2.selfBaseDuration = current2.selfBaseDuration;
          workInProgress2.treeBaseDuration = current2.treeBaseDuration;
        }
      }
      return workInProgress2;
    }
    function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {
      var mode;
      if (tag === ConcurrentRoot) {
        mode = ConcurrentMode;
        if (isStrictMode === true) {
          mode |= StrictLegacyMode;
          {
            mode |= StrictEffectsMode;
          }
        }
      } else {
        mode = NoMode;
      }
      if (isDevToolsPresent) {
        mode |= ProfileMode;
      }
      return createFiber(HostRoot, null, null, mode);
    }
    function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
      var fiberTag = IndeterminateComponent;
      var resolvedType = type;
      if (typeof type === "function") {
        if (shouldConstruct$1(type)) {
          fiberTag = ClassComponent;
          {
            resolvedType = resolveClassForHotReloading(resolvedType);
          }
        } else {
          {
            resolvedType = resolveFunctionForHotReloading(resolvedType);
          }
        }
      } else if (typeof type === "string") {
        fiberTag = HostComponent;
      } else {
        getTag:
          switch (type) {
            case REACT_FRAGMENT_TYPE:
              return createFiberFromFragment(pendingProps.children, mode, lanes, key);
            case REACT_STRICT_MODE_TYPE:
              fiberTag = Mode;
              mode |= StrictLegacyMode;
              if ((mode & ConcurrentMode) !== NoMode) {
                mode |= StrictEffectsMode;
              }
              break;
            case REACT_PROFILER_TYPE:
              return createFiberFromProfiler(pendingProps, mode, lanes, key);
            case REACT_SUSPENSE_TYPE:
              return createFiberFromSuspense(pendingProps, mode, lanes, key);
            case REACT_SUSPENSE_LIST_TYPE:
              return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
            case REACT_OFFSCREEN_TYPE:
              return createFiberFromOffscreen(pendingProps, mode, lanes, key);
            case REACT_LEGACY_HIDDEN_TYPE:
            case REACT_SCOPE_TYPE:
            case REACT_CACHE_TYPE:
            case REACT_TRACING_MARKER_TYPE:
            case REACT_DEBUG_TRACING_MODE_TYPE:
            default: {
              if (typeof type === "object" && type !== null) {
                switch (type.$$typeof) {
                  case REACT_PROVIDER_TYPE:
                    fiberTag = ContextProvider;
                    break getTag;
                  case REACT_CONTEXT_TYPE:
                    fiberTag = ContextConsumer;
                    break getTag;
                  case REACT_FORWARD_REF_TYPE:
                    fiberTag = ForwardRef;
                    {
                      resolvedType = resolveForwardRefForHotReloading(resolvedType);
                    }
                    break getTag;
                  case REACT_MEMO_TYPE:
                    fiberTag = MemoComponent;
                    break getTag;
                  case REACT_LAZY_TYPE:
                    fiberTag = LazyComponent;
                    resolvedType = null;
                    break getTag;
                }
              }
              var info = "";
              {
                if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                  info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                }
                var ownerName = owner ? getComponentNameFromFiber(owner) : null;
                if (ownerName) {
                  info += "\n\nCheck the render method of `" + ownerName + "`.";
                }
              }
              throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info));
            }
          }
      }
      var fiber = createFiber(fiberTag, pendingProps, key, mode);
      fiber.elementType = type;
      fiber.type = resolvedType;
      fiber.lanes = lanes;
      {
        fiber._debugOwner = owner;
      }
      return fiber;
    }
    function createFiberFromElement(element, mode, lanes) {
      var owner = null;
      {
        owner = element._owner;
      }
      var type = element.type;
      var key = element.key;
      var pendingProps = element.props;
      var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
      {
        fiber._debugSource = element._source;
        fiber._debugOwner = element._owner;
      }
      return fiber;
    }
    function createFiberFromFragment(elements, mode, lanes, key) {
      var fiber = createFiber(Fragment, elements, key, mode);
      fiber.lanes = lanes;
      return fiber;
    }
    function createFiberFromProfiler(pendingProps, mode, lanes, key) {
      {
        if (typeof pendingProps.id !== "string") {
          error('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);
        }
      }
      var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
      fiber.elementType = REACT_PROFILER_TYPE;
      fiber.lanes = lanes;
      {
        fiber.stateNode = {
          effectDuration: 0,
          passiveEffectDuration: 0
        };
      }
      return fiber;
    }
    function createFiberFromSuspense(pendingProps, mode, lanes, key) {
      var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
      fiber.elementType = REACT_SUSPENSE_TYPE;
      fiber.lanes = lanes;
      return fiber;
    }
    function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
      var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
      fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
      fiber.lanes = lanes;
      return fiber;
    }
    function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
      var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
      fiber.elementType = REACT_OFFSCREEN_TYPE;
      fiber.lanes = lanes;
      var primaryChildInstance = {
        isHidden: false
      };
      fiber.stateNode = primaryChildInstance;
      return fiber;
    }
    function createFiberFromText(content, mode, lanes) {
      var fiber = createFiber(HostText, content, null, mode);
      fiber.lanes = lanes;
      return fiber;
    }
    function createFiberFromHostInstanceForDeletion() {
      var fiber = createFiber(HostComponent, null, null, NoMode);
      fiber.elementType = "DELETED";
      return fiber;
    }
    function createFiberFromDehydratedFragment(dehydratedNode) {
      var fiber = createFiber(DehydratedFragment, null, null, NoMode);
      fiber.stateNode = dehydratedNode;
      return fiber;
    }
    function createFiberFromPortal(portal, mode, lanes) {
      var pendingProps = portal.children !== null ? portal.children : [];
      var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
      fiber.lanes = lanes;
      fiber.stateNode = {
        containerInfo: portal.containerInfo,
        pendingChildren: null,
        // Used by persistent updates
        implementation: portal.implementation
      };
      return fiber;
    }
    function assignFiberPropertiesInDEV(target, source) {
      if (target === null) {
        target = createFiber(IndeterminateComponent, null, null, NoMode);
      }
      target.tag = source.tag;
      target.key = source.key;
      target.elementType = source.elementType;
      target.type = source.type;
      target.stateNode = source.stateNode;
      target.return = source.return;
      target.child = source.child;
      target.sibling = source.sibling;
      target.index = source.index;
      target.ref = source.ref;
      target.pendingProps = source.pendingProps;
      target.memoizedProps = source.memoizedProps;
      target.updateQueue = source.updateQueue;
      target.memoizedState = source.memoizedState;
      target.dependencies = source.dependencies;
      target.mode = source.mode;
      target.flags = source.flags;
      target.subtreeFlags = source.subtreeFlags;
      target.deletions = source.deletions;
      target.lanes = source.lanes;
      target.childLanes = source.childLanes;
      target.alternate = source.alternate;
      {
        target.actualDuration = source.actualDuration;
        target.actualStartTime = source.actualStartTime;
        target.selfBaseDuration = source.selfBaseDuration;
        target.treeBaseDuration = source.treeBaseDuration;
      }
      target._debugSource = source._debugSource;
      target._debugOwner = source._debugOwner;
      target._debugNeedsRemount = source._debugNeedsRemount;
      target._debugHookTypes = source._debugHookTypes;
      return target;
    }
    function FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError) {
      this.tag = tag;
      this.containerInfo = containerInfo;
      this.pendingChildren = null;
      this.current = null;
      this.pingCache = null;
      this.finishedWork = null;
      this.timeoutHandle = noTimeout;
      this.context = null;
      this.pendingContext = null;
      this.callbackNode = null;
      this.callbackPriority = NoLane;
      this.eventTimes = createLaneMap(NoLanes);
      this.expirationTimes = createLaneMap(NoTimestamp);
      this.pendingLanes = NoLanes;
      this.suspendedLanes = NoLanes;
      this.pingedLanes = NoLanes;
      this.expiredLanes = NoLanes;
      this.mutableReadLanes = NoLanes;
      this.finishedLanes = NoLanes;
      this.entangledLanes = NoLanes;
      this.entanglements = createLaneMap(NoLanes);
      this.identifierPrefix = identifierPrefix;
      this.onRecoverableError = onRecoverableError;
      {
        this.mutableSourceEagerHydrationData = null;
      }
      {
        this.effectDuration = 0;
        this.passiveEffectDuration = 0;
      }
      {
        this.memoizedUpdaters = /* @__PURE__ */ new Set();
        var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];
        for (var _i = 0; _i < TotalLanes; _i++) {
          pendingUpdatersLaneMap.push(/* @__PURE__ */ new Set());
        }
      }
      {
        switch (tag) {
          case ConcurrentRoot:
            this._debugRootType = hydrate2 ? "hydrateRoot()" : "createRoot()";
            break;
          case LegacyRoot:
            this._debugRootType = hydrate2 ? "hydrate()" : "render()";
            break;
        }
      }
    }
    function createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
      var root2 = new FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError);
      var uninitializedFiber = createHostRootFiber(tag, isStrictMode);
      root2.current = uninitializedFiber;
      uninitializedFiber.stateNode = root2;
      {
        var _initialState = {
          element: initialChildren,
          isDehydrated: hydrate2,
          cache: null,
          // not enabled yet
          transitions: null,
          pendingSuspenseBoundaries: null
        };
        uninitializedFiber.memoizedState = _initialState;
      }
      initializeUpdateQueue(uninitializedFiber);
      return root2;
    }
    var ReactVersion = "18.2.0";
    function createPortal(children, containerInfo, implementation) {
      var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
      {
        checkKeyStringCoercion(key);
      }
      return {
        // This tag allow us to uniquely identify this as a React Portal
        $$typeof: REACT_PORTAL_TYPE,
        key: key == null ? null : "" + key,
        children,
        containerInfo,
        implementation
      };
    }
    var didWarnAboutNestedUpdates;
    var didWarnAboutFindNodeInStrictMode;
    {
      didWarnAboutNestedUpdates = false;
      didWarnAboutFindNodeInStrictMode = {};
    }
    function getContextForSubtree(parentComponent) {
      if (!parentComponent) {
        return emptyContextObject;
      }
      var fiber = get(parentComponent);
      var parentContext = findCurrentUnmaskedContext(fiber);
      if (fiber.tag === ClassComponent) {
        var Component = fiber.type;
        if (isContextProvider(Component)) {
          return processChildContext(fiber, Component, parentContext);
        }
      }
      return parentContext;
    }
    function findHostInstanceWithWarning(component, methodName) {
      {
        var fiber = get(component);
        if (fiber === void 0) {
          if (typeof component.render === "function") {
            throw new Error("Unable to find node on an unmounted component.");
          } else {
            var keys = Object.keys(component).join(",");
            throw new Error("Argument appears to not be a ReactComponent. Keys: " + keys);
          }
        }
        var hostFiber = findCurrentHostFiber(fiber);
        if (hostFiber === null) {
          return null;
        }
        if (hostFiber.mode & StrictLegacyMode) {
          var componentName = getComponentNameFromFiber(fiber) || "Component";
          if (!didWarnAboutFindNodeInStrictMode[componentName]) {
            didWarnAboutFindNodeInStrictMode[componentName] = true;
            var previousFiber = current;
            try {
              setCurrentFiber(hostFiber);
              if (fiber.mode & StrictLegacyMode) {
                error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
              } else {
                error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
              }
            } finally {
              if (previousFiber) {
                setCurrentFiber(previousFiber);
              } else {
                resetCurrentFiber();
              }
            }
          }
        }
        return hostFiber.stateNode;
      }
    }
    function createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
      var hydrate2 = false;
      var initialChildren = null;
      return createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
    }
    function createHydrationContainer(initialChildren, callback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
      var hydrate2 = true;
      var root2 = createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
      root2.context = getContextForSubtree(null);
      var current2 = root2.current;
      var eventTime = requestEventTime();
      var lane = requestUpdateLane(current2);
      var update = createUpdate(eventTime, lane);
      update.callback = callback !== void 0 && callback !== null ? callback : null;
      enqueueUpdate(current2, update, lane);
      scheduleInitialHydrationOnRoot(root2, lane, eventTime);
      return root2;
    }
    function updateContainer(element, container, parentComponent, callback) {
      {
        onScheduleRoot(container, element);
      }
      var current$1 = container.current;
      var eventTime = requestEventTime();
      var lane = requestUpdateLane(current$1);
      {
        markRenderScheduled(lane);
      }
      var context = getContextForSubtree(parentComponent);
      if (container.context === null) {
        container.context = context;
      } else {
        container.pendingContext = context;
      }
      {
        if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
          didWarnAboutNestedUpdates = true;
          error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentNameFromFiber(current) || "Unknown");
        }
      }
      var update = createUpdate(eventTime, lane);
      update.payload = {
        element
      };
      callback = callback === void 0 ? null : callback;
      if (callback !== null) {
        {
          if (typeof callback !== "function") {
            error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
          }
        }
        update.callback = callback;
      }
      var root2 = enqueueUpdate(current$1, update, lane);
      if (root2 !== null) {
        scheduleUpdateOnFiber(root2, current$1, lane, eventTime);
        entangleTransitions(root2, current$1, lane);
      }
      return lane;
    }
    function getPublicRootInstance(container) {
      var containerFiber = container.current;
      if (!containerFiber.child) {
        return null;
      }
      switch (containerFiber.child.tag) {
        case HostComponent:
          return getPublicInstance(containerFiber.child.stateNode);
        default:
          return containerFiber.child.stateNode;
      }
    }
    function attemptSynchronousHydration$1(fiber) {
      switch (fiber.tag) {
        case HostRoot: {
          var root2 = fiber.stateNode;
          if (isRootDehydrated(root2)) {
            var lanes = getHighestPriorityPendingLanes(root2);
            flushRoot(root2, lanes);
          }
          break;
        }
        case SuspenseComponent: {
          flushSync(function() {
            var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root3 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root3, fiber, SyncLane, eventTime);
            }
          });
          var retryLane = SyncLane;
          markRetryLaneIfNotHydrated(fiber, retryLane);
          break;
        }
      }
    }
    function markRetryLaneImpl(fiber, retryLane) {
      var suspenseState = fiber.memoizedState;
      if (suspenseState !== null && suspenseState.dehydrated !== null) {
        suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
      }
    }
    function markRetryLaneIfNotHydrated(fiber, retryLane) {
      markRetryLaneImpl(fiber, retryLane);
      var alternate = fiber.alternate;
      if (alternate) {
        markRetryLaneImpl(alternate, retryLane);
      }
    }
    function attemptContinuousHydration$1(fiber) {
      if (fiber.tag !== SuspenseComponent) {
        return;
      }
      var lane = SelectiveHydrationLane;
      var root2 = enqueueConcurrentRenderForLane(fiber, lane);
      if (root2 !== null) {
        var eventTime = requestEventTime();
        scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
      }
      markRetryLaneIfNotHydrated(fiber, lane);
    }
    function attemptHydrationAtCurrentPriority$1(fiber) {
      if (fiber.tag !== SuspenseComponent) {
        return;
      }
      var lane = requestUpdateLane(fiber);
      var root2 = enqueueConcurrentRenderForLane(fiber, lane);
      if (root2 !== null) {
        var eventTime = requestEventTime();
        scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
      }
      markRetryLaneIfNotHydrated(fiber, lane);
    }
    function findHostInstanceWithNoPortals(fiber) {
      var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
      if (hostFiber === null) {
        return null;
      }
      return hostFiber.stateNode;
    }
    var shouldErrorImpl = function(fiber) {
      return null;
    };
    function shouldError(fiber) {
      return shouldErrorImpl(fiber);
    }
    var shouldSuspendImpl = function(fiber) {
      return false;
    };
    function shouldSuspend(fiber) {
      return shouldSuspendImpl(fiber);
    }
    var overrideHookState = null;
    var overrideHookStateDeletePath = null;
    var overrideHookStateRenamePath = null;
    var overrideProps = null;
    var overridePropsDeletePath = null;
    var overridePropsRenamePath = null;
    var scheduleUpdate = null;
    var setErrorHandler = null;
    var setSuspenseHandler = null;
    {
      var copyWithDeleteImpl = function(obj, path, index2) {
        var key = path[index2];
        var updated = isArray(obj) ? obj.slice() : assign({}, obj);
        if (index2 + 1 === path.length) {
          if (isArray(updated)) {
            updated.splice(key, 1);
          } else {
            delete updated[key];
          }
          return updated;
        }
        updated[key] = copyWithDeleteImpl(obj[key], path, index2 + 1);
        return updated;
      };
      var copyWithDelete = function(obj, path) {
        return copyWithDeleteImpl(obj, path, 0);
      };
      var copyWithRenameImpl = function(obj, oldPath, newPath, index2) {
        var oldKey = oldPath[index2];
        var updated = isArray(obj) ? obj.slice() : assign({}, obj);
        if (index2 + 1 === oldPath.length) {
          var newKey = newPath[index2];
          updated[newKey] = updated[oldKey];
          if (isArray(updated)) {
            updated.splice(oldKey, 1);
          } else {
            delete updated[oldKey];
          }
        } else {
          updated[oldKey] = copyWithRenameImpl(
            // $FlowFixMe number or string is fine here
            obj[oldKey],
            oldPath,
            newPath,
            index2 + 1
          );
        }
        return updated;
      };
      var copyWithRename = function(obj, oldPath, newPath) {
        if (oldPath.length !== newPath.length) {
          warn("copyWithRename() expects paths of the same length");
          return;
        } else {
          for (var i = 0; i < newPath.length - 1; i++) {
            if (oldPath[i] !== newPath[i]) {
              warn("copyWithRename() expects paths to be the same except for the deepest key");
              return;
            }
          }
        }
        return copyWithRenameImpl(obj, oldPath, newPath, 0);
      };
      var copyWithSetImpl = function(obj, path, index2, value) {
        if (index2 >= path.length) {
          return value;
        }
        var key = path[index2];
        var updated = isArray(obj) ? obj.slice() : assign({}, obj);
        updated[key] = copyWithSetImpl(obj[key], path, index2 + 1, value);
        return updated;
      };
      var copyWithSet = function(obj, path, value) {
        return copyWithSetImpl(obj, path, 0, value);
      };
      var findHook = function(fiber, id) {
        var currentHook2 = fiber.memoizedState;
        while (currentHook2 !== null && id > 0) {
          currentHook2 = currentHook2.next;
          id--;
        }
        return currentHook2;
      };
      overrideHookState = function(fiber, id, path, value) {
        var hook = findHook(fiber, id);
        if (hook !== null) {
          var newState = copyWithSet(hook.memoizedState, path, value);
          hook.memoizedState = newState;
          hook.baseState = newState;
          fiber.memoizedProps = assign({}, fiber.memoizedProps);
          var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
          if (root2 !== null) {
            scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
          }
        }
      };
      overrideHookStateDeletePath = function(fiber, id, path) {
        var hook = findHook(fiber, id);
        if (hook !== null) {
          var newState = copyWithDelete(hook.memoizedState, path);
          hook.memoizedState = newState;
          hook.baseState = newState;
          fiber.memoizedProps = assign({}, fiber.memoizedProps);
          var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
          if (root2 !== null) {
            scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
          }
        }
      };
      overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {
        var hook = findHook(fiber, id);
        if (hook !== null) {
          var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
          hook.memoizedState = newState;
          hook.baseState = newState;
          fiber.memoizedProps = assign({}, fiber.memoizedProps);
          var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
          if (root2 !== null) {
            scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
          }
        }
      };
      overrideProps = function(fiber, path, value) {
        fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
        if (fiber.alternate) {
          fiber.alternate.pendingProps = fiber.pendingProps;
        }
        var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
        if (root2 !== null) {
          scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
        }
      };
      overridePropsDeletePath = function(fiber, path) {
        fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);
        if (fiber.alternate) {
          fiber.alternate.pendingProps = fiber.pendingProps;
        }
        var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
        if (root2 !== null) {
          scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
        }
      };
      overridePropsRenamePath = function(fiber, oldPath, newPath) {
        fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
        if (fiber.alternate) {
          fiber.alternate.pendingProps = fiber.pendingProps;
        }
        var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
        if (root2 !== null) {
          scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
        }
      };
      scheduleUpdate = function(fiber) {
        var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
        if (root2 !== null) {
          scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
        }
      };
      setErrorHandler = function(newShouldErrorImpl) {
        shouldErrorImpl = newShouldErrorImpl;
      };
      setSuspenseHandler = function(newShouldSuspendImpl) {
        shouldSuspendImpl = newShouldSuspendImpl;
      };
    }
    function findHostInstanceByFiber(fiber) {
      var hostFiber = findCurrentHostFiber(fiber);
      if (hostFiber === null) {
        return null;
      }
      return hostFiber.stateNode;
    }
    function emptyFindFiberByHostInstance(instance) {
      return null;
    }
    function getCurrentFiberForDevTools() {
      return current;
    }
    function injectIntoDevTools(devToolsConfig) {
      var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
      var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
      return injectInternals({
        bundleType: devToolsConfig.bundleType,
        version: devToolsConfig.version,
        rendererPackageName: devToolsConfig.rendererPackageName,
        rendererConfig: devToolsConfig.rendererConfig,
        overrideHookState,
        overrideHookStateDeletePath,
        overrideHookStateRenamePath,
        overrideProps,
        overridePropsDeletePath,
        overridePropsRenamePath,
        setErrorHandler,
        setSuspenseHandler,
        scheduleUpdate,
        currentDispatcherRef: ReactCurrentDispatcher2,
        findHostInstanceByFiber,
        findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
        // React Refresh
        findHostInstancesForRefresh,
        scheduleRefresh,
        scheduleRoot,
        setRefreshHandler,
        // Enables DevTools to append owner stacks to error messages in DEV mode.
        getCurrentFiber: getCurrentFiberForDevTools,
        // Enables DevTools to detect reconciler version rather than renderer version
        // which may not match for third party renderers.
        reconcilerVersion: ReactVersion
      });
    }
    var defaultOnRecoverableError = typeof reportError === "function" ? (
      // In modern browsers, reportError will dispatch an error event,
      // emulating an uncaught JavaScript error.
      reportError
    ) : function(error2) {
      console["error"](error2);
    };
    function ReactDOMRoot(internalRoot) {
      this._internalRoot = internalRoot;
    }
    ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function(children) {
      var root2 = this._internalRoot;
      if (root2 === null) {
        throw new Error("Cannot update an unmounted root.");
      }
      {
        if (typeof arguments[1] === "function") {
          error("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
        } else if (isValidContainer(arguments[1])) {
          error("You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root.");
        } else if (typeof arguments[1] !== "undefined") {
          error("You passed a second argument to root.render(...) but it only accepts one argument.");
        }
        var container = root2.containerInfo;
        if (container.nodeType !== COMMENT_NODE) {
          var hostInstance = findHostInstanceWithNoPortals(root2.current);
          if (hostInstance) {
            if (hostInstance.parentNode !== container) {
              error("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
            }
          }
        }
      }
      updateContainer(children, root2, null, null);
    };
    ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function() {
      {
        if (typeof arguments[0] === "function") {
          error("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
        }
      }
      var root2 = this._internalRoot;
      if (root2 !== null) {
        this._internalRoot = null;
        var container = root2.containerInfo;
        {
          if (isAlreadyRendering()) {
            error("Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition.");
          }
        }
        flushSync(function() {
          updateContainer(null, root2, null, null);
        });
        unmarkContainerAsRoot(container);
      }
    };
    function createRoot(container, options2) {
      if (!isValidContainer(container)) {
        throw new Error("createRoot(...): Target container is not a DOM element.");
      }
      warnIfReactDOMContainerInDEV(container);
      var isStrictMode = false;
      var concurrentUpdatesByDefaultOverride = false;
      var identifierPrefix = "";
      var onRecoverableError = defaultOnRecoverableError;
      var transitionCallbacks = null;
      if (options2 !== null && options2 !== void 0) {
        {
          if (options2.hydrate) {
            warn("hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.");
          } else {
            if (typeof options2 === "object" && options2 !== null && options2.$$typeof === REACT_ELEMENT_TYPE) {
              error("You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:\n\n  let root = createRoot(domContainer);\n  root.render(<App />);");
            }
          }
        }
        if (options2.unstable_strictMode === true) {
          isStrictMode = true;
        }
        if (options2.identifierPrefix !== void 0) {
          identifierPrefix = options2.identifierPrefix;
        }
        if (options2.onRecoverableError !== void 0) {
          onRecoverableError = options2.onRecoverableError;
        }
        if (options2.transitionCallbacks !== void 0) {
          transitionCallbacks = options2.transitionCallbacks;
        }
      }
      var root2 = createContainer(container, ConcurrentRoot, null, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
      markContainerAsRoot(root2.current, container);
      var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
      listenToAllSupportedEvents(rootContainerElement);
      return new ReactDOMRoot(root2);
    }
    function ReactDOMHydrationRoot(internalRoot) {
      this._internalRoot = internalRoot;
    }
    function scheduleHydration(target) {
      if (target) {
        queueExplicitHydrationTarget(target);
      }
    }
    ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;
    function hydrateRoot(container, initialChildren, options2) {
      if (!isValidContainer(container)) {
        throw new Error("hydrateRoot(...): Target container is not a DOM element.");
      }
      warnIfReactDOMContainerInDEV(container);
      {
        if (initialChildren === void 0) {
          error("Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)");
        }
      }
      var hydrationCallbacks = options2 != null ? options2 : null;
      var mutableSources = options2 != null && options2.hydratedSources || null;
      var isStrictMode = false;
      var concurrentUpdatesByDefaultOverride = false;
      var identifierPrefix = "";
      var onRecoverableError = defaultOnRecoverableError;
      if (options2 !== null && options2 !== void 0) {
        if (options2.unstable_strictMode === true) {
          isStrictMode = true;
        }
        if (options2.identifierPrefix !== void 0) {
          identifierPrefix = options2.identifierPrefix;
        }
        if (options2.onRecoverableError !== void 0) {
          onRecoverableError = options2.onRecoverableError;
        }
      }
      var root2 = createHydrationContainer(initialChildren, null, container, ConcurrentRoot, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
      markContainerAsRoot(root2.current, container);
      listenToAllSupportedEvents(container);
      if (mutableSources) {
        for (var i = 0; i < mutableSources.length; i++) {
          var mutableSource = mutableSources[i];
          registerMutableSourceForHydration(root2, mutableSource);
        }
      }
      return new ReactDOMHydrationRoot(root2);
    }
    function isValidContainer(node) {
      return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || !disableCommentsAsDOMContainers));
    }
    function isValidContainerLegacy(node) {
      return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === " react-mount-point-unstable "));
    }
    function warnIfReactDOMContainerInDEV(container) {
      {
        if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
          error("createRoot(): Creating roots directly with document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try using a container element created for your app.");
        }
        if (isContainerMarkedAsRoot(container)) {
          if (container._reactRootContainer) {
            error("You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported.");
          } else {
            error("You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it.");
          }
        }
      }
    }
    var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
    var topLevelUpdateWarnings;
    {
      topLevelUpdateWarnings = function(container) {
        if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
          var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer.current);
          if (hostInstance) {
            if (hostInstance.parentNode !== container) {
              error("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
            }
          }
        }
        var isRootRenderedBySomeReact = !!container._reactRootContainer;
        var rootEl = getReactRootElementInContainer(container);
        var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
        if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
          error("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
        }
        if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
          error("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
        }
      };
    }
    function getReactRootElementInContainer(container) {
      if (!container) {
        return null;
      }
      if (container.nodeType === DOCUMENT_NODE) {
        return container.documentElement;
      } else {
        return container.firstChild;
      }
    }
    function noopOnRecoverableError() {
    }
    function legacyCreateRootFromDOMContainer(container, initialChildren, parentComponent, callback, isHydrationContainer) {
      if (isHydrationContainer) {
        if (typeof callback === "function") {
          var originalCallback = callback;
          callback = function() {
            var instance = getPublicRootInstance(root2);
            originalCallback.call(instance);
          };
        }
        var root2 = createHydrationContainer(
          initialChildren,
          callback,
          container,
          LegacyRoot,
          null,
          // hydrationCallbacks
          false,
          // isStrictMode
          false,
          // concurrentUpdatesByDefaultOverride,
          "",
          // identifierPrefix
          noopOnRecoverableError
        );
        container._reactRootContainer = root2;
        markContainerAsRoot(root2.current, container);
        var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
        listenToAllSupportedEvents(rootContainerElement);
        flushSync();
        return root2;
      } else {
        var rootSibling;
        while (rootSibling = container.lastChild) {
          container.removeChild(rootSibling);
        }
        if (typeof callback === "function") {
          var _originalCallback = callback;
          callback = function() {
            var instance = getPublicRootInstance(_root);
            _originalCallback.call(instance);
          };
        }
        var _root = createContainer(
          container,
          LegacyRoot,
          null,
          // hydrationCallbacks
          false,
          // isStrictMode
          false,
          // concurrentUpdatesByDefaultOverride,
          "",
          // identifierPrefix
          noopOnRecoverableError
        );
        container._reactRootContainer = _root;
        markContainerAsRoot(_root.current, container);
        var _rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
        listenToAllSupportedEvents(_rootContainerElement);
        flushSync(function() {
          updateContainer(initialChildren, _root, parentComponent, callback);
        });
        return _root;
      }
    }
    function warnOnInvalidCallback$1(callback, callerName) {
      {
        if (callback !== null && typeof callback !== "function") {
          error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
        }
      }
    }
    function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
      {
        topLevelUpdateWarnings(container);
        warnOnInvalidCallback$1(callback === void 0 ? null : callback, "render");
      }
      var maybeRoot = container._reactRootContainer;
      var root2;
      if (!maybeRoot) {
        root2 = legacyCreateRootFromDOMContainer(container, children, parentComponent, callback, forceHydrate);
      } else {
        root2 = maybeRoot;
        if (typeof callback === "function") {
          var originalCallback = callback;
          callback = function() {
            var instance = getPublicRootInstance(root2);
            originalCallback.call(instance);
          };
        }
        updateContainer(children, root2, parentComponent, callback);
      }
      return getPublicRootInstance(root2);
    }
    function findDOMNode(componentOrElement) {
      {
        var owner = ReactCurrentOwner$3.current;
        if (owner !== null && owner.stateNode !== null) {
          var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
          if (!warnedAboutRefsInRender) {
            error("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromType(owner.type) || "A component");
          }
          owner.stateNode._warnedAboutRefsInRender = true;
        }
      }
      if (componentOrElement == null) {
        return null;
      }
      if (componentOrElement.nodeType === ELEMENT_NODE) {
        return componentOrElement;
      }
      {
        return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
      }
    }
    function hydrate(element, container, callback) {
      {
        error("ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
      }
      if (!isValidContainerLegacy(container)) {
        throw new Error("Target container is not a DOM element.");
      }
      {
        var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
        if (isModernRoot) {
          error("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call hydrateRoot(container, element)?");
        }
      }
      return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
    }
    function render(element, container, callback) {
      {
        error("ReactDOM.render is no longer supported in React 18. Use createRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
      }
      if (!isValidContainerLegacy(container)) {
        throw new Error("Target container is not a DOM element.");
      }
      {
        var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
        if (isModernRoot) {
          error("You are calling ReactDOM.render() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.render(element)?");
        }
      }
      return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
    }
    function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
      {
        error("ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported in React 18. Consider using a portal instead. Until you switch to the createRoot API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
      }
      if (!isValidContainerLegacy(containerNode)) {
        throw new Error("Target container is not a DOM element.");
      }
      if (parentComponent == null || !has(parentComponent)) {
        throw new Error("parentComponent must be a valid React Component");
      }
      return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
    }
    function unmountComponentAtNode(container) {
      if (!isValidContainerLegacy(container)) {
        throw new Error("unmountComponentAtNode(...): Target container is not a DOM element.");
      }
      {
        var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
        if (isModernRoot) {
          error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?");
        }
      }
      if (container._reactRootContainer) {
        {
          var rootEl = getReactRootElementInContainer(container);
          var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
          if (renderedByDifferentReact) {
            error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
          }
        }
        flushSync(function() {
          legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
            container._reactRootContainer = null;
            unmarkContainerAsRoot(container);
          });
        });
        return true;
      } else {
        {
          var _rootEl = getReactRootElementInContainer(container);
          var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl));
          var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainerLegacy(container.parentNode) && !!container.parentNode._reactRootContainer;
          if (hasNonRootReactChild) {
            error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
          }
        }
        return false;
      }
    }
    setAttemptSynchronousHydration(attemptSynchronousHydration$1);
    setAttemptContinuousHydration(attemptContinuousHydration$1);
    setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
    setGetCurrentUpdatePriority(getCurrentUpdatePriority);
    setAttemptHydrationAtPriority(runWithPriority);
    {
      if (typeof Map !== "function" || // $FlowIssue Flow incorrectly thinks Map has no prototype
      Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || // $FlowIssue Flow incorrectly thinks Set has no prototype
      Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
        error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
      }
    }
    setRestoreImplementation(restoreControlledState$3);
    setBatchingImplementation(batchedUpdates$1, discreteUpdates, flushSync);
    function createPortal$1(children, container) {
      var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
      if (!isValidContainer(container)) {
        throw new Error("Target container is not a DOM element.");
      }
      return createPortal(children, container, null, key);
    }
    function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
      return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
    }
    var Internals = {
      usingClientEntryPoint: false,
      // Keep in sync with ReactTestUtils.js.
      // This is an array for better minification.
      Events: [getInstanceFromNode, getNodeFromInstance, getFiberCurrentPropsFromNode, enqueueStateRestore, restoreStateIfNeeded, batchedUpdates$1]
    };
    function createRoot$1(container, options2) {
      {
        if (!Internals.usingClientEntryPoint && true) {
          error('You are importing createRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
        }
      }
      return createRoot(container, options2);
    }
    function hydrateRoot$1(container, initialChildren, options2) {
      {
        if (!Internals.usingClientEntryPoint && true) {
          error('You are importing hydrateRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
        }
      }
      return hydrateRoot(container, initialChildren, options2);
    }
    function flushSync$1(fn) {
      {
        if (isAlreadyRendering()) {
          error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
        }
      }
      return flushSync(fn);
    }
    var foundDevTools = injectIntoDevTools({
      findFiberByHostInstance: getClosestInstanceFromNode,
      bundleType: 1,
      version: ReactVersion,
      rendererPackageName: "react-dom"
    });
    {
      if (!foundDevTools && canUseDOM && window.top === window.self) {
        if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
          var protocol = window.location.protocol;
          if (/^(https?|file):$/.test(protocol)) {
            console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ""), "font-weight:bold");
          }
        }
      }
    }
    __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = reactDom_development.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
    createPortal_1 = reactDom_development.createPortal = createPortal$1;
    createRoot_1 = reactDom_development.createRoot = createRoot$1;
    findDOMNode_1 = reactDom_development.findDOMNode = findDOMNode;
    flushSync_1 = reactDom_development.flushSync = flushSync$1;
    hydrate_1 = reactDom_development.hydrate = hydrate;
    hydrateRoot_1 = reactDom_development.hydrateRoot = hydrateRoot$1;
    render_1 = reactDom_development.render = render;
    unmountComponentAtNode_1 = reactDom_development.unmountComponentAtNode = unmountComponentAtNode;
    unstable_batchedUpdates = reactDom_development.unstable_batchedUpdates = batchedUpdates$1;
    unstable_renderSubtreeIntoContainer_1 = reactDom_development.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
    version = reactDom_development.version = ReactVersion;
    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
      __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
    }
  })();
}

var reactDom = reactDom$1.exports;

"use strict";
function checkDCE() {
  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined" || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== "function") {
    return;
  }
  if (true) {
    throw new Error("^_^");
  }
  try {
    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
  } catch (err) {
    console.error(err);
  }
}
if (false) {
  checkDCE();
  module.exports = require("./cjs/react-dom.production.min.js");
} else {
  reactDom$1.exports = reactDom_development;
}

var reactDomExports = reactDom$1.exports;
var v = /*@__PURE__*/getDefaultExportFromCjs(reactDomExports);

function InlineText(props) {
  return jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: props.caption.value && props.caption.value.length > 0 ? props.caption.value : "\xA0" });
}

const Text = (props) => reactExports.createElement(props.renderMode, { className: classNames("mx-text", props.class), style: props.style }, reactExports.createElement(InlineText, { caption: props.caption }));

const ListExpressionProperty = asProperty((config, store, widgetId, propertyPath) => listItemProperty((object) => function(config2, store2, widgetId2, object2) {
  const description = `Value of ${toFriendlyId(widgetId2)}`, object$ = fromConstant$(available(object2));
  return asDynamicValue$(getFormExpressionResult$(description, store2, config2.expression, (variable) => variable.widget === widgetId2 && "object" === variable.source ? object$ : getVariableFromStore$(description, store2, variable)));
}(config, store, widgetId, object), `List expression "${widgetId}/${propertyPath}"`, config.dataSourceId));

const StaticImageProperty = asProperty((config) => {
  return fromConstant$(dynAvailable({ uri: getStaticResourceUrlFromPath(config.image.uri), name: (uri = config.image.uri, /([^/$]+?)(\?|$)/.exec(uri)?.[1] ?? "") }));
  var uri;
});

function Container(props) {
  const RenderMode = props.renderMode;
  return jsxRuntimeExports.jsx(RenderMode, { className: props.class, style: props.style, ...getClickProps(props), ...props.ariaHidden ? { "aria-hidden": true } : {}, children: props.content });
}
function getClickProps(props) {
  const { tabIndex, onClick } = props;
  if (onClick?.canExecute) {
    const executeAction = () => {
      onClick.isExecuting && onClick.disabledDuringExecution || onClick.execute();
    }, handleEvent = (e) => {
      e.preventDefault(), e.stopPropagation(), executeAction();
    };
    return { tabIndex: tabIndex ?? 0, role: "button", onClick: handleEvent, onKeyDown: (e) => {
      "Enter" !== e.key && " " !== e.key || e.target !== e.currentTarget || handleEvent(e);
    } };
  }
}

function usePersistentState(key, initialValue) {
  if ("string" != typeof key || 0 === key.length)
    throw new AssertionError("Key must be defined");
  const widgetId = reactExports.useContext(WidgetIdContext);
  reactExports.useDebugValue(`usePersistentState(${key}, ${widgetId})`), useEnsureConstantValues(key, widgetId);
  const slotName = `hook:${key}`, [slot$, setSlot] = useStoreBackendValue(widgetId, slotName);
  useOwnStoreBackendSlot(widgetId, slotName);
  const setValue = reactExports.useCallback((newValueOrBuilder) => {
    newValueOrBuilder instanceof Function ? setValue(newValueOrBuilder(readUntracked(slot$))) : void 0 !== newValueOrBuilder ? (assertIsValidPersistableValue(newValueOrBuilder), setSlot(JSON.parse(JSON.stringify(newValueOrBuilder)))) : setSlot(void 0);
  }, [slot$]);
  return reactExports.useMemo(() => {
    void 0 === readUntracked(slot$) && setValue("function" == typeof initialValue ? initialValue() : initialValue);
  }, []), [useDependableValue(slot$), setValue];
}
function assertIsValidPersistableValue(value) {
  if (!["boolean", "number", "string"].includes(typeof value) && null !== value)
    if (Array.isArray(value))
      value.forEach(assertIsValidPersistableValue);
    else {
      if (!isJson(value))
        throw new AssertionError(`usePersistentState: received non-primitive value ${value}`);
      Object.values(value).forEach(assertIsValidPersistableValue);
    }
}

function useHistoryFrameId() {
  const description = `useCurrentFormId(${reactExports.useContext(WidgetIdContext)})`;
  reactExports.useDebugValue(description);
  const [form$] = useStoreBackendValue(pageScope, "form"), formId$ = reactExports.useMemo(() => fromComputation$(description, () => ensure(form$.dependOn())[0].getHistoryId()), []);
  return useDependableValue(formId$);
}

function preProcessMenus(menus) {
  return identifyMenus(menus, "").flatMap(filterMenu);
}
function identifyMenus(menus, idPrefix) {
  return menus.map((menu, index) => {
    const stableId = `${idPrefix}${index}`;
    return { stableId, caption: menu.caption, icon: menu.icon, altCaption: menu.altCaption, action: menu.action, items: menu.items ? identifyMenus(menu.items, `${stableId}-`) : void 0 };
  });
}
function filterMenu(menu) {
  if (menu.action && !menu.action.isAuthorized)
    return [];
  if (menu.items) {
    const filteredItems = menu.items.flatMap(filterMenu);
    return filteredItems.length ? [{ ...menu, items: filteredItems }] : [];
  }
  return [menu];
}
function createAnchor(widgetName, menuItem, expanded, activate, props = {}) {
  const caption = menuItem.caption?.value ?? "", hasChildren = menuItem.items?.length;
  return jsxRuntimeExports.jsxs("a", { ...props, className: classNames(`mx-name-${widgetName}-${menuItem.stableId}`, props.className), href: "#", role: "menuitem", title: caption, onClick: (e) => {
    e.preventDefault(), e.stopPropagation(), activate(menuItem);
  }, onKeyDown: (e) => {
    "Enter" !== e.key && " " !== e.key || (e.preventDefault(), e.stopPropagation(), activate(menuItem));
  }, "aria-haspopup": !!hasChildren || void 0, "aria-expanded": hasChildren ? expanded : void 0, children: [menuItem.icon ? jsxRuntimeExports.jsx(Icon, { icon: menuItem.icon.value, altText: menuItem.caption?.value ? void 0 : menuItem.altCaption?.value }) : null, " " + caption, props.children] });
}
function useMenuActiveItem() {
  const [activeItemId, setActiveItemId] = useNavigationActiveItem();
  return [activeItemId, reactExports.useCallback((menuItem) => {
    (void 0 === menuItem.action || menuItem.action.canExecute && (!menuItem.action.disabledDuringExecution || !menuItem.action.isExecuting)) && (menuItem.action?.execute(), setActiveItemId(menuItem.stableId));
  }, [])];
}
function useNavigationActiveItem() {
  const currentFormId = useHistoryFrameId(), [formToItemIdMapping, setFormToItemIdMapping] = usePersistentState("activeItem", () => ({ [currentFormId]: null })), [activeItemId, setActiveItemId] = reactExports.useState(formToItemIdMapping[currentFormId] ?? void 0), previousFormId = reactExports.useRef(currentFormId);
  return previousFormId.current !== currentFormId && (currentFormId in formToItemIdMapping ? setActiveItemId(formToItemIdMapping[currentFormId] ?? void 0) : setFormToItemIdMapping({ ...formToItemIdMapping, [currentFormId]: activeItemId ?? null }), previousFormId.current = currentFormId), [activeItemId, setActiveItemId];
}

function NavigationTree(props) {
  const [activeItemId, setActiveItem] = useMenuActiveItem(), [expandedItemIds, setExpandedItemIds] = usePersistentState("expandedItems", []);
  function onClick(menu) {
    menu.items?.length ? setExpandedItemIds(expandedItemIds.includes(menu.stableId) ? expandedItemIds.filter((id) => id !== menu.stableId) : expandedItemIds.concat([menu.stableId])) : setActiveItem(menu);
  }
  return jsxRuntimeExports.jsx("div", { className: classNames("mx-navigationtree", props.class), style: props.style, tabIndex: -1, children: jsxRuntimeExports.jsx("div", { className: "navbar-inner", children: function renderTree(menuItems) {
    return jsxRuntimeExports.jsx("ul", { role: "menu", children: menuItems.map((menu, index) => {
      const hasChildren = Boolean(menu.items?.length);
      return jsxRuntimeExports.jsxs("li", { className: classNames({ "mx-navigationtree-has-items": hasChildren, "mx-navigationtree-collapsed": hasChildren && !expandedItemIds.includes(menu.stableId) }), role: "none", children: [createAnchor(props.name, menu, expandedItemIds.includes(menu.stableId), onClick, { className: classNames({ active: activeItemId === menu.stableId, dropbox: hasChildren }), children: hasChildren ? jsxRuntimeExports.jsx("span", { className: "caret" }) : null }), hasChildren && renderTree(menu.items)] }, index);
    }) });
  }(preProcessMenus(props.menu)) }) });
}

function SidebarToggle(props) {
  return jsxRuntimeExports.jsx(ActionButton, { ...props, action: (selector = `[data-button-id="${props.buttonId}"]`, { canExecute: true, isAuthorized: true, isExecuting: false, disabledDuringExecution: false, execute: () => {
    const scrollcontainerId = document.querySelector(selector)?.closest(".mx-scrollcontainer[data-scrollcontainer-id]")?.getAttribute("data-scrollcontainer-id");
    scrollcontainerId ? window.__mx_ScrollContainer_SidebarToggle?.[scrollcontainerId]?.() : console.warn("Can't find toggleable region. Make sure the widget is placed in a scroll container with a toggleable region");
  } }) });
  var selector;
}

const WidgetVariableProperty = asProperty(({ slot, type, initialValue }, store, widgetId) => {
  const [slot$, setSlot] = store.useSlot(widgetId, slot);
  void 0 === readUntracked(slot$) && void 0 !== initialValue && setSlot(initialValue);
  const defaultFormatter = createNonEnumFormatter(type, {}), submittedValue$ = fromComputation$(`Submitted value '${slot}' for widget ${widgetId}`, () => slot$.dependOn()), [unsubmittedValue$, setUnsubmittedValue] = useValue(`Unsubmitted value of widget variable '${slot}' for widget ${widgetId}`, void 0), formatter = observable.box(defaultFormatter, { deep: false });
  let validator;
  const previousSubmittedValue$ = getPreviousValue$(submittedValue$);
  return fromComputation$(`Widget variable '${slot}' for widget ${widgetId}`, () => {
    const submitted = submittedValue$.dependOn();
    previousSubmittedValue$.dependOn() !== submitted && runActionInComputed(() => setUnsubmittedValue(void 0));
    const unsubmitted = unsubmittedValue$.dependOn(), value = void 0 !== unsubmitted && "unparsed" === unsubmitted.state ? void 0 : void 0 !== unsubmitted ? unsubmitted.value : submitted, displayValue = void 0 !== unsubmitted && "unparsed" === unsubmitted.state ? unsubmitted.value : formatter.get().format(void 0 !== unsubmitted ? unsubmitted.value : submitted);
    return { status: "available", validation: void 0 !== unsubmitted ? unsubmitted.message : void 0, universe: void 0, readOnly: false, formatter: formatter.get(), value, displayValue, isList: false, setValidator: (v) => validator = v, setFormatter: action((f) => formatter.set(f ?? defaultFormatter)), setTextValue: action((v) => function(value2) {
      const parseResult = formatter.get().parse(value2);
      parseResult.valid ? setValue(parseResult.value) : setUnsubmittedValue({ state: "unparsed", value: value2, message: translate("mendix.lib.Validations", "invalid_value") });
    }(v)), setValue: action((v) => setValue(v)) };
  });
  function setValue(value) {
    assertIsNonEnumValue(value, type, true);
    const validation = void 0 !== validator ? validator(value) : void 0;
    void 0 !== validation ? setUnsubmittedValue({ state: "parsed", value, message: validation }) : setSlot(value);
  }
});

let rightToLeft;
function isRightToLeft() {
  if (void 0 === rightToLeft) {
    const session = getSession();
    rightToLeft = "rtl" === session.getConfig("uiconfig.direction");
  }
  return rightToLeft;
}

var NavigationKeys, NavigationCommand;
!function(NavigationKeys2) {
  NavigationKeys2[NavigationKeys2.UpDown = 0] = "UpDown", NavigationKeys2[NavigationKeys2.LeftRight = 1] = "LeftRight";
}(NavigationKeys || (NavigationKeys = {})), function(NavigationCommand2) {
  NavigationCommand2[NavigationCommand2.FORWARD = 0] = "FORWARD", NavigationCommand2[NavigationCommand2.BACKWARD = 1] = "BACKWARD";
}(NavigationCommand || (NavigationCommand = {}));
class RovingTabIndex {
  constructor(keys, container, childQuery = findNavigableDescendants) {
    this.children = [], this.currentIndex = -1, this.focused = false, this.updating = false, this.shiftingFocus = false, this.mutationObserver = new MutationObserver(this.onMutation.bind(this)), this.keys = keys, this.container = container, this.childQuery = childQuery, this.keyListener = this.createKeyListener(), this.focusInListener = this.createFocusInListener(), this.focusOutListener = this.createFocusOutListener(), this.addListeners(), this.handleMutation();
  }
  onMutation(_records) {
    this.handleMutation();
  }
  handleMutation() {
    const children = (elements = this.childQuery(this.container), Array.isArray(elements) ? elements : Array.from(elements).filter((e) => e instanceof HTMLElement)).filter((c) => !c.hasAttribute("data-roving-inactive"));
    var elements;
    this.doWithoutMutations(() => this.updateChildren(children));
  }
  setChildQuery(childQuery = findNavigableDescendants) {
    this.childQuery = childQuery;
  }
  setOnActiveRowChange(callback) {
    this.onActiveRowChange = callback;
  }
  setContainer(newContainer) {
    this.container !== newContainer && (this.removeListeners(), this.container = newContainer, this.addListeners(), this.handleMutation());
  }
  updateChildren(newChildren) {
    const oldCurrent = this.getCurrentElement();
    if (function(oldChildren, newChildren2) {
      if (a = oldChildren, b = newChildren2, a.length === b.length && a.every((e, i) => e === b[i]))
        return false;
      var a, b;
      const oldSet = /* @__PURE__ */ new Set();
      return oldChildren.forEach((v) => oldSet.add(v)), newChildren2.forEach((v) => {
        oldSet.delete(v) || v.setAttribute("data-roving-tabindex", "");
      }), oldSet.forEach((v) => unmanageElement(v)), true;
    }(this.children, newChildren) && (this.children = newChildren.slice()), oldCurrent) {
      const newIndex = newChildren.indexOf(oldCurrent);
      if (this.setCurrentIndex(-1 !== newIndex ? newIndex : this.findValidIndex(false, 0)), this.focused) {
        const newCurrent = this.getCurrentElement();
        setTimeout(() => this.restoreFocus(oldCurrent !== newCurrent), 0);
      }
    } else
      this.updateTabIndices();
    this.updateState();
  }
  restoreFocus(force) {
    if (this.shiftingFocus && !force)
      return;
    const active = getFocus(), current = this.getCurrentElement();
    (force || !active || current && current !== active && current.contains(active)) && this.focusCurrentElement();
  }
  updateState() {
    const current = this.getCurrentElement();
    current && isInteractive(current) || (this.setCurrentIndex(this.findValidIndex()), this.focused && this.focusCurrentElement());
  }
  destroy() {
    this.mutationObserver.disconnect(), this.removeListeners(), this.children.forEach(unmanageElement);
  }
  addListeners() {
    this.container.addEventListener("keydown", this.keyListener), this.container.addEventListener("focusin", this.focusInListener), this.container.addEventListener("focusout", this.focusOutListener);
  }
  removeListeners() {
    this.container.removeEventListener("keydown", this.keyListener), this.container.removeEventListener("focusin", this.focusInListener), this.container.removeEventListener("focusout", this.focusOutListener);
  }
  doWithoutMutations(callback) {
    const wasUpdating = this.updating;
    wasUpdating || (this.updating = true, this.mutationObserver.disconnect()), callback(), wasUpdating || (this.mutationObserver.observe(this.container, { childList: true, attributes: true, subtree: true }), this.updating = false);
  }
  createKeyListener() {
    return (e) => {
      const command = this.getNavigationCommand(e);
      if (null !== command) {
        e.preventDefault();
        const reverse = command.valueOf() === NavigationCommand.BACKWARD.valueOf();
        this.setCurrentIndex(this.findValidIndex(reverse)), this.focusCurrentElement();
      }
    };
  }
  createFocusInListener() {
    return (e) => {
      const target = getHTMLElement(ensure(e.target));
      let newIndex = -1, current = target;
      for (; current && (newIndex = this.children.indexOf(current), -1 === newIndex); )
        current = current.parentElement;
      -1 !== newIndex && this.setCurrentIndex(newIndex), target && target !== current && !isNavigableElement(target) && window.setTimeout(() => this.focusCurrentElement(), 0), this.focused = true;
    };
  }
  createFocusOutListener() {
    return (e) => {
      const current = this.getCurrentElement(), relatedTarget = getHTMLElement(ensure(e.relatedTarget ?? document.activeElement));
      this.shiftingFocus = true, relatedTarget && this.container.contains(relatedTarget) || window.setTimeout(() => {
        this.focused = false;
      }, 0), ensure(e.target) === current && window.setTimeout(() => {
        isInteractive(current) && null !== current.parentNode || this.doWithoutMutations(() => {
          this.updateState(), this.focusCurrentElement();
        });
      }, 0), window.setTimeout(() => {
        this.shiftingFocus = false;
      }, 0);
    };
  }
  getNavigationCommand(e) {
    switch (this.keys) {
      case NavigationKeys.UpDown:
        switch (e.key) {
          case "ArrowUp":
          case "Up":
            return NavigationCommand.BACKWARD;
          case "ArrowDown":
          case "Down":
            return NavigationCommand.FORWARD;
        }
        break;
      case NavigationKeys.LeftRight: {
        const rtl = isRightToLeft();
        switch (e.key) {
          case "ArrowLeft":
          case "Left":
            return rtl ? NavigationCommand.FORWARD : NavigationCommand.BACKWARD;
          case "ArrowRight":
          case "Right":
            return rtl ? NavigationCommand.BACKWARD : NavigationCommand.FORWARD;
        }
        break;
      }
    }
    return null;
  }
  setCurrentIndex(index) {
    this.currentIndex = index, this.updateTabIndices(), this.onActiveRowChange && this.onActiveRowChange(index);
  }
  focusCurrentElement() {
    const current = this.getCurrentElement();
    current && current.focus();
  }
  updateTabIndices() {
    this.doWithoutMutations(() => {
      this.children.forEach((c, i) => c.setAttribute("tabindex", i === this.currentIndex ? "0" : "-1"));
    });
  }
  findValidIndex(reverse = false, offset = 1, startIndex = this.currentIndex) {
    const newIndex = reverse ? findLastIndexInArray(this.children, isInteractive, startIndex - offset) : findFirstIndexInArray(this.children, isInteractive, startIndex + offset);
    return -1 !== newIndex ? newIndex : reverse ? findFirstIndexInArray(this.children, isInteractive) : findLastIndexInArray(this.children, isInteractive);
  }
  getCurrentElement() {
    return -1 !== this.currentIndex ? this.children[this.currentIndex] : null;
  }
}
function unmanageElement(e) {
  e.removeAttribute("tabindex"), e.removeAttribute("data-roving-tabindex");
}
function findFirstIndexInArray(elements, predicate, startIndex = 0) {
  const index = elements.slice(startIndex).findIndex(predicate);
  return -1 === index ? -1 : index + startIndex;
}
function findLastIndexInArray(elements, predicate, startIndex = elements.length - 1) {
  const index = elements.slice(0, startIndex + 1).reverse().findIndex(predicate);
  return -1 === index ? -1 : startIndex - index;
}
function findNavigableDescendants(element, output = []) {
  for (let i = 0, len = element.children.length; i < len; i++) {
    const child = element.children.item(i);
    isHTMLElement(child) && ((child.hasAttribute("data-roving-tabindex") || isNavigableElement(child)) && output.push(child), findNavigableDescendants(child, output));
  }
  return output;
}
function isInteractive(element) {
  return function(element2) {
    const computedStyle = window.getComputedStyle(element2);
    return "visible" === computedStyle.visibility && "none" !== computedStyle.display;
  }(element) && function(element2) {
    return !element2.disabled;
  }(element);
}
function useRovingTabIndex(elementRef, navigationKeys, childQuery) {
  reactExports.useLayoutEffect(() => {
    const rovingTabIndex = new RovingTabIndex(navigationKeys, ensure(elementRef.current), childQuery);
    return () => rovingTabIndex.destroy();
  }, [elementRef, navigationKeys, childQuery]);
}

function NavigationList(props) {
  const [activeItemId, setActiveItemId] = useNavigationActiveItem(), tabListNode = reactExports.useRef(null);
  return useRovingTabIndex(tabListNode, NavigationKeys.UpDown, reactExports.useCallback((element) => element.querySelectorAll(":scope > li"), [])), jsxRuntimeExports.jsx("ul", { className: classNames("mx-list", "mx-navigationlist", props.class), style: props.style, ref: tabListNode, children: (menus = props.items, menus.map((item, index) => ({ ...item, stableId: index.toString() })).filter((item) => false !== item.visible?.value)).map((item, index) => jsxRuntimeExports.jsx("li", { className: classNames(item.class, "mx-navigationlist-item", { active: item.stableId === activeItemId }), style: item.style, onClick: (e) => handleClick(e, item), onKeyDown: (e) => {
    "Enter" !== e.key && " " !== e.key || handleClick(e, item);
  }, role: void 0 !== item.action ? "button" : void 0, children: item.content }, index)) });
  var menus;
  function handleClick(e, item) {
    e.preventDefault(), e.stopPropagation(), setActiveItemId(item.stableId), !item.action?.canExecute || item.action.disabledDuringExecution && item.action.isExecuting || item.action.execute();
  }
}

const Label = (props) => jsxRuntimeExports.jsx("label", { id: props.id, className: props.class, style: props.style, children: jsxRuntimeExports.jsx(InlineText, { caption: props.caption }) });

const AssociationProperty = asProperty((config, store, widgetId, propertyPath) => {
  const description = `${widgetId}/${propertyPath}`, submittedValue$ = getSubmittedValue$(config, store, widgetId, propertyPath, description), object$ = fromComputation$("Parent object of association", () => mapL(submittedValue$.dependOn(), (submittedValue) => submittedValue.object)), endPointPath = `${config.attribute}/${config.endpointEntity}`;
  switch (config.type) {
    case "Reference":
      return associationValue$(getObjectByPath$(object$, endPointPath, store), (v) => v?.id, (v) => v ? [v] : [], isObjectItem, (attrValue, availableItems) => {
        const item = availableItems.find((it) => it.id === attrValue);
        return { match: item, isFullMatch: item?.id === attrValue };
      });
    case "ReferenceSet":
      return associationValue$(getObjectsByPath$(object$, endPointPath, store), (v) => v?.map((o) => o.id) ?? [], (v) => v ?? [], isObjectItemArray, (attrValue, availableItems) => {
        const items = attrValue?.map((id) => availableItems.find((it) => it.id === id)).filter((i) => void 0 !== i);
        return { match: items ?? [], isFullMatch: items?.length === attrValue?.length };
      });
  }
  function associationValue$(refObjects$, toAttributeValue, toItemsArray, isValidType, findItems) {
    let customValidator;
    const [valueSet$, setValueSet] = useValue("Object from setValue", void 0), getValidationMessage = useValidationMessage(store, config, toAttributeValue), [dataSourceObjects$] = store.useSlot(widgetId, `${config.selectableObjectsId}/items`), [limit$] = store.useSlot(widgetId, `${config.selectableObjectsId}/limit`), [formSuspended$] = store.useSlot(pageScope, "formSuspended"), currentRefObjectItem$ = getCurrentRefObjectItem$(description, refObjects$, config);
    let availableItems = [], firstLoadDone = false;
    const currentReferencedObjects$ = fromComputationWithDeepEquality$(`Referenced object of ${description}`, () => {
      const dsObjects = dataSourceObjects$.dependOn() ?? loading(), isDataSourceLoading = "loading" === dsObjects.status;
      availableItems = "available" === dsObjects.status ? dsObjects.value : "unavailable" === dsObjects.status ? [] : availableItems, firstLoadDone || (firstLoadDone = !isDataSourceLoading);
      const value = valueSet$.dependOn(), invalidValue = invalidValue$.dependOn(), rootAssociationAttr = mapL(submittedValue$.dependOn(), (submittedValue) => submittedValue.attribute);
      if (invalidValue)
        return available(invalidValue);
      if (isDataSourceLoading && !firstLoadDone)
        return loading();
      if ("available" === rootAssociationAttr.status) {
        const attrValue = rootAssociationAttr.value, { match, isFullMatch } = findItems(attrValue, availableItems);
        if (isFullMatch)
          return available(match);
        const formSuspended = formSuspended$.dependOn();
        return !config.restrictToDataSource || isDataSourceLoading || 0 === readUntracked(limit$) || formSuspended ? value && deepEqual$1(toAttributeValue(value), rootAssociationAttr.value) ? available(value) : currentRefObjectItem$.dependOn() : (function(value2) {
          setTimeout(action(() => {
            "loading" === readUntracked(dataSourceObjects$).status || readUntracked(formSuspended$) || setValue(value2);
          }));
        }(match), loading());
      }
      return rootAssociationAttr;
    }), { validation$, setValidation, invalidValue$ } = getValidation$(submittedValue$, (_) => {
      const referencedObjects = readUntracked(currentReferencedObjects$);
      return "available" !== referencedObjects.status ? void 0 : referencedObjects.value;
    }, getValidationMessage, () => customValidator, config, store, widgetId, description), onChangeArguments$ = getActionArguments$(config.onChange.argMap, store, widgetId), [form$] = store.useSlot(pageScope, "form"), submittedValueWithReference$ = fromComputation$(`Readonly & Status value of ${description}`, () => "loading" === currentReferencedObjects$.dependOn().status ? loading() : submittedValue$.dependOn()), value$ = withFirstLoadDoneSharing$(fromComputation$(`Modifiable value of ${description}`, () => {
      const currentReferencedObjects = currentReferencedObjects$.dependOn(), validation = validation$.dependOn(), submittedValueWithReference = submittedValueWithReference$.dependOn(), readOnly = "available" !== submittedValueWithReference.status || submittedValueWithReference.value.readOnly, status = submittedValueWithReference.status, value = "available" !== currentReferencedObjects.status ? void 0 : currentReferencedObjects.value;
      return { status, value: Object.freeze(value), type: config.type, validation, setValue: action((newValue) => "available" !== status ? noDataAvailableError(config, widgetId) : readOnly ? noWriteAccessError(config, widgetId) : setValue(newValue)), readOnly, setValidator: (newCustomValidator) => {
        customValidator = newCustomValidator;
      } };
    }), store, widgetId, propertyPath);
    return asReloadable$(value$, (v) => ({ value: v.value }));
    function setValue(newValue) {
      const submittedValue = readUntracked(submittedValue$);
      if ("available" !== submittedValue.status)
        return void noDataAvailableError(config, widgetId);
      if (void 0 !== newValue && !isValidType(newValue))
        throw new AssertionError(`Value ${newValue} is not assignable to association of type ${config.type}.`);
      const parentObject = submittedValue.value;
      if (toItemsArray(newValue).some((o) => !isDataSourceValid(o, config.selectableObjectsId)))
        throw new AssertionError(`An ObjectItem can only be passed to an association property that belongs to the same selectable objects source. ${description}`);
      const object = parentObject.object, newValidation = getValidationMessage(newValue, object, customValidator);
      if (void 0 !== newValidation)
        setValidation(newValidation, newValue);
      else {
        const oldValue = object.get2(config.attribute), newAttrValue = toAttributeValue(newValue);
        !function(v1, v2) {
          const convert = (v) => Array.isArray(v) ? v.sort((a, b) => a.localeCompare(b)) : v;
          return deepEqual$1(convert(v1), convert(v2));
        }(oldValue, newAttrValue) ? (parentObject.object.set2(config.attribute, newAttrValue ?? ""), setValueSet(newValue), raiseOnChange(onChangeArguments$, form$, config.onChange, widgetId)) : setValidation(void 0, void 0);
      }
    }
  }
});
function getCurrentRefObjectItem$(description, refObjects$, config) {
  return fromComputation$(`Referenced objects of ${description}`, () => mapL(refObjects$.dependOn(), (refObjects) => Array.isArray(refObjects) ? refObjects.map((o) => toObjectItem(o, config.selectableObjectsId)) : toObjectItem(refObjects, config.selectableObjectsId)));
}

function getClientPagedList$(config, store, widgetId, parameters$, fetchData) {
  const { fetchTrigger$, retrieveParameters$, silentlyResetOffset, needTotalCount$, delayedRetrieveParametersSetters, immediateRetrieveParametersSetters, loadedCallback } = objectListTrigger(config, [], store, widgetId, parameters$), fetchResult$ = fromRequest$(`Load data of ${widgetId}`, () => {
    const trigger = fetchTrigger$.dependOn();
    return "available" !== trigger.status ? trigger : trigger.value.empty ? available({ main: [], extra: [] }) : fetchData(trigger.value.parameters);
  }), objects$ = withObjectKeeping$(widgetId, store, fetchResult$, (x) => x.main.concat(x.extra)), filter$ = fromComputation$(`Filter of ${widgetId}`, () => retrieveParameters$.dependOn().filter), filteredObjects$ = fromRequest$(`Filtered data of ${widgetId}`, () => {
    const allObjects = objects$.dependOn();
    return "available" !== allObjects.status || 0 === allObjects.value.main.length ? mapL(allObjects, (a) => a.main) : async function(filter, mxObjects) {
      if (!filter)
        return mxObjects;
      const expression = convertFilterExpressionToExpression(filter);
      return (await Promise.all(mxObjects.map((mxObject) => evaluateExpressionValue(expression, mxObject).then((result) => result ? mxObject : void 0)))).filter((obj) => !!obj);
    }(filter$.dependOn(), allObjects.value.main).then((result) => available(result));
  }), sortOrder$ = fromComputation$(`Sort order of ${widgetId}`, () => retrieveParameters$.dependOn().sortOrder), sortedObjects = fromRequest$(`Sorted data of ${widgetId}`, () => {
    const unsortedObjects = filteredObjects$.dependOn();
    return "available" !== unsortedObjects.status || 0 === unsortedObjects.value.length ? unsortedObjects : async function(sortOrder, mxObjects) {
      if (0 === sortOrder.length)
        return mxObjects;
      return (await Promise.all(mxObjects.map((mxObject) => Promise.all(sortOrder.map((sortInstruction) => {
        const sortValueExpression = convertSortInstructionToExpression(sortInstruction);
        return evaluateExpressionValue(sortValueExpression, mxObject);
      })).then((sortValues) => ({ sortValues, mxObject }))))).sort(getCompareFunction(sortOrder)).map((sortItem) => sortItem.mxObject);
    }(sortOrder$.dependOn(), unsortedObjects.value).then((result) => available(result));
  }), markAsLoaded = () => store.addUpdateCallback(loadedCallback), listValue$ = fromComputation$(`Paged data of ${widgetId}`, () => {
    const objects = sortedObjects.dependOn();
    switch (objects.status) {
      case "loading":
        return { status: "loading", ...readUntracked(retrieveParameters$), ...immediateRetrieveParametersSetters };
      case "unavailable":
        return markAsLoaded(), { status: "unavailable", ...retrieveParameters$.dependOn(), ...immediateRetrieveParametersSetters };
      case "available":
        let { offset, limit, sortOrder, filter } = retrieveParameters$.dependOn();
        return offset >= objects.value.length && (offset = 0, scheduleSideEffect(silentlyResetOffset)), markAsLoaded(), { status: "available", offset, limit, sortOrder, filter, items: objects.value.slice(offset, offset + limit).map((obj) => toObjectItem(obj, config.dataSourceId)), totalCount: needTotalCount$.dependOn() ? objects.value.length : void 0, hasMoreItems: offset + limit < objects.value.length || 0 === limit, ...delayedRetrieveParametersSetters };
    }
  }), storedItemsListValue$ = withSetItemsStoreSideEffect$(widgetId, config.dataSourceId, listValue$, store);
  return asReloadableListValue$(withFirstLoadDoneSharing$(storedItemsListValue$, store, widgetId));
}

const logger$1 = LogManager.get().getLogger(), AssociationObjectListProperty = asProperty((config, store, widgetId) => {
  const friendlyId = toFriendlyId(widgetId), context$ = getSubscribedObjectState$(store, config.scope), clientSideResult$ = config.directPath ? getObjectsByPath$(context$, config.directPath, store, true) : fromConstant$(available("cacheMiss"));
  return getClientPagedList$(config, store, widgetId, context$, async function(context) {
    const clientSideResult = clientSideResult$.dependOn();
    if ("available" === clientSideResult.status && "cacheMiss" !== clientSideResult.value)
      return logFetchEnd({ mxObjects: clientSideResult.value, extra: [] }), available({ main: clientSideResult.value, extra: [] });
    let result;
    contextGuid = context.getGuid(), logger$1.debug(`Fetching data with context '${contextGuid}' and operationId '${config.operationId}' for widget ${friendlyId}`);
    var contextGuid;
    try {
      result = await onlineData().retrieveByPath(context.getGuid(), config.operationId);
    } catch (e) {
      return function(widgetId2, e2) {
        handleError(new Error(`An error occurred while executing association data source for widget ${toFriendlyId(widgetId2)}: ${e2 instanceof Error ? e2.message : e2}`));
      }(widgetId, e), unavailable();
    }
    return logFetchEnd(result), available({ main: result.mxObjects, extra: result.extra });
  });
  function logFetchEnd({ mxObjects, extra }) {
    logger$1.debug(`Received ${mxObjects.length} objects and ${extra.length} objects over schema for widget ${friendlyId}`, "object ids:", mxObjects.map((o) => o.getGuid()), "extra ids:", extra.map((o) => o.getGuid()));
  }
});

const logger = LogManager.get().getLogger(), ListenObjectProperty = asProperty((config, store, widgetId) => {
  const friendlyId = toFriendlyId(widgetId), [selection$] = store.useSlot(config.listenTo, "selection"), guid$ = fromComputation$(`Selected object for widget ${friendlyId}`, () => {
    const selection = selection$.dependOn(), guid = Array.isArray(selection) ? selection[selection.length - 1] : selection;
    return guid ? available(guid) : unavailable();
  });
  return fromObjectProperty$(config, store, widgetId, guid$, (guid) => {
    if (mx.isOffline())
      return logFetchStart(guid), getByGuid(guid).then((mxObject) => (logFetchEnd(mxObject, []), mxObject ? available(mxObject) : unavailable()));
    const cachedObject = getData().getCachedObject(guid);
    return cachedObject ? (function(guid2) {
      logger.debug(`Using selected object '${guid2}' for widget ${friendlyId}`);
    }(guid), cachedObject.isUnavailable() ? unavailable() : available(cachedObject)) : (logFetchStart(guid), onlineData().retrieveByPath(guid, ensure(config.operationId)).then(({ mxObjects, extra }) => {
      const mxObject = mxObjects.length ? mxObjects[0] : void 0;
      return logFetchEnd(mxObject, extra), mxObject ? available(mxObject) : unavailable();
    }));
  });
  function logFetchStart(guid) {
    logger.debug(config.operationId ? `Fetching selected object '${guid}' with operationId '${config.operationId}' for widget ${friendlyId}` : `Fetching selected object '${guid}' for widget ${friendlyId}`);
  }
  function logFetchEnd(mxObject, extra) {
    const guid = mxObject?.getGuid();
    logger.debug(guid ? `Received selected object '${guid}' and ${extra.length} objects over schema for widget ${friendlyId}` : `Received no selected object for widget ${friendlyId}`, "extra ids:", extra.map((o) => o.getGuid()));
  }
});

class CheckBox extends reactExports.Component {
  constructor() {
    super(...arguments), this.onChangeHandler = this.onChange.bind(this), this.onEnterHandler = this.onEnter.bind(this), this.onLeaveHandler = this.onLeave.bind(this);
  }
  onChange(e) {
    this.props.value.setValue(e.target.checked);
  }
  onEnter() {
    this.dispatchAction("onEnter");
  }
  onLeave() {
    this.dispatchAction("onLeave");
  }
  render() {
    const value = this.props.value.value, textValue = "available" === this.props.value.status && void 0 !== value ? this.props.value.formatter.format(value) : "", renderAsText = this.props.value.readOnly && "text" === this.props.readOnlyStyle;
    return jsxRuntimeExports.jsxs(reactExports.Fragment, { children: [renderAsText ? jsxRuntimeExports.jsx("div", { className: "form-control-static", children: textValue }) : this.renderInput(), this.renderLabel(), jsxRuntimeExports.jsx(Alert, { id: `${this.props.id}-error`, validation: this.props.value.validation })] });
  }
  renderLabel() {
    return this.props.caption && jsxRuntimeExports.jsx("label", { className: "control-label", htmlFor: this.props.id, children: this.props.caption.value });
  }
  renderInput() {
    return jsxRuntimeExports.jsx("input", { type: "checkbox", id: this.props.id, tabIndex: this.props.tabIndex, onChange: this.onChangeHandler, onFocus: this.onEnterHandler, onBlur: this.onLeaveHandler, checked: this.props.value.value ?? false, disabled: this.props.value.readOnly, ...getAriaLabelProps(this.props.ariaLabel?.value), ...getValidationAriaProps(this.props.value.validation, this.props.id) });
  }
  dispatchAction(property) {
    const prop = this.props[property];
    "available" === this.props.value.status && prop && prop.execute();
  }
}

const ListAssociationProperty = asProperty((config, store, widgetId, propertyPath) => {
  const description = `List reference "${widgetId}/${propertyPath}"`;
  function associationValue$(refObjects$) {
    const currentReferencedObjects$ = getCurrentRefObjectItem$(description, refObjects$, config), value$ = fromComputation$(`Readable value of ${description}`, () => {
      const currentReferencedObjects = currentReferencedObjects$.dependOn(), status = currentReferencedObjects.status, value = "available" !== currentReferencedObjects.status ? void 0 : currentReferencedObjects.value;
      return { status, value: Object.freeze(value) };
    });
    return asReloadable$(value$, (v) => ({ value: v.value }));
  }
  const endPointPath = `${config.attribute}/${config.endpointEntity}`, associationPath = config.path ? `${config.path}/${endPointPath}` : endPointPath, id = ensureAssociationId(associationPath, config.dataSourceId, config.selectableObjectsId), filterable = config.filterable && !(mx.isOffline() && config.path);
  return registerAssociationType(id, config.type), registerFilterAttribute(id, filterable), listItemProperty(function(object) {
    const rootObject$ = fromConstant$(available(object));
    switch (config.type) {
      case "Reference":
        return associationValue$(getObjectByPath$(rootObject$, associationPath, store));
      case "ReferenceSet":
        return associationValue$(getObjectsByPath$(rootObject$, associationPath, store));
    }
  }, description, config.dataSourceId, { type: config.type, id, filterable });
});

var loadingGif = "mxclientsystem/images/loading.gif";
function ListView(props) {
  useIsFirstRender() && props.listValue.limit === Number.POSITIVE_INFINITY && 0 !== props.pageSize && props.listValue.setLimit(props.pageSize);
  const [isLoadingMore, setIsLoadingMore] = reactExports.useState(false), dataAtLastLoadMore = reactExports.useRef();
  if (!isLoadingMore || "available" === props.listValue.status && props.listValue.items === dataAtLastLoadMore.current || setIsLoadingMore(false), "available" === props.listValue.status && props.listValue.items && props.selection) {
    const currentSelection = props.selection.value?.[0], fixedSelection = props.listValue.items[0]?.id;
    currentSelection !== fixedSelection && props.listValue.items.every((i) => i.id !== currentSelection) && props.selection.setValue(fixedSelection ? [fixedSelection] : void 0);
  }
  const [searchValue, setSearchValue] = reactExports.useState(getSearchValueFromFilter);
  reactExports.useEffect(() => setSearchValue(getSearchValueFromFilter()), [props.listValue.filter]), reactExports.useEffect(function() {
    const trimmedSearchValue = searchValue.trim();
    if (trimmedSearchValue === getSearchValueFromFilter())
      return;
    clearTimeout(searchTimeout.current), searchTimeout.current = window.setTimeout(() => {
      const searchExpressions = "" !== trimmedSearchValue ? props.searchAttributes.map((s) => contains(attribute(s.id), literal(trimmedSearchValue))) : [], filter = 0 === searchExpressions.length ? void 0 : 1 === searchExpressions.length ? searchExpressions[0] : or(...searchExpressions);
      props.listValue.setFilter(filter);
    }, 500);
  }, [searchValue]);
  const searchTimeout = reactExports.useRef(), contentProps = { listValue: props.listValue, itemTemplate: props.itemTemplate, selection: props.selection, onClick: props.onClick, isLoadingMore };
  return jsxRuntimeExports.jsxs("div", { className: classNames("mx-listview", props.class, { "mx-listview-clickable": null != props.onClick }), style: props.style, children: [props.searchAttributes && jsxRuntimeExports.jsxs("div", { className: "mx-listview-searchbar", children: [jsxRuntimeExports.jsx("input", { type: "text", placeholder: translate("mxui.widget.ListView", "search"), className: "form-control", value: searchValue, onChange: (e) => setSearchValue(e.target.value), "aria-label": translate("mxui.widget.ListView", "search") }), jsxRuntimeExports.jsx("button", { className: "btn mx-button", onClick: () => {
    "" !== searchValue ? setSearchValue("") : (props.listValue.reload(), 0 !== props.pageSize && props.listValue.setLimit(props.pageSize));
  }, "aria-label": translate("mxui.widget.ListView", "refresh"), title: translate("mxui.widget.ListView", "refresh"), children: jsxRuntimeExports.jsx("span", { className: classNames("mx-icon-filled", searchValue ? "mx-icon-remove" : "mx-icon-refresh") }) })] }), reactExports.useMemo(() => jsxRuntimeExports.jsx(ListViewContent, { ...contentProps }), Object.values(contentProps)), props.listValue.hasMoreItems && !isLoadingMore && jsxRuntimeExports.jsxs("button", { type: "button", className: "btn mx-button mx-listview-loadMore", onClick: function(e) {
    e.stopPropagation(), props.listValue.setLimit(props.listValue.limit + props.pageSize), setIsLoadingMore(true), dataAtLastLoadMore.current = props.listValue.items;
  }, children: [jsxRuntimeExports.jsx("span", { className: "mx-icon-filled mx-icon-repeat" }), " ", translate("mxui.widget.ListView", "load_more")] })] });
  function getSearchValueFromFilter() {
    const filter = props.listValue.filter;
    if (void 0 !== filter) {
      const condition = "or" === filter.name ? filter.args[0] : filter;
      if ("contains" === condition.name && "string" === condition.arg2.valueType)
        return condition.arg2.value;
    }
    return "";
  }
}
function ListViewContent(props) {
  return jsxRuntimeExports.jsxs("ul", { children: [0 === props.listValue.items?.length && jsxRuntimeExports.jsx("li", { className: "mx-listview-empty", children: jsxRuntimeExports.jsx("label", { children: translate("mxui.widget.ListView", "no_items") }) }), (props.listValue.items ?? []).map((item, index) => {
    const selection = props.selection, onClick = props.onClick?.get(item), clickEventHandler = onClick ? (e) => function(e2, action) {
      e2.stopPropagation(), !action.canExecute || action.disabledDuringExecution && action.isExecuting || action.execute();
    }(e, onClick) : selection ? () => function(item2, selection2) {
      selection2.value?.includes(item2.id) || selection2.setValue([item2.id]);
    }(item, selection) : void 0;
    return jsxRuntimeExports.jsx("li", { className: classNames(`mx-name-index-${index}`, { selected: selection?.value?.includes(item.id) }), tabIndex: clickEventHandler ? 0 : -1, role: clickEventHandler ? "button" : void 0, onClick: clickEventHandler, onKeyDown: clickEventHandler ? (e) => function(e2, clickEventHandler2) {
      "Enter" !== e2.key && " " !== e2.key || (e2.preventDefault(), clickEventHandler2(e2));
    }(e, clickEventHandler) : void 0, children: jsxRuntimeExports.jsx("div", { className: "mx-dataview", "data-focusindex": "0", children: jsxRuntimeExports.jsx("div", { className: "mx-dataview-content", children: props.itemTemplate?.get(item) }) }) }, item.id);
  }), props.isLoadingMore && jsxRuntimeExports.jsx("li", { className: "mx-listview-loading", children: jsxRuntimeExports.jsx("img", { src: getStaticResourceUrl(loadingGif) }) })] });
}

function TabContainer(props) {
  const id = reactExports.useState(() => newId())[0], [selectedTabIndex, selectionHasChanged, setSelectedTabIndex] = function(tabs, defaultTab) {
    const [selectedTabIndex2, setSelectedTabIndex2] = usePersistentState("selectedTab", defaultTab);
    let visibleTabToSelect = selectedTabIndex2;
    for (; !isVisible(ensure(tabs[visibleTabToSelect])) && (visibleTabToSelect = (visibleTabToSelect + 1) % tabs.length, visibleTabToSelect !== selectedTabIndex2); )
      ;
    visibleTabToSelect !== selectedTabIndex2 && setSelectedTabIndex2(visibleTabToSelect);
    const previousSelectionRef = reactExports.useRef(visibleTabToSelect), selectionHasChanged2 = previousSelectionRef.current !== visibleTabToSelect;
    previousSelectionRef.current = visibleTabToSelect;
    const forceUpdate = useForceUpdate();
    function selectTabIndex(tabIndex) {
      tabIndex === visibleTabToSelect ? (previousSelectionRef.current = -1, forceUpdate()) : setSelectedTabIndex2(tabIndex);
    }
    return tuple(visibleTabToSelect, selectionHasChanged2, selectTabIndex);
  }(props.tabs, props.defaultTab), tabsState = function(tabs, selectedTabIndex2, selectionHasChanged2) {
    const tabStateRef = reactExports.useRef(tabs.map((tab) => !tab.isDelayed && isVisible(tab) ? { key: 0 } : "hidden")), selectedTabState = ensure(tabStateRef.current[selectedTabIndex2]);
    "hidden" === selectedTabState ? tabStateRef.current[selectedTabIndex2] = { key: 0 } : selectionHasChanged2 && ensure(tabs[selectedTabIndex2]).refreshOnShow && (selectedTabState.key += 1);
    return tabStateRef.current;
  }(props.tabs, selectedTabIndex, selectionHasChanged), [invalidCounts, handleStore] = function(widgetName, length) {
    const [invalidCounts2, setInvalidCounts] = reactExports.useState(() => repeat(length, () => 0)), disposersRef = reactExports.useRef(repeat(length, () => {
    }));
    function handleStore2(store, index) {
      disposersRef.current[index]?.();
      const allInvalid$ = store.getAll$("isInvalid");
      disposersRef.current[index] = reaction(() => allInvalid$.dependOn().filter(Boolean).length, (invalidCount) => {
        setInvalidCounts((prevInvalidCounts) => {
          const newInvalidCounts = [...prevInvalidCounts];
          return newInvalidCounts[index] = invalidCount, newInvalidCounts;
        });
      }, { fireImmediately: false, name: `Validation of tab ${index} of ${widgetName}` });
    }
    return reactExports.useEffect(() => () => disposersRef.current.forEach((d) => d?.()), []), tuple(invalidCounts2, handleStore2);
  }(props.name, props.tabs.length), tabContainerNode = reactExports.useRef(null), tabListNode = reactExports.useRef(null), tabContentNode = reactExports.useRef(null);
  return useRovingTabIndex(tabListNode, NavigationKeys.LeftRight, reactExports.useCallback((element) => element.querySelectorAll("a"), [])), useLegacyResize(tabContainerNode, reactExports.useCallback(function(container) {
    const tabContent = ensure(tabContentNode.current);
    if (!container)
      return tabContent.style.height = "auto", void (tabContent.style.overflow = "");
    const parentBox = getBox(container), tabListBox = getBox(ensure(tabListNode.current)), remainder = parentBox.contentBox.height - tabListBox.marginBox.height;
    remainder > 100 ? (tabContent.style.height = `${remainder}px`, tabContent.style.overflow = "auto") : (tabContent.style.height = "auto", tabContent.style.overflow = "");
  }, [tabContentNode, tabListNode])), props.hoistedSelections?.forEach((s) => {
    const [value$, setValue] = useStoreBackendValue(s, "selection");
    setValue(readUntracked(value$));
  }), jsxRuntimeExports.jsxs("div", { className: classNames("mx-tabcontainer", props.class), style: props.style, "data-focusindex": props.tabIndex, ref: tabContainerNode, children: [jsxRuntimeExports.jsx("ul", { className: "nav nav-tabs mx-tabcontainer-tabs", role: "tablist", ref: tabListNode, children: props.tabs.map((tab, index) => jsxRuntimeExports.jsxs("li", { className: classNames({ active: selectedTabIndex === index }), style: isVisible(tab) ? void 0 : { display: "none" }, role: "presentation", onClick: (e) => {
    setSelectedTabIndex(index), e.preventDefault();
  }, children: [jsxRuntimeExports.jsxs("a", { href: "#", className: `mx-name-${tab.name}`, id: `${id}-t${index}`, "aria-controls": `${id}-p${index}`, role: "tab", "aria-selected": selectedTabIndex === index, children: [tab.caption.value, tab.badge && jsxRuntimeExports.jsx("span", { className: "mx-tabcontainer-badge", style: { display: tab.badge.value ? "inline-block" : "none" }, children: tab.badge.value })] }), ensure(invalidCounts[index]) > 0 && jsxRuntimeExports.jsx("span", { className: "mx-tabcontainer-indicator", children: invalidCounts[index] })] }, index)) }), jsxRuntimeExports.jsx("div", { className: "tab-content mx-tabcontainer-content", "data-focusindex": "0", ref: tabContentNode, children: props.tabs.map((tab, index) => {
    const tabState = ensure(tabsState[index]);
    return jsxRuntimeExports.jsx("div", { className: classNames("tab-pane mx-tabcontainer-pane", { active: selectedTabIndex === index }), style: isVisible(tab) ? void 0 : { display: "none" }, id: `${id}-p${index}`, role: "tabpanel", "aria-labelledby": `${id}-t${index}`, children: jsxRuntimeExports.jsx(NestedStoreProvider, { namespace: `${props.widgetId}.${index}`, setupStore: reactExports.useCallback((store) => handleStore(store, index), []), children: "hidden" !== tabState ? jsxRuntimeExports.jsx(PageFragment, { renderKey: tabState.key, children: tab.content }) : null }) }, index);
  }) })] });
}
function isVisible(tab) {
  return !tab.isVisible || "loading" === tab.isVisible.status && void 0 === tab.isVisible.value || Boolean(tab.isVisible.value);
}

const DOCUMENT_DIR = "documents", THUMBNAIL_DIR = "thumbnails", DEFAULT_FILES_DIRECTORY = "files";
function getChangedDate(obj) {
  return ensure(obj?.attributes.changedDate).value ?? null;
}
function getFsFileName(guid, changeDate) {
  return guid.replace(/:/g, "_") + "@" + (null != changeDate && "" !== changeDate ? changeDate.toString() : "local");
}
function createFilePath(obj, offlineToRuntimeMap, rootDir) {
  return rootDir + getFsFileName(offlineToRuntimeMap.map(obj.guid), (getChangedDate(obj) ?? "").toString());
}
function toAbsolutePath(rootDirectory, path) {
  return rootDirectory + "/" + path;
}
async function gatherFileInstructions(requestFileObjectsJSON, responseObjects, areRequestObjectsUploaded, allRuntimeToOfflineMap, fileBackend) {
  const allOfflineToRuntimeMap = allRuntimeToOfflineMap.reverse(), fileDocumentCache = createMemoizedCache((entity) => isFileDocument(entity)), responseFileObjs = responseObjects.filter((obj) => fileDocumentCache(obj.objectType)), responseFileObjsMap = indexByKey((obj) => allRuntimeToOfflineMap.map(obj.guid))(responseFileObjs), instructions = { downloads: [], moves: [], deletes: [] }, [availableFileObjs, unavailableFileObjs] = partition((obj) => obj.guid in responseFileObjsMap, requestFileObjectsJSON);
  if (unavailableFileObjs.filter((obj) => hasContents(obj)).forEach((obj) => deleteFile(obj)), !areRequestObjectsUploaded) {
    const fileObjMap = indexByKey((obj) => allOfflineToRuntimeMap.map(obj.guid))(requestFileObjectsJSON);
    responseFileObjs.filter((obj) => !(obj.guid in fileObjMap)).filter(hasContents).forEach(downloadFile);
  }
  const [dirtyFileObjects, nonDirtyFileObjects] = partition((obj) => isDirtyGuid(obj.guid), availableFileObjs);
  return nonDirtyFileObjects.filter((obj) => getChangedDate(obj) !== getChangedDate(responseFileObjsMap[obj.guid])).forEach((obj) => {
    hasContents(obj) && deleteFile(obj), downloadFile(responseFileObjsMap[obj.guid]);
  }), dirtyFileObjects.filter((obj) => {
    const runtimeObj = responseFileObjsMap[obj.guid];
    return hasContents(obj) && hasContents(runtimeObj) && getChangedDate(obj) !== getChangedDate(runtimeObj);
  }).forEach((obj) => {
    if (areRequestObjectsUploaded) {
      const runtimeObj = responseFileObjsMap[obj.guid];
      !function(objBefore, objAfter, moveThumbnail = true) {
        const oldFilePath = getFilePath(objBefore, false), newFilePath = getFilePath(objAfter, false);
        if (instructions.moves.push([oldFilePath, newFilePath, objBefore.guid]), moveThumbnail && isImage(objBefore.objectType)) {
          const oldThumbPath = getFilePath(objBefore, true), newThumbPath = getFilePath(objAfter, true);
          instructions.moves.push([oldThumbPath, newThumbPath, objBefore.guid]);
        }
      }(obj, runtimeObj, false), isImage(obj.objectType) && downloadThumbnail(runtimeObj);
    } else
      deleteFile(obj), downloadFile(responseFileObjsMap[obj.guid]);
  }), dirtyFileObjects.filter((o) => hasContents(o) && !hasContents(responseFileObjsMap[o.guid])).forEach((o) => deleteFile(o)), dirtyFileObjects.filter((o) => !hasContents(o) && hasContents(responseFileObjsMap[o.guid])).forEach((o) => downloadFile(responseFileObjsMap[o.guid])), instructions;
  function downloadFile(obj) {
    const tempFilePath = getTemporaryDownloadPath(obj, false);
    instructions.downloads.push([getDownloadURL(obj, false), tempFilePath, obj.guid]), instructions.moves.push([tempFilePath, getFilePath(obj, false), obj.guid]), isImage(obj.objectType) && downloadThumbnail(obj);
  }
  function downloadThumbnail(imageObj) {
    const tempThumbPath = getTemporaryDownloadPath(imageObj, true);
    instructions.downloads.push([getDownloadURL(imageObj, true), tempThumbPath, imageObj.guid]), instructions.moves.push([tempThumbPath, getFilePath(imageObj, true), imageObj.guid]);
  }
  function deleteFile(obj) {
    const filePath = getFilePath(obj, false);
    instructions.deletes.push(filePath), isImage(obj.objectType) && instructions.deletes.push(getFilePath(obj, true));
  }
  function getDownloadURL(obj, isThumb) {
    return getRemoteDynamicResourceUrl(obj.guid, getChangedDate(obj), isThumb);
  }
  function getFilePath(objJson, isThumb) {
    return createFilePath(objJson, allOfflineToRuntimeMap, fileBackend.toAbsolutePath((isThumb ? "thumbnails" : "documents") + "/"));
  }
  function getTemporaryDownloadPath(obj, isThumb) {
    return getFilePath(obj, isThumb) + "_tmp";
  }
  function hasContents(obj) {
    return true === ensure(obj.attributes.HasContents).value;
  }
}
async function executeFileInstructions({ downloads, moves, deletes }, fileBackend, logger) {
  const stopwatch = new Stopwatch();
  void 0 !== downloads && (logger?.trace(`Downloading ${downloads.length} file documents.`), stopwatch.reset(), await Promise.all(downloads.map(([source, destination]) => fileBackend.downloadFile(source, destination))), logger?.trace(`Downloaded ${downloads.length} file documents in ${stopwatch.measure()} milliseconds.`)), void 0 !== moves && (logger?.trace(`Moving ${moves.length} file objects.`), stopwatch.reset(), await Promise.all(moves.map(([source, destination]) => fileBackend.moveFile(source, destination))), logger?.trace(`Moved ${moves.length} file objects in ${stopwatch.measure()} milliseconds.`)), void 0 !== deletes && (logger?.trace(`Deleting ${deletes.length} file objects.`), stopwatch.reset(), await Promise.all(deletes.map((path) => fileBackend.removeFile(path))), logger?.trace(`Deleted ${deletes.length} file objects in ${stopwatch.measure()} milliseconds.`));
}
async function tempUploadFile(fileBackend, fileObjJson) {
  const filePath = "documents/" + getFsFileName(fileObjJson.guid, ensure(fileObjJson.attributes.changedDate).value), blob = await fileBackend.readFile(fileBackend.toAbsolutePath(filePath)), result = await async function(fileObjGuid, fileName, blob2, numberOfRetries) {
    for (let i = 0; i <= numberOfRetries; i++)
      try {
        return await upload(fileObjGuid, fileName, {}, blob2, {}, []);
      } catch (e) {
        if (!(i < numberOfRetries))
          throw e;
        {
          const timeout = Math.pow(2, i);
          await wait(timeout);
        }
      }
    throw new AssertionError();
  }("__sync__", "", blob, 2);
  return { tempGuid: result.commits[0], fileObjGuid: fileObjJson.guid };
}
async function downloadFiles(downloadFileInstructions, fileBackend, logger) {
  const rejectedGUIDs = [];
  for (let i = 0; i < downloadFileInstructions.length; i += 4) {
    const fileInstructions = downloadFileInstructions.slice(i, i + 4);
    await Promise.all(fileInstructions.map(async ([sourceUrl, downloadPath, guid]) => {
      try {
        await fileBackend.downloadFile(sourceUrl, downloadPath);
      } catch (e) {
        if (e instanceof ConnectionError)
          throw logger.trace(`Could not download file content for object ${guid} due to a connection errorSynchronization will be aborted`), e;
        logger.trace(`Could not download the file content for the object with guid ${guid} due to an error.This may be due to broken file content on the server. Synchronization will continue and ignore this object`, e), rejectedGUIDs.push(guid);
      }
    }));
  }
  return new Set(rejectedGUIDs);
}

const Migrations = [(lowLevelDatabaseAPI) => {
  const [addColumnQuery, addColumnParams] = [`ALTER TABLE "${METADATA_TABLE}" ADD ${(columnDescription = { name: SYNC_ID_COLUMN, type: "text" }).name} ${columnDescription.type} ${"text" === columnDescription.type ? "COLLATE NOCASE" : ""}`, []];
  var columnDescription;
  return lowLevelDatabaseAPI.inTransaction(async (tx) => {
    await tx.exec(addColumnQuery, addColumnParams);
    const dirtyGuids = (await tx.selectObjects(`SELECT "${GUID_COLUMN}" FROM "${METADATA_TABLE}" WHERE "dirty" = ?`, [1])).map((row) => row[GUID_COLUMN]), session = getSession(), syncIds = await async function(tx2, sessionId, count) {
      const [updateCounterQuery, updateCounterParams] = createUpdateCounterValue(count), [readCounterQuery, readCounterParams] = createGetDbMetaValue(DB_COUNTER_KEY);
      await tx2.exec(updateCounterQuery, updateCounterParams);
      const results = await tx2.selectObjects(readCounterQuery, readCounterParams), lastCounter = parseInt(ensure(results[0])[DB_VALUE_COLUMN], 10);
      return Array.from({ length: count }, (_item, idx) => {
        const rnd = Math.round(1e4 * Math.random());
        return `${sessionId}:${lastCounter - idx}:${rnd}`;
      });
    }(tx, session.getSessionObjectId(), dirtyGuids.length);
    await Promise.all(dirtyGuids.map(async (guid, idx) => tx.exec(`UPDATE ${METADATA_TABLE} SET ${SYNC_ID_COLUMN} = ? WHERE ${GUID_COLUMN} = ?`, [ensure(syncIds[idx]), guid])));
  });
}, (lowLevelDatabaseAPI) => lowLevelDatabaseAPI.inTransaction(async (tx) => {
  const tablesToMigrate = (await lowLevelDatabaseAPI.selectObjects("SELECT name FROM sqlite_master WHERE type='table' AND name NOT LIKE 'sqlite_%' AND name != 'android_metadata' AND name != ?", [DB_META_TABLE])).map((r) => r.name.toString()).filter((n) => !n.startsWith(getUserScopedNamePrefix()));
  await Promise.all(tablesToMigrate.map((table) => [tx.exec(`DROP TABLE IF EXISTS ${toUserScopedName(table)}`, []).then(() => tx.exec(`ALTER TABLE ${table} RENAME TO ${toUserScopedName(table)}`, []))]));
})].map((m, index) => ({ version: index + 1, apply: m }));
function executeSql([sql, parameters]) {
  return Transaction.inside((tx, resolve, reject) => {
    tx.executeSql(sql, parameters, (_, r) => {
      const rows = [];
      for (let i = 0; i < r.rows.length; i++)
        rows.push(r.rows.item(i));
      resolve(rows);
    }, (_, e) => (reject(e), true));
  });
}
class Transaction {
  constructor() {
    this.work = [];
  }
  chain(onFulfilled) {
    const result = new Transaction();
    return result.work.push(...this.work, { action: false, item: onFulfilled }), result;
  }
  async read(database) {
    return this.execute((resolve, reject) => database.readTransaction(resolve, reject));
  }
  async write(database) {
    return this.execute((resolve, reject) => database.transaction(resolve, reject));
  }
  async execute(executeInTx) {
    return new Promise((resolve, reject) => executeInTx((tx) => {
      const works = Array.from(this.work);
      !function process(previousResult) {
        previousResult instanceof Transaction && (works.unshift(...previousResult.work), previousResult = void 0);
        const work = works.shift();
        if (!work)
          return void resolve(previousResult);
        try {
          if (work.action)
            work.item(tx, process, reject);
          else {
            const newResult = work.item(previousResult);
            process(newResult);
          }
        } catch (e) {
          reject(e);
        }
      }(tx);
    }, reject));
  }
  static inside(action) {
    const result = new Transaction();
    return result.work.push({ action: true, item: action }), result;
  }
}
class ImportDataFromWebSqlMigration {
  constructor(database, webSqlDatabase) {
    this.database = database, this.webSqlDatabase = webSqlDatabase;
  }
  async apply() {
    0 !== (await executeSql(createCheckTableExistSqlQuery(METADATA_TABLE)).chain((rows) => executeSql(createCheckTableExistSqlQuery(toUserScopedName(METADATA_TABLE))).chain((moreRows) => [...rows, ...moreRows])).read(this.webSqlDatabase)).reduce((sum, row) => sum + Object.values(row)[0], 0) && await this.migrateSchemaAndDataFromWebSql();
  }
  async migrateSchemaAndDataFromWebSql() {
    const lowLevelWaSQLite = this.database.getLowLevelAPI(), rows = await executeSql(["SELECT tbl_name, sql FROM sqlite_master WHERE type='table' AND tbl_name NOT LIKE '__WebKit%'", []]).read(this.webSqlDatabase);
    await Promise.all(rows.map(async (row) => async function(wasqlite, webSqlDatabase, table, createTableStmt) {
      await wasqlite.inTransaction(async (tx) => {
        await tx.exec(createTableStmt, []);
        const dataRows = await executeSql([`SELECT * FROM "${table}"`, []]).read(webSqlDatabase);
        await Promise.all(dataRows.map((dataRow) => tx.exec(`INSERT OR IGNORE INTO "${table}" VALUES(${Object.keys(dataRow).map(() => "?").join(", ")})`, Object.values(dataRow)))), await executeSql([`DROP TABLE "${table}"`, []]).write(webSqlDatabase);
      });
    }(lowLevelWaSQLite, this.webSqlDatabase, row.tbl_name, row.sql)));
  }
}
class GuidMappingWithEntity {
  constructor(mapping, getEntityFun) {
    this.map = {}, mapping.forEach(([from, to]) => {
      const entity = getEntityFun(from) ?? getEntityFun(to);
      void 0 !== entity && (this.map[from] = [to, entity]);
    });
  }
  has(guid) {
    return void 0 !== this.map[guid];
  }
  get(guid) {
    return this.map[guid];
  }
  getGuid(guid) {
    const result = this.get(guid);
    if (void 0 === result)
      return;
    const [to] = result;
    return to;
  }
  getEntity(guid) {
    const result = this.get(guid);
    if (void 0 === result)
      return;
    const [, entity] = result;
    return entity;
  }
  entries() {
    return Object.entries(this.map).map(([from, [to, entity]]) => [from, to, entity]);
  }
}
async function synchronizeObjects({ dirtyMxObjects, syncedObjsOfflineToRuntimeMap, returnObjects, deletes = {}, extraGuidsToRetrieve = [], incompatibleObjectsJson = [], logger, database, fileBackend, offlineEntities }) {
  logger.trace(`Syncing of ${dirtyMxObjects.length} objects.`);
  const objectsJsons = dirtyMxObjects.map((object) => syncedObjsOfflineToRuntimeMap.mapMxObjectJSON(object.jsonData)), offlineObjects = dirtyMxObjects.filter((obj) => !isRuntimeGuid(syncedObjsOfflineToRuntimeMap.map(obj.getGuid())));
  logger.trace(`Creating guids for ${offlineObjects.length} offline objects.`);
  const stopwatch = new Stopwatch(), createdGuidsMapping = await async function(offlineMxObjects, requestGuids) {
    const numberOfGuidsPerEntity = offlineMxObjects.reduce((guidsPerEntity, o) => {
      const entity = o.getEntity();
      return guidsPerEntity[entity] = (guidsPerEntity[entity] ?? 0) + 1, guidsPerEntity;
    }, {}), createdGuids = {}, unavailableEntities = [];
    let requestData = buildCreateGuidsRequest();
    for (; Object.entries(requestData).length > 0; ) {
      const response2 = await requestGuids(requestData);
      if (0 === Object.keys(response2.success).length && 0 === response2.failure.length)
        throw new AssertionError("create_guids API did not return a valid response");
      Object.entries(response2.success).forEach(([entity, guids]) => {
        createdGuids[entity] = (createdGuids[entity] ?? []).concat(guids);
      }), unavailableEntities.push(...response2.failure), requestData = buildCreateGuidsRequest();
    }
    const offlineToRuntimeGuids = new OfflineToRuntimeGuidMapping();
    return offlineMxObjects.filter((o) => !unavailableEntities.includes(o.getEntity())).forEach((o) => {
      const runtimeGuid = createdGuids[o.getEntity()].shift();
      offlineToRuntimeGuids.add(o.getGuid(), runtimeGuid);
    }), offlineToRuntimeGuids;
    function buildCreateGuidsRequest() {
      return Object.entries(numberOfGuidsPerEntity).reduce((requestObj, [entity, totalNumberOfGuidsToCreate]) => {
        const numberOfGuidsCreated = createdGuids[entity]?.length ?? 0;
        return !unavailableEntities.includes(entity) && totalNumberOfGuidsToCreate > numberOfGuidsCreated && (requestObj[entity] = totalNumberOfGuidsToCreate - (createdGuids[entity]?.length ?? 0)), requestObj;
      }, {});
    }
  }(offlineObjects, createGuids);
  logger.trace(`Created guids for ${offlineObjects.length} offline objects in ${stopwatch.measure()} milliseconds.`), stopwatch.reset(), await async function(schema, offlineMxobjs, offlineToRuntimeGuids, fileBackend2, database2) {
    if (offlineMxobjs.some((obj) => isRuntimeGuid(obj.getGuid())))
      throw new AssertionError("Runtime objects are not expected here");
    const objsMap = indexMxObjectsByGuid(offlineMxobjs);
    await database2.usingWriteTransaction(async (tx) => {
      await tx.updateEntityGuids(offlineMxobjs.map((obj) => obj.getGuid()), new GuidMappingWithEntity(offlineToRuntimeGuids.entries(), (guid) => objsMap[guid]?.getEntity()), schema);
    });
    const documentsDir = fileBackend2.toAbsolutePath(DOCUMENT_DIR), moves = offlineMxobjs.filter((obj) => isFileDocumentWithContents(obj.jsonData)).map((obj) => {
      const newGuid = offlineToRuntimeGuids.map(obj.getGuid());
      return [documentsDir + "/" + getFsFileName(obj.getGuid(), ""), documentsDir + "/" + getFsFileName(newGuid, ""), newGuid];
    });
    await executeFileInstructions({ moves }, fileBackend2), syncedObjsRuntimeToOfflineMap.import(offlineToRuntimeGuids.reverse());
  }(offlineEntities, offlineObjects, createdGuidsMapping, fileBackend, database), logger.trace(`Updated offline guids with runtime guids in ${stopwatch.measure()} milliseconds.`);
  const objectJsonsWithRuntimeGuids = objectsJsons.map((objJson) => createdGuidsMapping.mapMxObjectJSON(objJson)), guidToSyncIdRecord = await retrieveSyncIds(objectJsonsWithRuntimeGuids.map((obj) => obj.guid), database);
  logger.trace("Uploading file documents."), stopwatch.reset();
  const tempUploadPairs = await Promise.all(objectJsonsWithRuntimeGuids.filter((obj) => isFileDocumentWithContents(obj)).concat(incompatibleObjectsJson.filter((objectJson) => isFileDocumentWithContentNonMetaCheck(objectJson))).map(async (fileObj) => {
    logger.trace(`Uploading file content of ${fileObj.objectType} with guid ${fileObj.guid}.`);
    const uploadStopwatch = new Stopwatch(), file = await tempUploadFile(fileBackend, fileObj);
    return logger.trace(`Uploaded file content of ${fileObj.objectType} with guid ${fileObj.guid} in ${uploadStopwatch.measure()} milliseconds.`), file;
  }));
  logger.trace(`Uploaded file documents in ${stopwatch.measure()} milliseconds.`);
  const changes = objectJsonsWithRuntimeGuids.map((objJson) => ({ guid: objJson.guid, syncId: guidToSyncIdRecord[objJson.guid], changes: createChange(objJson), ...isRuntimeGuid(objJson.guid) ? {} : { objectType: objJson.objectType } })), guidToSyncIdRecordObjectsWithUnknownSchema = await retrieveSyncIds(incompatibleObjectsJson.map((obj) => obj.guid), database), incompatibleChanges = incompatibleObjectsJson.map((objJson) => ({ guid: objJson.guid, objectType: objJson.objectType, syncId: guidToSyncIdRecordObjectsWithUnknownSchema[objJson.guid], changes: createChangeFromIncompatibleObjectsJson(objJson) })), fileGuidMapping = tempUploadPairs.reduce((tempUploadPairsAcc, pair) => pair.tempGuid ? { ...tempUploadPairsAcc, [pair.tempGuid]: pair.fileObjGuid } : tempUploadPairsAcc, {});
  logger.trace("Syncing objects with runtime."), stopwatch.reset();
  const response = returnObjects ? await synchronizeObjects$1(changes, fileGuidMapping, true, deletes, syncedObjsOfflineToRuntimeMap.map(extraGuidsToRetrieve)) : await synchronizeObjects$1(changes, fileGuidMapping, false, deletes, [], incompatibleChanges);
  return logger.trace(`Synced objects with runtime in ${stopwatch.measure()} milliseconds.`), { response, createdGuidsMapping };
}
async function retrieveSyncIds(guids, database) {
  const guidWithSyncIds = await database.usingReadTransaction((tx) => tx.retrieveSyncIds(guids));
  return Object.assign({}, ...guidWithSyncIds.map(([guid, syncId]) => ({ [guid]: syncId })));
}
async function generateSyncIds(transaction, sessionId, amount) {
  const lastNumber = await transaction.increaseAndGetUniqueId(amount);
  return Array.from({ length: amount }, (_item, idx) => {
    const rnd = Math.round(1e4 * Math.random());
    return `${sessionId}:${lastNumber - idx}:${rnd}`;
  });
}
async function deleteObjects(objectsToDelete, objectCache, fileBackend, schema, excludeEntitiesFromSync, database) {
  if (0 === objectsToDelete.length)
    return;
  const objects = uniqueBy(objectsToDelete, (obj) => obj.getGuid()), allOfflineToRuntimeGuidsMap = syncedObjsRuntimeToOfflineMap.reverse(), [runtimeObjects, peObjectsToDelete, committedPEObjects, onlineObjectsMap] = objects.reduce(([runtimeObjectsArr, peObjectsToDeleteArr, committedPEObjectsArr, onlineObjMap], obj) => {
    const isCommitted = !objectCache.isNew(obj.getGuid());
    isCommitted && isRuntimeGuid(allOfflineToRuntimeGuidsMap.map(obj.getGuid())) && runtimeObjectsArr.push(obj), obj.isPersistable() && (peObjectsToDeleteArr.push(obj), isCommitted && committedPEObjectsArr.push(obj));
    const entity = obj.getEntity();
    return offlineData().hasOnlineSyncMode(obj.getEntity()) && (onlineObjMap.has(entity) ? onlineObjMap.get(entity).push(obj.getGuid()) : onlineObjMap.set(entity, [obj.getGuid()])), [runtimeObjectsArr, peObjectsToDeleteArr, committedPEObjectsArr, onlineObjMap];
  }, [[], [], [], /* @__PURE__ */ new Map()]);
  if (onlineObjectsMap.size > 0) {
    const msg = ["An attempt to delete object(s) configured with 'online' synchronization mode in an offline context.", "Objects list:"];
    for (const [onlineEntity, guidsArray] of onlineObjectsMap)
      msg.push(`'${onlineEntity}': ${guidsArray.join(", ")}`);
    throw new DescribedError(msg.join("\n"));
  }
  const runtimePESyncableGuids = allOfflineToRuntimeGuidsMap.map(runtimeObjects.flatMap((obj) => obj.isPersistable() && !excludeEntitiesFromSync.has(obj.getEntity()) ? obj.getGuid() : [])), session = getSession();
  await database.usingWriteTransaction(async (tx) => {
    await tx.deleteEntitiesByGuid(committedPEObjects.map((obj) => allOfflineToRuntimeGuidsMap.map(obj.getGuid())));
    const syncIds = await generateSyncIds(tx, session.getSessionObjectId(), runtimePESyncableGuids.length);
    await tx.insertTombstones(runtimePESyncableGuids.map((guid, idx) => ({ guid, syncId: syncIds[idx] })));
    const deletedEntitiesObjectReferenceAssociationsPairsCache = createMemoizedCache((entity) => getEntityAssociationsPairs(entity, schema, false));
    return Promise.all(peObjectsToDelete.flatMap((obj) => Object.entries(deletedEntitiesObjectReferenceAssociationsPairsCache(obj.getEntity()) ?? {}).map(([entityName, attrs]) => Promise.all(attrs.map((attr) => tx.updateEntityDataReferringTo(entityName, allOfflineToRuntimeGuidsMap.map(obj.getGuid()), attr, null))))));
  });
  const getFilePath = (objJson, isThumb) => createFilePath(objJson, allOfflineToRuntimeGuidsMap, fileBackend.toAbsolutePath((isThumb ? THUMBNAIL_DIR : DOCUMENT_DIR) + "/")), deleteFilesInstructions = committedPEObjects.filter(({ jsonData }) => isFileDocumentWithContents(jsonData)).flatMap(({ jsonData }) => isImage(jsonData.objectType) ? [getFilePath(jsonData, false), getFilePath(jsonData, true)] : getFilePath(jsonData, false));
  executeFileInstructions({ deletes: deleteFilesInstructions }, fileBackend).catch(handleError);
  const guidsToDelete = objects.map((obj) => obj.getGuid()), allOtherCachedObjects = objectCache.getAllObjects().filter((obj) => !allOfflineToRuntimeGuidsMap.has(obj.getGuid()) && !guidsToDelete.includes(obj.getGuid())), cachedNPEEntities = unique(allOtherCachedObjects.flatMap((obj) => obj.isPersistable() ? [] : obj.getEntity())), deletedEntitiesAllAssociationsPairsCache = createMemoizedCache((entity) => getEntityAssociationsPairs(entity, [...schema, ...cachedNPEEntities], true)), deletedEntities = unique(objects.map((obj) => obj.getEntity())), allAssociations = deletedEntities.flatMap((e) => Object.values(deletedEntitiesAllAssociationsPairsCache(e) ?? {})).flat(), objectRefsToDeletedObjectsPairs = allOtherCachedObjects.flatMap((obj) => {
    const refGuidsPairs = allAssociations.flatMap((assoc) => {
      if (obj.has(assoc)) {
        const refToDelete = obj.getReferences(assoc).filter((guid) => guidsToDelete.includes(guid));
        return !obj.isReadonlyAttr(assoc) && refToDelete.length > 0 ? [[assoc, refToDelete]] : [];
      }
      return [];
    });
    return refGuidsPairs.length > 0 ? [[obj, new Map(refGuidsPairs)]] : [];
  }), referencingObjectsJsonsResets = objectRefsToDeletedObjectsPairs.map(([obj, refGuidsMap]) => {
    const newObjJson = clone(obj.jsonData);
    return refGuidsMap.forEach((guidsToRemoveFromRefs, ref) => {
      const currentVal = newObjJson.attributes[ref].value;
      obj.isObjectReferenceSet(ref) && Array.isArray(currentVal) ? newObjJson.attributes[ref].value = currentVal.filter((guid) => !guidsToRemoveFromRefs.includes(guid)) : newObjJson.attributes[ref].value = null;
    }), newObjJson;
  }), [resetsMap, changesMap] = allOtherCachedObjects.reduce(([resets, changes], obj) => {
    const objectGuid = obj.getGuid();
    return Object.entries(objectCache.getChanges(objectGuid)).filter(([maybeRefAttr, _attrValue]) => allAssociations.includes(maybeRefAttr)).forEach(([refAttr, refValue]) => {
      const currentRefValue = refValue.value;
      obj.isObjectReferenceSet(refAttr) || !guidsToDelete.includes(currentRefValue) ? Array.isArray(currentRefValue) && currentRefValue.some((guid) => guidsToDelete.includes(guid)) && (1 === currentRefValue.length || currentRefValue.every((guid) => guidsToDelete.includes(guid)) ? addResetToMap(resets, objectGuid, refAttr) : refValue.hash || function(map, guid, attr, value) {
        map.has(guid) || map.set(guid, {});
        ensure(map.get(guid))[attr] = { value };
      }(changes, objectGuid, refAttr, currentRefValue.filter((guid) => !guidsToDelete.includes(guid)))) : addResetToMap(resets, objectGuid, refAttr);
    }), [resets, changes];
  }, [/* @__PURE__ */ new Map(), /* @__PURE__ */ new Map()]);
  objectCache.onDelete(guidsToDelete), objectCache.setMxObjects(referencingObjectsJsonsResets), objectCache.removeChanges(Object.fromEntries(resetsMap)), objectCache.addChanges(Object.fromEntries(changesMap)), unmarkAsDirty(guidsToDelete.filter(isDirtyGuid)), runtimeObjects.forEach((obj) => {
    const maybeOfflineGuid = obj.getGuid();
    allOfflineToRuntimeGuidsMap.has(maybeOfflineGuid) && syncedObjsRuntimeToOfflineMap.remove(allOfflineToRuntimeGuidsMap.map(maybeOfflineGuid));
  });
  const attributeUpdates = objectRefsToDeletedObjectsPairs.flatMap(([obj, refs]) => Array.from(refs.keys()).map((ref) => ({ guid: obj.getGuid(), attr: ref })));
  function addResetToMap(map, guid, attr) {
    map.has(guid) || map.set(guid, []), ensure(map.get(guid)).push(attr);
  }
  await publish(...deletedEntities.map((entity) => ({ entity })), ...attributeUpdates, ...guidsToDelete.map((guid) => ({ guid })));
}
function isPushToClientInstruction(inst) {
  return "push_to_client" === inst.type;
}
function getGuidsPushedToClient(instructions) {
  return instructions.filter(isPushToClientInstruction).flatMap((instruction) => instruction.args.guids);
}
async function handleOfflineResponseObjects(runtimeGuidsToHandle, database, responseObjects, objectCache, offlineEntities, syncedObjsRuntimeToOfflineMap2, instantiatedObjectsRuntimeToOfflineMap = new RuntimeToOfflineGuidMapping(), tombstoneTableAction = "nothing") {
  const isOfflineEntity = function(offlineEntities2) {
    const entitySet = new Set(offlineEntities2), alreadyLoggedEntityWarnings = [];
    return (entity) => void 0 !== entity && (!!entitySet.has(entity) || (alreadyLoggedEntityWarnings.includes(entity) || (alreadyLoggedEntityWarnings.push(entity), LogManager.get().getLogger(LogNode.Synchronization).warn(`Object of type ${entity} cannot be pushed to client, skipping it.`)), false));
  }(offlineEntities), responseObjectsMap = indexMxObjectJsonsByGuid(responseObjects);
  await database.usingWriteTransaction(async (tx) => {
    if (runtimeGuidsToHandle.length > 0) {
      const objectMetas = await tx.retrieveMxObjectMetasByGuids(runtimeGuidsToHandle), guidToEntityMap = Object.assign({}, ...objectMetas.map((obj) => ({ [obj.guid]: obj.objectType }))), toInsert = [], toDelete = [];
      if (runtimeGuidsToHandle.forEach((runtimeGuid) => {
        const objectToPush = responseObjectsMap[runtimeGuid], entity = objectToPush?.objectType ?? guidToEntityMap[runtimeGuid];
        entity && isOfflineEntity(entity) && toDelete.push(runtimeGuid), entity && isOfflineEntity(objectToPush?.objectType) && toInsert.push(objectToPush);
      }), await tx.deleteEntitiesByGuid(toDelete), await tx.insertMxObjects(toInsert), "clean" === tombstoneTableAction && toInsert.length > 0) {
        const guidsToClear = Object.values(toInsert).map((objJson) => objJson.guid);
        await tx.deleteTombstones(guidsToClear);
      }
    }
    "reset" === tombstoneTableAction && await tx.truncateTombstones();
  }), runtimeGuidsToHandle.filter((runtimeGuid) => !Object.prototype.hasOwnProperty.call(responseObjectsMap, runtimeGuid)).forEach((runtimeGuid) => {
    let cachedGuid = runtimeGuid;
    instantiatedObjectsRuntimeToOfflineMap.has(runtimeGuid) ? cachedGuid = instantiatedObjectsRuntimeToOfflineMap.map(runtimeGuid) : syncedObjsRuntimeToOfflineMap2.has(runtimeGuid) && (cachedGuid = syncedObjsRuntimeToOfflineMap2.map(runtimeGuid));
    const cachedObj = objectCache.getObject(cachedGuid);
    null !== cachedObj && cachedObj.markAsUnavailable();
  }), runtimeGuidsToHandle.filter((runtimeGuid) => instantiatedObjectsRuntimeToOfflineMap.has(runtimeGuid)).forEach((runtimeGuid) => syncedObjsRuntimeToOfflineMap2.add(runtimeGuid, instantiatedObjectsRuntimeToOfflineMap.map(runtimeGuid))), unmarkAsDirty(runtimeGuidsToHandle.map((guid) => syncedObjsRuntimeToOfflineMap2.map(guid)));
}
function isEntityUpdate(update) {
  return "entity" in update;
}
function isObjectUpdate(update) {
  return "guid" in update && !("attr" in update);
}
function shouldGenerateUpdateFor(entity, offlineEntities) {
  return !getEntityMeta(entity)?.isPersistable || offlineEntities.includes(entity);
}
async function executeOfflineMicroflow(operationId, mfArgs, schema, objectCache, database, fileBackend) {
  const microflowParameterGuids = getGuidsFromRuntimeArguments(mfArgs);
  if (microflowParameterGuids.some((guid) => !objectCache.has(guid)))
    throw new AssertionError("Microflow parameter is not available in the client state");
  const [changes, objects] = getRequestDataForMicroflow(objectCache, operationId, microflowParameterGuids), objectsWithoutReadonlyAttrs = objects.map((jsonData) => jsonData.hash ? jsonData : { ...jsonData, attributes: Object.fromEntries(Object.entries(jsonData.attributes).filter(([_, value]) => !value.readonly)) }), runtimeResponse = await runtimeOperation(operationId, mfArgs, changes, objectsWithoutReadonlyAttrs), offlineResponse = function({ actionResult, objects: objects2 = [], changes: changes2 = {}, resets = {}, deletes: deletes2 = [], instructions = [] }, objectCache2) {
    const guidsPushedToClient = getGuidsPushedToClient(instructions), nonPersistableGuids = filterNonPersistableGuids(unique([...objects2.map((obj) => obj.guid), ...Object.keys(changes2), ...Object.keys(resets), ...deletes2]), objects2, objectCache2), offlineMicroflowResponseGuids = new Set(guidsPushedToClient.concat(nonPersistableGuids));
    return { actionResult, newpersistable: [], commits: [], committedObjectsOmitted: false, deletes: filterGuids(deletes2, offlineMicroflowResponseGuids), changes: filterKeys(changes2, offlineMicroflowResponseGuids), resets: filterKeys(resets, offlineMicroflowResponseGuids), instructions: filterInstructions(instructions, objects2, objectCache2), objects: objects2.filter((obj) => offlineMicroflowResponseGuids.has(obj.guid)) };
  }(function({ actionResult, newpersistable = [], objects: objects2 = [], changes: changes2 = {}, commits = [], committedObjectsOmitted = false, resets = {}, deletes: deletes2 = [], instructions = [] }, runtimeToOfflineMapping, objectCache2) {
    const mappedResponse = { actionResult, committedObjectsOmitted, newpersistable, commits, deletes: runtimeToOfflineMapping.map(deletes2), instructions: remapInstructions(instructions, runtimeToOfflineMapping), objects: objects2.map((objJson) => runtimeToOfflineMapping.mapMxObjectJSON(objJson)), changes: remapResponseChanges(changes2, objects2, objectCache2, runtimeToOfflineMapping), resets: remapResets(resets, runtimeToOfflineMapping) };
    return mappedResponse;
  }(runtimeResponse, syncedObjsRuntimeToOfflineMap, objectCache), objectCache), runtimeGuidsToPushSet = new Set(getGuidsPushedToClient(runtimeResponse.instructions ?? [])), runtimeGuidsToPush = Array.from(runtimeGuidsToPushSet), objectsToPush = runtimeResponse.objects?.filter((o) => runtimeGuidsToPushSet.has(o.guid)) ?? [], offlineFileEntities = schema.filter((entity) => isFileDocument(entity)), allFileObjects = (await Promise.all(offlineFileEntities.map((entity) => offlineData().retrieveByGuids(entity, runtimeGuidsToPush)))).flat(), updates = await async function(offlineResponse2, offlineEntities, objectCache2, database2) {
    const updates2 = gatherUpdates(objectCache2, offlineResponse2), guidsToPush = unique(offlineResponse2.instructions?.filter(isPushToClientInstruction).flatMap((instruction) => instruction.args.guids) ?? []), objectGuidMap = indexMxObjectJsonsByGuid(offlineResponse2.objects ?? []), [availableGuids, unavailableGuids] = partition((guid) => void 0 !== objectGuidMap[guid], guidsToPush), guidToEntityMap = Object.assign({}, ...availableGuids.map((guid) => ({ [guid]: objectGuidMap[guid].objectType })));
    if (unavailableGuids.length > 0) {
      const unavailableRuntimeGuids = syncedObjsRuntimeToOfflineMap.reverse().map(unavailableGuids);
      await database2.usingReadTransaction((tx) => tx.retrieveMxObjectMetasByGuids(unavailableRuntimeGuids)).then((rows) => {
        rows.forEach((row) => {
          const maybeRuntimeGuid = row.guid, maybeOfflineGuid = syncedObjsRuntimeToOfflineMap.map(maybeRuntimeGuid);
          guidToEntityMap[maybeOfflineGuid] = row.objectType;
        });
      });
    }
    const entityUpdates = unique(updates2.filter(isEntityUpdate).map((entityUpdate) => entityUpdate.entity).concat(Object.values(guidToEntityMap))).filter((entity) => shouldGenerateUpdateFor(entity, offlineEntities)).map((entity) => ({ entity })), guidsToObjectUpdate = Object.entries(guidToEntityMap).filter(([_, entity]) => shouldGenerateUpdateFor(entity, offlineEntities)).map(([guid]) => guid), objectUpdates = unique(updates2.filter(isObjectUpdate).map((update) => update.guid).concat(guidsToObjectUpdate)).filter((guid) => objectCache2.has(guid)).map((guid) => ({ guid }));
    return [...updates2.filter((u) => "attr" in u && !guidsToObjectUpdate.includes(u.guid)), ...objectUpdates, ...entityUpdates];
  }(offlineResponse, schema, objectCache, database), { downloads, moves, deletes } = await gatherFileInstructions(allFileObjects, objectsToPush, false, syncedObjsRuntimeToOfflineMap, fileBackend);
  0 !== runtimeGuidsToPush.length && (await executeFileInstructions({ downloads }, fileBackend), await handleOfflineResponseObjects(runtimeGuidsToPush, database, runtimeResponse.objects ?? [], objectCache, schema, syncedObjsRuntimeToOfflineMap, new RuntimeToOfflineGuidMapping(), 0 !== objectsToPush.length ? "clean" : "nothing"), await executeFileInstructions({ moves }, fileBackend), executeFileInstructions({ deletes }, fileBackend).catch(handleError)), await handleState(objectCache, offlineResponse), updates.length > 0 && await publish(...updates);
  const result = runtimeResponse.actionResult;
  return null == result ? void 0 : runtimeValueToExpressionVariable(result.value, result.type, (guid) => ensure(objectCache.getObject(guid)));
}
function filterNonPersistableGuids(guids, objects, objectCache) {
  const objMap = indexMxObjectJsonsByGuid(objects);
  return guids.filter((guid) => {
    const object = objMap[guid] ?? objectCache.getObject(guid)?.jsonData;
    return object && false === getEntityMeta(object.objectType)?.isPersistable;
  });
}
function filterGuids(guids, filterList) {
  return guids.filter((guid) => filterList.has(guid));
}
function filterKeys(responsePart, filterList) {
  return Object.assign({}, ...Object.keys(responsePart).filter((guid) => filterList.has(guid)).map((guid) => ({ [guid]: responsePart[guid] })));
}
function filterInstructions(instructions, objects, objectCache) {
  return instructions.flatMap((instruction) => {
    switch (instruction.type) {
      case "refresh_class":
        const classnames = instruction.args.classnames.filter((entity) => false === getEntityMeta(entity)?.isPersistable);
        return classnames.length > 0 ? [{ ...instruction, args: { classnames } }] : [];
      case "refresh_object_list":
        const nonPersistableGuids = filterNonPersistableGuids(instruction.args.ObjectIds, objects, objectCache);
        return nonPersistableGuids.length > 0 ? [{ ...instruction, args: { ObjectIds: nonPersistableGuids } }] : [];
      case "push_to_client":
        return instruction;
      default:
        return [];
    }
  });
}
function remapResponseChanges(responseChanges, responseObjects, cache, runtimeToOfflineMapping) {
  return Object.assign({}, ...Object.entries(responseChanges).map(([guid, responseChange]) => {
    const entity = (responseObjects.find((o) => o.guid === guid) ?? ensure(cache.getObject(runtimeToOfflineMapping.map(guid))).jsonData).objectType, entityMeta = getEntityMeta(entity);
    return entityMeta ? { [runtimeToOfflineMapping.map(guid)]: runtimeToOfflineMapping.mapChange(responseChange, entityMeta) } : { [guid]: responseChange };
  }));
}
function remapResets(resetsToRemap, runtimeToOfflineMapping) {
  return Object.assign({}, ...Object.keys(resetsToRemap).map((guid) => ({ [runtimeToOfflineMapping.map(guid)]: resetsToRemap[guid] })));
}
function remapInstructions(responseInstructions, runtimeToOfflineMapping) {
  return responseInstructions.map((instruction) => "push_to_client" === instruction.type ? { ...instruction, args: { guids: runtimeToOfflineMapping.map(instruction.args.guids) } } : instruction);
}
async function downloadObjects(database, fileBackend, cache, syncConfig, uploadedObjsEntityToGuidsMap, resetPreservedEntities, logger, incompatibleEntities = /* @__PURE__ */ new Set()) {
  try {
    return await async function(database2, fileBackend2, cache2, { schema, preserveData, fetch, never, online }, uploadedObjsEntityToGuidsMap2, resetPreservedEntities2, incompatibleEntities2, logger2) {
      const preservedEntityToUploadedGuidsMap = resetPreservedEntities2 ? {} : Object.fromEntries(Object.entries(uploadedObjsEntityToGuidsMap2).filter(([entity]) => preserveData.includes(entity)).map(([entity, guids]) => [entity, guids])), stopwatch = new Stopwatch();
      logger2.trace("Fetching objects.");
      const fetchedObjs = await async function(fetch2, preservedEntityToUploadedGuidsMap2, logger3) {
        return (await Promise.all([...fetch2.map(({ store, xpath }) => fetchObjectsByXPath(store, xpath)), fetchUploadedPreservedObjects()])).flat();
        async function fetchObjectsByXPath(expectedObjectType, xpath) {
          logger3.trace(`Fetching objects by XPath: ${xpath}`);
          const stopwatch2 = new Stopwatch(), json = await retrieveByXPath(xpath);
          return logger3.trace(`Fetched ${json.objects?.length ?? 0} objects by XPath ${xpath} in ${stopwatch2.measure()} milliseconds.`), extractObjectsFromJSON(expectedObjectType, ensure(json.objects), ensure(json.resultGuids));
        }
        async function fetchUploadedPreservedObjects() {
          const guidsToRetrieve = Object.values(preservedEntityToUploadedGuidsMap2).flat();
          if (0 === guidsToRetrieve.length)
            return [];
          logger3.trace(`Fetching ${guidsToRetrieve.length} preserved objects.`);
          const stopwatch2 = new Stopwatch(), json = await retrieveByIds(guidsToRetrieve, {});
          return logger3.trace(`Fetched  ${guidsToRetrieve.length === json.objects?.length ? guidsToRetrieve.length : `${json.objects?.length ?? 0} of ${guidsToRetrieve.length}`} preserved objects in ${stopwatch2.measure()} milliseconds.`), Object.entries(preservedEntityToUploadedGuidsMap2).flatMap(([entity, guids]) => extractObjectsFromJSON(entity, ensure(json.objects), guids.filter((guid) => json.resultGuids.includes(guid))));
        }
        function extractObjectsFromJSON(expectedObjectType, responseObjects, guids) {
          const jsonObjMap = responseObjects.reduce((map, val) => (map[val.guid] = val, map), {});
          return guids.map((guid) => {
            const jsonObj = jsonObjMap[guid];
            return jsonObj.objectType = expectedObjectType, jsonObj;
          });
        }
      }(fetch, preservedEntityToUploadedGuidsMap, logger2);
      logger2.trace(`Fetched ${fetchedObjs.length} objects and completed in ${stopwatch.measure()}ms.`), logger2.trace("Calculating file operations.");
      const [downloadFileInstructions, filesToRemove] = await async function(fetchedObjs2, database3, fileBackend3, preserveData2, resetPreservedEntities3) {
        const preservedGuidsWithChangeDates = resetPreservedEntities3 ? [] : await async function(database4, preservedEntities) {
          if (preservedEntities.some((entity) => !isFileDocument(entity)))
            throw new AssertionError("Non-file document entity passed.");
          return database4.usingReadTransaction(async (tx) => (await Promise.all(preservedEntities.map((entity) => tx.retrieveMxObjects(entity, void 0, { attributes: [SystemAttribute.ChangedDate] })))).flat().map((obj) => [obj.guid, obj.attributes[SystemAttribute.ChangedDate]?.value]));
        }(database3, preserveData2.filter((entity) => isFileDocument(entity))), documentsDir = fileBackend3.toAbsolutePath(DOCUMENT_DIR) + "/", filesToPreserve = preservedGuidsWithChangeDates.map(([guid, changedDate]) => documentsDir + getFsFileName(guid, changedDate ?? null)), thumbnailsDir = fileBackend3.toAbsolutePath(THUMBNAIL_DIR) + "/", thumbnailsToPreserve = preservedGuidsWithChangeDates.map(([guid, changedDate]) => thumbnailsDir + getFsFileName(guid, changedDate ?? null)), [downloadFileInstructions2, filesToRemove2] = await computeFilesToDownloadAndDelete(fileBackend3, fetchedObjs2, filesToPreserve, false), [downloadThumbInstructions, thumbsToRemove] = await computeFilesToDownloadAndDelete(fileBackend3, fetchedObjs2, thumbnailsToPreserve, true);
        return [downloadFileInstructions2.concat(downloadThumbInstructions), filesToRemove2.concat(thumbsToRemove)];
      }(fetchedObjs, database2, fileBackend2, preserveData, resetPreservedEntities2);
      logger2.trace(`${downloadFileInstructions.length} files to be downloaded, ${filesToRemove.length} files to be removed`), logger2.trace("Downloading files."), stopwatch.reset();
      const failedDownloadGuids = await downloadFiles(downloadFileInstructions, fileBackend2, logger2), fetchedObjsExcludingFailedDownloads = failedDownloadGuids.size > 0 ? fetchedObjs.filter((obj) => !failedDownloadGuids.has(obj.guid)) : fetchedObjs;
      logger2.trace(`Downloaded ${downloadFileInstructions.length - failedDownloadGuids.size} files in ${stopwatch.measure()} milliseconds.`), logger2.trace("Compute cached objects to update or delete."), stopwatch.reset();
      const [updatedObjs, guidsToDelete] = function(cache3, fetchedObjs2, entitiesToPreserve, uploadedObjsEntityToGuidsMap3, resetPreservedEntities3) {
        const syncedObjsOfflineToRuntimeMap = syncedObjsRuntimeToOfflineMap.reverse(), fetchedObjsWithCached = cache3.getAllObjects().filter((mxobj) => {
          if (!mxobj.isPersistable() || cache3.isNew(mxobj.getGuid()))
            return false;
          if (resetPreservedEntities3 || !entitiesToPreserve.includes(mxobj.getEntity()))
            return true;
          const uploadedRuntimeGuids = uploadedObjsEntityToGuidsMap3[mxobj.getEntity()] ?? [];
          return syncedObjsRuntimeToOfflineMap.map(uploadedRuntimeGuids).includes(mxobj.getGuid());
        }).map((mxobj) => {
          const runtimeGuid = syncedObjsOfflineToRuntimeMap.map(mxobj.getGuid()), fetchedObj = fetchedObjs2.find((obj) => obj.guid === runtimeGuid);
          return [fetchedObj ? syncedObjsRuntimeToOfflineMap.mapMxObjectJSON(fetchedObj) : void 0, mxobj];
        }), [updates, deletes] = partition(([obj]) => void 0 !== obj, fetchedObjsWithCached);
        return [updates.map(([obj]) => obj), deletes.map(([_, mxobj]) => mxobj.getGuid())];
      }(cache2, fetchedObjsExcludingFailedDownloads, preserveData, uploadedObjsEntityToGuidsMap2, resetPreservedEntities2);
      logger2.trace(`Compute cached objects to update or delete completed in ${stopwatch.measure()} milliseconds. ${updatedObjs.length} objects will be updated, ${guidsToDelete.length} will be deleted.`), logger2.trace("Computing subscription updates."), stopwatch.measure();
      const messages = function(schema2, preservedEntities, excludedEntities, fetchedObjs2, preservedEntityToUploadedGuidsMap2, updatedGuidsInCache, removedGuidsFromCache, resetPreservedEntities3) {
        const ignoredEntities = /* @__PURE__ */ new Set([...preservedEntities, ...excludedEntities]), entityUpdates = schema2.filter((entity) => !(!resetPreservedEntities3 && ignoredEntities.has(entity)) || void 0 !== preservedEntityToUploadedGuidsMap2[entity] && !preservedEntityToUploadedGuidsMap2[entity].every((guid) => void 0 !== fetchedObjs2.find((f) => f.guid === guid))).map((entity) => ({ entity }));
        return [...entityUpdates, ...updatedGuidsInCache.map((guid) => ({ guid })), ...removedGuidsFromCache.map((guid) => ({ guid }))];
      }(schema, [...preserveData, ...never], online ?? [], fetchedObjsExcludingFailedDownloads, preservedEntityToUploadedGuidsMap, updatedObjs.map((obj) => obj.guid), guidsToDelete, resetPreservedEntities2);
      return logger2.trace(`Computing subscription updates completed in ${stopwatch.measure()} milliseconds.`), logger2.trace("Rebuilding the database."), stopwatch.reset(), await async function(database3, schema2, objs, entityToGuidsMapToDelete, entitiesToPreserve, excludedEntities, incompatibleEntities3 = /* @__PURE__ */ new Set()) {
        const ignoredEntities = /* @__PURE__ */ new Set([...entitiesToPreserve, ...excludedEntities]), entitiesToReset = schema2.filter((entity) => !ignoredEntities.has(entity)), fullReset = 0 === entitiesToPreserve.length;
        await database3.usingWriteTransaction(async (tx) => {
          const entitiesToDrop = [...entitiesToReset, ...incompatibleEntities3];
          await tx.dropEntityTables(entitiesToDrop), fullReset ? (await tx.reset(), await tx.updateEntityMetadatas(getSession().getOfflineMetadata())) : await tx.deleteEntitiesByGuid(Object.values(entityToGuidsMapToDelete).flat()), await tx.ensureSchema(entitiesToReset, 0), await tx.insertMxObjects(objs);
        });
      }(database2, schema, fetchedObjsExcludingFailedDownloads, Object.fromEntries(Object.entries(preservedEntityToUploadedGuidsMap).map(([objectType, guids]) => [objectType, syncedObjsRuntimeToOfflineMap.map(guids)])), resetPreservedEntities2 ? [] : [...preserveData, ...never], online ?? [], incompatibleEntities2), logger2.trace(`Rebuilding the database completed in ${stopwatch.measure()} milliseconds.`), logger2.trace(`Updating cache. ${updatedObjs.length} to be updated, ${guidsToDelete.length} to be deleted.`), stopwatch.reset(), cache2.setMxObjects(updatedObjs), cache2.onDelete(guidsToDelete), logger2.trace(`Updating cache completed in ${stopwatch.measure()} milliseconds.`), logger2.trace(`Removing ${filesToRemove.length} files.`), stopwatch.reset(), Promise.all(filesToRemove.map((file) => fileBackend2.removeFile(file))).catch(handleError), logger2.trace(`Removing ${filesToRemove.length} files completed in ${stopwatch.measure()} milliseconds.`), messages;
    }(database, fileBackend, cache, syncConfig, uploadedObjsEntityToGuidsMap, resetPreservedEntities, incompatibleEntities, logger);
  } catch (e) {
    throw logger.warn(e), new SynchronizationError();
  }
}
async function computeFilesToDownloadAndDelete(fileBackend, fetchedObjs, filesToPreserve, isThumb) {
  const root = fileBackend.toAbsolutePath(isThumb ? THUMBNAIL_DIR : DOCUMENT_DIR) + "/", objsToHaveFiles = fetchedObjs.filter((obj) => isFileDocumentWithContents(obj, isThumb)).map((obj) => {
    const changedDate = obj.attributes.changedDate?.value;
    return { sourceUrl: getRemoteDynamicResourceUrl(obj.guid, changedDate ?? null, isThumb), downloadPath: root + getFsFileName(obj.guid, changedDate ?? null), guid: obj.guid };
  }), existingFiles = (await fileBackend.listDir(root)).map((name) => root + name);
  return [objsToHaveFiles.filter((x) => !existingFiles.includes(x.downloadPath)).map(({ sourceUrl, downloadPath, guid }) => [sourceUrl, downloadPath, guid]), existingFiles.filter((path) => !objsToHaveFiles.find((x) => x.downloadPath === path) && !filesToPreserve.includes(path))];
}
async function selectiveSync(objects, deletesToSync, offlineEntities, objectCache, database, fileBackend, logger) {
  !function() {
    if (uniqueBy(objects, (obj) => obj.getGuid()).length !== objects.length)
      throw new AssertionError("Duplicate objects aren't allowed");
  }(), logger.trace("Selective sync started.");
  const stopwatch = new Stopwatch(), updates = await runInSynchronizationLock(async () => {
    const objectsToSynchronize = objects.filter((object) => !objectCache.isNew(object.getGuid())), foundObjectsToSynchronize = 0 !== objectsToSynchronize.length, foundDeletesToSynchronize = 0 !== Object.keys(deletesToSync).length;
    if (!foundObjectsToSynchronize && !foundDeletesToSynchronize)
      return logger.trace("Nothing to sync."), [];
    logger.trace(`Selective sync to sync ${objects.length} objects and ${Object.keys(deletesToSync).length} deletes.`);
    const guidsToSynchronize = objectsToSynchronize.map((object) => object.getGuid()), syncedObjsOfflineToRuntimeMap = syncedObjsRuntimeToOfflineMap.reverse(), dirtyObjects = objectsToSynchronize.filter((object) => isDirtyGuid(object.getGuid())), alreadySynchronizedMaybeOfflineGuids = guidsToSynchronize.filter((guid) => !isDirtyGuid(guid));
    stopwatch.reset();
    const { createdGuidsMapping, response } = await synchronizeObjects({ dirtyMxObjects: dirtyObjects, syncedObjsOfflineToRuntimeMap, returnObjects: true, deletes: deletesToSync, extraGuidsToRetrieve: alreadySynchronizedMaybeOfflineGuids, logger, database, fileBackend, offlineEntities });
    logger.trace(`Selective sync synced changes with runtime in ${stopwatch.measure()} milliseconds.`);
    const allOfflineToRuntimeMap = syncedObjsRuntimeToOfflineMap.reverse(), syncUpdates = function(objectsToSynchronize2) {
      const entities = new Set(objectsToSynchronize2.map((obj) => obj.getEntity()));
      return objectsToSynchronize2.map((obj) => ({ guid: obj.getGuid() })).concat(Array.from(entities).map((entity) => ({ entity })));
    }(objectsToSynchronize), fileDocumentCache = createMemoizedCache((entity) => isFileDocument(entity)), fileObjsToSynchronize = objectsToSynchronize.filter((mxobj) => fileDocumentCache(mxobj.getEntity())).map((mxobj) => mxobj.jsonData), { downloads, moves, deletes } = await gatherFileInstructions(fileObjsToSynchronize, response.objects, true, syncedObjsRuntimeToOfflineMap, fileBackend), guidsFailedToDownload = await downloadFiles(downloads, fileBackend, logger), objectsWithoutDownloadErrors = 0 === guidsFailedToDownload.size ? response.objects : response.objects.filter((obj) => !guidsFailedToDownload.has(obj.guid));
    logger.trace("Selective sync to update the local database."), stopwatch.reset(), await handleOfflineResponseObjects(allOfflineToRuntimeMap.map(guidsToSynchronize), database, objectsWithoutDownloadErrors, objectCache, offlineEntities, syncedObjsRuntimeToOfflineMap, createdGuidsMapping.reverse(), foundDeletesToSynchronize ? "reset" : "nothing"), logger.trace(`Selective sync updated the local database in ${stopwatch.measure()} milliseconds.`);
    const filesToMove = guidsFailedToDownload.size > 0 ? moves.filter(([_source, _dest, guid]) => !guidsFailedToDownload.has(guid)) : moves;
    await executeFileInstructions({ moves: filesToMove }, fileBackend, logger), executeFileInstructions({ deletes }, fileBackend, logger).catch((e) => handleError(e));
    const cachedObjectsToUpdate = objectsWithoutDownloadErrors.flatMap((mxObjJSON) => objectCache.has(syncedObjsRuntimeToOfflineMap.map(mxObjJSON.guid)) ? syncedObjsRuntimeToOfflineMap.mapMxObjectJSON(mxObjJSON) : []);
    return objectCache.setMxObjects(cachedObjectsToUpdate), syncUpdates;
  });
  updates.length > 0 && (logger.trace("Selective sync to update UI with the latest state of the synchronized objects."), stopwatch.reset(), await publish(...updates), logger.trace(`Selective sync updated the UI with the latest state of the synchronized objects in ${stopwatch.measure()} milliseconds.`)), logger.trace("Selective sync completed.");
}
class OfflineData {
  constructor(syncConfig, objectCache, fileBackend, database, logManager = LogManager.get()) {
    this.syncConfig = syncConfig, this.objectCache = objectCache, this.fileBackend = fileBackend, this.database = database, this.startupLogger = logManager.getLogger(LogNode.Startup), this.syncLogger = logManager.getLogger(LogNode.Synchronization), this.selectiveSyncLogger = logManager.getLogger(LogNode.SelectiveSync), this.onlineEntities = new Set(syncConfig.online);
  }
  async initialize(migrations, webSqlConnection) {
    if (void 0 !== webSqlConnection) {
      const websqlToSqliteMigration = new ImportDataFromWebSqlMigration(this.database, webSqlConnection);
      await websqlToSqliteMigration.apply();
    }
    const tablesToInitialize = this.syncConfig.schema.filter((entity) => !this.hasOnlineSyncMode(entity)), latestVersion = function(migrations2) {
      return migrations2[migrations2.length - 1]?.version ?? 0;
    }(migrations), dbVersion = await this.database.usingWriteTransaction(async (tx) => (await tx.ensureSchema(tablesToInitialize, latestVersion), tx.getDatabaseVersion()));
    if (latestVersion <= dbVersion)
      this.startupLogger.debug("The database schema is up-to-date.");
    else {
      const stopwatch = new Stopwatch();
      await this.database.runMigrations(migrations), this.startupLogger.debug(`The app has upgraded the local database version from ${dbVersion} to ${latestVersion} in ${stopwatch.measure()} milliseconds.`);
    }
    const { dirtyObjects } = await this.retrieveDirtyObjects();
    markAsDirty(dirtyObjects.map((obj) => obj.getGuid()));
  }
  async downloadObjects(uploadedObjsEntityToGuidsMap, fullReset, incompatibleEntities) {
    this.syncLogger.trace("Downloading objects");
    const stopwatch = new Stopwatch(), objects = downloadObjects(this.database, this.fileBackend, this.objectCache, this.syncConfig, uploadedObjsEntityToGuidsMap, fullReset, this.syncLogger, incompatibleEntities);
    return this.syncLogger.info(`Downloading objects completed in ${stopwatch.measure()} milliseconds.`), objects;
  }
  async cleanDatabase() {
    await this.database.delete(this.syncConfig.schema);
  }
  async create(entity) {
    const meta = ensure(getEntityMeta(entity)), guid = meta.isPersistable ? createOfflineGuid() : createMendixGuid(meta);
    return this.objectCache.onCreate([guid]), this.objectCache.setMxObjects([createMxObjectJSON(guid, meta)]), this.objectCache.getObject(guid);
  }
  async retrieve(entity, filter, options) {
    const { jsons, count } = await this._retrieveJson(entity, filter, options);
    this.objectCache.setMxObjects(jsons);
    return { mxObjects: jsons.map((json) => ensure(this.objectCache.getObject(json.guid))), count };
  }
  async retrieveByGuids(entity, guids) {
    const guidsChunks = chunkParameters(guids);
    return (await Promise.all(guidsChunks.map((guidsChunk) => this._retrieveJson(entity, { type: "function", name: "in", parameters: [{ type: "attribute", attribute: GUID_COLUMN, attributeType: "String" }, { type: "value", value: guidsChunk, isGuid: true }] }, {})))).flatMap(({ jsons }) => jsons);
  }
  async retrieveUncached(entity, filter, options) {
    const { jsons, count } = await this._retrieveJson(entity, filter, options);
    return { mxObjects: jsons.map(MxObject.fromJson), count };
  }
  async retrieveDirtyObjects(withOfflineGuids = false, incompatibleEntities = /* @__PURE__ */ new Set()) {
    const excludedEntities = new Set(this.syncConfig.never), objects = await this.database.usingReadTransaction((tx) => tx.retrieveDirtyObjects(excludedEntities)), countEntities = (entityCountGroup, entity) => {
      const entitiesCount = entityCountGroup.has(entity) ? entityCountGroup.get(entity) + 1 : 1;
      entityCountGroup.set(entity, entitiesCount);
    }, { dirtyObjects, incompatibleObjectsJson, incompatibleObjectsCount } = objects.flat().reduce((result, obj) => {
      const entityTableName = obj.objectType;
      if (incompatibleEntities.has(entityTableName) || null == getEntityMeta(entityTableName))
        return result.incompatibleObjectsJson.push(obj), countEntities(result.incompatibleObjectsCount, entityTableName), result;
      try {
        const objectJson = withOfflineGuids ? syncedObjsRuntimeToOfflineMap.mapMxObjectJSON(obj) : obj;
        result.dirtyObjects.push(MxObject.fromJson(objectJson));
      } catch (_e) {
        result.incompatibleObjectsJson.push(obj), countEntities(result.incompatibleObjectsCount, entityTableName);
      }
      return result;
    }, { dirtyObjects: [], incompatibleObjectsJson: [], incompatibleObjectsCount: /* @__PURE__ */ new Map() });
    return incompatibleObjectsCount.forEach((count, entity) => {
      this.syncLogger.warn(`Failed to parse ${count} object${1 === count ? "" : "s"} of type '${entity}'and to prevent data loss new 'System.SynchronizationError' corresponding to these failed objects will be created.`);
    }), { dirtyObjects, incompatibleObjectsJson };
  }
  async retrieveDeletes() {
    const result = await this.database.usingReadTransaction((tx) => tx.retrieveAllTombstones());
    return Object.fromEntries(result.map((row) => [row.guid, row.syncId]));
  }
  async insertOrReplace(objs) {
    const sessionId = getSession().getSessionObjectId(), onlineObjectsMap = objs.reduce((res, objJson) => {
      const entity = objJson.objectType;
      return this.hasOnlineSyncMode(entity) && (res.has(entity) ? res.get(entity).push(objJson.guid) : res.set(entity, [objJson.guid])), res;
    }, /* @__PURE__ */ new Map());
    if (onlineObjectsMap.size > 0) {
      const msg = ["An attempt to commit object(s) configured with 'online' synchronization mode in an offline context.", "Objects list:"];
      for (const [onlineEntity, guidsArray] of onlineObjectsMap)
        msg.push(`'${onlineEntity}': ${guidsArray.join(", ")}`);
      throw new DescribedError(msg.join("\n"));
    }
    await this.database.usingWriteTransaction(async (tx) => {
      const syncIds = await generateSyncIds(tx, sessionId, objs.length);
      return tx.insertMxObjectsWithSyncId(objs.map((obj, idx) => ({ ...obj, syncId: syncIds[idx] })));
    });
  }
  async executeMicroflow(operationId, args) {
    return executeOfflineMicroflow(operationId, args, this.syncConfig.schema, this.objectCache, this.database, this.fileBackend);
  }
  async upload(incompatibleEntities = /* @__PURE__ */ new Set()) {
    const { dirtyObjects, incompatibleObjectsJson } = await this.retrieveDirtyObjects(false, incompatibleEntities), deletesToSync = await this.retrieveDeletes(), foundDirtyObjectsToSync = 0 !== dirtyObjects.length, foundDeletesToSync = 0 !== Object.keys(deletesToSync).length, foundUnparsedObjectsJsonToSync = 0 !== incompatibleObjectsJson.length;
    if (!(foundDirtyObjectsToSync || foundDeletesToSync || foundUnparsedObjectsJsonToSync))
      return {};
    this.syncLogger.trace(`Uploading ${dirtyObjects.length} changes, ${Object.keys(deletesToSync).length} deletes.`), dirtyObjects.length + deleteObjects.length > 1e3 && this.syncLogger.warn("Uploading excessive amount of data will slow down synchronization.");
    const stopwatch = new Stopwatch(), { createdGuidsMapping, response } = await synchronizeObjects({ returnObjects: false, dirtyMxObjects: dirtyObjects, syncedObjsOfflineToRuntimeMap: syncedObjsRuntimeToOfflineMap.reverse(), deletes: deletesToSync, incompatibleObjectsJson, logger: this.syncLogger, database: this.database, fileBackend: this.fileBackend, offlineEntities: this.syncConfig.schema }), reversedCreatedGuidsMapping = createdGuidsMapping.reverse();
    if (this.syncLogger.trace(`Synchronizing objects took ${stopwatch.measure()} milliseconds.`), !foundDirtyObjectsToSync)
      return await this.database.usingWriteTransaction((tx) => tx.truncateTombstones()), {};
    this.syncLogger.trace("Updating local database with uploaded changes."), stopwatch.reset();
    const dirtyObjectsMap = indexMxObjectsByGuid(dirtyObjects);
    await this.database.usingWriteTransaction(async (tx) => [...await Promise.all(Object.entries(response.fileChangedDates).map(async ([runtimeGuid, changedDate]) => {
      const maybeOfflineGuid = reversedCreatedGuidsMapping.map(runtimeGuid), mxobj = ensure(dirtyObjectsMap[maybeOfflineGuid]);
      return tx.updateEntityData(mxobj.getEntity(), runtimeGuid, "changedDate", changedDate);
    })), await tx.clearDirtyFlags(dirtyObjects.map((obj) => createdGuidsMapping.map(obj.getGuid()))), await (foundDeletesToSync ? tx.truncateTombstones() : Promise.resolve())]), this.syncLogger.trace(`Updating local database took ${stopwatch.measure()} milliseconds.`), clearDirtyGuids();
    const moves = Object.entries(response.fileChangedDates).map(([guid, changedDate]) => {
      const newGuid = guid, oldGuid = reversedCreatedGuidsMapping.map(newGuid), oldObject = dirtyObjects.find((obj) => obj.getGuid() === oldGuid).jsonData, documentsPath = this.fileBackend.toAbsolutePath(DOCUMENT_DIR + "/");
      return [documentsPath + getFsFileName(newGuid, ensure(oldObject.attributes.changedDate).value), documentsPath + getFsFileName(newGuid, changedDate), newGuid];
    });
    this.syncLogger.trace("Executing file instructions for uploaded file documents."), stopwatch.reset(), await executeFileInstructions({ moves }, this.fileBackend), this.syncLogger.trace(`Executing file instructions for uploaded file documents took ${stopwatch.measure()} milliseconds.`);
    const allOfflineToRuntimeMap = syncedObjsRuntimeToOfflineMap.reverse();
    return dirtyObjects.reduce((result, object) => {
      const entity = object.getEntity();
      return result[entity] = (result[entity] ?? []).concat(allOfflineToRuntimeMap.map(object.getGuid())), result;
    }, {});
  }
  async selectiveSync(objects, deletesToSync = {}) {
    return selectiveSync(objects, deletesToSync, this.syncConfig.schema, this.objectCache, this.database, this.fileBackend, this.selectiveSyncLogger);
  }
  async delete(objectsToDelete) {
    return deleteObjects(objectsToDelete, this.objectCache, this.fileBackend, this.syncConfig.schema, new Set(this.syncConfig.never), this.database);
  }
  async clearFromClient(entity) {
    await async function(entity2, objectCache, fileBackend, database) {
      if (!ensure(getEntityMeta(entity2)).isPersistable)
        throw Error("Entity must be persistable");
      const mxObjectJsons = await database.usingReadTransaction((tx) => tx.retrieveMxObjects(entity2)), allOfflineToRuntimeGuidsMap = syncedObjsRuntimeToOfflineMap.reverse(), getFilePath = (objJson, isThumb) => createFilePath(objJson, allOfflineToRuntimeGuidsMap, fileBackend.toAbsolutePath((isThumb ? THUMBNAIL_DIR : DOCUMENT_DIR) + "/")), { deleteFilesInstructions, dbGuidsToClear } = mxObjectJsons.reduce((acc, mxObjectJson) => {
        const { guid } = mxObjectJson;
        return acc.dbGuidsToClear.push(guid), isFileDocumentWithContents(mxObjectJson) && (acc.deleteFilesInstructions.push(getFilePath(mxObjectJson, false)), isImage(entity2) && acc.deleteFilesInstructions.push(getFilePath(mxObjectJson, true))), acc;
      }, { deleteFilesInstructions: [], dbGuidsToClear: [] });
      executeFileInstructions({ deletes: deleteFilesInstructions }, fileBackend).catch(handleError), await database.usingWriteTransaction((tx) => tx.deleteEntitiesByEntity(entity2));
      const cachedObjectsGuids = objectCache.getAllObjects().filter((object) => object.getEntity() === entity2).map((object) => object.getGuid()), uniqueGuidsToClear = Array.from(/* @__PURE__ */ new Set([...dbGuidsToClear, ...cachedObjectsGuids]));
      objectCache.onDelete(uniqueGuidsToClear), unmarkAsDirty(uniqueGuidsToClear);
      const guidsUpdatesMessages = uniqueGuidsToClear.map((guid) => ({ guid }));
      await publish({ entity: entity2 }, ...guidsUpdatesMessages);
    }(entity, this.objectCache, this.fileBackend, this.database);
  }
  async executeDBModelSyncInstructions(dbModelSyncInstructions, newOfflineMetadata) {
    if (0 === dbModelSyncInstructions.length)
      return;
    const moreThanOneInstruction = dbModelSyncInstructions.length > 1;
    this.startupLogger.debug(`Found ${dbModelSyncInstructions.length} instruction${moreThanOneInstruction ? "s" : ""} to update the local database to the new schema.
${dbModelSyncInstructions.map((i) => `- ${i.getDescription()}`).join("\n")}`), await this.database.usingWriteTransaction(async (tx) => {
      await Promise.all(dbModelSyncInstructions.map((i) => i.runTransaction(tx))), await tx.updateEntityMetadatas(newOfflineMetadata);
    }), await Promise.all(dbModelSyncInstructions.map((i) => i.postMigrate()));
  }
  deleteFiles(filesToDelete) {
    if (0 === filesToDelete.length)
      return;
    const documentsDir = this.fileBackend.toAbsolutePath(DOCUMENT_DIR) + "/", thumbnailsDir = this.fileBackend.toAbsolutePath(THUMBNAIL_DIR) + "/", deletes = filesToDelete.map(({ guid, changedDate, isThumb }) => `${isThumb ? thumbnailsDir : documentsDir}${getFsFileName(guid, changedDate)}`);
    executeFileInstructions({ deletes }, this.fileBackend).catch((e) => handleError(e));
  }
  async _retrieveJson(entity, filter, options) {
    if (this.syncConfig.online?.includes(entity))
      throw new AssertionError("Can not retrieve objects with online sync mode from offline database");
    const [rows, count] = await this.database.usingReadTransaction(async (tx) => [await tx.retrieveMxObjects(entity, filter, options), await tx.retrieveMxObjectsCount(entity, filter)]);
    return { jsons: rows.map((r) => syncedObjsRuntimeToOfflineMap.mapMxObjectJSON(r)), count };
  }
  async retrieveOfflineMetadata() {
    return this.database.usingReadTransaction((tx) => tx.retrieveEntityMetadatas());
  }
  async runFullSynchronization(fullReset = false, incompatibleEntities = /* @__PURE__ */ new Set()) {
    const updates = await runInSynchronizationLock(async () => {
      const uploadedObjsEntityToGuidsMap = await this.upload(incompatibleEntities);
      return this.downloadObjects(uploadedObjsEntityToGuidsMap, fullReset, incompatibleEntities);
    });
    await publish(...updates);
  }
  hasOnlineSyncMode(entity) {
    return this.onlineEntities.has(entity);
  }
}
class OfflineDataBackend extends _DataBackend {
  constructor(objectCache, store, fileBackend, getDocumentUrlFn) {
    super(), this._store = store, this._getDocumentUrl = getDocumentUrlFn || getDefaultDocumentUrl, this._objectCache = objectCache, this._fileBackend = fileBackend;
  }
  async getByGuid(externalGuids, filter) {
    const mxobjs = (await Promise.all(externalGuids.map((guid) => this._getByGuid(guid)))).filter((obj) => null != obj);
    return this._objectCache.setMxObjects(mxobjs), { mxobjs: mxobjs.map(({ guid }) => this._objectCache.getObject(guid)), count: mxobjs.length };
  }
  async getByPath(guid, path, entity, direction) {
    const association = getAssociationStep(path);
    if ("reverse" === direction) {
      const { cachedObjects } = getCachedObjectsByPath(guid, direction, path, this._objectCache), uncachedJsonsReferencingRoot = (getEntityMeta(entity)?.isPersistable ? await this._store.getByAttribute(entity, association, getRuntimeGuid(guid)) : []).map((json) => syncedObjsRuntimeToOfflineMap.mapMxObjectJSON(json)).filter((json) => MxObject.fromJson(json).getReferences(association).includes(guid)).filter((storedJson) => !cachedObjects.some((cachedObj) => cachedObj.getGuid() === storedJson.guid));
      this._objectCache.setMxObjects(uncachedJsonsReferencingRoot);
      const resultMxobjs = cachedObjects.concat(uncachedJsonsReferencingRoot.map((json) => this._objectCache.getObject(json.guid)));
      return { mxobjs: resultMxobjs, count: resultMxobjs.length };
    }
    {
      let rootMxObj = this._objectCache.getObject(guid);
      if (!rootMxObj) {
        const { mxobjs: [storedRootObj] } = await this.getByGuid([guid]);
        storedRootObj && (rootMxObj = storedRootObj);
      }
      if (!rootMxObj)
        return { mxobjs: [], count: 0 };
      const { cachedObjects, uncachedGuids } = getRefsObjects(rootMxObj, this._objectCache, association), { mxobjs: storedRefMxobjs } = await this.getByGuid(uncachedGuids), refMxobjs = storedRefMxobjs.concat(cachedObjects);
      return this._objectCache.setMxObjects(storedRefMxobjs.map((mxobj) => mxobj.jsonData)), { mxobjs: refMxobjs, count: refMxobjs.length };
    }
  }
  async commit(commitGuids, context) {
    const commitChanges = objectFromArray(commitGuids.map((guid) => [guid, clone(this._objectCache.getChanges(guid))])), [cachedCommitGuids, uncachedCommitGuids] = partition((guid) => this._objectCache.has(guid), commitGuids), cachedCommitObjs = cachedCommitGuids.map((guid) => this._objectCache.getObject(guid)), [peObjsFromCache, npeObjsFromCache] = partition((obj) => obj.isPersistable(), cachedCommitObjs), originalCachedCommitObjs = peObjsFromCache.map(mxObjectToObj), persistableCommitObjs = (await Promise.all(uncachedCommitGuids.map((guid) => this._getByGuid(guid)))).concat(originalCachedCommitObjs).map(applyChanges);
    if (persistableCommitObjs.length > 0) {
      const offlineToRuntimeGuidMapping = syncedObjsRuntimeToOfflineMap.reverse(), { mappedObjectsJsons, objectsJsons, guids } = persistableCommitObjs.reduce((res, obj) => (res.mappedObjectsJsons.push(offlineToRuntimeGuidMapping.mapMxObjectJSON(obj)), res.objectsJsons.push(obj), res.guids.push(obj.guid), res), { mappedObjectsJsons: [], objectsJsons: [], guids: [] });
      await offlineData().insertOrReplace(mappedObjectsJsons), markAsDirty(guids), this._objectCache.setMxObjects(objectsJsons);
    }
    const nonPersistableCommitObjs = npeObjsFromCache.map(mxObjectToObj).map(applyChanges);
    return this._objectCache.setMxObjects(nonPersistableCommitObjs), this._objectCache.onCommit(commitGuids), this._objectCache.removeChanges(function(changes) {
      const resets = {};
      return Object.keys(changes).forEach((guid) => {
        resets[guid] = Object.keys(changes[guid]);
      }), resets;
    }(commitChanges)), {};
    function applyChanges(obj) {
      const changes = commitChanges[obj.guid];
      return { guid: obj.guid, objectType: obj.objectType, attributes: mapObject(Object.assign({}, changes, obj.attributes), (val, attr) => Object.assign({}, val, { value: changes.hasOwnProperty(attr) ? changes[attr].value : val.value })) };
    }
  }
  rollback(rollbackGuids) {
    this._objectCache.removeAllChanges(rollbackGuids);
    const newRollbackGuids = rollbackGuids.filter((guid) => this._objectCache.isNew(guid));
    return this._objectCache.onDelete(newRollbackGuids), Promise.resolve({});
  }
  validate(validateGuids) {
    return Promise.resolve({});
  }
  async saveDocument(documentGuid, name, params, blob) {
    if (blob.size / 1048576 > params.maxFileSize)
      throw new DescribedError("File too large");
    const obj = await this._getByGuid(documentGuid), fileName = getFsFileName(getRuntimeGuid(documentGuid), obj ? obj.attributes.changedDate?.value : void 0);
    await this._fileBackend.storeFile(blob, this._fileBackend.toAbsolutePath(DOCUMENT_DIR + "/" + fileName)), this._objectCache.makeChange(documentGuid, "HasContents", true), await this.commit([documentGuid], null);
  }
  getDocumentUrl(offlineGuid, changedDate, isThumb, _fileName) {
    return this._getDocumentUrl(getFsFileName(getRuntimeGuid(offlineGuid), changedDate), changedDate, isThumb);
  }
  getImageUrl(url) {
    return Promise.resolve(url);
  }
  async cleanup() {
    await offlineData().cleanDatabase(), await this._fileBackend.removeDir(this._fileBackend.toAbsolutePath(DOCUMENT_DIR)), await this._fileBackend.removeDir(this._fileBackend.toAbsolutePath(THUMBNAIL_DIR)), clearDirtyGuids();
  }
  async remove(guids) {
    const { mxobjs } = await this.getByGuid(guids);
    await offlineData().delete(mxobjs);
  }
  _getByGuid(offlineGuid) {
    return memoizeConcurrent(offlineGuid, () => this._store.getByGuid(getRuntimeGuid(offlineGuid)));
  }
}
function mxObjectToObj(mxobj) {
  return mxobj.jsonData;
}
function getDefaultDocumentUrl(fileName, changedDate, isThumb) {
  var dir = DEFAULT_FILES_DIRECTORY + "/" + (isThumb ? THUMBNAIL_DIR : DOCUMENT_DIR);
  return `filesystem:${window.mx.appUrl}temporary/${dir}/${fileName}?${Date.now()}`;
}
class SqlStore {
  constructor(database) {
    this._database = database;
  }
  async getByGuid(guid) {
    const result = await this._database.usingReadTransaction((tx) => tx.retrieveMxObjectByGuids([guid]));
    return result.length > 0 ? result[0] : null;
  }
  getByAttribute(entity, attribute, value) {
    return this._database.usingReadTransaction((tx) => {
      if ("guid" === attribute)
        return tx.retrieveMxObjectByGuids([value]);
      const attributeType = getEntityMeta(entity)?.attributes[attribute]?.type ?? "String";
      return "ObjectReference" === attributeType || "ObjectReferenceSet" === attributeType ? tx.retrieveMxObjectsByReferrals(entity, attribute, value) : tx.retrieveMxObjects(entity, { type: "function", name: "=", parameters: [{ type: "attribute", attribute, attributeType }, { type: "value", value, isGuid: false }] });
    });
  }
}
async function buildOfflineDataBackend(objectCache, database, syncConfig, fileBackend, logManager, getDocumentUrlFn, websqlConnection) {
  const offlineData2 = new OfflineData(syncConfig, objectCache, fileBackend, database, logManager);
  await offlineData2.initialize(Migrations, websqlConnection);
  const store = new SqlStore(database);
  return { dataBackend: new OfflineDataBackend(objectCache, store, fileBackend, getDocumentUrlFn), offlineData: offlineData2 };
}

var buildOfflineDataBackend$1 = /*#__PURE__*/Object.freeze({
	__proto__: null,
	buildOfflineDataBackend: buildOfflineDataBackend
});

class AsyncTaskThrottler {
  constructor(taskHandlingFn, concurrentTasks = 4) {
    this.taskHandlingFn = taskHandlingFn, this.concurrentTasks = concurrentTasks, this.taskQueue = [], this.tasksInProgress = 0;
  }
  async addToQueue(...args) {
    return new Promise((resolve, reject) => {
      this.taskQueue.push({ args, resolve, reject }), this.processQueue();
    });
  }
  processQueue() {
    if (this.tasksInProgress >= this.concurrentTasks)
      return;
    const tasks = this.taskQueue.splice(0, this.concurrentTasks - this.tasksInProgress);
    this.tasksInProgress += tasks.length, tasks.forEach((task) => {
      const { args, resolve, reject } = task;
      this.taskHandlingFn(...args).then((result) => {
        this.tasksInProgress--, resolve(result), this.processQueue();
      }).catch((e) => {
        this.tasksInProgress = 0, this.taskQueue = [], reject(e);
      });
    });
  }
}
class FileBackend {
  constructor(config, rootDir) {
    this._config = config, this._storageDirPromise = null, this._rootDir = rootDir, this._downloadQueue = new AsyncTaskThrottler((url, filePath) => new Promise((resolve, reject) => {
      this._config.downloadFileFn ? this._config.downloadFileFn(url, filePath, resolve, reject) : get(url, "blob").then((blob) => this.storeFile(blob, filePath)).then(resolve).catch(reject);
    }));
  }
  async listDir(dirPath) {
    try {
      const dirReader = (await this._openDir(dirPath)).createReader();
      return await new Promise((resolve, reject) => {
        const result = [], doBatchRead = () => {
          dirReader.readEntries((entries) => {
            0 !== entries.length ? (result.push(...entries.map((e) => e.name)), doBatchRead()) : resolve(result);
          }, reject);
        };
        doBatchRead();
      });
    } catch (_) {
      return [];
    }
  }
  async removeDir(dirPath) {
    try {
      const dirEntry = await this._openDir(dirPath);
      await callbackToPromise(dirEntry.removeRecursively.bind(dirEntry));
    } catch (_) {
    }
  }
  readFile(filePath) {
    return this._openFile(filePath).then((fileEntry) => function(fileEntry2) {
      return callbackToPromise(fileEntry2.file.bind(fileEntry2)).then(readBlobToArrayBuffer).then((arrayBuffer) => new Blob([arrayBuffer]));
    }(fileEntry));
  }
  storeFile(contentBlob, filePath) {
    return this._openFile(filePath, true).then((writer) => {
      return blob = contentBlob, callbackToPromise((fileEntry = writer).createWriter.bind(fileEntry)).then((writer2) => function(blob2, writer3) {
        return new Promise((resolve, reject) => {
          writer3.onwrite = resolve, writer3.onerror = reject, writer3.write(blob2);
        });
      }(blob, writer2));
      var fileEntry, blob;
    });
  }
  async moveFile(filePath, newPath) {
    const fileEntry = await this._openFile(filePath), [newDirPath, newName] = splitToDirAndFile(newPath), newParent = await this._openDir(newDirPath);
    await function(fileEntry2, newParent2, newName2) {
      return new Promise((resolve, reject) => {
        fileEntry2.moveTo(newParent2, newName2, resolve, reject);
      });
    }(fileEntry, newParent, newName);
  }
  async moveDir(dir, newDir) {
    const files = await this.listDir(dir);
    for (const f of files) {
      const file = await f, path = `${dir}/${file}`, newPath = `${newDir}/${file}`;
      (await this._openFile(path)).isDirectory ? await this.moveDir(path, newPath) : await this.moveFile(path, newPath);
    }
  }
  async removeFile(filePath) {
    const fileEntry = await this._openFile(filePath);
    await callbackToPromise(fileEntry.remove.bind(fileEntry));
  }
  downloadFile(url, filePath) {
    return this._downloadQueue.addToQueue(url, filePath);
  }
  async _openFile(filePath, create = false) {
    const [dirPath, fileName] = splitToDirAndFile(filePath), dirEntry = await this._openDir(dirPath, create);
    return callbackToPromise(dirEntry.getFile.bind(dirEntry), fileName, { create });
  }
  async _openDir(dirPath, create = false) {
    const path = dirPath.split("/").filter((p) => "" !== p);
    let dirEntry = await this._getStorageDir();
    for (let i = 0; i < path.length; ++i)
      dirEntry = await callbackToPromise(dirEntry.getDirectory.bind(dirEntry), path[i], { create });
    return dirEntry;
  }
  toAbsolutePath(path) {
    return toAbsolutePath(this._rootDir ?? DEFAULT_FILES_DIRECTORY, path);
  }
  _getStorageDir() {
    return this._config.getStorageDirFn ? callbackToPromise(this._config.getStorageDirFn) : (null === this._storageDirPromise && (this._storageDirPromise = callbackToPromise(window.webkitRequestFileSystem, window.TEMPORARY, 1048576).then((fs) => fs.root)), this._storageDirPromise);
  }
}
function splitToDirAndFile(filePath) {
  return filePath.split(/\/([^/]+)$/);
}
function readBlobToArrayBuffer(blob) {
  return new Promise((resolve, reject) => {
    const fr = new FileReader();
    fr.onload = (e) => resolve(e.target.result), fr.onerror = (e) => reject(e.target.error), fr.readAsArrayBuffer(blob);
  });
}

var FileBackend$1 = /*#__PURE__*/Object.freeze({
	__proto__: null,
	FileBackend: FileBackend
});

export { ActionButton, ActionProperty, AssociationObjectListProperty, AssociationObjectProperty, AssociationProperty, AttributeProperty, Big, CheckBox, ConditionalVisibilityWrapper, Container, DataView$1 as DataView, DatabaseObjectListProperty, DerivedUniqueIdProperty, Div, DynamicFileProperty, ExpressionProperty, FileManager, FileUploadProperty, FormGroup, Fragment, IconProperty, Label, ListActionProperty, ListAssociationProperty, ListAttributeProperty, ListExpressionProperty, ListView, ListenObjectProperty, MicroflowObjectProperty, NavigationList, NavigationTree, PageFragment, Placeholder, PlaceholderProperty, ScrollContainer, SelectionProperty, SidebarToggle, StaticImageProperty, TabContainer, TemplatedWidgetProperty, Text, TextBox, TextProperty, ValidationProperty, WidgetVariableProperty, addEnumerations, and, asPluginWidgets, association, attribute, contains, e$1 as e, empty, endsWith, equals, getAugmentedNamespace, greaterThan, greaterThanOrEqual, lessThan, lessThanOrEqual, literal, notEqual, or, reactDomExports, reactExports, selectTranslation, startApp, startsWith, t, v };
